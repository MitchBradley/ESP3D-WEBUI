var liblouisBuild = function(liblouisBuild) {
  liblouisBuild = liblouisBuild || {};
  var Module = liblouisBuild;


var Module;

if (typeof Module === 'undefined') Module = {};

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }
Module['FS_createPath']('/', 'out-emscripten-install', true, true);
Module['FS_createPath']('/out-emscripten-install', 'share', true, true);
Module['FS_createPath']('/out-emscripten-install/share', 'liblouis', true, true);
Module['FS_createPath']('/out-emscripten-install/share/liblouis', 'tables', true, true);
var fileData90 = [];
fileData90.push.apply(fileData90, [35, 32, 108, 105, 98, 108, 111, 117, 105, 115, 58, 32, 99, 111, 109, 112, 54, 32, 114, 117, 108, 101, 115, 32, 102, 111, 114, 32, 76, 97, 116, 105, 110, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 108, 101, 116, 116, 101, 114, 115, 10, 35, 10, 35, 32, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 50, 49, 32, 66, 101, 114, 116, 32, 70, 114, 101, 101, 115, 32, 60, 98, 101, 114, 116, 102, 114, 101, 101, 115, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 62, 10, 35, 10, 35, 32, 32, 84, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 112, 97, 114, 116, 32, 111, 102, 32, 108, 105, 98, 108, 111, 117, 105, 115, 46, 10, 35, 10, 35, 32, 32, 108, 105, 98, 108, 111, 117, 105, 115, 32, 105, 115, 32, 102, 114, 101, 101, 32, 115, 111, 102, 116, 119, 97, 114, 101, 58, 32, 121, 111, 117, 32, 99, 97, 110, 32, 114, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 32, 105, 116, 32, 97, 110, 100, 47, 111, 114, 32, 109, 111, 100, 105, 102, 121, 32, 105, 116, 10, 35, 32, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 116, 101, 114, 109, 115, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 76, 101, 115, 115, 101, 114, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 115, 10, 35, 32, 32, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 70, 114, 101, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 70, 111, 117, 110, 100, 97, 116, 105, 111, 110, 44, 32, 101, 105, 116, 104, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 50, 46, 49, 32, 111, 102, 32, 116, 104, 101, 10, 35, 32, 32, 76, 105, 99, 101, 110, 115, 101, 44, 32, 111, 114, 32, 40, 97, 116, 32, 121, 111, 117, 114, 32, 111, 112, 116, 105, 111, 110, 41, 32, 97, 110, 121, 32, 108, 97, 116, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 46, 10, 35, 10, 35, 32, 32, 108, 105, 98, 108, 111, 117, 105, 115, 32, 105, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 111, 112, 101, 32, 116, 104, 97, 116, 32, 105, 116, 32, 119, 105, 108, 108, 32, 98, 101, 32, 117, 115, 101, 102, 117, 108, 44, 32, 98, 117, 116, 10, 35, 32, 32, 87, 73, 84, 72, 79, 85, 84, 32, 65, 78, 89, 32, 87, 65, 82, 82, 65, 78, 84, 89, 59, 32, 119, 105, 116, 104, 111, 117, 116, 32, 101, 118, 101, 110, 32, 116, 104, 101, 32, 105, 109, 112, 108, 105, 101, 100, 32, 119, 97, 114, 114, 97, 110, 116, 121, 32, 111, 102, 10, 35, 32, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 32, 111, 114, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 46, 32, 83, 101, 101, 32, 116, 104, 101, 32, 71, 78, 85, 10, 35, 32, 32, 76, 101, 115, 115, 101, 114, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 115, 46, 10, 35, 10, 35, 32, 32, 89, 111, 117, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 114, 101, 99, 101, 105, 118, 101, 100, 32, 97, 32, 99, 111, 112, 121, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 76, 101, 115, 115, 101, 114, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 10, 35, 32, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 108, 111, 110, 103, 32, 119, 105, 116, 104, 32, 108, 105, 98, 108, 111, 117, 105, 115, 46, 32, 73, 102, 32, 110, 111, 116, 44, 32, 115, 101, 101, 10, 35, 32, 32, 60, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 103, 110, 117, 46, 111, 114, 103, 47, 108, 105, 99, 101, 110, 115, 101, 115, 47, 62, 46, 10, 10, 35, 32, 77, 97, 114, 107, 32, 76, 97, 116, 105, 110, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 108, 101, 116, 116, 101, 114, 115, 32, 119, 105, 116, 104, 32, 100, 111, 116, 32, 55, 32, 105, 110, 32, 99, 111, 109, 112, 117, 116, 101, 114, 32, 98, 114, 97, 105, 108, 108, 101, 10, 35, 32, 109, 111, 100, 101, 46, 32, 83, 104, 111, 117, 108, 100, 32, 98, 101, 32, 117, 115, 101, 100, 32, 105, 110, 32, 99, 111, 109, 98, 105, 110, 97, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 108, 97, 116, 105, 110, 76, 101, 116, 116, 101, 114, 68, 101, 102, 54, 68, 111, 116, 115, 46, 117, 116, 105, 46, 10, 10, 99, 111, 109, 112, 54, 32, 65, 32, 49, 55, 10, 99, 111, 109, 112, 54, 32, 66, 32, 49, 50, 55, 10, 99, 111, 109, 112, 54, 32, 67, 32, 49, 52, 55, 10, 99, 111, 109, 112, 54, 32, 68, 32, 49, 52, 53, 55, 10, 99, 111, 109, 112, 54, 32, 69, 32, 49, 53, 55, 10, 99, 111, 109, 112, 54, 32, 70, 32, 49, 50, 52, 55, 10, 99, 111, 109, 112, 54, 32, 71, 32, 49, 50, 52, 53, 55, 10, 99, 111, 109, 112, 54, 32, 72, 32, 49, 50, 53, 55, 10, 99, 111, 109, 112, 54, 32, 73, 32, 50, 52, 55, 10, 99, 111, 109, 112, 54, 32, 74, 32, 50, 52, 53, 55, 10, 99, 111, 109, 112, 54, 32, 75, 32, 49, 51, 55, 10, 99, 111, 109, 112, 54, 32, 76, 32, 49, 50, 51, 55, 10, 99, 111, 109, 112, 54, 32, 77, 32, 49, 51, 52, 55, 10, 99, 111, 109, 112, 54, 32, 78, 32, 49, 51, 52, 53, 55, 10, 99, 111, 109, 112, 54, 32, 79, 32, 49, 51, 53, 55, 10, 99, 111, 109, 112, 54, 32, 80, 32, 49, 50, 51, 52, 55, 10, 99, 111, 109, 112, 54, 32, 81, 32, 49, 50, 51, 52, 53, 55, 10, 99, 111, 109, 112, 54, 32, 82, 32, 49, 50, 51, 53, 55, 10, 99, 111, 109, 112, 54, 32, 83, 32, 50, 51, 52, 55, 10, 99, 111, 109, 112, 54, 32, 84, 32, 50, 51, 52, 53, 55, 10, 99, 111, 109, 112, 54, 32, 85, 32, 49, 51, 54, 55, 10, 99, 111, 109, 112, 54, 32, 86, 32, 49, 50, 51, 54, 55, 10, 99, 111, 109, 112, 54, 32, 87, 32, 50, 52, 53, 54, 55, 10, 99, 111, 109, 112, 54, 32, 88, 32, 49, 51, 52, 54, 55, 10, 99, 111, 109, 112, 54, 32, 89, 32, 49, 51, 52, 53, 54, 55, 10, 99, 111, 109, 112, 54, 32, 90, 32, 49, 51, 53, 54, 55, 10, 10, 35, 32, 66, 97, 99, 107, 45, 116, 114, 97, 110, 115, 108, 97, 116, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 108, 101, 116, 116, 101, 114, 115, 32, 105, 110, 32, 99, 111, 109, 112, 117, 116, 101, 114, 32, 98, 114, 97, 105, 108, 108, 101, 32, 109, 111, 100, 101, 46, 10, 10, 110, 111, 102, 111, 114, 32, 97, 108, 119, 97, 121, 115, 32, 65, 32, 49, 55, 10, 110, 111, 102, 111, 114, 32, 97, 108, 119, 97, 121, 115, 32, 66, 32, 49, 50, 55, 10, 110, 111, 102, 111, 114, 32, 97, 108, 119, 97, 121, 115, 32, 67, 32, 49, 52, 55, 10, 110, 111, 102, 111, 114, 32, 97, 108, 119, 97, 121, 115, 32, 68, 32, 49, 52, 53, 55, 10, 110, 111, 102, 111, 114, 32, 97, 108, 119, 97, 121, 115, 32, 69, 32, 49, 53, 55, 10, 110, 111, 102, 111, 114, 32, 97, 108, 119, 97, 121, 115, 32, 70, 32, 49, 50, 52, 55, 10, 110, 111, 102, 111, 114, 32, 97, 108, 119, 97, 121, 115, 32, 71, 32, 49, 50, 52, 53, 55, 10, 110, 111, 102, 111, 114, 32, 97, 108, 119, 97, 121, 115, 32, 72, 32, 49, 50, 53, 55, 10, 110, 111, 102, 111, 114, 32, 97, 108, 119, 97, 121, 115, 32, 73, 32, 50, 52, 55, 10, 110, 111, 102, 111, 114, 32, 97, 108, 119, 97, 121, 115, 32, 74, 32, 50, 52, 53, 55, 10, 110, 111, 102, 111, 114, 32, 97, 108, 119, 97, 121, 115, 32, 75, 32, 49, 51, 55, 10, 110, 111, 102, 111, 114, 32, 97, 108, 119, 97, 121, 115, 32, 76, 32, 49, 50, 51, 55, 10, 110, 111, 102, 111, 114, 32, 97, 108, 119, 97, 121, 115, 32, 77, 32, 49, 51, 52, 55, 10, 110, 111, 102, 111, 114, 32, 97, 108, 119, 97, 121, 115, 32, 78, 32, 49, 51, 52, 53, 55, 10, 110, 111, 102, 111, 114, 32, 97, 108, 119, 97, 121, 115, 32, 79, 32, 49, 51, 53, 55, 10, 110, 111, 102, 111, 114, 32, 97, 108, 119, 97, 121, 115, 32, 80, 32, 49, 50, 51, 52, 55, 10, 110, 111, 102, 111, 114, 32, 97, 108, 119, 97, 121, 115, 32, 81, 32, 49, 50, 51, 52, 53, 55, 10, 110, 111, 102, 111, 114, 32, 97, 108, 119, 97, 121, 115, 32, 82, 32, 49, 50, 51, 53, 55, 10, 110, 111, 102, 111, 114, 32, 97, 108, 119, 97, 121, 115, 32, 83, 32, 50, 51, 52, 55, 10, 110, 111, 102, 111, 114, 32, 97, 108, 119, 97, 121, 115, 32, 84, 32, 50, 51, 52, 53, 55, 10, 110, 111, 102, 111, 114, 32, 97, 108, 119, 97, 121, 115, 32, 85, 32, 49, 51, 54, 55, 10, 110, 111, 102, 111, 114, 32, 97, 108, 119, 97, 121, 115, 32, 86, 32, 49, 50, 51, 54, 55, 10, 110, 111, 102, 111, 114, 32, 97, 108, 119, 97, 121, 115, 32, 87, 32, 50, 52, 53, 54, 55, 10, 110, 111, 102, 111, 114, 32, 97, 108, 119, 97, 121, 115, 32, 88, 32, 49, 51, 52, 54, 55, 10, 110, 111, 102, 111, 114, 32, 97, 108, 119, 97, 121, 115, 32, 89, 32, 49, 51, 52, 53, 54, 55, 10, 110, 111, 102, 111, 114, 32, 97, 108, 119, 97, 121, 115, 32, 90, 32, 49, 51, 53, 54, 55, 10]);
Module['FS_createDataFile']('/', 'latinUppercaseComp6.uti', fileData90, true, true, false);
var fileData105 = [];
fileData105.push.apply(fileData105, [35, 32, 108, 105, 98, 108, 111, 117, 105, 115, 58, 32, 115, 117, 98, 32, 116, 97, 98, 108, 101, 32, 102, 111, 114, 32, 76, 97, 116, 105, 110, 32, 108, 101, 116, 116, 101, 114, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 44, 32, 54, 32, 100, 111, 116, 115, 46, 10, 35, 10, 35, 32, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 49, 50, 45, 50, 48, 49, 52, 32, 77, 101, 115, 97, 114, 32, 72, 97, 109, 101, 101, 100, 32, 60, 109, 101, 115, 97, 114, 46, 104, 97, 109, 101, 101, 100, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 62, 10, 35, 10, 35, 32, 32, 84, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 112, 97, 114, 116, 32, 111, 102, 32, 108, 105, 98, 108, 111, 117, 105, 115, 46, 10, 35, 10, 35, 32, 32, 108, 105, 98, 108, 111, 117, 105, 115, 32, 105, 115, 32, 102, 114, 101, 101, 32, 115, 111, 102, 116, 119, 97, 114, 101, 58, 32, 121, 111, 117, 32, 99, 97, 110, 32, 114, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 32, 105, 116, 32, 97, 110, 100, 47, 111, 114, 32, 109, 111, 100, 105, 102, 121, 32, 105, 116, 10, 35, 32, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 116, 101, 114, 109, 115, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 76, 101, 115, 115, 101, 114, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 115, 10, 35, 32, 32, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 70, 114, 101, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 70, 111, 117, 110, 100, 97, 116, 105, 111, 110, 44, 32, 101, 105, 116, 104, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 50, 46, 49, 32, 111, 102, 32, 116, 104, 101, 10, 35, 32, 32, 76, 105, 99, 101, 110, 115, 101, 44, 32, 111, 114, 32, 40, 97, 116, 32, 121, 111, 117, 114, 32, 111, 112, 116, 105, 111, 110, 41, 32, 97, 110, 121, 32, 108, 97, 116, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 46, 10, 35, 10, 35, 32, 32, 108, 105, 98, 108, 111, 117, 105, 115, 32, 105, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 111, 112, 101, 32, 116, 104, 97, 116, 32, 105, 116, 32, 119, 105, 108, 108, 32, 98, 101, 32, 117, 115, 101, 102, 117, 108, 44, 32, 98, 117, 116, 10, 35, 32, 32, 87, 73, 84, 72, 79, 85, 84, 32, 65, 78, 89, 32, 87, 65, 82, 82, 65, 78, 84, 89, 59, 32, 119, 105, 116, 104, 111, 117, 116, 32, 101, 118, 101, 110, 32, 116, 104, 101, 32, 105, 109, 112, 108, 105, 101, 100, 32, 119, 97, 114, 114, 97, 110, 116, 121, 32, 111, 102, 10, 35, 32, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 32, 111, 114, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 46, 32, 83, 101, 101, 32, 116, 104, 101, 32, 71, 78, 85, 10, 35, 32, 32, 76, 101, 115, 115, 101, 114, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 115, 46, 10, 35, 10, 35, 32, 32, 89, 111, 117, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 114, 101, 99, 101, 105, 118, 101, 100, 32, 97, 32, 99, 111, 112, 121, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 76, 101, 115, 115, 101, 114, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 10, 35, 32, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 108, 111, 110, 103, 32, 119, 105, 116, 104, 32, 108, 105, 98, 108, 111, 117, 105, 115, 46, 32, 73, 102, 32, 110, 111, 116, 44, 32, 115, 101, 101, 10, 35, 32, 32, 60, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 103, 110, 117, 46, 111, 114, 103, 47, 108, 105, 99, 101, 110, 115, 101, 115, 47, 62, 46, 10, 10, 35, 32, 76, 97, 116, 105, 110, 32, 108, 101, 116, 116, 101, 114, 115, 32, 97, 45, 122, 32, 119, 104, 101, 114, 101, 32, 99, 97, 112, 105, 116, 97, 108, 115, 32, 97, 114, 101, 32, 100, 101, 102, 105, 110, 101, 100, 32, 97, 115, 32, 101, 113, 117, 105, 118, 97, 108, 101, 110, 116, 32, 116, 111, 32, 116, 104, 101, 32, 108, 111, 119, 101, 114, 99, 97, 115, 101, 46, 32, 10, 35, 32, 84, 104, 105, 115, 32, 116, 97, 98, 108, 101, 32, 105, 115, 32, 117, 115, 117, 97, 108, 108, 121, 32, 117, 115, 101, 100, 32, 98, 121, 32, 54, 32, 100, 111, 116, 32, 116, 97, 98, 108, 101, 115, 46, 32, 84, 111, 32, 100, 105, 115, 116, 105, 110, 103, 117, 105, 115, 104, 32, 98, 101, 116, 119, 101, 101, 110, 32, 10, 35, 32, 99, 97, 112, 105, 116, 97, 108, 115, 32, 97, 110, 100, 32, 108, 111, 119, 101, 114, 99, 97, 115, 101, 44, 32, 116, 104, 101, 32, 108, 97, 110, 103, 117, 97, 103, 101, 32, 116, 97, 98, 108, 101, 32, 115, 104, 111, 117, 108, 100, 32, 109, 97, 107, 101, 32, 117, 115, 101, 32, 111, 102, 32, 116, 104, 101, 32, 10, 35, 32, 99, 97, 112, 115, 108, 101, 116, 116, 101, 114, 32, 97, 110, 100, 32, 99, 97, 112, 115, 119, 111, 114, 100, 32, 111, 112, 99, 111, 100, 101, 115, 46, 10, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 97, 32, 49, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 98, 32, 49, 50, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 99, 32, 49, 52, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 100, 32, 49, 52, 53, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 101, 32, 49, 53, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 102, 32, 49, 50, 52, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 103, 32, 49, 50, 52, 53, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 104, 32, 49, 50, 53, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 105, 32, 50, 52, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 106, 32, 50, 52, 53, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 107, 32, 49, 51, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 108, 32, 49, 50, 51, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 109, 32, 49, 51, 52, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 110, 32, 49, 51, 52, 53, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 111, 32, 49, 51, 53, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 112, 32, 49, 50, 51, 52, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 113, 32, 49, 50, 51, 52, 53, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 114, 32, 49, 50, 51, 53, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 115, 32, 50, 51, 52, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 116, 32, 50, 51, 52, 53, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 117, 32, 49, 51, 54, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 118, 32, 49, 50, 51, 54, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 119, 32, 50, 52, 53, 54, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 120, 32, 49, 51, 52, 54, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 121, 32, 49, 51, 52, 53, 54, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 122, 32, 49, 51, 53, 54, 10, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 65, 32, 97, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 66, 32, 98, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 67, 32, 99, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 68, 32, 100, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 69, 32, 101, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 70, 32, 102, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 71, 32, 103, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 72, 32, 104, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 73, 32, 105, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 74, 32, 106, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 75, 32, 107, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 76, 32, 108, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 77, 32, 109, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 78, 32, 110, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 79, 32, 111, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 80, 32, 112, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 81, 32, 113, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 82, 32, 114, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 83, 32, 115, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 84, 32, 116, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 85, 32, 117, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 86, 32, 118, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 87, 32, 119, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 88, 32, 120, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 89, 32, 121, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 90, 32, 122, 10]);
Module['FS_createDataFile']('/', 'latinLetterDef6Dots.uti', fileData105, true, true, false);
var fileData180 = [];
fileData180.push.apply(fileData180, [35, 10, 35, 32, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 49, 48, 44, 32, 50, 48, 49, 49, 32, 68, 111, 99, 65, 114, 99, 104, 32, 60, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 100, 111, 99, 97, 114, 99, 104, 46, 98, 101, 62, 46, 10, 35, 10, 35, 32, 32, 84, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 112, 97, 114, 116, 32, 111, 102, 32, 108, 105, 98, 108, 111, 117, 105, 115, 46, 10, 35, 10, 35, 32, 32, 108, 105, 98, 108, 111, 117, 105, 115, 32, 105, 115, 32, 102, 114, 101, 101, 32, 115, 111, 102, 116, 119, 97, 114, 101, 58, 32, 121, 111, 117, 32, 99, 97, 110, 32, 114, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 32, 105, 116, 32, 97, 110, 100, 47, 111, 114, 32, 109, 111, 100, 105, 102, 121, 32, 105, 116, 10, 35, 32, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 116, 101, 114, 109, 115, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 76, 101, 115, 115, 101, 114, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 115, 10, 35, 32, 32, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 70, 114, 101, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 70, 111, 117, 110, 100, 97, 116, 105, 111, 110, 44, 32, 101, 105, 116, 104, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 50, 46, 49, 32, 111, 102, 32, 116, 104, 101, 10, 35, 32, 32, 76, 105, 99, 101, 110, 115, 101, 44, 32, 111, 114, 32, 40, 97, 116, 32, 121, 111, 117, 114, 32, 111, 112, 116, 105, 111, 110, 41, 32, 97, 110, 121, 32, 108, 97, 116, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 46, 10, 35, 10, 35, 32, 32, 108, 105, 98, 108, 111, 117, 105, 115, 32, 105, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 111, 112, 101, 32, 116, 104, 97, 116, 32, 105, 116, 32, 119, 105, 108, 108, 32, 98, 101, 32, 117, 115, 101, 102, 117, 108, 44, 32, 98, 117, 116, 10, 35, 32, 32, 87, 73, 84, 72, 79, 85, 84, 32, 65, 78, 89, 32, 87, 65, 82, 82, 65, 78, 84, 89, 59, 32, 119, 105, 116, 104, 111, 117, 116, 32, 101, 118, 101, 110, 32, 116, 104, 101, 32, 105, 109, 112, 108, 105, 101, 100, 32, 119, 97, 114, 114, 97, 110, 116, 121, 32, 111, 102, 10, 35, 32, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 32, 111, 114, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 46, 32, 83, 101, 101, 32, 116, 104, 101, 32, 71, 78, 85, 10, 35, 32, 32, 76, 101, 115, 115, 101, 114, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 115, 46, 10, 35, 10, 35, 32, 32, 89, 111, 117, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 114, 101, 99, 101, 105, 118, 101, 100, 32, 97, 32, 99, 111, 112, 121, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 76, 101, 115, 115, 101, 114, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 10, 35, 32, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 108, 111, 110, 103, 32, 119, 105, 116, 104, 32, 108, 105, 98, 108, 111, 117, 105, 115, 46, 32, 73, 102, 32, 110, 111, 116, 44, 32, 115, 101, 101, 10, 35, 32, 32, 60, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 103, 110, 117, 46, 111, 114, 103, 47, 108, 105, 99, 101, 110, 115, 101, 115, 47, 62, 46, 10, 35, 10, 35, 32, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 35, 32, 32, 111, 100, 116, 50, 98, 114, 97, 105, 108, 108, 101, 32, 45, 32, 66, 114, 97, 105, 108, 108, 101, 32, 97, 117, 116, 104, 111, 114, 105, 110, 103, 32, 105, 110, 32, 79, 112, 101, 110, 79, 102, 102, 105, 99, 101, 46, 111, 114, 103, 46, 10, 35, 32, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 10, 35, 32, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 35, 32, 85, 110, 105, 99, 111, 100, 101, 32, 50, 56, 48, 48, 46, 46, 50, 56, 70, 70, 32, 32, 66, 114, 97, 105, 108, 108, 101, 32, 80, 97, 116, 116, 101, 114, 110, 115, 10, 35, 32, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 48, 48, 32, 32, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 128, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 48, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 48, 49, 32, 32, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 129, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 48, 50, 32, 32, 50, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 130, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 48, 51, 32, 32, 49, 50, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 131, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 48, 52, 32, 32, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 132, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 51, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 48, 53, 32, 32, 49, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 133, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 51, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 48, 54, 32, 32, 50, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 134, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 51, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 48, 55, 32, 32, 49, 50, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 135, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 51, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 48, 56, 32, 32, 52, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 136, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 52, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 48, 57, 32, 32, 49, 52, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 137, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 52, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 48, 65, 32, 32, 50, 52, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 138, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 52, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 48, 66, 32, 32, 49, 50, 52, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 139, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 52, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 48, 67, 32, 32, 51, 52, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 140, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 51, 52, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 48, 68, 32, 32, 49, 51, 52, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 141, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 51, 52, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 48, 69, 32, 32, 50, 51, 52, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 142, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 51, 52, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 48, 70, 32, 32, 49, 50, 51, 52, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 143, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 51, 52, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 49, 48, 32, 32, 53, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 144, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 53, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 49, 49, 32, 32, 49, 53, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 145, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 53, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 49, 50, 32, 32, 50, 53, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 146, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 53, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 49, 51, 32, 32, 49, 50, 53, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 147, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 53, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 49, 52, 32, 32, 51, 53, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 148, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 51, 53, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 49, 53, 32, 32, 49, 51, 53, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 149, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 51, 53, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 49, 54, 32, 32, 50, 51, 53, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 150, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 51, 53, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 49, 55, 32, 32, 49, 50, 51, 53, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 151, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 51, 53, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 49, 56, 32, 32, 52, 53, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 152, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 52, 53, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 49, 57, 32, 32, 49, 52, 53, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 153, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 52, 53, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 49, 65, 32, 32, 50, 52, 53, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 154, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 52, 53, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 49, 66, 32, 32, 49, 50, 52, 53, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 155, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 52, 53, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 49, 67, 32, 32, 51, 52, 53, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 156, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 51, 52, 53, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 49, 68, 32, 32, 49, 51, 52, 53, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 157, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 51, 52, 53, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 49, 69, 32, 32, 50, 51, 52, 53, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 158, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 51, 52, 53, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 49, 70, 32, 32, 49, 50, 51, 52, 53, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 159, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 51, 52, 53, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 50, 48, 32, 32, 54, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 160, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 54, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 50, 49, 32, 32, 49, 54, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 161, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 54, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 50, 50, 32, 32, 50, 54, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 162, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 54, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 50, 51, 32, 32, 49, 50, 54, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 163, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 54, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 50, 52, 32, 32, 51, 54, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 164, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 51, 54, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 50, 53, 32, 32, 49, 51, 54, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 165, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 51, 54, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 50, 54, 32, 32, 50, 51, 54, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 166, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 51, 54, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 50, 55, 32, 32, 49, 50, 51, 54, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 167, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 51, 54, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 50, 56, 32, 32, 52, 54, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 168, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 52, 54, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 50, 57, 32, 32, 49, 52, 54, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 169, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 52, 54, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 50, 65, 32, 32, 50, 52, 54, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 170, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 52, 54, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 50, 66, 32, 32, 49, 50, 52, 54, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 171, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 52, 54, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 50, 67, 32, 32, 51, 52, 54, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 172, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 51, 52, 54, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 50, 68, 32, 32, 49, 51, 52, 54, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 173, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 51, 52, 54, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 50, 69, 32, 32, 50, 51, 52, 54, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 174, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 51, 52, 54, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 50, 70, 32, 32, 49, 50, 51, 52, 54, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 175, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 51, 52, 54, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 51, 48, 32, 32, 53, 54, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 176, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 53, 54, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 51, 49, 32, 32, 49, 53, 54, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 177, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 53, 54, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 51, 50, 32, 32, 50, 53, 54, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 178, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 53, 54, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 51, 51, 32, 32, 49, 50, 53, 54, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 179, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 53, 54, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 51, 52, 32, 32, 51, 53, 54, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 180, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 51, 53, 54, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 51, 53, 32, 32, 49, 51, 53, 54, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 181, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 51, 53, 54, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 51, 54, 32, 32, 50, 51, 53, 54, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 182, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 51, 53, 54, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 51, 55, 32, 32, 49, 50, 51, 53, 54, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 183, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 51, 53, 54, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 51, 56, 32, 32, 52, 53, 54, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 184, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 52, 53, 54, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 51, 57, 32, 32, 49, 52, 53, 54, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 185, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 52, 53, 54, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 51, 65, 32, 32, 50, 52, 53, 54, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 186, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 52, 53, 54, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 51, 66, 32, 32, 49, 50, 52, 53, 54, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 187, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 52, 53, 54, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 51, 67, 32, 32, 51, 52, 53, 54, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 188, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 51, 52, 53, 54, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 51, 68, 32, 32, 49, 51, 52, 53, 54, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 189, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 51, 52, 53, 54, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 51, 69, 32, 32, 50, 51, 52, 53, 54, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 190, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 51, 52, 53, 54, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 51, 70, 32, 32, 49, 50, 51, 52, 53, 54, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 160, 191, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 51, 52, 53, 54, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 52, 48, 32, 32, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 128, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 52, 49, 32, 32, 49, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 129, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 52, 50, 32, 32, 50, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 130, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 52, 51, 32, 32, 49, 50, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 131, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 52, 52, 32, 32, 51, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 132, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 51, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 52, 53, 32, 32, 49, 51, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 133, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 51, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 52, 54, 32, 32, 50, 51, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 134, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 51, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 52, 55, 32, 32, 49, 50, 51, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 135, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 51, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 52, 56, 32, 32, 52, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 136, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 52, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 52, 57, 32, 32, 49, 52, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 137, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 52, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 52, 65, 32, 32, 50, 52, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 138, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 52, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 52, 66, 32, 32, 49, 50, 52, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 139, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 52, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 52, 67, 32, 32, 51, 52, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 140, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 51, 52, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 52, 68, 32, 32, 49, 51, 52, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 141, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 51, 52, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 52, 69, 32, 32, 50, 51, 52, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 142, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 51, 52, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 52, 70, 32, 32, 49, 50, 51, 52, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 143, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 51, 52, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 53, 48, 32, 32, 53, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 144, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 53, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 53, 49, 32, 32, 49, 53, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 145, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 53, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 53, 50, 32, 32, 50, 53, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 146, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 53, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 53, 51, 32, 32, 49, 50, 53, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 147, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 53, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 53, 52, 32, 32, 51, 53, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 148, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 51, 53, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 53, 53, 32, 32, 49, 51, 53, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 149, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 51, 53, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 53, 54, 32, 32, 50, 51, 53, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 150, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 51, 53, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 53, 55, 32, 32, 49, 50, 51, 53, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 151, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 51, 53, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 53, 56, 32, 32, 52, 53, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 152, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 52, 53, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 53, 57, 32, 32, 49, 52, 53, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 153, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 52, 53, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 53, 65, 32, 32, 50, 52, 53, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 154, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 52, 53, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 53, 66, 32, 32, 49, 50, 52, 53, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 155, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 52, 53, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 53, 67, 32, 32, 51, 52, 53, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 156, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32]);
fileData180.push.apply(fileData180, [32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 51, 52, 53, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 53, 68, 32, 32, 49, 51, 52, 53, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 157, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 51, 52, 53, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 53, 69, 32, 32, 50, 51, 52, 53, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 158, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 51, 52, 53, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 53, 70, 32, 32, 49, 50, 51, 52, 53, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 159, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 51, 52, 53, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 54, 48, 32, 32, 54, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 160, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 54, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 54, 49, 32, 32, 49, 54, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 161, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 54, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 54, 50, 32, 32, 50, 54, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 162, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 54, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 54, 51, 32, 32, 49, 50, 54, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 163, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 54, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 54, 52, 32, 32, 51, 54, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 164, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 51, 54, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 54, 53, 32, 32, 49, 51, 54, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 165, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 51, 54, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 54, 54, 32, 32, 50, 51, 54, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 166, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 51, 54, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 54, 55, 32, 32, 49, 50, 51, 54, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 167, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 51, 54, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 54, 56, 32, 32, 52, 54, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 168, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 52, 54, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 54, 57, 32, 32, 49, 52, 54, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 169, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 52, 54, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 54, 65, 32, 32, 50, 52, 54, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 170, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 52, 54, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 54, 66, 32, 32, 49, 50, 52, 54, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 171, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 52, 54, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 54, 67, 32, 32, 51, 52, 54, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 172, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 51, 52, 54, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 54, 68, 32, 32, 49, 51, 52, 54, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 173, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 51, 52, 54, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 54, 69, 32, 32, 50, 51, 52, 54, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 174, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 51, 52, 54, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 54, 70, 32, 32, 49, 50, 51, 52, 54, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 175, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 51, 52, 54, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 55, 48, 32, 32, 53, 54, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 176, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 53, 54, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 55, 49, 32, 32, 49, 53, 54, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 177, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 53, 54, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 55, 50, 32, 32, 50, 53, 54, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 178, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 53, 54, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 55, 51, 32, 32, 49, 50, 53, 54, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 179, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 53, 54, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 55, 52, 32, 32, 51, 53, 54, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 180, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 51, 53, 54, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 55, 53, 32, 32, 49, 51, 53, 54, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 181, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 51, 53, 54, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 55, 54, 32, 32, 50, 51, 53, 54, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 182, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 51, 53, 54, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 55, 55, 32, 32, 49, 50, 51, 53, 54, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 183, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 51, 53, 54, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 55, 56, 32, 32, 52, 53, 54, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 184, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 52, 53, 54, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 55, 57, 32, 32, 49, 52, 53, 54, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 185, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 52, 53, 54, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 55, 65, 32, 32, 50, 52, 53, 54, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 186, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 52, 53, 54, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 55, 66, 32, 32, 49, 50, 52, 53, 54, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 187, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 52, 53, 54, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 55, 67, 32, 32, 51, 52, 53, 54, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 188, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 51, 52, 53, 54, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 55, 68, 32, 32, 49, 51, 52, 53, 54, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 189, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 51, 52, 53, 54, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 55, 69, 32, 32, 50, 51, 52, 53, 54, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 190, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 51, 52, 53, 54, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 55, 70, 32, 32, 49, 50, 51, 52, 53, 54, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 161, 191, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 51, 52, 53, 54, 55, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 56, 48, 32, 32, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 128, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 56, 49, 32, 32, 49, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 129, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 56, 50, 32, 32, 50, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 130, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 56, 51, 32, 32, 49, 50, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 131, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 56, 52, 32, 32, 51, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 132, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 51, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 56, 53, 32, 32, 49, 51, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 133, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 51, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 56, 54, 32, 32, 50, 51, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 134, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 51, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 56, 55, 32, 32, 49, 50, 51, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 135, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 51, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 56, 56, 32, 32, 52, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 136, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 52, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 56, 57, 32, 32, 49, 52, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 137, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 52, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 56, 65, 32, 32, 50, 52, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 138, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 52, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 56, 66, 32, 32, 49, 50, 52, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 139, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 52, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 56, 67, 32, 32, 51, 52, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 140, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 51, 52, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 56, 68, 32, 32, 49, 51, 52, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 141, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 51, 52, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 56, 69, 32, 32, 50, 51, 52, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 142, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 51, 52, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 56, 70, 32, 32, 49, 50, 51, 52, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 143, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 51, 52, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 57, 48, 32, 32, 53, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 144, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 53, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 57, 49, 32, 32, 49, 53, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 145, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 53, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 57, 50, 32, 32, 50, 53, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 146, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 53, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 57, 51, 32, 32, 49, 50, 53, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 147, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 53, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 57, 52, 32, 32, 51, 53, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 148, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 51, 53, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 57, 53, 32, 32, 49, 51, 53, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 149, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 51, 53, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 57, 54, 32, 32, 50, 51, 53, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 150, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 51, 53, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 57, 55, 32, 32, 49, 50, 51, 53, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 151, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 51, 53, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 57, 56, 32, 32, 52, 53, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 152, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 52, 53, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 57, 57, 32, 32, 49, 52, 53, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 153, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 52, 53, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 57, 65, 32, 32, 50, 52, 53, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 154, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 52, 53, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 57, 66, 32, 32, 49, 50, 52, 53, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 155, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 52, 53, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 57, 67, 32, 32, 51, 52, 53, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 156, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 51, 52, 53, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 57, 68, 32, 32, 49, 51, 52, 53, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 157, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 51, 52, 53, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 57, 69, 32, 32, 50, 51, 52, 53, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 158, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 51, 52, 53, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 57, 70, 32, 32, 49, 50, 51, 52, 53, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 159, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 51, 52, 53, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 65, 48, 32, 32, 54, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 160, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 54, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 65, 49, 32, 32, 49, 54, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 161, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 54, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 65, 50, 32, 32, 50, 54, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 162, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 54, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 65, 51, 32, 32, 49, 50, 54, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 163, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 54, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 65, 52, 32, 32, 51, 54, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 164, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 51, 54, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 65, 53, 32, 32, 49, 51, 54, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 165, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 51, 54, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 65, 54, 32, 32, 50, 51, 54, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 166, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 51, 54, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 65, 55, 32, 32, 49, 50, 51, 54, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 167, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 51, 54, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 65, 56, 32, 32, 52, 54, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 168, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 52, 54, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 65, 57, 32, 32, 49, 52, 54, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 169, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 52, 54, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 65, 65, 32, 32, 50, 52, 54, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 170, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 52, 54, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 65, 66, 32, 32, 49, 50, 52, 54, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 171, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 52, 54, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 65, 67, 32, 32, 51, 52, 54, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 172, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 51, 52, 54, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 65, 68, 32, 32, 49, 51, 52, 54, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 173, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 51, 52, 54, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 65, 69, 32, 32, 50, 51, 52, 54, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 174, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 51, 52, 54, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 65, 70, 32, 32, 49, 50, 51, 52, 54, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 175, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 51, 52, 54, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 66, 48, 32, 32, 53, 54, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 176, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 53, 54, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 66, 49, 32, 32, 49, 53, 54, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 177, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 53, 54, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 66, 50, 32, 32, 50, 53, 54, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 178, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 53, 54, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 66, 51, 32, 32, 49, 50, 53, 54, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 179, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 53, 54, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 66, 52, 32, 32, 51, 53, 54, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 180, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 51, 53, 54, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 66, 53, 32, 32, 49, 51, 53, 54, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 181, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 51, 53, 54, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 66, 54, 32, 32, 50, 51, 53, 54, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 182, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 51, 53, 54, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 66, 55, 32, 32, 49, 50, 51, 53, 54, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 183, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 51, 53, 54, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 66, 56, 32, 32, 52, 53, 54, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 184, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 52, 53, 54, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 66, 57, 32, 32, 49, 52, 53, 54, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 185, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 52, 53, 54, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 66, 65, 32, 32, 50, 52, 53, 54, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 186, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 52, 53, 54, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 66, 66, 32, 32, 49, 50, 52, 53, 54, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 187, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 52, 53, 54, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 66, 67, 32, 32, 51, 52, 53, 54, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 188, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 51, 52, 53, 54, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 66, 68, 32, 32, 49, 51, 52, 53, 54, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 189, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 51, 52, 53, 54, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 66, 69, 32, 32, 50, 51, 52, 53, 54, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 190, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 51, 52, 53, 54, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 66, 70, 32, 32, 49, 50, 51, 52, 53, 54, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 162, 191, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 51, 52, 53, 54, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 67, 48, 32, 32, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 128, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 67, 49, 32, 32, 49, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 129, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 67, 50, 32, 32, 50, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 130, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 67, 51, 32, 32, 49, 50, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 131, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 67, 52, 32, 32, 51, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 132, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 51, 55, 56, 10]);
fileData180.push.apply(fileData180, [110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 67, 53, 32, 32, 49, 51, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 133, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 51, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 67, 54, 32, 32, 50, 51, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 134, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 51, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 67, 55, 32, 32, 49, 50, 51, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 135, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 51, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 67, 56, 32, 32, 52, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 136, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 52, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 67, 57, 32, 32, 49, 52, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 137, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 52, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 67, 65, 32, 32, 50, 52, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 138, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 52, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 67, 66, 32, 32, 49, 50, 52, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 139, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 52, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 67, 67, 32, 32, 51, 52, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 140, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 51, 52, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 67, 68, 32, 32, 49, 51, 52, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 141, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 51, 52, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 67, 69, 32, 32, 50, 51, 52, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 142, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 51, 52, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 67, 70, 32, 32, 49, 50, 51, 52, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 143, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 51, 52, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 68, 48, 32, 32, 53, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 144, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 53, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 68, 49, 32, 32, 49, 53, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 145, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 53, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 68, 50, 32, 32, 50, 53, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 146, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 53, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 68, 51, 32, 32, 49, 50, 53, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 147, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 53, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 68, 52, 32, 32, 51, 53, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 148, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 51, 53, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 68, 53, 32, 32, 49, 51, 53, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 149, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 51, 53, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 68, 54, 32, 32, 50, 51, 53, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 150, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 51, 53, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 68, 55, 32, 32, 49, 50, 51, 53, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 151, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 51, 53, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 68, 56, 32, 32, 52, 53, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 152, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 52, 53, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 68, 57, 32, 32, 49, 52, 53, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 153, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 52, 53, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 68, 65, 32, 32, 50, 52, 53, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 154, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 52, 53, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 68, 66, 32, 32, 49, 50, 52, 53, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 155, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 52, 53, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 68, 67, 32, 32, 51, 52, 53, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 156, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 51, 52, 53, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 68, 68, 32, 32, 49, 51, 52, 53, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 157, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 51, 52, 53, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 68, 69, 32, 32, 50, 51, 52, 53, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 158, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 51, 52, 53, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 68, 70, 32, 32, 49, 50, 51, 52, 53, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 159, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 51, 52, 53, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 69, 48, 32, 32, 54, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 160, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 54, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 69, 49, 32, 32, 49, 54, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 161, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 54, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 69, 50, 32, 32, 50, 54, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 162, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 54, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 69, 51, 32, 32, 49, 50, 54, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 163, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 54, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 69, 52, 32, 32, 51, 54, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 164, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 51, 54, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 69, 53, 32, 32, 49, 51, 54, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 165, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 51, 54, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 69, 54, 32, 32, 50, 51, 54, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 166, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 51, 54, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 69, 55, 32, 32, 49, 50, 51, 54, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 167, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 51, 54, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 69, 56, 32, 32, 52, 54, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 168, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 52, 54, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 69, 57, 32, 32, 49, 52, 54, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 169, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 52, 54, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 69, 65, 32, 32, 50, 52, 54, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 170, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 52, 54, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 69, 66, 32, 32, 49, 50, 52, 54, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 171, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 52, 54, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 69, 67, 32, 32, 51, 52, 54, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 172, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 51, 52, 54, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 69, 68, 32, 32, 49, 51, 52, 54, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 173, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 51, 52, 54, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 69, 69, 32, 32, 50, 51, 52, 54, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 174, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 51, 52, 54, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 69, 70, 32, 32, 49, 50, 51, 52, 54, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 175, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 51, 52, 54, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 70, 48, 32, 32, 53, 54, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 176, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 53, 54, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 70, 49, 32, 32, 49, 53, 54, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 177, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 53, 54, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 70, 50, 32, 32, 50, 53, 54, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 178, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 53, 54, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 70, 51, 32, 32, 49, 50, 53, 54, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 179, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 53, 54, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 70, 52, 32, 32, 51, 53, 54, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 180, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 51, 53, 54, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 70, 53, 32, 32, 49, 51, 53, 54, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 181, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 51, 53, 54, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 70, 54, 32, 32, 50, 51, 53, 54, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 182, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 51, 53, 54, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 70, 55, 32, 32, 49, 50, 51, 53, 54, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 183, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 51, 53, 54, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 70, 56, 32, 32, 52, 53, 54, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 184, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 52, 53, 54, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 70, 57, 32, 32, 49, 52, 53, 54, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 185, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 52, 53, 54, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 70, 65, 32, 32, 50, 52, 53, 54, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 186, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 52, 53, 54, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 70, 66, 32, 32, 49, 50, 52, 53, 54, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 187, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 52, 53, 54, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 70, 67, 32, 32, 51, 52, 53, 54, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 188, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 51, 52, 53, 54, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 70, 68, 32, 32, 49, 51, 52, 53, 54, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 189, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 51, 52, 53, 54, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 70, 69, 32, 32, 50, 51, 52, 53, 54, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 190, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 50, 51, 52, 53, 54, 55, 56, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 32, 32, 32, 32, 32, 32, 32, 92, 120, 50, 56, 70, 70, 32, 32, 49, 50, 51, 52, 53, 54, 55, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 226, 163, 191, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 68, 79, 84, 83, 45, 49, 50, 51, 52, 53, 54, 55, 56, 10, 10, 10, 35, 32, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 10]);
Module['FS_createDataFile']('/', 'braille-patterns.cti', fileData180, true, true, false);
var fileData214 = [];
fileData214.push.apply(fileData214, [35, 10, 35, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 49, 48, 32, 98, 121, 32, 74, 74, 66, 32, 83, 111, 102, 116, 119, 97, 114, 101, 44, 32, 73, 110, 99, 46, 32, 119, 119, 119, 46, 106, 106, 98, 45, 115, 111, 102, 116, 119, 97, 114, 101, 46, 99, 111, 109, 10, 35, 10, 35, 32, 32, 84, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 112, 97, 114, 116, 32, 111, 102, 32, 108, 105, 98, 108, 111, 117, 105, 115, 46, 10, 35, 10, 35, 32, 32, 108, 105, 98, 108, 111, 117, 105, 115, 32, 105, 115, 32, 102, 114, 101, 101, 32, 115, 111, 102, 116, 119, 97, 114, 101, 58, 32, 121, 111, 117, 32, 99, 97, 110, 32, 114, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 32, 105, 116, 32, 97, 110, 100, 47, 111, 114, 32, 109, 111, 100, 105, 102, 121, 32, 105, 116, 10, 35, 32, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 116, 101, 114, 109, 115, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 76, 101, 115, 115, 101, 114, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 115, 10, 35, 32, 32, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 70, 114, 101, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 70, 111, 117, 110, 100, 97, 116, 105, 111, 110, 44, 32, 101, 105, 116, 104, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 50, 46, 49, 32, 111, 102, 32, 116, 104, 101, 10, 35, 32, 32, 76, 105, 99, 101, 110, 115, 101, 44, 32, 111, 114, 32, 40, 97, 116, 32, 121, 111, 117, 114, 32, 111, 112, 116, 105, 111, 110, 41, 32, 97, 110, 121, 32, 108, 97, 116, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 46, 10, 35, 10, 35, 32, 32, 108, 105, 98, 108, 111, 117, 105, 115, 32, 105, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 111, 112, 101, 32, 116, 104, 97, 116, 32, 105, 116, 32, 119, 105, 108, 108, 32, 98, 101, 32, 117, 115, 101, 102, 117, 108, 44, 32, 98, 117, 116, 10, 35, 32, 32, 87, 73, 84, 72, 79, 85, 84, 32, 65, 78, 89, 32, 87, 65, 82, 82, 65, 78, 84, 89, 59, 32, 119, 105, 116, 104, 111, 117, 116, 32, 101, 118, 101, 110, 32, 116, 104, 101, 32, 105, 109, 112, 108, 105, 101, 100, 32, 119, 97, 114, 114, 97, 110, 116, 121, 32, 111, 102, 10, 35, 32, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 32, 111, 114, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 46, 32, 83, 101, 101, 32, 116, 104, 101, 32, 71, 78, 85, 10, 35, 32, 32, 76, 101, 115, 115, 101, 114, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 115, 46, 10, 35, 10, 35, 32, 32, 89, 111, 117, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 114, 101, 99, 101, 105, 118, 101, 100, 32, 97, 32, 99, 111, 112, 121, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 76, 101, 115, 115, 101, 114, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 10, 35, 32, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 108, 111, 110, 103, 32, 119, 105, 116, 104, 32, 108, 105, 98, 108, 111, 117, 105, 115, 46, 32, 73, 102, 32, 110, 111, 116, 44, 32, 115, 101, 101, 10, 35, 32, 32, 60, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 103, 110, 117, 46, 111, 114, 103, 47, 108, 105, 99, 101, 110, 115, 101, 115, 47, 62, 46, 10, 10, 35, 32, 80, 114, 101, 118, 105, 111, 117, 115, 108, 121, 44, 32, 116, 104, 101, 115, 101, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 115, 32, 119, 101, 114, 101, 32, 104, 97, 114, 100, 99, 111, 100, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 108, 105, 98, 108, 111, 117, 105, 115, 32, 108, 105, 98, 114, 97, 114, 121, 10, 35, 32, 105, 116, 115, 101, 108, 102, 46, 32, 78, 111, 119, 32, 116, 104, 101, 121, 32, 97, 114, 101, 32, 109, 105, 103, 114, 97, 116, 101, 100, 32, 116, 111, 32, 97, 110, 32, 101, 120, 116, 101, 114, 110, 97, 108, 32, 116, 97, 98, 108, 101, 32, 119, 104, 105, 99, 104, 32, 99, 97, 110, 32, 98, 101, 10, 35, 32, 105, 110, 99, 108, 117, 100, 101, 100, 32, 98, 121, 32, 111, 116, 104, 101, 114, 32, 116, 97, 98, 108, 101, 115, 46, 32, 84, 104, 101, 121, 32, 97, 114, 101, 32, 110, 101, 99, 101, 115, 115, 97, 114, 121, 32, 102, 111, 114, 32, 116, 104, 101, 32, 112, 114, 111, 112, 101, 114, 32, 111, 112, 101, 114, 97, 116, 105, 111, 110, 10, 35, 32, 111, 102, 32, 108, 105, 98, 108, 111, 117, 105, 115, 32, 111, 114, 32, 108, 105, 98, 108, 111, 117, 105, 115, 117, 116, 100, 109, 108, 46, 10, 10, 35, 32, 84, 104, 105, 115, 32, 116, 97, 98, 108, 101, 32, 97, 108, 115, 111, 32, 100, 101, 102, 105, 110, 101, 115, 32, 97, 108, 108, 32, 116, 104, 101, 32, 115, 112, 97, 99, 101, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 115, 32, 116, 111, 32, 98, 101, 32, 101, 109, 112, 116, 121, 32, 98, 114, 97, 105, 108, 108, 101, 10, 35, 32, 99, 101, 108, 108, 115, 46, 10, 10, 115, 112, 97, 99, 101, 32, 92, 115, 32, 32, 32, 32, 32, 48, 9, 9, 83, 80, 65, 67, 69, 10, 10, 115, 105, 103, 110, 32, 32, 92, 120, 48, 48, 48, 48, 32, 48, 9, 9, 78, 85, 76, 76, 10, 115, 112, 97, 99, 101, 32, 92, 120, 48, 48, 48, 57, 32, 48, 9, 9, 67, 72, 65, 82, 65, 67, 84, 69, 82, 32, 84, 65, 66, 85, 76, 65, 84, 73, 79, 78, 10, 115, 112, 97, 99, 101, 32, 92, 120, 48, 48, 48, 97, 32, 48, 9, 9, 76, 73, 78, 69, 32, 70, 69, 69, 68, 32, 40, 76, 70, 41, 10, 115, 112, 97, 99, 101, 32, 92, 120, 48, 48, 48, 98, 32, 48, 9, 9, 76, 73, 78, 69, 32, 84, 65, 66, 85, 76, 65, 84, 73, 79, 78, 10, 115, 112, 97, 99, 101, 32, 92, 120, 48, 48, 48, 99, 32, 48, 9, 9, 70, 79, 82, 77, 32, 70, 69, 69, 68, 32, 40, 70, 70, 41, 10, 115, 112, 97, 99, 101, 32, 92, 120, 48, 48, 48, 100, 32, 48, 9, 9, 67, 65, 82, 82, 73, 65, 71, 69, 32, 82, 69, 84, 85, 82, 78, 32, 40, 67, 82, 41, 10, 115, 112, 97, 99, 101, 32, 92, 120, 48, 48, 97, 48, 32, 48, 9, 9, 78, 79, 45, 66, 82, 69, 65, 75, 32, 83, 80, 65, 67, 69, 10, 115, 112, 97, 99, 101, 32, 92, 120, 50, 48, 48, 48, 32, 48, 9, 9, 69, 78, 32, 81, 85, 65, 68, 10, 115, 112, 97, 99, 101, 32, 92, 120, 50, 48, 48, 49, 32, 48, 9, 9, 69, 77, 32, 81, 85, 65, 68, 10, 115, 112, 97, 99, 101, 32, 92, 120, 50, 48, 48, 50, 32, 48, 9, 9, 69, 78, 32, 83, 80, 65, 67, 69, 10, 115, 112, 97, 99, 101, 32, 92, 120, 50, 48, 48, 51, 32, 48, 9, 9, 69, 77, 32, 83, 80, 65, 67, 69, 10, 115, 112, 97, 99, 101, 32, 92, 120, 50, 48, 48, 52, 32, 48, 9, 9, 84, 72, 82, 69, 69, 45, 80, 69, 82, 45, 69, 77, 32, 83, 80, 65, 67, 69, 10, 115, 112, 97, 99, 101, 32, 92, 120, 50, 48, 48, 53, 32, 48, 9, 9, 70, 79, 85, 82, 45, 80, 69, 82, 45, 69, 77, 32, 83, 80, 65, 67, 69, 10, 115, 112, 97, 99, 101, 32, 92, 120, 50, 48, 48, 54, 32, 48, 9, 9, 83, 73, 88, 45, 80, 69, 82, 45, 69, 77, 32, 83, 80, 65, 67, 69, 10, 115, 112, 97, 99, 101, 32, 92, 120, 50, 48, 48, 55, 32, 48, 9, 9, 70, 73, 71, 85, 82, 69, 32, 83, 80, 65, 67, 69, 10, 115, 112, 97, 99, 101, 32, 92, 120, 50, 48, 48, 56, 32, 48, 9, 9, 80, 85, 78, 67, 84, 85, 65, 84, 73, 79, 78, 32, 83, 80, 65, 67, 69, 10, 115, 112, 97, 99, 101, 32, 92, 120, 50, 48, 48, 57, 32, 48, 9, 9, 84, 72, 73, 78, 32, 83, 80, 65, 67, 69, 10, 115, 112, 97, 99, 101, 32, 92, 120, 50, 48, 48, 97, 32, 48, 9, 9, 72, 65, 73, 82, 32, 83, 80, 65, 67, 69, 10, 115, 112, 97, 99, 101, 32, 92, 120, 50, 48, 48, 98, 32, 48, 9, 9, 90, 69, 82, 79, 32, 87, 73, 68, 84, 72, 32, 83, 80, 65, 67, 69, 10, 115, 112, 97, 99, 101, 32, 92, 120, 50, 48, 50, 56, 32, 48, 9, 9, 76, 73, 78, 69, 32, 83, 69, 80, 65, 82, 65, 84, 79, 82, 10, 115, 112, 97, 99, 101, 32, 92, 120, 50, 48, 50, 57, 32, 48, 9, 9, 80, 65, 82, 65, 71, 82, 65, 80, 72, 32, 83, 69, 80, 65, 82, 65, 84, 79, 82, 10, 115, 112, 97, 99, 101, 32, 92, 120, 50, 48, 50, 102, 32, 48, 9, 9, 78, 65, 82, 82, 79, 87, 32, 78, 79, 45, 66, 82, 69, 65, 75, 32, 83, 80, 65, 67, 69, 10, 115, 112, 97, 99, 101, 32, 92, 120, 50, 48, 53, 102, 32, 48, 9, 9, 77, 69, 68, 73, 85, 77, 32, 77, 65, 84, 72, 69, 77, 65, 84, 73, 67, 65, 76, 32, 83, 80, 65, 67, 69, 10, 115, 112, 97, 99, 101, 32, 92, 120, 50, 48, 54, 48, 32, 48, 9, 9, 87, 79, 82, 68, 32, 74, 79, 73, 78, 69, 82, 10, 115, 112, 97, 99, 101, 32, 92, 120, 50, 56, 48, 48, 32, 48, 9, 9, 66, 82, 65, 73, 76, 76, 69, 32, 80, 65, 84, 84, 69, 82, 78, 32, 66, 76, 65, 78, 75, 10, 115, 112, 97, 99, 101, 32, 92, 120, 102, 101, 102, 102, 32, 48, 9, 9, 90, 69, 82, 79, 32, 87, 73, 68, 84, 72, 32, 78, 79, 45, 66, 82, 69, 65, 75, 32, 83, 80, 65, 67, 69, 32, 40, 97, 108, 115, 111, 32, 85, 110, 105, 99, 111, 100, 101, 32, 66, 79, 77, 41, 10, 10, 35, 32, 114, 101, 112, 108, 97, 99, 101, 32, 92, 120, 50, 48, 48, 98, 9, 9, 35, 90, 69, 82, 79, 32, 87, 73, 68, 84, 72, 32, 83, 80, 65, 67, 69, 10, 110, 111, 98, 97, 99, 107, 32, 99, 111, 114, 114, 101, 99, 116, 32, 34, 92, 120, 50, 48, 48, 98, 34, 32, 34, 34, 10, 10, 114, 101, 112, 108, 97, 99, 101, 32, 92, 120, 50, 48, 54, 48, 9, 9, 35, 87, 79, 82, 68, 32, 74, 79, 73, 78, 69, 82, 10, 114, 101, 112, 108, 97, 99, 101, 32, 92, 120, 102, 101, 102, 102, 9, 9, 35, 90, 69, 82, 79, 32, 87, 73, 68, 84, 72, 32, 78, 79, 45, 66, 82, 69, 65, 75, 32, 83, 80, 65, 67, 69, 32, 40, 97, 108, 115, 111, 32, 85, 110, 105, 99, 111, 100, 101, 32, 66, 79, 77, 41, 10, 10]);
Module['FS_createDataFile']('/', 'spaces.uti', fileData214, true, true, false);
var fileData263 = [];
fileData263.push.apply(fileData263, [35, 32, 108, 105, 98, 108, 111, 117, 105, 115, 58, 32, 85, 110, 105, 102, 105, 101, 100, 32, 69, 110, 103, 108, 105, 115, 104, 32, 66, 114, 97, 105, 108, 108, 101, 32, 67, 111, 100, 101, 32, 40, 71, 114, 97, 100, 101, 32, 50, 41, 10, 35, 10, 35, 32, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 35, 45, 110, 97, 109, 101, 58, 32, 85, 110, 105, 102, 105, 101, 100, 32, 69, 110, 103, 108, 105, 115, 104, 32, 98, 114, 97, 105, 108, 108, 101, 44, 32, 103, 114, 97, 100, 101, 32, 50, 10, 35, 45, 105, 110, 100, 101, 120, 45, 110, 97, 109, 101, 58, 32, 69, 110, 103, 108, 105, 115, 104, 44, 32, 117, 110, 105, 102, 105, 101, 100, 44, 32, 99, 111, 110, 116, 114, 97, 99, 116, 101, 100, 10, 35, 45, 100, 105, 115, 112, 108, 97, 121, 45, 110, 97, 109, 101, 58, 32, 85, 110, 105, 102, 105, 101, 100, 32, 69, 110, 103, 108, 105, 115, 104, 32, 99, 111, 110, 116, 114, 97, 99, 116, 101, 100, 32, 98, 114, 97, 105, 108, 108, 101, 10, 35, 10, 35, 43, 108, 97, 110, 103, 117, 97, 103, 101, 58, 101, 110, 10, 35, 43, 116, 121, 112, 101, 58, 108, 105, 116, 101, 114, 97, 114, 121, 10, 35, 43, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 58, 102, 117, 108, 108, 10, 35, 43, 103, 114, 97, 100, 101, 58, 50, 10, 35, 43, 115, 121, 115, 116, 101, 109, 58, 117, 101, 98, 10, 35, 10, 35, 32, 84, 79, 68, 79, 58, 32, 80, 108, 101, 97, 115, 101, 32, 99, 111, 114, 114, 101, 99, 116, 32, 116, 104, 101, 32, 109, 101, 116, 97, 100, 97, 116, 97, 32, 97, 98, 111, 118, 101, 46, 32, 73, 116, 32, 105, 115, 32, 110, 111, 116, 32, 109, 101, 97, 110, 116, 32, 116, 111, 32, 98, 101, 10, 35, 32, 97, 99, 99, 117, 114, 97, 116, 101, 32, 110, 111, 114, 32, 99, 111, 109, 112, 108, 101, 116, 101, 46, 32, 73, 116, 32, 104, 97, 115, 110, 39, 116, 32, 98, 101, 101, 110, 32, 118, 101, 114, 105, 102, 105, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 116, 97, 98, 108, 101, 10, 35, 32, 97, 117, 116, 104, 111, 114, 32, 121, 101, 116, 46, 32, 73, 116, 32, 105, 115, 32, 109, 101, 114, 101, 108, 121, 32, 97, 110, 32, 97, 116, 116, 101, 109, 112, 116, 32, 98, 121, 32, 116, 104, 101, 32, 108, 105, 98, 108, 111, 117, 105, 115, 32, 109, 97, 105, 110, 116, 97, 105, 110, 101, 114, 115, 10, 35, 32, 116, 111, 32, 103, 101, 116, 32, 115, 111, 109, 101, 32, 115, 101, 110, 115, 105, 98, 108, 101, 32, 105, 110, 105, 116, 105, 97, 108, 32, 118, 97, 108, 117, 101, 115, 32, 105, 110, 32, 112, 108, 97, 99, 101, 46, 10, 35, 10, 35, 32, 84, 79, 68, 79, 58, 32, 80, 108, 101, 97, 115, 101, 32, 97, 100, 100, 32, 97, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 116, 111, 32, 111, 102, 102, 105, 99, 105, 97, 108, 32, 100, 111, 99, 117, 109, 101, 110, 116, 97, 116, 105, 111, 110, 32, 97, 98, 111, 117, 116, 10, 35, 32, 116, 104, 101, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 101, 100, 32, 98, 114, 97, 105, 108, 108, 101, 32, 99, 111, 100, 101, 46, 32, 80, 114, 101, 102, 101, 114, 97, 98, 108, 121, 32, 115, 117, 98, 109, 105, 116, 32, 116, 104, 101, 32, 100, 111, 99, 117, 109, 101, 110, 116, 115, 10, 35, 32, 116, 111, 32, 104, 116, 116, 112, 115, 58, 47, 47, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 47, 108, 105, 98, 108, 111, 117, 105, 115, 47, 98, 114, 97, 105, 108, 108, 101, 45, 115, 112, 101, 99, 115, 46, 10, 35, 32, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 35, 10, 35, 32, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 48, 52, 45, 50, 48, 48, 56, 32, 86, 105, 101, 119, 80, 108, 117, 115, 32, 84, 101, 99, 104, 110, 111, 108, 111, 103, 105, 101, 115, 44, 32, 73, 110, 99, 46, 32, 119, 119, 119, 46, 118, 105, 101, 119, 112, 108, 117, 115, 46, 99, 111, 109, 10, 35, 32, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 48, 52, 45, 50, 48, 48, 54, 32, 74, 74, 66, 32, 83, 111, 102, 116, 119, 97, 114, 101, 44, 32, 73, 110, 99, 46, 32, 119, 119, 119, 46, 106, 106, 98, 45, 115, 111, 102, 116, 119, 97, 114, 101, 46, 99, 111, 109, 10, 35, 32, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 49, 54, 32, 65, 109, 101, 114, 105, 99, 97, 110, 32, 80, 114, 105, 110, 116, 105, 110, 103, 32, 72, 111, 117, 115, 101, 32, 102, 111, 114, 32, 116, 104, 101, 32, 66, 108, 105, 110, 100, 44, 32, 73, 110, 99, 46, 32, 119, 119, 119, 46, 97, 112, 104, 46, 111, 114, 103, 10, 35, 32, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 49, 54, 32, 74, 111, 115, 101, 112, 104, 32, 76, 101, 101, 32, 60, 106, 111, 115, 101, 112, 104, 46, 108, 101, 101, 50, 50, 53, 57, 48, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 62, 10, 35, 32, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 49, 57, 45, 50, 48, 50, 49, 32, 82, 78, 73, 66, 44, 32, 119, 119, 119, 46, 114, 110, 105, 98, 46, 111, 114, 103, 46, 117, 107, 10, 35, 10, 35, 32, 32, 84, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 112, 97, 114, 116, 32, 111, 102, 32, 108, 105, 98, 108, 111, 117, 105, 115, 46, 10, 35, 10, 35, 32, 32, 108, 105, 98, 108, 111, 117, 105, 115, 32, 105, 115, 32, 102, 114, 101, 101, 32, 115, 111, 102, 116, 119, 97, 114, 101, 58, 32, 121, 111, 117, 32, 99, 97, 110, 32, 114, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 32, 105, 116, 32, 97, 110, 100, 47, 111, 114, 32, 109, 111, 100, 105, 102, 121, 32, 105, 116, 10, 35, 32, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 116, 101, 114, 109, 115, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 76, 101, 115, 115, 101, 114, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 115, 10, 35, 32, 32, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 70, 114, 101, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 70, 111, 117, 110, 100, 97, 116, 105, 111, 110, 44, 32, 101, 105, 116, 104, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 50, 46, 49, 32, 111, 102, 32, 116, 104, 101, 10, 35, 32, 32, 76, 105, 99, 101, 110, 115, 101, 44, 32, 111, 114, 32, 40, 97, 116, 32, 121, 111, 117, 114, 32, 111, 112, 116, 105, 111, 110, 41, 32, 97, 110, 121, 32, 108, 97, 116, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 46, 10, 35, 10, 35, 32, 32, 108, 105, 98, 108, 111, 117, 105, 115, 32, 105, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 111, 112, 101, 32, 116, 104, 97, 116, 32, 105, 116, 32, 119, 105, 108, 108, 32, 98, 101, 32, 117, 115, 101, 102, 117, 108, 44, 32, 98, 117, 116, 10, 35, 32, 32, 87, 73, 84, 72, 79, 85, 84, 32, 65, 78, 89, 32, 87, 65, 82, 82, 65, 78, 84, 89, 59, 32, 119, 105, 116, 104, 111, 117, 116, 32, 101, 118, 101, 110, 32, 116, 104, 101, 32, 105, 109, 112, 108, 105, 101, 100, 32, 119, 97, 114, 114, 97, 110, 116, 121, 32, 111, 102, 10, 35, 32, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 32, 111, 114, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 46, 32, 83, 101, 101, 32, 116, 104, 101, 32, 71, 78, 85, 10, 35, 32, 32, 76, 101, 115, 115, 101, 114, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 115, 46, 10, 35, 10, 35, 32, 32, 89, 111, 117, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 114, 101, 99, 101, 105, 118, 101, 100, 32, 97, 32, 99, 111, 112, 121, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 76, 101, 115, 115, 101, 114, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 10, 35, 32, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 108, 111, 110, 103, 32, 119, 105, 116, 104, 32, 108, 105, 98, 108, 111, 117, 105, 115, 46, 32, 73, 102, 32, 110, 111, 116, 44, 32, 115, 101, 101, 10, 35, 32, 32, 60, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 103, 110, 117, 46, 111, 114, 103, 47, 108, 105, 99, 101, 110, 115, 101, 115, 47, 62, 46, 10, 35, 10, 35, 32, 32, 77, 97, 105, 110, 116, 97, 105, 110, 101, 100, 32, 98, 121, 32, 74, 111, 104, 110, 32, 74, 46, 32, 66, 111, 121, 101, 114, 32, 106, 111, 104, 110, 46, 98, 111, 121, 101, 114, 64, 106, 106, 98, 45, 115, 111, 102, 116, 119, 97, 114, 101, 46, 99, 111, 109, 10, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 77, 105, 107, 101, 32, 71, 114, 97, 121, 32, 60, 109, 103, 114, 97, 121, 64, 97, 112, 104, 46, 111, 114, 103, 62, 10, 35, 32, 32, 77, 111, 100, 105, 102, 105, 101, 100, 32, 98, 121, 32, 77, 105, 107, 101, 32, 71, 114, 97, 121, 32, 60, 109, 103, 114, 97, 121, 64, 97, 112, 104, 46, 111, 114, 103, 62, 10, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 74, 111, 115, 101, 112, 104, 32, 76, 101, 101, 32, 60, 106, 111, 115, 101, 112, 104, 46, 108, 101, 101, 50, 50, 53, 57, 48, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 62, 10, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 75, 114, 122, 121, 115, 122, 116, 111, 102, 32, 68, 114, 101, 119, 110, 105, 97, 107, 32, 60, 107, 114, 122, 121, 115, 100, 114, 101, 119, 110, 105, 97, 107, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 62, 10, 10, 105, 110, 99, 108, 117, 100, 101, 32, 101, 110, 45, 117, 101, 98, 45, 103, 49, 46, 99, 116, 98, 10, 10, 109, 117, 108, 116, 105, 110, 100, 32, 53, 54, 45, 54, 32, 110, 111, 99, 111, 110, 116, 114, 97, 99, 116, 115, 105, 103, 110, 32, 99, 97, 112, 115, 108, 101, 116, 116, 101, 114, 10, 10, 115, 101, 113, 100, 101, 108, 105, 109, 105, 116, 101, 114, 32, 45, 226, 128, 148, 10, 115, 101, 113, 100, 101, 108, 105, 109, 105, 116, 101, 114, 32, 226, 128, 144, 32, 32, 32, 92, 120, 50, 48, 49, 48, 10, 115, 101, 113, 100, 101, 108, 105, 109, 105, 116, 101, 114, 32, 226, 128, 145, 32, 32, 32, 92, 120, 50, 48, 49, 49, 10, 115, 101, 113, 100, 101, 108, 105, 109, 105, 116, 101, 114, 32, 226, 128, 147, 32, 32, 32, 92, 120, 50, 48, 49, 51, 10, 115, 101, 113, 100, 101, 108, 105, 109, 105, 116, 101, 114, 32, 226, 128, 148, 32, 32, 32, 92, 120, 50, 48, 49, 52, 10, 115, 101, 113, 100, 101, 108, 105, 109, 105, 116, 101, 114, 32, 226, 128, 149, 32, 32, 32, 92, 120, 50, 48, 49, 53, 10, 10, 115, 101, 113, 98, 101, 102, 111, 114, 101, 99, 104, 97, 114, 115, 32, 40, 91, 123, 34, 226, 128, 156, 39, 226, 128, 152, 10, 115, 101, 113, 97, 102, 116, 101, 114, 99, 104, 97, 114, 115, 32, 32, 41, 93, 125, 34, 226, 128, 157, 39, 226, 128, 153, 46, 44, 59, 58, 46, 33, 63, 226, 128, 166, 10, 115, 101, 113, 97, 102, 116, 101, 114, 112, 97, 116, 116, 101, 114, 110, 32, 39, 100, 10, 115, 101, 113, 97, 102, 116, 101, 114, 112, 97, 116, 116, 101, 114, 110, 32, 39, 108, 108, 10, 115, 101, 113, 97, 102, 116, 101, 114, 112, 97, 116, 116, 101, 114, 110, 32, 39, 114, 101, 10, 115, 101, 113, 97, 102, 116, 101, 114, 112, 97, 116, 116, 101, 114, 110, 32, 39, 115, 10, 115, 101, 113, 97, 102, 116, 101, 114, 112, 97, 116, 116, 101, 114, 110, 32, 39, 116, 10, 115, 101, 113, 97, 102, 116, 101, 114, 112, 97, 116, 116, 101, 114, 110, 32, 39, 118, 101, 10, 115, 101, 113, 97, 102, 116, 101, 114, 112, 97, 116, 116, 101, 114, 110, 32, 226, 128, 153, 100, 10, 115, 101, 113, 97, 102, 116, 101, 114, 112, 97, 116, 116, 101, 114, 110, 32, 226, 128, 153, 108, 108, 10, 115, 101, 113, 97, 102, 116, 101, 114, 112, 97, 116, 116, 101, 114, 110, 32, 226, 128, 153, 114, 101, 10, 115, 101, 113, 97, 102, 116, 101, 114, 112, 97, 116, 116, 101, 114, 110, 32, 226, 128, 153, 115, 10, 115, 101, 113, 97, 102, 116, 101, 114, 112, 97, 116, 116, 101, 114, 110, 32, 226, 128, 153, 116, 10, 115, 101, 113, 97, 102, 116, 101, 114, 112, 97, 116, 116, 101, 114, 110, 32, 226, 128, 153, 118, 101, 10, 35, 84, 79, 68, 79, 58, 32, 32, 97, 108, 108, 32, 99, 97, 112, 115, 32, 119, 111, 114, 100, 115, 32, 40, 115, 101, 101, 32, 108, 111, 117, 95, 116, 114, 97, 110, 115, 108, 97, 116, 101, 83, 116, 114, 105, 110, 103, 46, 99, 58, 105, 110, 83, 101, 113, 117, 101, 110, 99, 101, 40, 41, 10, 115, 101, 113, 97, 102, 116, 101, 114, 112, 97, 116, 116, 101, 114, 110, 32, 39, 68, 10, 115, 101, 113, 97, 102, 116, 101, 114, 112, 97, 116, 116, 101, 114, 110, 32, 39, 76, 76, 10, 115, 101, 113, 97, 102, 116, 101, 114, 112, 97, 116, 116, 101, 114, 110, 32, 39, 82, 69, 10, 115, 101, 113, 97, 102, 116, 101, 114, 112, 97, 116, 116, 101, 114, 110, 32, 39, 83, 10, 115, 101, 113, 97, 102, 116, 101, 114, 112, 97, 116, 116, 101, 114, 110, 32, 39, 84, 10, 115, 101, 113, 97, 102, 116, 101, 114, 112, 97, 116, 116, 101, 114, 110, 32, 39, 86, 69, 10, 115, 101, 113, 97, 102, 116, 101, 114, 101, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 39, 40, 91, 68, 83, 84, 100, 115, 116, 93, 124, 108, 108, 124, 91, 114, 118, 93, 101, 124, 76, 76, 124, 91, 82, 86, 93, 69, 41, 10, 115, 101, 113, 97, 102, 116, 101, 114, 112, 97, 116, 116, 101, 114, 110, 32, 226, 128, 153, 68, 10, 115, 101, 113, 97, 102, 116, 101, 114, 112, 97, 116, 116, 101, 114, 110, 32, 226, 128, 153, 76, 76, 10, 115, 101, 113, 97, 102, 116, 101, 114, 112, 97, 116, 116, 101, 114, 110, 32, 226, 128, 153, 82, 69, 10, 115, 101, 113, 97, 102, 116, 101, 114, 112, 97, 116, 116, 101, 114, 110, 32, 226, 128, 153, 83, 10, 115, 101, 113, 97, 102, 116, 101, 114, 112, 97, 116, 116, 101, 114, 110, 32, 226, 128, 153, 84, 10, 115, 101, 113, 97, 102, 116, 101, 114, 112, 97, 116, 116, 101, 114, 110, 32, 226, 128, 153, 86, 69, 10, 115, 101, 113, 97, 102, 116, 101, 114, 101, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 226, 128, 153, 40, 91, 68, 83, 84, 100, 115, 116, 93, 124, 108, 108, 124, 91, 114, 118, 93, 101, 124, 76, 76, 124, 91, 82, 86, 93, 69, 41, 10, 10, 35, 32, 32, 32, 55, 32, 32, 80, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 10, 35, 32, 32, 45, 32, 55, 46, 49, 46, 51, 32, 32, 99, 111, 117, 108, 100, 32, 98, 101, 32, 114, 101, 97, 100, 32, 97, 115, 32, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 93, 124, 37, 91, 94, 95, 126, 93, 37, 60, 42, 91, 40, 91, 123, 93, 32, 59, 32, 37, 91, 94, 95, 93, 124, 91, 41, 125, 92, 92, 93, 93, 37, 62, 42, 37, 91, 94, 95, 126, 93, 32, 53, 54, 45, 50, 51, 10, 35, 32, 32, 32, 32, 32, 111, 114, 32, 97, 32, 119, 111, 114, 100, 45, 105, 110, 105, 116, 105, 97, 108, 32, 103, 114, 111, 117, 112, 115, 105, 103, 110, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 46, 32, 37, 97, 32, 53, 54, 45, 50, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 58, 32, 37, 97, 32, 53, 54, 45, 50, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 59, 32, 37, 97, 32, 53, 54, 45, 50, 51, 10, 10, 35, 32, 32, 32, 49, 48, 46, 49, 32, 32, 32, 65, 108, 112, 104, 97, 98, 101, 116, 105, 99, 32, 87, 111, 114, 100, 115, 105, 103, 110, 115, 10, 35, 32, 32, 32, 45, 32, 49, 48, 46, 49, 46, 49, 32, 32, 32, 115, 116, 97, 110, 100, 105, 110, 103, 32, 97, 108, 111, 110, 101, 10, 35, 32, 32, 32, 45, 32, 49, 48, 46, 49, 46, 50, 32, 32, 32, 102, 111, 108, 108, 111, 119, 101, 100, 32, 98, 121, 32, 39, 100, 44, 32, 39, 108, 108, 44, 32, 39, 114, 101, 44, 32, 39, 115, 44, 32, 39, 116, 44, 32, 39, 118, 101, 32, 97, 110, 100, 32, 115, 116, 97, 110, 100, 105, 110, 103, 32, 97, 108, 111, 110, 101, 10, 35, 32, 32, 32, 45, 32, 50, 46, 54, 46, 52, 10, 10, 35, 32, 32, 32, 109, 117, 115, 116, 32, 98, 101, 32, 98, 101, 102, 111, 114, 101, 32, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 115, 63, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 97, 115, 32, 40, 91, 39, 226, 128, 153, 93, 40, 91, 68, 83, 84, 100, 115, 116, 93, 124, 108, 108, 124, 91, 114, 118, 93, 101, 124, 76, 76, 124, 91, 82, 86, 93, 69, 41, 41, 63, 37, 62, 42, 37, 91, 94, 95, 126, 93, 32, 49, 51, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 98, 117, 116, 32, 40, 91, 39, 226, 128, 153, 93, 40, 91, 68, 83, 84, 100, 115, 116, 93, 124, 108, 108, 124, 91, 114, 118, 93, 101, 124, 76, 76, 124, 91, 82, 86, 93, 69, 41, 41, 63, 37, 62, 42, 37, 91, 94, 95, 126, 93, 32, 49, 50, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 99, 97, 110, 32, 40, 91, 39, 226, 128, 153, 93, 40, 91, 68, 83, 84, 100, 115, 116, 93, 124, 108, 108, 124, 91, 114, 118, 93, 101, 124, 76, 76, 124, 91, 82, 86, 93, 69, 41, 41, 63, 37, 62, 42, 37, 91, 94, 95, 126, 93, 32, 49, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 100, 111, 32, 40, 91, 39, 226, 128, 153, 93, 40, 91, 68, 83, 84, 100, 115, 116, 93, 124, 108, 108, 124, 91, 114, 118, 93, 101, 124, 76, 76, 124, 91, 82, 86, 93, 69, 41, 41, 63, 37, 62, 42, 37, 91, 94, 95, 126, 93, 32, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 101, 118, 101, 114, 121, 32, 40, 91, 39, 226, 128, 153, 93, 40, 91, 68, 83, 84, 100, 115, 116, 93, 124, 108, 108, 124, 91, 114, 118, 93, 101, 124, 76, 76, 124, 91, 82, 86, 93, 69, 41, 41, 63, 37, 62, 42, 37, 91, 94, 95, 126, 93, 32, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 102, 114, 111, 109, 32, 40, 91, 39, 226, 128, 153, 93, 40, 91, 68, 83, 84, 100, 115, 116, 93, 124, 108, 108, 124, 91, 114, 118, 93, 101, 124, 76, 76, 124, 91, 82, 86, 93, 69, 41, 41, 63, 37, 62, 42, 37, 91, 94, 95, 126, 93, 32, 49, 50, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 103, 111, 32, 40, 91, 39, 226, 128, 153, 93, 40, 91, 68, 83, 84, 100, 115, 116, 93, 124, 108, 108, 124, 91, 114, 118, 93, 101, 124, 76, 76, 124, 91, 82, 86, 93, 69, 41, 41, 63, 37, 62, 42, 37, 91, 94, 95, 126, 93, 32, 49, 50, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 104, 97, 118, 101, 32, 40, 91, 39, 226, 128, 153, 93, 40, 91, 68, 83, 84, 100, 115, 116, 93, 124, 108, 108, 124, 91, 114, 118, 93, 101, 124, 76, 76, 124, 91, 82, 86, 93, 69, 41, 41, 63, 37, 62, 42, 37, 91, 94, 95, 126, 93, 32, 49, 50, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 105, 116, 32, 40, 91, 39, 226, 128, 153, 93, 40, 91, 68, 83, 84, 100, 115, 116, 93, 124, 108, 108, 124, 91, 114, 118, 93, 101, 124, 76, 76, 124, 91, 82, 86, 93, 69, 41, 41, 63, 37, 62, 42, 37, 91, 94, 95, 126, 93, 32, 49, 51, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 106, 117, 115, 116, 32, 40, 91, 39, 226, 128, 153, 93, 40, 91, 68, 83, 84, 100, 115, 116, 93, 124, 108, 108, 124, 91, 114, 118, 93, 101, 124, 76, 76, 124, 91, 82, 86, 93, 69, 41, 41, 63, 37, 62, 42, 37, 91, 94, 95, 126, 93, 32, 50, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 107, 110, 111, 119, 108, 101, 100, 103, 101, 32, 40, 91, 39, 226, 128, 153, 93, 40, 91, 68, 83, 84, 100, 115, 116, 93, 124, 108, 108, 124, 91, 114, 118, 93, 101, 124, 76, 76, 124, 91, 82, 86, 93, 69, 41, 41, 63, 37, 62, 42, 37, 91, 94, 95, 126, 93, 32, 49, 51, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 108, 105, 107, 101, 32, 40, 91, 39, 226, 128, 153, 93, 40, 91, 68, 83, 84, 100, 115, 116, 93, 124, 108, 108, 124, 91, 114, 118, 93, 101, 124, 76, 76, 124, 91, 82, 86, 93, 69, 41, 41, 63, 37, 62, 42, 37, 91, 94, 95, 126, 93, 32, 49, 50, 51, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 109, 111, 114, 101, 32, 40, 91, 39, 226, 128, 153, 93, 40, 91, 68, 83, 84, 100, 115, 116, 93, 124, 108, 108, 124, 91, 114, 118, 93, 101, 124, 76, 76, 124, 91, 82, 86, 93, 69, 41, 41, 63, 37, 62, 42, 37, 91, 94, 95, 126, 93, 32, 49, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 110, 111, 116, 32, 40, 91, 39, 226, 128, 153, 93, 40, 91, 68, 83, 84, 100, 115, 116, 93, 124, 108, 108, 124, 91, 114, 118, 93, 101, 124, 76, 76, 124, 91, 82, 86, 93, 69, 41, 41, 63, 37, 62, 42, 37, 91, 94, 95, 126, 93, 32, 49, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 112, 101, 111, 112, 108, 101, 32, 40, 91, 39, 226, 128, 153, 93, 40, 91, 68, 83, 84, 100, 115, 116, 93, 124, 108, 108, 124, 91, 114, 118, 93, 101, 124, 76, 76, 124, 91, 82, 86, 93, 69, 41, 41, 63, 37, 62, 42, 37, 91, 94, 95, 126, 93, 32, 49, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 113, 117, 105, 116, 101, 32, 40, 91, 39, 226, 128, 153, 93, 40, 91, 68, 83, 84, 100, 115, 116, 93, 124, 108, 108, 124, 91, 114, 118, 93, 101, 124, 76, 76, 124, 91, 82, 86, 93, 69, 41, 41, 63, 37, 62, 42, 37, 91, 94, 95, 126, 93, 32, 49, 50, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 114, 97, 116, 104, 101, 114, 32, 40, 91, 39, 226, 128, 153, 93, 40, 91, 68, 83, 84, 100, 115, 116, 93, 124, 108, 108, 124, 91, 114, 118, 93, 101, 124, 76, 76, 124, 91, 82, 86, 93, 69, 41, 41, 63, 37, 62, 42, 37, 91, 94, 95, 126, 93, 32, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 115, 111, 32, 40, 91, 39, 226, 128, 153, 93, 40, 91, 68, 83, 84, 100, 115, 116, 93, 124, 108, 108, 124, 91, 114, 118, 93, 101, 124, 76, 76, 124, 91, 82, 86, 93, 69, 41, 41, 63, 37, 62, 42, 37, 91, 94, 95, 126, 93, 32, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 116, 104, 97, 116, 32, 40, 91, 39, 226, 128, 153, 93, 40, 91, 68, 83, 84, 100, 115, 116, 93, 124, 108, 108, 124, 91, 114, 118, 93, 101, 124, 76, 76, 124, 91, 82, 86, 93, 69, 41, 41, 63, 37, 62, 42, 37, 91, 94, 95, 126, 93, 32, 50, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 117, 115, 32, 40, 91, 39, 226, 128, 153, 93, 40, 91, 68, 83, 84, 100, 115, 116, 93, 124, 108, 108, 124, 91, 114, 118, 93, 101, 124, 76, 76, 124, 91, 82, 86, 93, 69, 41, 41, 63, 37, 62, 42, 37, 91, 94, 95, 126, 93, 32, 49, 51, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 118, 101, 114, 121, 32, 40, 91, 39, 226, 128, 153, 93, 40, 91, 68, 83, 84, 100, 115, 116, 93, 124, 108, 108, 124, 91, 114, 118, 93, 101, 124, 76, 76, 124, 91, 82, 86, 93, 69, 41, 41, 63, 37, 62, 42, 37, 91, 94, 95, 126, 93, 32, 49, 50, 51, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 119, 105, 108, 108, 32, 40, 91, 39, 226, 128, 153, 93, 40, 91, 68, 83, 84, 100, 115, 116, 93, 124, 108, 108, 124, 91, 114, 118, 93, 101, 124, 76, 76, 124, 91, 82, 86, 93, 69, 41, 41, 63, 37, 62, 42, 37, 91, 94, 95, 126, 93, 32, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 121, 111, 117, 32, 40, 91, 39, 226, 128, 153, 93, 40, 91, 68, 83, 84, 100, 115, 116, 93, 124, 108, 108, 124, 91, 114, 118, 93, 101, 124, 76, 76, 124, 91, 82, 86, 93, 69, 41, 41, 63, 37, 62, 42, 37, 91, 94, 95, 126, 93, 32, 49, 51, 52, 53, 54, 10, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 115, 32, 32, 49, 51, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 117, 116, 32, 32, 49, 50, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 97, 110, 32, 32, 49, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 111, 32, 32, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 101, 118, 101, 114, 121, 32, 32, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 114, 111, 109, 32, 32, 49, 50, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 32, 32, 49, 50, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 97, 118, 101, 32, 32, 49, 50, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 105, 116, 32, 32, 49, 51, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 106, 117, 115, 116, 32, 32, 50, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 107, 110, 111, 119, 108, 101, 100, 103, 101, 32, 32, 49, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 105, 107, 101, 32, 32, 49, 50, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 111, 114, 101, 32, 32, 49, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 110, 111, 116, 32, 32, 49, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 101, 111, 112, 108, 101, 32, 32, 49, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 116, 101, 32, 32, 49, 50, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 97, 116, 104, 101, 114, 32, 32, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 111, 32, 32, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 97, 116, 32, 32, 50, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 115, 32, 32, 49, 51, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 118, 101, 114, 121, 32, 32, 49, 50, 51, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 105, 108, 108, 32, 32, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 121, 111, 117, 32, 32, 49, 51, 52, 53, 54, 10, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 117, 116, 39, 115, 32, 49, 50, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 117, 116, 226, 128, 153, 115, 32, 49, 50, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 97, 110, 39, 115, 32, 49, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 97, 110, 226, 128, 153, 115, 32, 49, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 97, 110, 39, 116, 32, 49, 52, 45, 51, 45, 50, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 97, 110, 226, 128, 153, 116, 32, 49, 52, 45, 51, 45, 50, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 111, 39, 115, 32, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 111, 226, 128, 153, 115, 32, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 39, 115, 32, 49, 50, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 226, 128, 153, 115, 32, 49, 50, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 97, 118, 101, 39, 115, 32, 49, 50, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 97, 118, 101, 226, 128, 153, 115, 32, 49, 50, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 105, 116, 39, 100, 32, 49, 51, 52, 54, 45, 51, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 105, 116, 226, 128, 153, 100, 32, 49, 51, 52, 54, 45, 51, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 105, 116, 39, 108, 108, 32, 49, 51, 52, 54, 45, 51, 45, 49, 50, 51, 45, 49, 50, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 105, 116, 226, 128, 153, 108, 108, 32, 49, 51, 52, 54, 45, 51, 45, 49, 50, 51, 45, 49, 50, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 105, 116, 39, 115, 32, 49, 51, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 105, 116, 226, 128, 153, 115, 32, 49, 51, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 107, 110, 111, 119, 108, 101, 100, 103, 101, 39, 115, 32, 49, 51, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 107, 110, 111, 119, 108, 101, 100, 103, 101, 226, 128, 153, 115, 32, 49, 51, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 105, 107, 101, 39, 115, 32, 49, 50, 51, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 105, 107, 101, 226, 128, 153, 115, 32, 49, 50, 51, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 111, 114, 101, 39, 115, 32, 49, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 111, 114, 101, 226, 128, 153, 115, 32, 49, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 101, 111, 112, 108, 101, 39, 115, 32, 49, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 101, 111, 112, 108, 101, 226, 128, 153, 115, 32, 49, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 111, 39, 115, 32, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 111, 226, 128, 153, 115, 32, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 97, 116, 39, 100, 32, 50, 51, 52, 53, 45, 51, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 97, 116, 226, 128, 153, 100, 32, 50, 51, 52, 53, 45, 51, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 97, 116, 39, 108, 108, 32, 50, 51, 52, 53, 45, 51, 45, 49, 50, 51, 45, 49, 50, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 97, 116, 226, 128, 153, 108, 108, 32, 50, 51, 52, 53, 45, 51, 45, 49, 50, 51, 45, 49, 50, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 97, 116, 39, 114, 101, 32, 50, 51, 52, 53, 45, 51, 45, 49, 50, 51, 53, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 97, 116, 226, 128, 153, 114, 101, 32, 50, 51, 52, 53, 45, 51, 45, 49, 50, 51, 53, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 97, 116, 39, 115, 32, 50, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 97, 116, 226, 128, 153, 115, 32, 50, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 97, 116, 39, 118, 101, 32, 50, 51, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 97, 116, 226, 128, 153, 118, 101, 32, 50, 51, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 105, 108, 108, 39, 115, 32, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 105, 108, 108, 226, 128, 153, 115, 32, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 105, 108, 108, 39, 118, 101, 32, 50, 52, 53, 54, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 105, 108, 108, 226, 128, 153, 118, 101, 32, 50, 52, 53, 54, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 121, 111, 117, 39, 100, 32, 49, 51, 52, 53, 54, 45, 51, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 121, 111, 117, 226, 128, 153, 100, 32, 49, 51, 52, 53, 54, 45, 51, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 121, 111, 117, 39, 108, 108, 32, 49, 51, 52, 53, 54, 45, 51, 45, 49, 50, 51, 45, 49, 50, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 121, 111, 117, 226, 128, 153, 108, 108, 32, 49, 51, 52, 53, 54, 45, 51, 45, 49, 50, 51, 45, 49, 50, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 121, 111, 117, 39, 114, 101, 32, 49, 51, 52, 53, 54, 45, 51, 45, 49, 50, 51, 53, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 121, 111, 117, 226, 128, 153, 114, 101, 32, 49, 51, 52, 53, 54, 45, 51, 45, 49, 50, 51, 53, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 121, 111, 117, 39, 115, 32, 49, 51, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 121, 111, 117, 226, 128, 153, 115, 32, 49, 51, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 121, 111, 117, 39, 118, 101, 32, 49, 51, 52, 53, 54, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 121, 111, 117, 226, 128, 153, 118, 101, 32, 49, 51, 52, 53, 54, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 98, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 99, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 102, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 103, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 104, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 106, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 107, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 108, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 109, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 110, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 112, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 113, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 114, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 115, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 116, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 117, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 118, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 119, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 120, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 121, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 122, 10, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 66, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 67, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 68, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 69, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 70, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 71, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 72, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 74, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 75, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 76, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 77, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 78, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 80, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 81, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 82, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 83, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 84, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 85, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 86, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 87, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 88, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 89, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 90, 10, 10, 10, 35, 32, 32, 32, 49, 48, 46, 50, 32, 32, 32, 83, 116, 114, 111, 110, 103, 32, 87, 111, 114, 100, 115, 105, 103, 110, 115, 10, 35, 32, 32, 32, 45, 32, 49, 48, 46, 50, 46, 49, 32, 32, 32, 115, 116, 97, 110, 100, 105, 110, 103, 32, 97, 108, 111, 110, 101, 10, 35, 32, 32, 32, 45, 32, 49, 48, 46, 50, 46, 50, 32, 32, 32, 102, 111, 108, 108, 111, 119, 101, 100, 32, 98, 121, 32, 39, 100, 44, 32, 39, 108, 108, 44, 32, 39, 114, 101, 44, 32, 39, 115, 44, 32, 39, 116, 44, 32, 39, 118, 101, 32, 97, 110, 100, 32, 115, 116, 97, 110, 100, 105, 110, 103, 32, 97, 108, 111, 110, 101, 10, 35, 32, 32, 32, 45, 32, 50, 46, 54, 46, 52, 10, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 99, 104, 105, 108, 100, 32, 40, 91, 39, 226, 128, 153, 93, 40, 91, 68, 83, 84, 100, 115, 116, 93, 124, 108, 108, 124, 91, 114, 118, 93, 101, 124, 76, 76, 124, 91, 82, 86, 93, 69, 41, 41, 63, 37, 62, 42, 37, 91, 94, 95, 126, 93, 32, 49, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 111, 117, 116, 32, 40, 91, 39, 226, 128, 153, 93, 40, 91, 68, 83, 84, 100, 115, 116, 93, 124, 108, 108, 124, 91, 114, 118, 93, 101, 124, 76, 76, 124, 91, 82, 86, 93, 69, 41, 41, 63, 37, 62, 42, 37, 91, 94, 95, 126, 93, 32, 49, 50, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 115, 104, 97, 108, 108, 32, 40, 91, 39, 226, 128, 153, 93, 40, 91, 68, 83, 84, 100, 115, 116, 93, 124, 108, 108, 124, 91, 114, 118, 93, 101, 124, 76, 76, 124, 91, 82, 86, 93, 69, 41, 41, 63, 37, 62, 42, 37, 91, 94, 95, 126, 93, 32, 49, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 115, 116, 105, 108, 108, 32, 40, 91, 39, 226, 128, 153, 93, 40, 91, 68, 83, 84, 100, 115, 116, 93, 124, 108, 108, 124, 91, 114, 118, 93, 101, 124, 76, 76, 124, 91, 82, 86, 93, 69, 41, 41, 63, 37, 62, 42, 37, 91, 94, 95, 126, 93, 32, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 116, 104, 105, 115, 32, 40, 91, 39, 226, 128, 153, 93, 40, 91, 68, 83, 84, 100, 115, 116, 93, 124, 108, 108, 124, 91, 114, 118, 93, 101, 124, 76, 76, 124, 91, 82, 86, 93, 69, 41, 41, 63, 37, 62, 42, 37, 91, 94, 95, 126, 93, 32, 49, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 119, 104, 105, 99, 104, 32, 40, 91, 39, 226, 128, 153, 93, 40, 91, 68, 83, 84, 100, 115, 116, 93, 124, 108, 108, 124, 91, 114, 118, 93, 101, 124, 76, 76, 124, 91, 82, 86, 93, 69, 41, 41, 63, 37, 62, 42, 37, 91, 94, 95, 126, 93, 32, 49, 53, 54, 10, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 104, 105, 108, 100, 32, 32, 49, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 111, 117, 116, 32, 32, 49, 50, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 104, 97, 108, 108, 32, 32, 49, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 116, 105, 108, 108, 32, 32, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 105, 115, 32, 32, 49, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 104, 105, 99, 104, 32, 32, 49, 53, 54, 10, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 104, 105, 108, 100, 39, 115, 32, 49, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 104, 105, 108, 100, 226, 128, 153, 115, 32, 49, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 111, 117, 116, 39, 115, 32, 49, 50, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 111, 117, 116, 226, 128, 153, 115, 32, 49, 50, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 104, 97, 108, 108, 39, 118, 101, 32, 49, 52, 54, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 104, 97, 108, 108, 226, 128, 153, 118, 101, 32, 49, 52, 54, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 116, 105, 108, 108, 39, 115, 32, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 116, 105, 108, 108, 226, 128, 153, 115, 32, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 105, 115, 39, 100, 32, 49, 52, 53, 54, 45, 51, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 105, 115, 226, 128, 153, 100, 32, 49, 52, 53, 54, 45, 51, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 105, 115, 39, 108, 108, 32, 49, 52, 53, 54, 45, 51, 45, 49, 50, 51, 45, 49, 50, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 105, 115, 226, 128, 153, 108, 108, 32, 49, 52, 53, 54, 45, 51, 45, 49, 50, 51, 45, 49, 50, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 105, 115, 39, 115, 32, 49, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 105, 115, 226, 128, 153, 115, 32, 49, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 104, 105, 99, 104, 39, 100, 32, 49, 53, 54, 45, 51, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 104, 105, 99, 104, 226, 128, 153, 100, 32, 49, 53, 54, 45, 51, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 104, 105, 99, 104, 39, 108, 108, 32, 49, 53, 54, 45, 51, 45, 49, 50, 51, 45, 49, 50, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 104, 105, 99, 104, 226, 128, 153, 108, 108, 32, 49, 53, 54, 45, 51, 45, 49, 50, 51, 45, 49, 50, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 104, 105, 99, 104, 39, 114, 101, 32, 49, 53, 54, 45, 51, 45, 49, 50, 51, 53, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 104, 105, 99, 104, 226, 128, 153, 114, 101, 32, 49, 53, 54, 45, 51, 45, 49, 50, 51, 53, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 104, 105, 99, 104, 39, 115, 32, 49, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 104, 105, 99, 104, 226, 128, 153, 115, 32, 49, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 104, 105, 99, 104, 39, 118, 101, 32, 49, 53, 54, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 104, 105, 99, 104, 226, 128, 153, 118, 101, 32, 49, 53, 54, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 10, 35, 32, 32, 32, 49, 48, 46, 51, 32, 32, 32, 83, 116, 114, 111, 110, 103, 32, 67, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 115, 10, 35, 32, 32, 32, 45, 32, 49, 48, 46, 49, 49, 46, 50, 10, 10, 35, 32, 97, 110, 100, 10, 97, 108, 119, 97, 121, 115, 32, 97, 110, 100, 32, 49, 50, 51, 52, 54, 10, 10, 35, 32, 102, 111, 114, 10, 97, 108, 119, 97, 121, 115, 32, 102, 111, 114, 32, 49, 50, 51, 52, 53, 54, 10, 10, 35, 32, 111, 102, 10, 97, 108, 119, 97, 121, 115, 32, 111, 102, 32, 49, 50, 51, 53, 54, 10, 97, 108, 119, 97, 121, 115, 32, 111, 102, 111, 114, 32, 49, 51, 53, 45, 49, 50, 51, 52, 53, 54, 32, 32, 105, 110, 32, 79, 70, 79, 82, 44, 32, 116, 104, 101, 32, 70, 79, 82, 32, 115, 105, 103, 110, 32, 116, 97, 107, 101, 115, 32, 32, 112, 114, 105, 111, 114, 105, 116, 121, 10, 10, 109, 97, 116, 99, 104, 32, 45, 32, 97, 101, 114, 111, 32, 91, 70, 87, 102, 119, 93, 32, 49, 45, 49, 50, 52, 53, 54, 45, 49, 51, 53, 10, 109, 97, 116, 99, 104, 32, 45, 32, 97, 110, 116, 101, 114, 111, 32, 91, 70, 87, 102, 119, 93, 32, 49, 45, 49, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 54, 45, 49, 51, 53, 10, 109, 97, 116, 99, 104, 32, 45, 32, 97, 117, 116, 111, 32, 91, 70, 87, 102, 119, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 98, 101, 110, 122, 111, 32, 91, 70, 87, 102, 119, 93, 32, 49, 50, 45, 50, 54, 45, 49, 51, 53, 54, 45, 49, 51, 53, 10, 109, 97, 116, 99, 104, 32, 45, 32, 98, 105, 111, 32, 91, 70, 87, 102, 119, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 99, 104, 108, 111, 114, 111, 32, 91, 70, 87, 102, 119, 93, 32, 49, 54, 45, 49, 50, 51, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 51, 53, 10, 109, 97, 116, 99, 104, 32, 45, 32, 100, 101, 117, 116, 101, 114, 111, 32, 91, 70, 87, 102, 119, 93, 32, 49, 52, 53, 45, 49, 53, 45, 49, 51, 54, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 54, 45, 49, 51, 53, 10, 109, 97, 116, 99, 104, 32, 45, 32, 101, 108, 101, 99, 116, 114, 111, 32, 91, 70, 87, 102, 119, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 102, 105, 98, 114, 111, 32, 91, 70, 87, 102, 119, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 102, 108, 117, 111, 114, 111, 32, 91, 70, 87, 102, 119, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 103, 97, 108, 118, 97, 110, 111, 32, 91, 70, 87, 102, 119, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 103, 114, 105, 115, 101, 111, 32, 91, 70, 87, 102, 119, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 104, 101, 116, 101, 114, 111, 32, 91, 70, 87, 102, 119, 93, 32, 49, 50, 53, 45, 49, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 54, 45, 49, 51, 53, 10, 109, 97, 116, 99, 104, 32, 45, 32, 104, 111, 109, 111, 32, 91, 70, 87, 102, 119, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 104, 121, 100, 114, 111, 32, 91, 70, 87, 102, 119, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 104, 121, 112, 111, 32, 91, 70, 87, 102, 119, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 107, 105, 108, 111, 32, 91, 70, 87, 102, 119, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 108, 117, 116, 101, 111, 32, 91, 70, 87, 102, 119, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 109, 97, 99, 114, 111, 32, 91, 70, 87, 102, 119, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 109, 105, 99, 114, 111, 32, 91, 70, 87, 102, 119, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 109, 111, 110, 111, 32, 91, 70, 87, 102, 119, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 109, 121, 101, 108, 111, 32, 91, 70, 87, 102, 119, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 109, 121, 111, 32, 91, 70, 102, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 110, 97, 110, 111, 32, 91, 70, 87, 102, 119, 93, 32, 61, 32, 10, 109, 97, 116, 99, 104, 32, 45, 32, 110, 105, 116, 114, 111, 32, 91, 70, 87, 102, 119, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 111, 99, 116, 111, 32, 91, 70, 87, 102, 119, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 112, 104, 111, 116, 111, 32, 91, 70, 87, 102, 119, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 112, 105, 99, 111, 32, 91, 70, 87, 102, 119, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 112, 114, 111, 116, 111, 32, 91, 70, 87, 102, 119, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 112, 115, 101, 117, 100, 111, 32, 91, 70, 87, 102, 119, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 112, 115, 121, 99, 104, 111, 32, 91, 70, 87, 102, 119, 93, 32, 49, 50, 51, 52, 45, 50, 51, 52, 45, 49, 51, 52, 53, 54, 45, 49, 54, 45, 49, 51, 53, 10, 109, 97, 116, 99, 104, 32, 45, 32, 114, 101, 116, 114, 111]);
fileData263.push.apply(fileData263, [32, 91, 70, 87, 102, 119, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 115, 117, 108, 102, 111, 32, 91, 70, 87, 102, 119, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 115, 117, 108, 112, 104, 111, 32, 91, 70, 87, 102, 119, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 115, 121, 110, 99, 104, 114, 111, 32, 91, 70, 87, 102, 119, 93, 32, 50, 51, 52, 45, 49, 51, 52, 53, 54, 45, 49, 51, 52, 53, 45, 49, 54, 45, 49, 50, 51, 53, 45, 49, 51, 53, 10, 109, 97, 116, 99, 104, 32, 45, 32, 116, 104, 101, 114, 109, 111, 32, 91, 70, 87, 102, 119, 93, 32, 50, 51, 52, 54, 45, 49, 50, 51, 53, 45, 49, 51, 52, 45, 49, 51, 53, 10, 109, 97, 116, 99, 104, 32, 45, 32, 116, 104, 105, 111, 32, 91, 70, 102, 93, 91, 85, 117, 93, 91, 82, 114, 93, 32, 49, 52, 53, 54, 45, 50, 52, 45, 49, 51, 53, 10, 109, 97, 116, 99, 104, 32, 45, 32, 118, 101, 110, 116, 114, 111, 32, 91, 70, 87, 102, 119, 93, 32, 49, 50, 51, 54, 45, 50, 54, 45, 50, 51, 52, 53, 45, 49, 50, 51, 53, 45, 49, 51, 53, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 111, 102, 97, 99, 116, 111, 114, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 111, 102, 97, 116, 104, 101, 114, 32, 49, 52, 45, 49, 51, 53, 45, 53, 45, 49, 50, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 111, 102, 101, 97, 116, 117, 114, 32, 49, 52, 45, 49, 51, 53, 45, 49, 50, 52, 45, 50, 45, 50, 51, 52, 53, 45, 49, 51, 54, 45, 49, 50, 51, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 111, 102, 101, 114, 109, 101, 110, 116, 32, 49, 52, 45, 49, 51, 53, 45, 49, 50, 52, 45, 49, 50, 52, 53, 54, 45, 53, 54, 45, 50, 51, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 111, 102, 105, 101, 108, 100, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 111, 102, 105, 103, 104, 116, 32, 49, 52, 45, 49, 51, 53, 45, 49, 50, 52, 45, 50, 52, 45, 49, 50, 54, 45, 50, 51, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 111, 102, 105, 110, 97, 108, 32, 49, 52, 45, 49, 51, 53, 45, 49, 50, 52, 45, 51, 53, 45, 49, 45, 49, 50, 51, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 111, 102, 105, 110, 97, 110, 99, 101, 32, 49, 52, 45, 49, 51, 53, 45, 49, 50, 52, 45, 51, 53, 45, 52, 54, 45, 49, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 111, 102, 105, 110, 97, 110, 99, 105, 110, 103, 32, 49, 52, 45, 49, 51, 53, 45, 49, 50, 52, 45, 51, 53, 45, 49, 45, 49, 51, 52, 53, 45, 49, 52, 45, 51, 52, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 111, 102, 111, 117, 110, 100, 32, 49, 52, 45, 49, 51, 53, 45, 49, 50, 52, 45, 52, 54, 45, 49, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 111, 102, 117, 110, 99, 116, 105, 111, 110, 32, 49, 52, 45, 49, 51, 53, 45, 49, 50, 52, 45, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 52, 45, 53, 54, 45, 49, 51, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 102, 105, 108, 111, 102, 97, 120, 32, 49, 50, 52, 45, 50, 52, 45, 49, 50, 51, 45, 49, 51, 53, 45, 49, 50, 52, 45, 49, 45, 49, 51, 52, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 105, 110, 115, 111, 102, 97, 114, 32, 51, 53, 45, 50, 51, 52, 45, 49, 51, 53, 45, 49, 50, 52, 45, 51, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 112, 111, 114, 116, 111, 102, 105, 110, 111, 32, 49, 50, 51, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 51, 53, 45, 49, 50, 52, 45, 51, 53, 45, 49, 51, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 114, 105, 98, 111, 102, 108, 97, 118, 105, 110, 32, 49, 50, 51, 53, 45, 50, 52, 45, 49, 50, 45, 49, 51, 53, 45, 49, 50, 52, 45, 49, 50, 51, 45, 49, 45, 49, 50, 51, 54, 45, 51, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 115, 116, 121, 114, 111, 102, 111, 97, 109, 32, 51, 52, 45, 49, 51, 52, 53, 54, 45, 49, 50, 51, 53, 45, 49, 51, 53, 45, 49, 50, 52, 45, 49, 51, 53, 45, 49, 45, 49, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 116, 117, 114, 98, 111, 102, 97, 110, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 116, 119, 111, 102, 101, 114, 32, 50, 51, 52, 53, 45, 50, 52, 53, 54, 45, 49, 51, 53, 45, 49, 50, 52, 45, 49, 50, 52, 53, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 116, 119, 111, 102, 111, 108, 100, 32, 50, 51, 52, 53, 45, 50, 52, 53, 54, 45, 49, 51, 53, 45, 49, 50, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 10, 10, 35, 32, 116, 104, 101, 10, 97, 108, 119, 97, 121, 115, 32, 116, 104, 101, 32, 50, 51, 52, 54, 10, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 116, 104, 101, 97, 100, 32, 45, 32, 50, 51, 52, 53, 45, 49, 50, 53, 45, 50, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 116, 104, 101, 97, 114, 32, 91, 84, 116, 93, 32, 50, 51, 52, 53, 45, 49, 50, 53, 45, 49, 53, 45, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 116, 104, 101, 105, 109, 32, 45, 32, 61, 10, 10, 109, 97, 116, 99, 104, 32, 45, 32, 101, 115, 116, 104, 101, 32, 91, 83, 84, 115, 116, 93, 91, 69, 73, 101, 105, 93, 32, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 54, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 97, 108, 105, 115, 116, 104, 101, 110, 105, 99, 32, 49, 52, 45, 49, 45, 49, 50, 51, 45, 50, 52, 45, 50, 51, 52, 45, 50, 51, 52, 54, 45, 49, 51, 52, 53, 45, 50, 52, 45, 49, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 100, 101, 109, 111, 115, 116, 104, 101, 110, 101, 115, 32, 49, 52, 53, 45, 49, 53, 45, 49, 51, 52, 45, 49, 51, 53, 45, 50, 51, 52, 45, 50, 51, 52, 54, 45, 49, 51, 52, 53, 45, 49, 53, 45, 50, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 101, 114, 97, 116, 111, 115, 116, 104, 101, 110, 101, 115, 32, 49, 50, 52, 53, 54, 45, 49, 45, 50, 51, 52, 53, 45, 49, 51, 53, 45, 50, 51, 52, 45, 50, 51, 52, 54, 45, 49, 51, 52, 53, 45, 49, 53, 45, 50, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 101, 115, 116, 104, 101, 114, 32, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 54, 45, 49, 50, 51, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 104, 101, 115, 116, 104, 101, 114, 32, 49, 50, 53, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 54, 45, 49, 50, 51, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 109, 111, 116, 104, 101, 97, 116, 101, 110, 32, 49, 51, 52, 45, 49, 51, 53, 45, 49, 52, 53, 54, 45, 50, 45, 50, 51, 52, 53, 45, 50, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 110, 111, 114, 116, 104, 101, 97, 115, 116, 32, 49, 51, 52, 53, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 52, 53, 54, 45, 50, 45, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 110, 111, 114, 116, 104, 101, 115, 107, 32, 49, 51, 52, 53, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 52, 53, 54, 45, 49, 53, 45, 50, 51, 52, 45, 49, 51, 10, 115, 117, 102, 119, 111, 114, 100, 32, 112, 114, 111, 115, 116, 104, 101, 115, 101, 115, 32, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 51, 53, 45, 50, 51, 52, 45, 50, 51, 52, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 112, 114, 111, 115, 116, 104, 101, 115, 105, 115, 32, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 51, 53, 45, 50, 51, 52, 45, 50, 51, 52, 54, 45, 50, 51, 52, 45, 50, 52, 45, 50, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 112, 114, 111, 115, 116, 104, 101, 116, 105, 99, 32, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 51, 53, 45, 50, 51, 52, 45, 50, 51, 52, 54, 45, 50, 51, 52, 53, 45, 50, 52, 45, 49, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 115, 111, 117, 116, 104, 101, 97, 115, 116, 32, 50, 51, 52, 45, 49, 50, 53, 54, 45, 49, 52, 53, 54, 45, 50, 45, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 115, 111, 117, 116, 104, 101, 110, 100, 32, 50, 51, 52, 45, 49, 50, 53, 54, 45, 49, 52, 53, 54, 45, 50, 54, 45, 49, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 115, 111, 117, 116, 104, 101, 115, 107, 32, 50, 51, 52, 45, 49, 50, 53, 54, 45, 49, 52, 53, 54, 45, 49, 53, 45, 50, 51, 52, 45, 49, 51, 10, 115, 117, 102, 119, 111, 114, 100, 32, 115, 116, 114, 97, 116, 104, 101, 97, 114, 110, 32, 51, 52, 45, 49, 50, 51, 53, 45, 49, 45, 49, 52, 53, 54, 45, 49, 53, 45, 51, 52, 53, 45, 49, 51, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 116, 104, 101, 110, 99, 101, 32, 49, 52, 53, 54, 45, 53, 54, 45, 49, 53, 10, 10, 35, 32, 119, 105, 116, 104, 10, 97, 108, 119, 97, 121, 115, 32, 119, 105, 116, 104, 32, 50, 51, 52, 53, 54, 10, 10, 10, 35, 32, 32, 32, 49, 48, 46, 52, 32, 32, 32, 83, 116, 114, 111, 110, 103, 32, 71, 114, 111, 117, 112, 115, 105, 103, 110, 115, 10, 35, 32, 32, 32, 45, 32, 49, 48, 46, 52, 46, 50, 32, 32, 32, 32, 99, 104, 32, 115, 104, 32, 116, 104, 32, 119, 104, 32, 111, 117, 32, 115, 116, 10, 35, 32, 32, 32, 45, 32, 49, 48, 46, 52, 46, 51, 32, 32, 32, 32, 105, 110, 103, 10, 35, 32, 32, 32, 45, 32, 49, 48, 46, 49, 49, 46, 50, 32, 32, 32, 99, 104, 32, 103, 104, 32, 115, 104, 32, 116, 104, 32, 119, 104, 10, 35, 32, 32, 32, 45, 32, 50, 46, 54, 46, 52, 32, 32, 32, 32, 32, 114, 101, 102, 101, 114, 114, 101, 100, 32, 102, 114, 111, 109, 32, 49, 48, 46, 52, 46, 50, 32, 45, 32, 49, 48, 46, 50, 10, 10, 35, 32, 97, 114, 10, 97, 108, 119, 97, 121, 115, 32, 97, 114, 32, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 40, 37, 91, 94, 95, 126, 93, 37, 60, 42, 41, 32, 97, 114, 32, 40, 91, 39, 226, 128, 153, 93, 40, 91, 68, 83, 84, 100, 115, 116, 93, 124, 108, 108, 124, 91, 114, 118, 93, 101, 124, 76, 76, 124, 91, 82, 86, 93, 69, 41, 41, 63, 40, 37, 62, 42, 37, 91, 94, 95, 126, 93, 41, 32, 61, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 97, 114, 105, 103, 104, 116, 32, 49, 45, 53, 45, 49, 50, 51, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 105, 110, 100, 105, 97, 114, 117, 98, 98, 101, 114, 32, 51, 53, 45, 49, 52, 53, 45, 50, 52, 45, 49, 45, 49, 50, 51, 53, 45, 49, 51, 54, 45, 50, 51, 45, 49, 50, 52, 53, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 105, 110, 102, 114, 97, 114, 101, 100, 32, 51, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 10, 10, 35, 32, 99, 104, 32, 32, 32, 49, 48, 46, 52, 46, 50, 32, 32, 32, 49, 48, 46, 49, 49, 46, 50, 10, 97, 108, 119, 97, 121, 115, 32, 99, 104, 32, 49, 54, 10, 109, 97, 116, 99, 104, 32, 40, 37, 91, 94, 95, 126, 93, 37, 60, 42, 41, 32, 99, 104, 32, 40, 91, 39, 226, 128, 153, 93, 40, 91, 68, 83, 84, 100, 115, 116, 93, 124, 108, 108, 124, 91, 114, 118, 93, 101, 124, 76, 76, 124, 91, 82, 86, 93, 69, 41, 41, 63, 40, 37, 62, 42, 37, 91, 94, 95, 126, 93, 41, 32, 61, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 112, 117, 98, 108, 105, 99, 104, 101, 97, 114, 116, 32, 49, 50, 51, 52, 45, 49, 51, 54, 45, 49, 50, 45, 49, 50, 51, 45, 50, 52, 45, 49, 52, 45, 49, 50, 53, 45, 49, 53, 45, 51, 52, 53, 45, 50, 51, 52, 53, 10, 10, 35, 32, 101, 100, 10, 97, 108, 119, 97, 121, 115, 32, 101, 100, 32, 49, 50, 52, 54, 10, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 101, 100, 97, 108, 101, 32, 40, 91, 83, 115, 93, 124, 40, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 41, 63, 37, 62, 42, 37, 91, 94, 95, 126, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 101, 100, 111, 119, 110, 32, 45, 32, 49, 53, 45, 49, 52, 53, 45, 50, 52, 54, 45, 49, 51, 52, 53, 10, 10, 109, 97, 116, 99, 104, 32, 45, 32, 97, 112, 112, 108, 101, 32, 91, 68, 100, 93, 91, 79, 111, 93, 91, 82, 114, 93, 91, 69, 101, 93, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 98, 97, 115, 101, 100, 111, 119, 32, 49, 50, 45, 49, 45, 50, 51, 52, 45, 49, 53, 45, 49, 52, 53, 45, 50, 52, 54, 10, 109, 97, 116, 99, 104, 32, 45, 32, 98, 97, 116, 116, 108, 101, 32, 91, 68, 100, 93, 91, 79, 111, 93, 91, 82, 114, 93, 91, 69, 101, 93, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 108, 105, 118, 101, 100, 101, 110, 32, 49, 52, 45, 49, 50, 51, 45, 50, 52, 45, 49, 50, 51, 54, 45, 49, 53, 45, 49, 52, 53, 45, 50, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 100, 97, 114, 101, 100, 101, 118, 105, 108, 32, 49, 52, 53, 45, 51, 52, 53, 45, 49, 53, 45, 49, 52, 53, 45, 49, 53, 45, 49, 50, 51, 54, 45, 50, 52, 45, 49, 50, 51, 10, 109, 97, 116, 99, 104, 32, 45, 32, 100, 117, 109, 98, 108, 101, 32, 91, 68, 100, 93, 91, 79, 111, 93, 91, 82, 114, 93, 91, 69, 101, 93, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 100, 111, 117, 98, 108, 101, 100, 97, 121, 32, 49, 52, 53, 45, 49, 50, 53, 54, 45, 49, 50, 45, 49, 50, 51, 45, 49, 53, 45, 53, 45, 49, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 101, 121, 101, 100, 114, 111, 112, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 102, 105, 114, 101, 100, 114, 97, 107, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 102, 105, 114, 101, 100, 114, 105, 108, 108, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 103, 114, 97, 118, 101, 32, 91, 68, 100, 93, 91, 73, 105, 93, 91, 71, 103, 93, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 103, 119, 121, 110, 101, 100, 100, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 104, 111, 117, 115, 101, 100, 114, 101, 115, 115, 32, 49, 50, 53, 45, 49, 50, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 49, 52, 53, 45, 49, 50, 51, 53, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 105, 110, 103, 108, 101, 100, 101, 119, 32, 51, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 45, 49, 53, 45, 49, 52, 53, 45, 49, 53, 45, 50, 52, 53, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 107, 101, 116, 116, 108, 101, 100, 114, 117, 109, 32, 49, 51, 45, 49, 53, 45, 50, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 51, 45, 49, 53, 45, 49, 52, 53, 45, 49, 50, 51, 53, 45, 49, 51, 54, 45, 49, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 107, 110, 117, 99, 107, 108, 101, 100, 117, 115, 116, 101, 114, 32, 49, 51, 45, 49, 51, 52, 53, 45, 49, 51, 54, 45, 49, 52, 45, 49, 51, 45, 49, 50, 51, 45, 49, 53, 45, 49, 52, 53, 45, 49, 51, 54, 45, 51, 52, 45, 49, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 45, 32, 108, 97, 110, 103, 117, 101, 32, 91, 68, 100, 93, 91, 79, 111, 93, 91, 67, 99, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 110, 111, 115, 101, 32, 91, 68, 100, 93, 91, 73, 79, 105, 111, 93, 91, 86, 118, 93, 91, 69, 73, 101, 105, 93, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 112, 105, 101, 100, 105, 115, 104, 32, 49, 50, 51, 52, 45, 50, 52, 45, 49, 53, 45, 49, 52, 53, 45, 50, 52, 45, 49, 52, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 112, 105, 110, 101, 100, 114, 111, 112, 32, 49, 50, 51, 52, 45, 51, 53, 45, 49, 53, 45, 49, 52, 53, 45, 49, 50, 51, 53, 45, 49, 51, 53, 45, 49, 50, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 112, 114, 105, 101, 100, 105, 101, 117, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 114, 111, 115, 101, 100, 114, 111, 112, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 115, 104, 111, 114, 101, 100, 105, 116, 99, 104, 32, 49, 52, 54, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 53, 45, 49, 52, 53, 45, 50, 52, 45, 50, 51, 52, 53, 45, 49, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 116, 104, 114, 101, 101, 100, 105, 109, 101, 110, 115, 105, 111, 110, 32, 49, 52, 53, 54, 45, 49, 50, 51, 53, 45, 49, 53, 45, 49, 53, 45, 49, 52, 53, 45, 50, 52, 45, 49, 51, 52, 45, 50, 54, 45, 52, 54, 45, 49, 51, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 116, 111, 110, 101, 100, 101, 97, 102, 32, 50, 51, 52, 53, 45, 53, 45, 49, 51, 53, 45, 49, 52, 53, 45, 50, 45, 49, 50, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 116, 117, 114, 116, 108, 101, 100, 111, 118, 101, 32, 50, 51, 52, 53, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 51, 45, 49, 53, 45, 49, 52, 53, 45, 49, 51, 53, 45, 49, 50, 51, 54, 45, 49, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 116, 119, 101, 101, 100, 108, 101, 100, 101, 101, 32, 50, 51, 52, 53, 45, 50, 52, 53, 54, 45, 49, 53, 45, 49, 50, 52, 54, 45, 49, 50, 51, 45, 49, 53, 45, 49, 52, 53, 45, 49, 53, 45, 49, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 116, 119, 101, 101, 100, 108, 101, 100, 117, 109, 32, 50, 51, 52, 53, 45, 50, 52, 53, 54, 45, 49, 53, 45, 49, 50, 52, 54, 45, 49, 50, 51, 45, 49, 53, 45, 49, 52, 53, 45, 49, 51, 54, 45, 49, 51, 52, 10, 98, 101, 103, 119, 111, 114, 100, 32, 118, 105, 99, 101, 100, 32, 49, 50, 51, 54, 45, 50, 52, 45, 49, 52, 45, 49, 53, 45, 49, 52, 53, 10, 97, 108, 119, 97, 121, 115, 32, 118, 105, 110, 101, 100, 114, 101, 115, 115, 32, 49, 50, 51, 54, 45, 51, 53, 45, 49, 53, 45, 49, 52, 53, 45, 49, 50, 51, 53, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 10, 35, 32, 101, 114, 10, 97, 108, 119, 97, 121, 115, 32, 101, 114, 32, 49, 50, 52, 53, 54, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 102, 111, 114, 101, 114, 117, 110, 110, 101, 114, 32, 49, 50, 51, 52, 53, 54, 45, 49, 53, 45, 49, 50, 51, 53, 45, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 51, 52, 53, 45, 49, 50, 52, 53, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 104, 101, 100, 103, 101, 114, 111, 119, 32, 49, 50, 53, 45, 49, 50, 52, 54, 45, 49, 50, 52, 53, 45, 49, 53, 45, 49, 50, 51, 53, 45, 50, 52, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 104, 111, 109, 101, 114, 111, 111, 109, 32, 49, 50, 53, 45, 49, 51, 53, 45, 49, 51, 52, 45, 49, 53, 45, 49, 50, 51, 53, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 104, 111, 114, 115, 101, 114, 97, 100, 105, 115, 104, 32, 49, 50, 53, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 45, 49, 53, 45, 49, 50, 51, 53, 45, 49, 45, 49, 52, 53, 45, 50, 52, 45, 49, 52, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 115, 112, 97, 114, 101, 114, 105, 98, 115, 32, 50, 51, 52, 45, 49, 50, 51, 52, 45, 51, 52, 53, 45, 49, 53, 45, 49, 50, 51, 53, 45, 50, 52, 45, 49, 50, 45, 50, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 115, 116, 97, 116, 101, 114, 111, 111, 109, 32, 51, 52, 45, 49, 45, 50, 51, 52, 53, 45, 49, 53, 45, 49, 50, 51, 53, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 115, 116, 111, 114, 101, 114, 111, 111, 109, 32, 51, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 53, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 118, 105, 99, 101, 114, 101, 103, 97, 108, 32, 49, 50, 51, 54, 45, 50, 52, 45, 49, 52, 45, 49, 53, 45, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 52, 53, 45, 49, 45, 49, 50, 51, 10, 115, 117, 102, 119, 111, 114, 100, 32, 118, 105, 99, 101, 114, 111, 121, 32, 49, 50, 51, 54, 45, 50, 52, 45, 49, 52, 45, 49, 53, 45, 49, 50, 51, 53, 45, 49, 51, 53, 45, 49, 51, 52, 53, 54, 10, 10, 35, 84, 79, 68, 79, 58, 32, 32, 99, 104, 101, 99, 107, 32, 112, 114, 111, 110, 117, 110, 99, 105, 97, 116, 105, 111, 110, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 97, 115, 116, 108, 101, 114, 101, 97, 103, 104, 32, 49, 52, 45, 49, 45, 51, 52, 45, 49, 50, 51, 45, 49, 53, 45, 49, 50, 51, 53, 45, 50, 45, 49, 50, 54, 10, 10, 35, 32, 103, 104, 10, 97, 108, 119, 97, 121, 115, 32, 103, 104, 32, 49, 50, 54, 10, 109, 97, 116, 99, 104, 32, 40, 37, 91, 94, 95, 126, 93, 37, 60, 42, 41, 32, 103, 104, 32, 40, 39, 40, 91, 68, 83, 84, 100, 115, 116, 93, 124, 108, 108, 124, 91, 114, 118, 93, 101, 124, 76, 76, 124, 91, 82, 86, 93, 69, 41, 41, 63, 40, 37, 62, 42, 37, 91, 94, 95, 126, 93, 41, 32, 61, 10, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 103, 104, 101, 97, 100, 32, 45, 32, 49, 50, 52, 53, 45, 49, 50, 53, 45, 50, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 103, 104, 101, 97, 112, 32, 45, 32, 49, 50, 52, 53, 45, 49, 50, 53, 45, 50, 45, 49, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 103, 104, 101, 97, 114, 32, 91, 84, 116, 93, 32, 49, 50, 52, 53, 45, 49, 50, 53, 45, 49, 53, 45, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 103, 104, 105, 108, 108, 32, 45, 32, 61, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 103, 104, 111, 108, 32, 91, 68, 69, 84, 90, 100, 101, 116, 122, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 103, 104, 111, 114, 110, 32, 45, 32, 61, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 103, 104, 111, 117, 110, 100, 32, 45, 32, 49, 50, 52, 53, 45, 49, 50, 53, 45, 52, 54, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 103, 104, 111, 117, 115, 32, 91, 69, 73, 101, 105, 93, 32, 49, 50, 52, 53, 45, 49, 50, 53, 45, 49, 50, 53, 54, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 103, 104, 117, 114, 32, 91, 83, 115, 93, 91, 84, 116, 93, 32, 61, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 117, 110, 110, 121, 110, 103, 104, 97, 109, 32, 49, 52, 45, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 51, 52, 53, 45, 49, 51, 52, 53, 54, 45, 49, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 53, 45, 49, 45, 49, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 102, 114, 111, 103, 104, 111, 112, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 104, 119, 97, 110, 103, 104, 111, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 108, 97, 110, 103, 104, 97, 105, 114, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 115, 104, 97, 110, 103, 104, 97, 105, 32, 49, 52, 54, 45, 49, 45, 49, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 53, 45, 49, 45, 50, 52, 10, 10, 35, 84, 79, 68, 79, 58, 32, 32, 99, 104, 101, 99, 107, 32, 112, 114, 111, 110, 117, 110, 99, 105, 97, 116, 105, 111, 110, 10, 115, 117, 102, 119, 111, 114, 100, 32, 115, 101, 110, 103, 104, 111, 114, 32, 50, 51, 52, 45, 50, 54, 45, 49, 50, 52, 53, 45, 49, 50, 53, 45, 49, 51, 53, 45, 49, 50, 51, 53, 10, 10, 35, 32, 105, 110, 103, 10, 109, 97, 116, 99, 104, 32, 33, 37, 91, 94, 95, 126, 93, 32, 105, 110, 103, 32, 45, 32, 51, 52, 54, 10, 35, 110, 111, 102, 111, 114, 32, 101, 110, 100, 119, 111, 114, 100, 32, 105, 110, 103, 39, 91, 39, 226, 128, 153, 93, 115, 32, 51, 52, 54, 45, 51, 45, 50, 51, 52, 10, 35, 110, 111, 102, 111, 114, 32, 101, 110, 100, 119, 111, 114, 100, 32, 105, 110, 103, 108, 121, 32, 51, 52, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 109, 105, 100, 101, 110, 100, 119, 111, 114, 100, 32, 105, 110, 103, 32, 51, 52, 54, 10, 110, 111, 102, 111, 114, 32, 97, 108, 119, 97, 121, 115, 32, 105, 110, 103, 32, 51, 53, 45, 49, 50, 52, 53, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 100, 105, 115, 105, 110, 103, 101, 110, 117, 111, 117, 115, 32, 50, 53, 54, 45, 51, 53, 45, 49, 50, 52, 53, 45, 50, 54, 45, 49, 51, 54, 45, 49, 50, 53, 54, 45, 50, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 108, 101, 110, 105, 110, 103, 114, 97, 100, 32, 49, 50, 51, 45, 50, 54, 45, 51, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 45, 49, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 115, 116, 97, 108, 105, 110, 103, 114, 97, 100, 32, 51, 52, 45, 49, 45, 49, 50, 51, 45, 51, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 45, 49, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 118, 97, 105, 110, 103, 108, 111, 114, 105, 111, 117, 115, 32, 49, 50, 51, 54, 45, 49, 45, 51, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 50, 52, 45, 49, 50, 53, 54, 45, 50, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 118, 97, 105, 110, 103, 108, 111, 114, 121, 32, 49, 50, 51, 54, 45, 49, 45, 51, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 54, 10, 10, 35, 32, 111, 117, 10, 97, 108, 119, 97, 121, 115, 32, 111, 117, 32, 49, 50, 53, 54, 10, 35, 109, 97, 116, 99, 104, 32, 40, 37, 91, 94, 95, 126, 93, 37, 60, 42, 41, 32, 111, 117, 32, 40, 91, 39, 226, 128, 153, 93, 40, 91, 68, 83, 84, 100, 115, 116, 93, 124, 108, 108, 124, 91, 114, 118, 93, 101, 124, 76, 76, 124, 91, 82, 86, 93, 69, 41, 41, 63, 40, 37, 62, 42, 37, 91, 94, 95, 126, 93, 41, 32, 61, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 112, 114, 111, 117, 110, 105, 111, 110, 32, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 51, 53, 45, 49, 51, 54, 45, 49, 51, 52, 53, 45, 50, 52, 45, 49, 51, 53, 45, 49, 51, 52, 53, 10, 10, 35, 32, 111, 119, 10, 97, 108, 119, 97, 121, 115, 32, 111, 119, 32, 50, 52, 54, 10, 97, 108, 119, 97, 121, 115, 32, 111, 119, 111, 114, 107, 32, 49, 51, 53, 45, 53, 45, 50, 52, 53, 54, 32, 32, 105, 110, 32, 79, 87, 79, 82, 75, 44, 32, 116, 104, 101, 32, 87, 79, 82, 75, 32, 115, 105, 103, 110, 32, 116, 97, 107, 101, 115, 32, 32, 112, 114, 105, 111, 114, 105, 116, 121, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 107, 105, 108, 111, 119, 97, 116, 116, 32, 49, 51, 45, 50, 52, 45, 49, 50, 51, 45, 49, 51, 53, 45, 50, 52, 53, 54, 45, 49, 45, 50, 51, 52, 53, 45, 50, 51, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 108, 111, 99, 111, 119, 101, 101, 100, 32, 49, 50, 51, 45, 49, 51, 53, 45, 49, 52, 45, 49, 51, 53, 45, 50, 52, 53, 54, 45, 49, 53, 45, 49, 50, 52, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 109, 111, 110, 111, 119, 104, 101, 101, 108, 32, 49, 51, 52, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 51, 53, 45, 49, 53, 54, 45, 49, 53, 45, 49, 53, 45, 49, 50, 51, 10, 115, 117, 102, 119, 111, 114, 100, 32, 110, 111, 119, 97, 121, 32, 49, 51, 52, 53, 45, 49, 51, 53, 45, 50, 52, 53, 54, 45, 49, 45, 49, 51, 52, 53, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 110, 111, 119, 104, 101, 114, 101, 32, 49, 51, 52, 53, 45, 49, 51, 53, 45, 53, 45, 49, 53, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 110, 111, 119, 105, 115, 101, 32, 49, 51, 52, 53, 45, 49, 51, 53, 45, 50, 52, 53, 54, 45, 50, 52, 45, 50, 51, 52, 45, 49, 53, 10, 10, 35, 32, 115, 104, 10, 97, 108, 119, 97, 121, 115, 32, 115, 104, 32, 49, 52, 54, 10, 109, 97, 116, 99, 104, 32, 40, 37, 91, 94, 95, 126, 93, 37, 60, 42, 41, 32, 115, 104, 32, 40, 91, 39, 226, 128, 153, 93, 40, 91, 68, 83, 84, 100, 115, 116, 93, 124, 108, 108, 124, 91, 114, 118, 93, 101, 124, 76, 76, 124, 91, 82, 86, 93, 69, 41, 41, 63, 40, 37, 62, 42, 37, 91, 94, 95, 126, 93, 41, 32, 61, 10, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 115, 104, 101, 97, 100, 32, 45, 32, 50, 51, 52, 45, 49, 50, 53, 45, 50, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 115, 104, 101, 105, 109, 32, 45, 32, 61, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 115, 104, 111, 108, 101, 32, 40, 91, 83, 115, 93, 124, 40, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 41, 63, 37, 62, 42, 37, 91, 94, 95, 126, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 115, 104, 111, 111, 100, 32, 45, 32, 61, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 115, 104, 111, 117, 110, 100, 32, 45, 32, 50, 51, 52, 45, 49, 50, 53, 45, 52, 54, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 115, 104, 111, 117, 115, 32, 91, 69, 73, 101, 105, 93, 32, 50, 51, 52, 45, 49, 50, 53, 45, 49, 50, 53, 54, 45, 50, 51, 52, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 98, 101, 116, 115, 104, 97, 110, 103, 101, 114, 32, 49, 50, 45, 49, 53, 45, 50, 51, 52, 53, 45, 50, 51, 52, 45, 49, 50, 53, 45, 49, 45, 49, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 52, 53, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 98, 111, 115, 104, 97, 109, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 104, 105, 115, 104, 111, 108, 109, 32, 49, 54, 45, 50, 52, 45, 50, 51, 52, 45, 49, 50, 53, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 51, 52, 10, 109, 97, 116, 99, 104, 32, 45, 32, 99, 114, 111, 115, 115, 32, 91, 72, 104, 93, 32, 61, 32, 99, 114, 111, 115, 115, 104, 97, 105, 114, 44, 32, 99, 114, 111, 115, 115, 104, 97, 116, 99, 104, 44, 32, 101, 116, 99, 10, 115, 117, 102, 119, 111, 114, 100, 32, 100, 97, 99, 104, 115, 104, 117, 110, 100, 32, 49, 52, 53, 45, 49, 45, 49, 54, 45, 50, 51, 52, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 100, 101, 115, 104, 97, 98, 105, 108, 108, 101, 32, 49, 52, 53, 45, 49, 53, 45, 50, 51, 52, 45, 49, 50, 53, 45, 49, 45, 49, 50, 45, 50, 52, 45, 49, 50, 51, 45, 49, 50, 51, 45, 49, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 102, 114, 101, 100, 101, 114, 105, 107, 115, 104, 97, 118, 110, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 45, 49, 50, 52, 53, 54, 45, 50, 52, 45, 49, 51, 45, 50, 51, 52, 45, 49, 50, 53, 45, 49, 45, 49, 50, 51, 54, 45, 49, 51, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 103, 101, 109, 115, 104, 111, 114, 110, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 103, 111, 115, 104, 97, 119, 107, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 103, 114, 97, 115, 115, 104, 111, 112, 112, 101, 114, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 45, 50, 51, 52, 45, 50, 51, 52, 45, 49, 50, 53, 45, 49, 51, 53, 45, 49, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 103, 114, 105, 109, 115, 104, 111, 108, 109, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 104, 97, 114, 116, 115, 104, 111, 114, 110, 32, 49, 50, 53, 45, 51, 52, 53, 45, 50, 51, 52, 53, 45, 50, 51, 52, 45, 49, 50, 53, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 107, 101, 101, 115, 104, 111, 110, 100, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 109, 97, 108, 101, 115, 104, 101, 114, 98, 32, 49, 51, 52, 45, 49, 45, 49, 50, 51, 45, 49, 53, 45, 50, 51, 52, 45, 49, 50, 53, 45, 49, 50, 52, 53, 54, 45, 49, 50, 10, 115, 117, 102, 119, 111, 114, 100, 32, 109, 97, 110, 115, 104, 111, 108, 116, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 109, 105, 115, 104, 97, 110, 100, 108, 101, 32, 49, 51, 52, 45, 50, 52, 45, 50, 51, 52, 45, 49, 50, 53, 45, 49, 50, 51, 52, 54, 45, 49, 50, 51, 45, 49, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 109, 105, 115, 104, 97, 110, 100, 108, 101, 100, 32, 49, 51, 52, 45, 50, 52, 45, 50, 51, 52, 45, 49, 50, 53, 45, 49, 50, 51, 52, 54, 45, 49, 50, 51, 45, 49, 50, 52, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 109, 105, 115, 104, 97, 110, 100, 108, 105, 110, 103, 32, 49, 51, 52, 45, 50, 52, 45, 50, 51, 52, 45, 49, 50, 53, 45, 49, 50, 51, 52, 54, 45, 49, 50, 51, 45, 51, 52, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 109, 105, 115, 104, 97, 112, 32, 49, 51, 52, 45, 50, 52, 45, 50, 51, 52, 45, 49, 50, 53, 45, 49, 45, 49, 50, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 109, 105, 115, 104, 101, 97, 114, 32, 49, 51, 52, 45, 50, 52, 45, 50, 51, 52, 45, 49, 50, 53, 45, 49, 53, 45, 51, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 109, 105, 115, 104, 105, 116, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 110, 101, 119, 115, 104, 97, 119, 107, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 110, 101, 119, 115, 104, 101, 110, 32, 49, 51, 52, 53, 45, 49, 53, 45, 50, 52, 53, 54, 45, 50, 51, 52, 45, 49, 50, 53, 45, 50, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 114, 97, 109, 115, 104, 111, 114, 110, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 114, 111, 115, 109, 101, 114, 115, 104, 111, 108, 109, 32, 49, 50, 51, 53, 45, 49, 51, 53, 45, 50, 51, 52, 45, 49, 51, 52, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 45, 49, 50, 53, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 116, 111, 119, 110, 115, 104, 101, 110, 100, 32, 50, 51, 52, 53, 45, 50, 52, 54, 45, 49, 51, 52, 53, 45, 50, 51, 52, 45, 49, 50, 53, 45, 50, 54, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 45, 32, 116, 114, 97, 110, 115, 104, 117, 109, 32, 91, 65, 97, 93, 91, 78, 110, 93, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 117, 110, 100, 105, 115, 104, 101, 97, 114, 116, 101, 110, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 52, 53, 45, 50, 52, 45, 50, 51, 52, 45, 49, 50, 53, 45, 49, 53, 45, 51, 52, 53, 45, 50, 51, 52, 53, 45, 50, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 119, 101, 105, 115, 115, 104, 111, 114, 110, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 119, 105, 108, 104, 101, 108, 109, 115, 104, 97, 118, 101, 110, 32, 50, 52, 53, 54, 45, 50, 52, 45, 49, 50, 51, 45, 49, 50, 53, 45, 49, 53, 45, 49, 50, 51, 45, 49, 51, 52, 45, 50, 51, 52, 45, 49, 50, 53, 45, 49, 45, 49, 50, 51, 54, 45, 50, 54, 10, 10, 35, 32, 115, 116, 10, 97, 108, 119, 97, 121, 115, 32, 115, 116, 32, 51, 52, 10, 109, 97, 116, 99, 104, 32, 40, 37, 91, 94, 95, 126, 93, 37, 60, 42, 41, 32, 115, 116, 32, 40, 91, 39, 226, 128, 153, 93, 40, 91, 68, 83, 84, 100, 115, 116, 93, 124, 108, 108, 124, 91, 114, 118, 93, 101, 124, 76, 76, 124, 91, 82, 86, 93, 69, 41, 41, 63, 40, 37, 62, 42, 37, 91, 94, 95, 126, 93, 41, 32, 61, 10, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 115, 116, 105, 111, 110, 32, 45, 32, 50, 51, 52, 45, 53, 54, 45, 49, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 115, 116, 111, 119, 110, 32, 45, 32, 50, 51, 52, 45, 50, 51, 52, 53, 45, 50, 52, 54, 45, 49, 51, 52, 53, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 97, 115, 116, 104, 109, 97, 32, 49, 45, 50, 51, 52, 45, 49, 52, 53, 54, 45, 49, 51, 52, 45, 49, 10, 115, 117, 102, 119, 111, 114, 100, 32, 98, 117, 110, 100, 101, 115, 116, 97, 103, 32, 49, 50, 45, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 52, 53, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 53, 45, 49, 45, 49, 50, 52, 53, 10, 109, 97, 116, 99, 104, 32, 45, 32, 99, 114, 111, 115, 115, 32, 91, 84, 116, 93, 32, 61, 32, 99, 114, 111, 115, 115, 116, 105, 101, 32, 99, 114, 111, 115, 115, 116, 114, 101, 101, 115, 32, 101, 116, 99, 10, 115, 117, 102, 119, 111, 114, 100, 32, 100, 101, 115, 116, 111, 117, 99, 104, 101, 32, 49, 52, 53, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 53, 45, 49, 50, 53, 54, 45, 49, 54, 45, 49, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 103, 97, 115, 116, 105, 103, 104, 116, 32, 49, 50, 52, 53, 45, 49, 45, 50, 51, 52, 45, 50, 51, 52, 53, 45, 50, 52, 45, 49, 50, 54, 45, 50, 51, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 103, 111, 114, 100, 111, 110, 115, 116, 111, 117, 110, 32, 49, 50, 52, 53, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 52, 53, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 50, 51, 52, 45, 50, 51, 52, 53, 45, 49, 50, 53, 54, 45, 49, 51, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 103, 117, 101, 115, 115, 116, 105, 109, 97, 116, 101, 32, 49, 50, 52, 53, 45, 49, 51, 54, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 45, 50, 51, 52, 53, 45, 50, 52, 45, 49, 51, 52, 45, 49, 45, 50, 51, 52, 53, 45, 49, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 103, 117, 101, 115, 115, 116, 105, 109, 97, 116, 101, 100, 32, 49, 50, 52, 53, 45, 49, 51, 54, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 45, 50, 51, 52, 53, 45, 50, 52, 45, 49, 51, 52, 45, 49, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 103, 117, 101, 115, 115, 116, 105, 109, 97, 116, 105, 110, 103, 32, 49, 50, 52, 53, 45, 49, 51, 54, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 45, 50, 51, 52, 53, 45, 50, 52, 45, 49, 51, 52, 45, 49, 45, 50, 51, 52, 53, 45, 51, 52, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 104, 101, 112, 104, 97, 101, 115, 116, 105, 111, 110, 32, 49, 50, 53, 45, 49, 53, 45, 49, 50, 51, 52, 45, 49, 50, 53, 45, 49, 45, 49, 53, 45, 51, 52, 45, 50, 52, 45, 49, 51, 53, 45, 49, 51, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 105, 115, 116, 104, 109, 105, 32, 50, 52, 45, 50, 51, 52, 45, 49, 52, 53, 54, 45, 49, 51, 52, 45, 50, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 105, 115, 116, 104, 109, 117, 115, 32, 50, 52, 45, 50, 51, 52, 45, 49, 52, 53, 54, 45, 49, 51, 52, 45, 49, 51, 54, 45, 50, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 107, 114, 101, 105, 115, 116, 97, 103, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 108, 105, 101, 98, 101, 115, 116, 111, 100, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 109, 105, 115, 116, 105, 109, 101, 32, 49, 51, 52, 45, 50, 52, 45, 50, 51, 52, 45, 53, 45, 50, 51, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 112, 97, 105, 110, 115, 116, 97, 107, 105, 110, 103, 32, 49, 50, 51, 52, 45, 49, 45, 51, 53, 45, 50, 51, 52, 45, 50, 51, 52, 53, 45, 49, 45, 49, 51, 45, 51, 52, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 112, 97, 115, 116, 105, 109, 101, 32, 49, 50, 51, 52, 45, 49, 45, 50, 51, 52, 45, 53, 45, 50, 51, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 114, 101, 105, 99, 104, 115, 116, 97, 103, 32, 49, 50, 51, 53, 45, 49, 53, 45, 50, 52, 45, 49, 54, 45, 50, 51, 52, 45, 50, 51, 52, 53, 45, 49, 45, 49, 50, 52, 53, 10, 10, 35, 32, 116, 104, 10, 97, 108, 119, 97, 121, 115, 32, 116, 104, 32, 49, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 40, 37, 91, 94, 95, 126, 93, 37, 60, 42, 41, 32, 116, 104, 32, 40, 91, 39, 226, 128, 153, 93, 40, 91, 68, 83, 84, 100, 115, 116, 93, 124, 108, 108, 124, 91, 114, 118, 93, 101, 124, 76, 76, 124, 91, 82, 86, 93, 69, 41, 41, 63, 40, 37, 62, 42, 37, 91, 94, 95, 126, 93, 41, 32, 61, 10, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 116, 104, 97, 110, 100, 32, 45, 32, 50, 51, 52, 53, 45, 49, 50, 53, 45, 49, 50, 51, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 116, 104, 105, 108, 108, 32, 45, 32, 61, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 116, 104, 111, 108, 100, 32, 45, 32, 61, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 116, 104, 111, 111, 32, 91, 68, 75, 100, 107, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 116, 104, 111, 114, 115, 32, 91, 69, 101, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 116, 104, 111, 117, 110, 100, 32, 45, 32, 50, 51, 52, 53, 45, 49, 50, 53, 45, 52, 54, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 116, 104, 111, 117, 115, 32, 91, 69, 73, 101, 105, 93, 32, 50, 51, 52, 53, 45, 49, 50, 53, 45, 49, 50, 53, 54, 45, 50, 51, 52, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 98, 101, 101, 116, 104, 111, 118, 101, 110, 32, 49, 50, 45, 49, 53, 45, 49, 53, 45, 50, 51, 52, 53, 45, 49, 50, 53, 45, 49, 51, 53, 45, 49, 50, 51, 54, 45, 50, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 98, 111, 108, 116, 104, 111, 108, 101, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 99, 111, 97, 116, 32, 91, 72, 104, 93, 91, 65, 97, 93, 91, 78, 110, 93, 91, 71, 103, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 99, 111, 97, 116, 32, 91, 72, 104, 93, 91, 79, 111, 93, 91, 76, 108, 93, 91, 69, 101, 93, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 114, 111, 115, 116, 104, 119, 97, 105, 116, 32, 49, 52, 45, 49, 50, 51, 53, 45, 49, 51, 53, 45, 50, 51, 52, 45, 49, 52, 53, 54, 45, 50, 52, 53, 54, 45, 49, 45, 50, 52, 45, 50, 51, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 101, 115, 116, 104, 119, 97, 105, 116, 32, 49, 53, 45, 50, 51, 52, 45, 49, 52, 53, 54, 45, 50, 52, 53, 54, 45, 49, 45, 50, 52, 45, 50, 51, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 102, 108, 97, 116, 104, 111, 108, 109, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 103, 111, 97, 116, 104, 101, 114, 100, 32, 49, 50, 52, 53, 45, 49, 51, 53, 45, 49, 45, 50, 51, 52, 53, 45, 49, 50, 53, 45, 49, 50, 52, 53, 54, 45, 49, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 103, 111, 116, 116, 104, 97, 114, 100, 32, 49, 50, 52, 53, 45, 49, 51, 53, 45, 50, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 53, 45, 51, 52, 53, 45, 49, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 107, 110, 111, 116, 104, 111, 108, 101, 32, 49, 51, 45, 49, 51, 52, 53, 45, 49, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 53, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 108, 117, 102, 116, 104, 97, 110, 115, 97, 32, 49, 50, 51, 45, 49, 51, 54, 45, 49, 50, 52, 45, 50, 51, 52, 53, 45, 49, 50, 53, 45, 49, 45, 49, 51, 52, 53, 45, 50, 51, 52, 45, 49, 10, 115, 117, 102, 119, 111, 114, 100, 32, 110, 105, 103, 104, 116, 104, 97, 119, 107, 32, 49, 51, 52, 53, 45, 50, 52, 45, 49, 50, 54, 45, 50, 51, 52, 53, 45, 49, 50, 53, 45, 49, 45, 50, 52, 53, 54, 45, 49, 51, 10, 115, 117, 102, 119, 111, 114, 100, 32, 110, 117, 116, 104, 97, 116, 99, 104, 32, 49, 51, 52, 53, 45, 49, 51, 54, 45, 50, 51, 52, 53, 45, 49, 50, 53, 45, 49, 45, 50, 51, 52, 53, 45, 49, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 112, 111, 114, 116, 104, 111, 108, 101, 32, 49, 50, 51, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 53, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 112, 111, 116, 104, 97, 116, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 112, 111, 116, 104, 101, 114, 98, 32, 49, 50, 51, 52, 45, 49, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 53, 45, 49, 50, 52, 53, 54, 45, 49, 50, 10, 109, 97, 116, 99, 104, 32, 45, 32, 112, 111, 116, 104, 111, 108, 32, 91, 69, 101, 93, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 112, 111, 116, 104, 117, 110, 116, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 114, 97, 116, 104, 111, 108, 101, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 114, 105, 99, 104, 116, 104, 111, 102, 101, 110, 32, 49, 50, 51, 53, 45, 50, 52, 45, 49, 54, 45, 50, 51, 52, 53, 45, 49, 50, 53, 45, 49, 50, 51, 53, 54, 45, 50, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 115, 104, 111, 114, 116, 104, 111, 114, 110, 32, 49, 52, 54, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 53, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 45, 32, 115, 105, 103, 104, 116, 32, 91, 72, 104, 93, 91, 79, 111, 93, 91, 76, 108, 93, 91, 69, 101, 93, 32, 50, 51, 52, 45, 50, 52, 45, 49, 50, 54, 45, 50, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 45, 32, 118, 101, 110, 116, 32, 91, 72, 104, 93, 91, 79, 111, 93, 91, 76, 108, 93, 91, 69, 101, 93, 32, 49, 50, 51, 54, 45, 50, 54, 45, 50, 51, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 119, 97, 114, 116, 104, 111, 103, 32, 50, 52, 53, 54, 45, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 53, 45, 49, 51, 53, 45, 49, 50, 52, 53, 10, 10, 35, 32, 119, 104, 10, 97, 108, 119, 97, 121, 115, 32, 119, 104, 32, 49, 53, 54, 10, 109, 97, 116, 99, 104, 32, 40, 37, 91, 94, 95, 126, 93, 37, 60, 42, 41, 32, 119, 104, 32, 40, 91, 39, 226, 128, 153, 93, 40, 91, 68, 83, 84, 100, 115, 116, 93, 124, 108, 108, 124, 91, 114, 118, 93, 101, 124, 76, 76, 124, 91, 82, 86, 93, 69, 41, 41, 63, 40, 37, 62, 42, 37, 91, 94, 95, 126, 93, 41, 32, 61, 10, 10, 109, 97, 116, 99, 104, 32, 91, 65, 69, 97, 101, 93, 32, 119, 104, 97, 108, 108, 32, 45, 32, 61, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 119, 104, 101, 97, 100, 32, 45, 32, 50, 52, 53, 54, 45, 49, 50, 53, 45, 50, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 91, 65, 69, 97, 101, 93, 32, 119, 104, 111, 108, 32, 91, 69, 101, 93, 32, 61, 32, 106, 97, 119, 104, 111, 108, 101, 32, 115, 99, 114, 101, 119, 104, 111, 108, 101, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 119, 104, 111, 111, 100, 32, 45, 32, 61, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 119, 104, 111, 114, 115, 32, 91, 69, 101, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 119, 104, 111, 117, 110, 100, 32, 45, 32, 50, 52, 53, 54, 45, 49, 50, 53, 45, 52, 54, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 119, 104, 111, 117, 115, 32, 91, 69, 73, 101, 105, 93, 32, 50, 52, 53, 54, 45, 49, 50, 53, 45, 49, 50, 53, 54, 45, 50, 51, 52, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 108, 97, 119, 104, 97, 109, 109, 101, 114, 32, 49, 52, 45, 49, 50, 51, 45, 49, 45, 50, 52, 53, 54, 45, 49, 50, 53, 45, 49, 45, 49, 51, 52, 45, 49, 51, 52, 45, 49, 50, 52, 53, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 100, 101, 119, 104, 117, 114, 115, 116, 32, 49, 52, 53, 45, 49, 53, 45, 50, 52, 53, 54, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 110, 101, 119, 104, 97, 109, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 110, 101, 119, 104, 97, 118, 101, 110, 32, 49, 51, 52, 53, 45, 49, 53, 45, 50, 52, 53, 54, 45, 49, 50, 53, 45, 49, 45, 49, 50, 51, 54, 45, 50, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 112, 101, 119, 104, 111, 108, 100, 101, 114, 32, 49, 50, 51, 52, 45, 49, 53, 45, 50, 52, 53, 54, 45, 49, 50, 53, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 45, 49, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 45, 32, 114, 97, 119, 104, 105, 100, 32, 91, 69, 73, 101, 105, 93, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 115, 116, 114, 97, 119, 104, 97, 116, 32, 51, 52, 45, 49, 50, 51, 53, 45, 49, 45, 50, 52, 53, 54, 45, 49, 50, 53, 45, 49, 45, 50, 51, 52, 53, 10, 10, 35, 32, 32, 32, 49, 48, 46, 53, 32, 32, 32, 76, 111, 119, 101, 114, 32, 87, 111, 114, 100, 115, 105, 103, 110, 115, 10, 35, 32, 32, 32, 45, 32, 49, 48, 46, 53, 46, 49, 32, 32, 32, 98, 101, 32, 119, 101, 114, 101, 32, 104, 105, 115, 32, 119, 97, 115, 10, 35, 32, 32, 32, 45, 32, 49, 48, 46, 53, 46, 50, 32, 32, 32, 101, 110, 111, 117, 103, 104, 10, 35, 32, 32, 32, 45, 32, 49, 48, 46, 53, 46, 51, 32, 32, 32, 105, 110, 10, 35, 32, 32, 32, 45, 32, 49, 48, 46, 53, 46, 52, 32, 32, 32, 101, 110, 111, 117, 103, 104, 32, 105, 110, 10, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 49, 32, 43, 61, 42, 44, 46, 59, 58, 63, 33, 34, 39, 226, 128, 156, 226, 128, 157, 226, 128, 152, 226, 128, 153, 32, 32, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 111, 110, 108, 121, 32, 108, 111, 119, 101, 114, 32, 100, 111, 116, 115, 32, 40, 101, 120, 99, 101, 112, 116, 32, 104, 121, 112, 104, 101, 110, 115, 41, 10, 35, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 108, 111, 119, 101, 114, 100, 111, 116, 115, 112, 117, 110, 99, 32, 43, 61, 42, 44, 46, 63, 33, 34, 39, 226, 128, 156, 226, 128, 157, 226, 128, 152, 226, 128, 153, 10, 10, 35, 32, 98, 101, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 93, 124, 37, 91, 94, 95, 126, 93, 37, 60, 42, 91, 40, 91, 123, 93]);
fileData263.push.apply(fileData263, [32, 98, 101, 32, 37, 91, 94, 95, 93, 124, 91, 41, 125, 92, 92, 93, 93, 37, 62, 42, 37, 91, 94, 95, 126, 93, 32, 50, 51, 10, 10, 35, 32, 101, 110, 111, 117, 103, 104, 10, 119, 111, 114, 100, 32, 101, 110, 111, 117, 103, 104, 39, 115, 32, 50, 54, 45, 51, 45, 50, 51, 52, 10, 119, 111, 114, 100, 32, 101, 110, 111, 117, 103, 104, 226, 128, 153, 115, 32, 50, 54, 45, 51, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 40, 91, 92, 92, 40, 91, 123, 93, 42, 124, 91, 92, 92, 40, 91, 123, 93, 43, 37, 60, 42, 41, 32, 101, 110, 111, 117, 103, 104, 32, 40, 37, 62, 42, 91, 92, 92, 41, 92, 92, 93, 125, 93, 43, 124, 91, 92, 92, 41, 92, 92, 93, 125, 93, 42, 41, 37, 91, 94, 95, 126, 93, 32, 50, 54, 10, 97, 108, 119, 97, 121, 115, 32, 101, 110, 111, 117, 103, 104, 32, 50, 54, 45, 49, 50, 53, 54, 45, 49, 50, 54, 10, 10, 35, 32, 104, 105, 115, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 93, 124, 37, 91, 94, 95, 126, 93, 37, 60, 42, 91, 40, 91, 123, 93, 32, 104, 105, 115, 32, 37, 91, 94, 95, 93, 124, 91, 41, 125, 92, 92, 93, 93, 37, 62, 42, 37, 91, 94, 95, 126, 93, 32, 50, 51, 54, 10, 110, 111, 102, 111, 114, 32, 108, 111, 119, 119, 111, 114, 100, 32, 104, 105, 115, 32, 50, 51, 54, 10, 10, 35, 32, 105, 110, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 93, 33, 37, 91, 95, 49, 93, 42, 32, 105, 110, 32, 33, 37, 91, 95, 49, 93, 42, 37, 91, 94, 95, 93, 32, 51, 53, 10, 110, 111, 102, 111, 114, 32, 97, 108, 119, 97, 121, 115, 32, 105, 110, 32, 51, 53, 10, 10, 35, 32, 119, 97, 115, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 93, 124, 37, 91, 94, 95, 126, 93, 37, 60, 42, 91, 40, 91, 123, 93, 32, 119, 97, 115, 32, 37, 91, 94, 95, 93, 124, 91, 41, 125, 92, 92, 93, 93, 37, 62, 42, 37, 91, 94, 95, 126, 93, 32, 51, 53, 54, 10, 110, 111, 102, 111, 114, 32, 108, 111, 119, 119, 111, 114, 100, 32, 119, 97, 115, 32, 51, 53, 54, 10, 10, 35, 32, 119, 101, 114, 101, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 93, 124, 37, 91, 94, 95, 126, 93, 37, 60, 42, 91, 40, 91, 123, 93, 32, 119, 101, 114, 101, 32, 37, 91, 94, 95, 93, 124, 91, 41, 125, 92, 92, 93, 93, 37, 62, 42, 37, 91, 94, 95, 126, 93, 32, 50, 51, 53, 54, 10, 110, 111, 102, 111, 114, 32, 108, 111, 119, 119, 111, 114, 100, 32, 119, 101, 114, 101, 32, 50, 51, 53, 54, 10, 10, 10, 35, 32, 32, 32, 49, 48, 46, 54, 32, 32, 32, 76, 111, 119, 101, 114, 32, 71, 114, 111, 117, 112, 115, 105, 103, 110, 115, 10, 35, 32, 32, 32, 45, 32, 49, 48, 46, 54, 46, 49, 32, 32, 32, 32, 98, 101, 32, 99, 111, 110, 32, 100, 105, 115, 10, 35, 32, 32, 32, 45, 32, 49, 48, 46, 54, 46, 50, 32, 32, 32, 32, 98, 101, 32, 99, 111, 110, 32, 100, 105, 115, 10, 35, 32, 32, 32, 45, 32, 49, 48, 46, 54, 46, 51, 32, 32, 32, 32, 98, 101, 32, 99, 111, 110, 32, 100, 105, 115, 10, 35, 32, 32, 32, 45, 32, 49, 48, 46, 54, 46, 52, 32, 32, 32, 32, 98, 101, 32, 99, 111, 110, 32, 100, 105, 115, 10, 35, 32, 32, 32, 45, 32, 49, 48, 46, 54, 46, 53, 32, 32, 32, 32, 101, 97, 32, 98, 98, 32, 99, 99, 32, 102, 102, 32, 103, 103, 10, 35, 32, 32, 32, 45, 32, 49, 48, 46, 54, 46, 54, 32, 32, 32, 32, 101, 97, 32, 98, 98, 32, 99, 99, 32, 102, 102, 32, 103, 103, 10, 35, 32, 32, 32, 45, 32, 49, 48, 46, 54, 46, 55, 32, 32, 32, 32, 101, 97, 10, 35, 32, 32, 32, 45, 32, 49, 48, 46, 54, 46, 56, 32, 32, 32, 32, 101, 110, 32, 105, 110, 10, 35, 32, 32, 32, 45, 32, 49, 48, 46, 54, 46, 57, 32, 32, 32, 32, 101, 110, 10, 35, 32, 32, 32, 45, 32, 49, 48, 46, 54, 46, 49, 48, 10, 10, 35, 32, 98, 98, 32, 32, 32, 49, 48, 46, 54, 46, 53, 32, 32, 32, 49, 48, 46, 54, 46, 54, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 98, 98, 32, 37, 97, 32, 50, 51, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 100, 117, 109, 98, 98, 101, 108, 108, 32, 49, 52, 53, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 50, 45, 49, 50, 45, 49, 53, 45, 49, 50, 51, 45, 49, 50, 51, 10, 115, 117, 102, 119, 111, 114, 100, 32, 115, 117, 98, 98, 97, 115, 101, 109, 101, 110, 116, 32, 50, 51, 52, 45, 49, 51, 54, 45, 49, 50, 45, 49, 50, 45, 49, 45, 50, 51, 52, 45, 49, 53, 45, 53, 54, 45, 50, 51, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 115, 117, 98, 98, 105, 110, 103, 32, 50, 51, 52, 45, 49, 51, 54, 45, 49, 50, 45, 49, 50, 45, 51, 52, 54, 10, 10, 35, 32, 98, 101, 32, 32, 32, 49, 48, 46, 54, 46, 49, 32, 32, 32, 49, 48, 46, 54, 46, 50, 32, 32, 32, 49, 48, 46, 54, 46, 51, 32, 32, 32, 49, 48, 46, 54, 46, 52, 10, 101, 109, 112, 109, 97, 116, 99, 104, 97, 102, 116, 101, 114, 32, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 98, 101, 32, 91, 65, 97, 93, 91, 84, 116, 93, 91, 73, 105, 93, 33, 91, 78, 110, 93, 32, 50, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 101, 97, 116, 105, 42, 10, 101, 109, 112, 109, 97, 116, 99, 104, 97, 102, 116, 101, 114, 32, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 98, 101, 32, 91, 65, 97, 93, 91, 84, 116, 93, 91, 82, 114, 93, 32, 50, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 101, 97, 42, 10, 101, 109, 112, 109, 97, 116, 99, 104, 97, 102, 116, 101, 114, 32, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 98, 101, 32, 91, 67, 99, 93, 33, 91, 72, 75, 81, 104, 107, 113, 93, 32, 50, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 101, 99, 42, 10, 101, 109, 112, 109, 97, 116, 99, 104, 97, 102, 116, 101, 114, 32, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 98, 101, 32, 91, 68, 100, 93, 91, 82, 114, 93, 91, 65, 97, 93, 32, 50, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 101, 100, 114, 42, 10, 101, 109, 112, 109, 97, 116, 99, 104, 97, 102, 116, 101, 114, 32, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 98, 101, 32, 91, 68, 100, 93, 91, 69, 101, 93, 33, 40, 37, 62, 42, 37, 91, 95, 126, 94, 93, 41, 32, 50, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 101, 100, 101, 42, 10, 101, 109, 112, 109, 97, 116, 99, 104, 97, 102, 116, 101, 114, 32, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 98, 101, 32, 91, 68, 100, 93, 91, 65, 97, 93, 32, 50, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 101, 100, 42, 10, 101, 109, 112, 109, 97, 116, 99, 104, 97, 102, 116, 101, 114, 32, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 98, 101, 32, 91, 69, 101, 93, 91, 76, 108, 93, 91, 90, 122, 93, 32, 50, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 101, 101, 42, 10, 101, 109, 112, 109, 97, 116, 99, 104, 97, 102, 116, 101, 114, 32, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 98, 101, 32, 91, 71, 103, 93, 33, 91, 71, 83, 103, 115, 93, 32, 50, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 101, 103, 42, 10, 101, 109, 112, 109, 97, 116, 99, 104, 97, 102, 116, 101, 114, 32, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 98, 101, 32, 91, 73, 105, 93, 91, 78, 110, 93, 32, 50, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 101, 105, 42, 10, 101, 109, 112, 109, 97, 116, 99, 104, 97, 102, 116, 101, 114, 32, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 98, 101, 32, 91, 76, 108, 93, 91, 65, 69, 73, 79, 85, 87, 89, 97, 101, 105, 111, 117, 119, 121, 93, 32, 50, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 101, 108, 42, 10, 101, 109, 112, 109, 97, 116, 99, 104, 97, 102, 116, 101, 114, 32, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 98, 101, 32, 91, 78, 110, 93, 91, 69, 101, 93, 91, 70, 102, 93, 91, 73, 105, 93, 91, 67, 99, 93, 91, 69, 101, 93, 91, 78, 110, 93, 32, 50, 51, 32, 32, 32, 32, 98, 101, 110, 101, 102, 105, 99, 101, 110, 42, 10, 101, 109, 112, 109, 97, 116, 99, 104, 97, 102, 116, 101, 114, 32, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 98, 101, 32, 91, 78, 110, 93, 91, 69, 101, 93, 91, 84, 116, 93, 40, 91, 39, 226, 128, 153, 93, 115, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 32, 32, 32, 98, 101, 110, 101, 116, 10, 101, 109, 112, 109, 97, 116, 99, 104, 97, 102, 116, 101, 114, 32, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 98, 101, 32, 91, 78, 110, 93, 91, 69, 101, 93, 33, 91, 68, 70, 84, 100, 102, 116, 93, 32, 50, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 101, 110, 101, 42, 10, 101, 109, 112, 109, 97, 116, 99, 104, 97, 102, 116, 101, 114, 32, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 98, 101, 32, 91, 78, 110, 93, 91, 65, 73, 85, 97, 105, 117, 93, 32, 50, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 101, 110, 42, 10, 101, 109, 112, 109, 97, 116, 99, 104, 97, 102, 116, 101, 114, 32, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 98, 101, 32, 91, 82, 114, 93, 91, 65, 97, 93, 32, 50, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 101, 114, 101, 42, 10, 101, 109, 112, 109, 97, 116, 99, 104, 97, 102, 116, 101, 114, 32, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 98, 101, 32, 91, 82, 114, 93, 91, 69, 101, 93, 33, 91, 78, 110, 93, 32, 50, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 101, 114, 42, 10, 101, 109, 112, 109, 97, 116, 99, 104, 97, 102, 116, 101, 114, 32, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 98, 101, 32, 91, 83, 115, 93, 91, 84, 116, 93, 91, 73, 105, 93, 91, 82, 114, 93, 32, 50, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 101, 115, 116, 105, 42, 10, 101, 109, 112, 109, 97, 116, 99, 104, 97, 102, 116, 101, 114, 32, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 98, 101, 32, 91, 83, 115, 93, 91, 84, 116, 93, 91, 79, 82, 111, 114, 93, 32, 50, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 101, 115, 116, 42, 10, 101, 109, 112, 109, 97, 116, 99, 104, 97, 102, 116, 101, 114, 32, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 98, 101, 32, 91, 83, 115, 93, 33, 91, 83, 84, 115, 116, 93, 32, 50, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 101, 115, 42, 10, 101, 109, 112, 109, 97, 116, 99, 104, 97, 102, 116, 101, 114, 32, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 98, 101, 32, 91, 84, 116, 93, 33, 91, 67, 72, 83, 84, 99, 104, 115, 116, 39, 226, 128, 153, 93, 32, 50, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 101, 116, 42, 10, 101, 109, 112, 109, 97, 116, 99, 104, 97, 102, 116, 101, 114, 32, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 98, 101, 32, 91, 66, 70, 72, 74, 77, 79, 80, 81, 87, 88, 90, 98, 102, 104, 106, 109, 111, 112, 113, 119, 120, 122, 93, 32, 50, 51, 10, 10, 110, 111, 102, 111, 114, 32, 115, 117, 102, 119, 111, 114, 100, 32, 98, 101, 32, 50, 51, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 98, 101, 116, 104, 101, 115, 100, 97, 32, 50, 51, 45, 50, 51, 52, 54, 45, 50, 51, 52, 45, 49, 52, 53, 45, 49, 10, 10, 35, 32, 32, 32, 98, 101, 91, 99, 102, 104, 108, 110, 115, 116, 121, 93, 32, 97, 114, 101, 32, 104, 97, 110, 100, 108, 101, 100, 32, 105, 110, 32, 49, 48, 46, 57, 46, 53, 10, 119, 111, 114, 100, 32, 98, 101, 103, 32, 61, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 32, 32, 98, 101, 105, 110, 39, 32, 32, 32, 50, 51, 45, 50, 52, 45, 49, 51, 52, 53, 45, 51, 10, 97, 108, 119, 97, 121, 115, 32, 32, 32, 32, 98, 101, 116, 119, 115, 32, 32, 32, 49, 50, 45, 49, 53, 45, 50, 51, 52, 53, 45, 50, 52, 53, 54, 45, 50, 51, 52, 10, 10, 35, 32, 32, 32, 101, 97, 115, 105, 101, 114, 32, 105, 102, 32, 97, 102, 116, 101, 114, 32, 34, 98, 101, 34, 32, 99, 97, 117, 115, 101, 32, 98, 111, 116, 104, 32, 97, 114, 101, 32, 100, 111, 116, 115, 32, 50, 51, 10, 35, 32, 98, 98, 32, 32, 32, 49, 48, 46, 54, 46, 53, 32, 32, 32, 49, 48, 46, 54, 46, 54, 10, 101, 109, 112, 109, 97, 116, 99, 104, 98, 101, 102, 111, 114, 101, 32, 101, 109, 112, 109, 97, 116, 99, 104, 97, 102, 116, 101, 114, 32, 109, 97, 116, 99, 104, 32, 37, 97, 32, 98, 98, 32, 37, 97, 32, 50, 51, 10, 10, 110, 111, 102, 111, 114, 32, 109, 105, 100, 119, 111, 114, 100, 32, 98, 98, 32, 50, 51, 10, 10, 35, 32, 99, 99, 32, 32, 32, 49, 48, 46, 54, 46, 53, 32, 32, 32, 49, 48, 46, 54, 46, 54, 10, 101, 109, 112, 109, 97, 116, 99, 104, 98, 101, 102, 111, 114, 101, 32, 101, 109, 112, 109, 97, 116, 99, 104, 97, 102, 116, 101, 114, 32, 109, 97, 116, 99, 104, 32, 37, 97, 32, 99, 99, 32, 37, 97, 32, 50, 53, 10, 97, 108, 119, 97, 121, 115, 32, 99, 99, 104, 32, 49, 52, 45, 49, 54, 32, 32, 67, 72, 32, 97, 108, 119, 97, 121, 115, 32, 116, 97, 107, 101, 115, 32, 112, 114, 105, 111, 114, 105, 116, 121, 10, 109, 97, 116, 99, 104, 32, 45, 32, 99, 99, 104, 105, 108, 100, 114, 101, 110, 32, 33, 91, 65, 69, 73, 79, 85, 89, 97, 101, 105, 111, 117, 121, 93, 32, 49, 52, 45, 49, 54, 45, 49, 51, 52, 53, 32, 32, 32, 101, 100, 103, 101, 32, 99, 97, 115, 101, 32, 102, 111, 114, 32, 116, 101, 115, 116, 32, 119, 111, 114, 100, 10, 10, 110, 111, 102, 111, 114, 32, 109, 105, 100, 119, 111, 114, 100, 32, 99, 99, 32, 50, 53, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 97, 114, 99, 99, 111, 115, 105, 110, 101, 32, 51, 52, 53, 45, 49, 52, 45, 49, 52, 45, 49, 51, 53, 45, 50, 51, 52, 45, 51, 53, 45, 49, 53, 10, 10, 35, 32, 99, 111, 110, 32, 32, 32, 49, 48, 46, 54, 46, 49, 32, 32, 32, 49, 48, 46, 54, 46, 50, 32, 32, 32, 49, 48, 46, 54, 46, 51, 32, 32, 32, 49, 48, 46, 54, 46, 52, 10, 101, 109, 112, 109, 97, 116, 99, 104, 97, 102, 116, 101, 114, 32, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 99, 111, 110, 32, 91, 67, 99, 93, 33, 91, 72, 104, 93, 32, 50, 53, 10, 101, 109, 112, 109, 97, 116, 99, 104, 97, 102, 116, 101, 114, 32, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 99, 111, 110, 32, 91, 69, 101, 93, 91, 83, 115, 93, 91, 84, 116, 93, 32, 50, 53, 10, 101, 109, 112, 109, 97, 116, 99, 104, 97, 102, 116, 101, 114, 32, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 99, 111, 110, 32, 115, 37, 97, 32, 50, 53, 32, 32, 91, 67, 99, 93, 91, 79, 111, 93, 91, 78, 110, 93, 91, 83, 115, 93, 32, 32, 34, 109, 111, 100, 32, 99, 111, 110, 115, 34, 32, 49, 48, 46, 54, 46, 52, 10, 101, 109, 112, 109, 97, 116, 99, 104, 97, 102, 116, 101, 114, 32, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 99, 111, 110, 32, 91, 65, 66, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 97, 98, 100, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 93, 32, 50, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 111, 110, 97, 107, 114, 121, 32, 49, 52, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 45, 49, 51, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 111, 110, 97, 110, 32, 32, 49, 52, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 45, 49, 51, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 111, 110, 110, 101, 100, 32, 49, 52, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 51, 52, 53, 45, 49, 50, 52, 54, 10, 10, 110, 111, 102, 111, 114, 32, 98, 101, 103, 119, 111, 114, 100, 32, 99, 111, 110, 32, 50, 53, 10, 10, 35, 32, 100, 105, 115, 32, 32, 32, 49, 48, 46, 54, 46, 49, 32, 32, 32, 49, 48, 46, 54, 46, 50, 32, 32, 32, 49, 48, 46, 54, 46, 51, 32, 32, 32, 49, 48, 46, 54, 46, 52, 10, 119, 111, 114, 100, 32, 100, 105, 115, 99, 32, 49, 52, 53, 45, 50, 52, 45, 50, 51, 52, 45, 49, 52, 10, 119, 111, 114, 100, 32, 100, 105, 115, 104, 32, 49, 52, 53, 45, 50, 52, 45, 49, 52, 54, 10, 119, 111, 114, 100, 32, 100, 105, 115, 104, 101, 114, 32, 49, 52, 53, 45, 50, 52, 45, 49, 52, 54, 45, 49, 50, 52, 53, 54, 10, 119, 111, 114, 100, 32, 100, 105, 115, 104, 101, 114, 115, 32, 49, 52, 53, 45, 50, 52, 45, 49, 52, 54, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 94, 124, 33, 37, 97, 32, 100, 105, 115, 104, 105, 32, 40, 91, 69, 101, 93, 40, 91, 82, 114, 93, 124, 40, 91, 83, 115, 93, 91, 84, 116, 93, 41, 41, 41, 32, 49, 52, 53, 45, 50, 52, 45, 49, 52, 54, 45, 50, 52, 10, 119, 111, 114, 100, 32, 100, 105, 115, 104, 121, 32, 49, 52, 53, 45, 50, 52, 45, 49, 52, 54, 45, 49, 51, 52, 53, 54, 10, 119, 111, 114, 100, 32, 100, 105, 115, 115, 32, 49, 52, 53, 45, 50, 52, 45, 50, 51, 52, 45, 50, 51, 52, 10, 101, 109, 112, 109, 97, 116, 99, 104, 97, 102, 116, 101, 114, 32, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 100, 105, 115, 32, 91, 67, 99, 93, 33, 91, 83, 115, 39, 226, 128, 153, 93, 32, 50, 53, 54, 10, 101, 109, 112, 109, 97, 116, 99, 104, 97, 102, 116, 101, 114, 32, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 100, 105, 115, 32, 91, 72, 104, 93, 91, 69, 101, 93, 33, 91, 68, 83, 86, 100, 115, 118, 93, 32, 50, 53, 54, 10, 101, 109, 112, 109, 97, 116, 99, 104, 97, 102, 116, 101, 114, 32, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 100, 105, 115, 32, 91, 72, 104, 93, 33, 91, 66, 67, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 80, 82, 84, 87, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 116, 119, 39, 226, 128, 153, 93, 32, 50, 53, 54, 10, 101, 109, 112, 109, 97, 116, 99, 104, 97, 102, 116, 101, 114, 32, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 100, 105, 115, 32, 91, 80, 112, 93, 33, 91, 73, 105, 93, 32, 50, 53, 54, 10, 101, 109, 112, 109, 97, 116, 99, 104, 97, 102, 116, 101, 114, 32, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 100, 105, 115, 32, 91, 65, 66, 68, 69, 70, 71, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 100, 101, 102, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 93, 32, 50, 53, 54, 10, 10, 110, 111, 102, 111, 114, 32, 98, 101, 103, 119, 111, 114, 100, 32, 100, 105, 115, 32, 50, 53, 54, 10, 10, 119, 111, 114, 100, 32, 100, 105, 115, 117, 108, 112, 104, 105, 100, 101, 32, 49, 52, 53, 45, 50, 52, 45, 50, 51, 52, 45, 49, 51, 54, 45, 49, 50, 51, 45, 49, 50, 51, 52, 45, 49, 50, 53, 45, 50, 52, 45, 49, 52, 53, 45, 49, 53, 10, 10, 35, 32, 101, 97, 32, 32, 32, 49, 48, 46, 54, 46, 53, 32, 32, 32, 49, 48, 46, 54, 46, 54, 32, 32, 32, 49, 48, 46, 54, 46, 55, 10, 101, 109, 112, 109, 97, 116, 99, 104, 98, 101, 102, 111, 114, 101, 32, 101, 109, 112, 109, 97, 116, 99, 104, 97, 102, 116, 101, 114, 32, 109, 97, 116, 99, 104, 32, 37, 97, 32, 101, 97, 32, 37, 97, 32, 50, 10, 10, 35, 32, 32, 32, 99, 104, 101, 97, 112, 32, 102, 105, 120, 44, 32, 115, 116, 105, 108, 108, 32, 102, 97, 105, 108, 115, 32, 119, 105, 116, 104, 32, 44, 101, 97, 44, 101, 97, 44, 10, 110, 111, 102, 111, 114, 32, 97, 108, 119, 97, 121, 115, 32, 44, 32, 50, 10, 110, 111, 102, 111, 114, 32, 109, 105, 100, 119, 111, 114, 100, 32, 101, 97, 32, 50, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 97, 114, 101, 97, 119, 97, 121, 32, 51, 52, 53, 45, 50, 45, 50, 52, 53, 54, 45, 49, 45, 49, 51, 52, 53, 54, 10, 97, 108, 119, 97, 121, 115, 32, 98, 97, 116, 116, 108, 101, 97, 120, 32, 61, 10, 109, 97, 116, 99, 104, 32, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 100, 101, 32, 91, 65, 97, 93, 91, 67, 99, 93, 91, 67, 75, 81, 84, 99, 107, 113, 116, 93, 32, 61, 32, 10, 109, 97, 116, 99, 104, 32, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 100, 101, 97, 99, 101, 116, 121, 108, 32, 91, 65, 69, 73, 79, 85, 97, 101, 105, 111, 117, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 100, 101, 32, 91, 65, 97, 93, 91, 67, 99, 93, 91, 73, 105, 93, 91, 68, 100, 93, 32, 61, 32, 100, 101, 97, 99, 105, 100, 105, 102, 121, 10, 109, 97, 116, 99, 104, 32, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 100, 101, 32, 91, 65, 97, 93, 91, 69, 101, 93, 91, 82, 114, 93, 91, 65, 97, 93, 32, 61, 32, 114, 101, 97, 101, 114, 97, 116, 101, 10, 109, 97, 116, 99, 104, 32, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 100, 101, 32, 91, 65, 97, 93, 91, 70, 102, 93, 91, 70, 102, 93, 32, 61, 32, 100, 101, 97, 102, 102, 111, 114, 101, 115, 116, 10, 115, 117, 102, 119, 111, 114, 100, 32, 100, 101, 97, 105, 114, 32, 61, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 100, 101, 97, 108, 32, 91, 65, 97, 93, 91, 84, 116, 93, 91, 69, 73, 101, 105, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 100, 101, 97, 108, 98, 32, 91, 65, 97, 93, 91, 84, 116, 93, 91, 69, 73, 101, 105, 93, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 100, 101, 97, 108, 98, 117, 109, 105, 110, 32, 49, 52, 53, 45, 49, 53, 45, 49, 45, 49, 50, 51, 45, 49, 50, 45, 49, 51, 54, 45, 49, 51, 52, 45, 51, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 100, 101, 97, 108, 99, 111, 104, 111, 108, 32, 61, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 100, 101, 97, 108, 107, 32, 91, 65, 89, 97, 121, 93, 91, 76, 108, 93, 32, 61, 10, 98, 101, 103, 119, 111, 114, 100, 32, 100, 101, 97, 108, 108, 32, 61, 32, 100, 101, 97, 108, 108, 111, 99, 97, 116, 101, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 100, 101, 97, 109, 98, 117, 108, 32, 91, 65, 97, 93, 91, 84, 116, 93, 91, 65, 69, 73, 79, 85, 97, 101, 105, 111, 117, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 100, 101, 97, 109, 32, 91, 73, 105, 93, 91, 68, 78, 100, 110, 93, 91, 65, 73, 97, 105, 93, 91, 83, 84, 90, 115, 116, 122, 93, 91, 65, 69, 73, 97, 101, 105, 93, 32, 61, 32, 100, 101, 97, 109, 105, 100, 97, 115, 101, 44, 32, 100, 101, 97, 109, 105, 110, 105, 122, 97, 116, 105, 111, 110, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 100, 101, 97, 110, 97, 116, 104, 101, 109, 97, 116, 105, 32, 91, 83, 90, 115, 122, 93, 91, 65, 69, 73, 97, 101, 105, 93, 32, 49, 52, 53, 45, 49, 53, 45, 49, 45, 49, 51, 52, 53, 45, 49, 45, 50, 51, 52, 54, 45, 49, 51, 52, 45, 49, 45, 50, 51, 52, 53, 45, 50, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 100, 101, 97, 110, 105, 109, 97, 108, 32, 91, 73, 105, 93, 91, 83, 90, 115, 122, 93, 91, 65, 69, 73, 97, 101, 105, 93, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 100, 101, 97, 110, 116, 104, 114, 111, 112, 111, 32, 49, 52, 53, 45, 49, 53, 45, 49, 45, 49, 51, 52, 53, 45, 49, 52, 53, 54, 45, 49, 50, 51, 53, 45, 49, 51, 53, 45, 49, 50, 51, 52, 45, 49, 51, 53, 10, 98, 101, 103, 119, 111, 114, 100, 32, 100, 101, 97, 112, 112, 32, 61, 32, 100, 101, 97, 112, 112, 101, 116, 105, 115, 101, 10, 115, 117, 102, 119, 111, 114, 100, 32, 100, 101, 97, 115, 104, 32, 49, 52, 53, 45, 49, 53, 45, 49, 45, 49, 52, 54, 32, 100, 101, 97, 115, 104, 10, 98, 101, 103, 119, 111, 114, 100, 32, 100, 101, 97, 115, 112, 32, 61, 32, 100, 101, 97, 115, 112, 105, 114, 97, 116, 101, 10, 98, 101, 103, 119, 111, 114, 100, 32, 100, 101, 97, 115, 115, 32, 61, 32, 100, 101, 97, 115, 115, 105, 103, 110, 10, 109, 97, 116, 99, 104, 32, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 100, 101, 97, 117, 32, 91, 82, 114, 93, 32, 61, 32, 100, 101, 97, 117, 114, 105, 99, 117, 108, 97, 116, 101, 10, 109, 97, 116, 99, 104, 32, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 100, 101, 97, 117, 32, 91, 84, 116, 93, 91, 72, 104, 93, 32, 61, 32, 100, 101, 97, 117, 116, 104, 111, 114, 105, 115, 101, 10, 109, 105, 100, 101, 110, 100, 119, 111, 114, 100, 32, 101, 97, 110, 99, 101, 32, 49, 53, 45, 52, 54, 45, 49, 53, 32, 118, 101, 110, 103, 101, 97, 110, 99, 101, 10, 109, 105, 100, 101, 110, 100, 119, 111, 114, 100, 32, 101, 97, 110, 100, 32, 49, 53, 45, 49, 50, 51, 52, 54, 32, 109, 101, 97, 110, 100, 101, 114, 10, 97, 108, 119, 97, 121, 115, 32, 101, 97, 114, 32, 49, 53, 45, 51, 52, 53, 10, 109, 105, 100, 101, 110, 100, 119, 111, 114, 100, 32, 101, 97, 119, 97, 121, 32, 49, 53, 45, 49, 45, 50, 52, 53, 54, 45, 49, 45, 49, 51, 52, 53, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 102, 108, 101, 97, 114, 105, 100, 100, 101, 110, 32, 49, 50, 52, 45, 49, 50, 51, 45, 50, 45, 49, 50, 51, 53, 45, 50, 52, 45, 49, 52, 53, 45, 49, 52, 53, 45, 50, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 103, 101, 97, 110, 116, 105, 99, 108, 105, 110, 101, 32, 49, 50, 52, 53, 45, 49, 53, 45, 49, 45, 49, 51, 52, 53, 45, 50, 51, 52, 53, 45, 50, 52, 45, 49, 52, 45, 49, 50, 51, 45, 51, 53, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 45, 32, 104, 111, 117, 115, 101, 32, 91, 65, 97, 93, 91, 71, 103, 93, 91, 69, 101, 93, 91, 78, 110, 93, 91, 67, 84, 99, 116, 93, 32, 49, 50, 53, 45, 49, 50, 53, 54, 45, 50, 51, 52, 45, 49, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 108, 101, 97, 114, 105, 103, 32, 49, 50, 51, 45, 50, 45, 49, 50, 51, 53, 45, 50, 52, 45, 49, 50, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 108, 105, 109, 101, 97, 100, 101, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 111, 114, 97, 110, 103, 101, 97, 100, 101, 32, 61, 10, 97, 108, 119, 97, 121, 115, 32, 112, 105, 110, 101, 97, 112, 112, 108, 101, 32, 49, 50, 51, 52, 45, 51, 53, 45, 49, 53, 45, 49, 45, 49, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 51, 45, 49, 53, 10, 97, 108, 119, 97, 121, 115, 32, 112, 111, 108, 101, 97, 120, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 112, 114, 101, 97, 99, 104, 105, 101, 118, 32, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 53, 45, 49, 45, 49, 54, 45, 50, 52, 45, 49, 53, 45, 49, 50, 51, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 112, 114, 101, 97, 99, 104, 32, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 50, 45, 49, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 112, 114, 101, 97, 107, 110, 101, 115, 115, 32, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 50, 45, 49, 51, 45, 53, 54, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 112, 114, 101, 32, 91, 65, 97, 93, 32, 61, 32, 100, 101, 102, 97, 117, 108, 116, 32, 99, 97, 115, 101, 32, 102, 111, 114, 32, 112, 114, 101, 97, 45, 32, 119, 111, 114, 100, 115, 10, 109, 97, 116, 99, 104, 32, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 114, 101, 32, 91, 65, 97, 93, 91, 66, 98, 93, 32, 61, 32, 114, 101, 97, 98, 115, 111, 114, 98, 10, 109, 97, 116, 99, 104, 32, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 114, 101, 32, 91, 65, 97, 93, 91, 67, 99, 93, 91, 67, 75, 81, 99, 107, 113, 93, 32, 61, 32, 114, 101, 97, 99, 99, 117, 115, 116, 111, 109, 44, 32, 114, 101, 97, 99, 107, 110, 111, 119, 108, 101, 100, 103, 101, 10, 109, 97, 116, 99, 104, 32, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 114, 101, 97, 99, 101, 116, 121, 108, 32, 91, 65, 69, 73, 79, 85, 97, 101, 105, 111, 117, 93, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 114, 101, 97, 99, 104, 105, 101, 118, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 45, 49, 54, 45, 50, 52, 45, 49, 53, 45, 49, 50, 51, 54, 10, 109, 97, 116, 99, 104, 32, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 114, 101, 32, 91, 65, 97, 93, 91, 67, 99, 93, 91, 73, 105, 93, 91, 68, 100, 93, 32, 61, 32, 114, 101, 97, 99, 105, 100, 105, 102, 121, 10, 109, 97, 116, 99, 104, 32, 32, 45, 32, 32, 114, 101, 32, 91, 65, 97, 93, 91, 67, 99, 93, 91, 84, 116, 93, 32, 61, 32, 114, 101, 97, 99, 116, 32, 97, 110, 100, 32, 97, 108, 108, 32, 100, 101, 114, 105, 118, 97, 116, 105, 118, 101, 115, 10, 98, 101, 103, 119, 111, 114, 100, 32, 114, 101, 97, 100, 97, 112, 32, 61, 32, 114, 101, 97, 100, 97, 112, 116, 10, 115, 117, 102, 119, 111, 114, 100, 32, 114, 101, 97, 100, 100, 32, 61, 32, 114, 101, 97, 100, 100, 32, 114, 101, 97, 100, 100, 114, 101, 115, 115, 10, 109, 97, 116, 99, 104, 32, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 114, 101, 97, 100, 32, 91, 72, 104, 93, 91, 69, 101, 93, 91, 82, 83, 114, 115, 93, 32, 61, 32, 114, 101, 97, 100, 104, 101, 114, 101, 32, 97, 110, 100, 32, 100, 101, 114, 105, 118, 97, 116, 105, 118, 101, 115, 10, 98, 101, 103, 119, 111, 114, 100, 32, 114, 101, 97, 100, 106, 32, 61, 32, 114, 101, 97, 100, 106, 117, 115, 116, 10, 119, 111, 114, 100, 32, 114, 101, 97, 100, 109, 101, 32, 49, 50, 51, 53, 45, 50, 45, 49, 52, 53, 45, 49, 51, 52, 45, 49, 53, 10, 119, 111, 114, 100, 32, 114, 101, 97, 100, 109, 101, 115, 32, 49, 50, 51, 53, 45, 50, 45, 49, 52, 53, 45, 49, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 98, 101, 103, 119, 111, 114, 100, 32, 114, 101, 97, 100, 109, 32, 61, 32, 114, 101, 97, 100, 109, 105, 116, 10, 115, 117, 102, 119, 111, 114, 100, 32, 114, 101, 97, 100, 111, 110, 108, 121, 32, 49, 50, 51, 53, 45, 50, 45, 49, 52, 53, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 114, 101, 97, 100, 111, 117, 116, 32, 49, 50, 51, 53, 45, 50, 45, 49, 52, 53, 45, 49, 50, 53, 54, 45, 50, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 114, 101, 32, 91, 65, 97, 93, 91, 68, 100, 93, 91, 79, 111, 93, 32, 61, 32, 114, 101, 97, 100, 111, 112, 116, 32, 114, 101, 97, 100, 111, 114, 110, 10, 98, 101, 103, 119, 111, 114, 100, 32, 114, 101, 97, 100, 118, 32, 61, 32, 114, 101, 97, 100, 118, 97, 110, 99, 101, 32, 114, 101, 97, 100, 118, 105, 115, 101, 10, 109, 97, 116, 99, 104, 32, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 114, 101, 32, 91, 65, 97, 93, 91, 69, 101, 93, 91, 82, 114, 93, 91, 65, 97, 93, 32, 61, 32, 114, 101, 97, 101, 114, 97, 116, 101, 10, 109, 97, 116, 99, 104, 32, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 114, 101, 32, 91, 65, 97, 93, 91, 70, 102, 93, 91, 70, 102, 93, 32, 61, 32, 114, 101, 97, 102, 102, 105, 114, 109, 32, 114, 101, 97, 102, 102, 111, 114, 101, 115, 116, 10, 115, 117, 102, 119, 111, 114, 100, 32, 114, 101, 97, 103, 97, 110, 32, 49, 50, 51, 53, 45, 50, 45, 49, 50, 52, 53, 45, 49, 45, 49, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 114, 101, 97, 103, 32, 91, 69, 101, 93, 91, 78, 110, 93, 91, 67, 84, 99, 116, 93, 32, 61, 32, 114, 101, 97, 103, 101, 110, 99, 121, 32, 114, 101, 97, 103, 101, 110, 116, 10, 109, 97, 116, 99, 104, 32, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 114, 101, 32, 91, 65, 97, 93, 91, 71, 103, 93, 91, 71, 103, 93, 32, 61, 32, 114, 101, 97, 103, 103, 114, 101, 103, 97, 116, 101, 10, 115, 117, 102, 119, 111, 114, 100, 32, 114, 101, 97, 103, 105, 116, 32, 61, 32, 114, 101, 97, 103, 105, 116, 97, 116, 101, 10, 115, 117, 102, 119, 111, 114, 100, 32, 114, 101, 97, 103, 114, 32, 61, 32, 114, 101, 97, 103, 114, 101, 101, 10, 109, 97, 116, 99, 104, 32, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 114, 101, 32, 91, 65, 97, 93, 91, 76, 108, 93, 91, 65, 97, 93, 91, 82, 114, 93, 91, 77, 109, 93, 32, 61, 32, 114, 101, 97, 108, 97, 114, 109, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 114, 101, 32, 91, 65, 97, 93, 91, 76, 108, 93, 91, 69, 101, 93, 91, 82, 114, 93, 91, 84, 116, 93, 32, 61, 32, 114, 101, 97, 108, 101, 114, 116, 10, 109, 97, 116, 99, 104, 32, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 114, 101, 32, 91, 65, 97, 93, 91, 76, 108, 93, 91, 73, 105, 93, 91, 69, 101, 93, 91, 78, 110, 93, 32, 61, 32, 114, 101, 97, 108, 105, 101, 110, 97, 116, 101, 10, 98, 101, 103, 119, 111, 114, 100, 32, 114, 101, 97, 108, 105, 103, 32, 61, 32, 114, 101, 97, 108, 105, 103, 110, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 114, 101, 97, 108, 108, 32, 91, 65, 69, 73, 79, 85, 97, 101, 105, 111, 117, 93, 32, 61, 32, 114, 101, 97, 108, 108, 101, 103, 101, 32, 114, 101, 97, 108, 108, 111, 99, 97, 116, 101, 32, 98, 117, 116, 32, 110, 111, 116, 32, 114, 101, 97, 108, 108, 121, 10, 115, 117, 102, 119, 111, 114, 100, 32, 114, 101, 97, 108, 116, 101, 114, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 45, 49, 50, 51, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 54, 10, 98, 101, 103, 119, 111, 114, 100, 32, 114, 101, 97, 109, 97, 108, 103, 32, 61, 32, 114, 101, 97, 109, 97, 108, 103, 97, 109, 97, 116, 101, 10, 115, 117, 102, 119, 111, 114, 100, 32, 114, 101, 97, 109, 97, 115, 115, 32, 61, 32, 114, 101, 97, 109, 97, 115, 115, 109, 101, 110, 116, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 114, 101, 97, 109, 32, 91, 66, 80, 98, 112, 93, 32, 61, 32, 114, 101, 97, 109, 98, 105, 116, 105, 111, 117, 115, 32, 114, 101, 97, 109, 112, 117, 116, 97, 116, 101, 10, 115, 117, 102, 119, 111, 114, 100, 32, 114, 101, 97, 109, 101, 110, 100, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 45, 49, 51, 52, 45, 50, 54, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 114, 101, 97, 109, 117, 32, 91, 83, 115, 93, 37, 97, 32, 61, 32, 114, 101, 97, 109, 117, 115, 101, 10, 98, 101, 103, 119, 111, 114, 100, 32, 114, 101, 97, 110, 32, 61, 32, 114, 101, 97, 110, 97, 108, 121, 122, 101, 44, 32, 114, 101, 97, 110, 105, 109, 97, 116, 101, 10, 98, 101, 103, 119, 111, 114, 100, 32, 114, 101, 97, 112, 111, 108, 111, 103, 32, 61, 32, 114, 101, 97, 112, 111, 108, 111, 103, 105, 122, 101, 10, 98, 101, 103, 119, 111, 114, 100, 32, 114, 101, 97, 112, 112, 32, 61, 32, 114, 101, 97, 112, 112, 101, 97, 114, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 114, 101, 32, 91, 65, 97, 93, 91, 83, 115, 93, 91, 67, 75, 80, 83, 84, 99, 107, 112, 115, 116, 93, 32, 61, 32, 32, 114, 101, 97, 115, 99, 101, 110, 100, 32, 114, 101, 97, 115, 107, 32, 114, 101, 97, 115, 112, 105, 114, 101, 32, 114, 101, 97, 115, 115, 117, 114, 101, 32, 114, 101, 97, 115, 116, 111, 110, 105, 115, 104, 10, 115, 117, 102, 119, 111, 114, 100, 32, 114, 101, 97, 115, 116, 121, 32, 49, 50, 51, 53, 45, 50, 45, 51, 52, 45, 49, 51, 52, 53, 54, 10, 98, 101, 103, 119, 111, 114, 100, 32, 114, 101, 97, 116, 116, 32, 61, 32, 114, 101, 97, 116, 116, 97, 99, 104, 32, 114, 101, 97, 116, 116, 97, 105, 110, 10, 109, 97, 116, 99, 104, 32, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 114, 101, 97, 117, 32, 91, 68, 100, 93, 32, 61, 32, 114, 101, 97, 117, 100, 105, 116, 105, 111, 110, 10, 109, 97, 116, 99, 104, 32, 94, 124, 33, 37, 97, 32, 114, 101, 97, 117, 32, 91, 84, 116, 93, 91, 72, 104, 93, 32, 61, 32, 114, 101, 97, 117, 116, 104, 111, 114, 105, 115, 101, 10, 119, 111, 114, 100, 32, 114, 101, 97, 118, 101, 32, 49, 50, 51, 53, 45, 50, 45, 49, 50, 51, 54, 45, 49, 53, 10, 119, 111, 114, 100, 32, 114, 101, 97, 118, 101, 100, 32, 49, 50, 51, 53, 45, 50, 45, 49, 50, 51, 54, 45, 49, 50, 52, 54, 10, 119, 111, 114, 100, 32, 114, 101, 97, 118, 101, 115, 32, 49, 50, 51, 53, 45, 50, 45, 49, 50, 51, 54, 45, 49, 53, 45, 50, 51, 52, 10, 119, 111, 114, 100, 32, 114, 101, 97, 118, 105, 110, 103, 32, 49, 50, 51, 53, 45, 50, 45, 49, 50, 51, 54, 45, 51, 52, 54, 10, 98, 101, 103, 119, 111, 114, 100, 32, 114, 101, 97, 118, 32, 61, 32, 114, 101, 97, 118, 97, 105, 108, 32, 114, 101, 97, 118, 101, 114, 32, 114, 101, 97, 118, 111, 105, 100, 32, 10, 98, 101, 103, 119, 111, 114, 100, 32, 114, 101, 97, 119, 32, 61, 32, 114, 101, 97, 119, 97, 107, 101, 110, 10, 115, 117, 102, 119, 111, 114, 100, 32, 115, 101, 97, 119, 97, 121, 32, 50, 51, 52, 45, 50, 45, 50, 52, 53, 54, 45, 49, 45, 49, 51, 52, 53, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 116, 101, 97, 114, 111, 111, 109, 32, 50, 51, 52, 53, 45, 50, 45, 49, 50, 51, 53, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 51, 52, 10, 98, 101, 103, 119, 111, 114, 100, 32, 117, 110, 114, 101, 97, 115, 115, 32, 61, 32, 117, 110, 114, 101, 97, 115, 115, 117, 114, 105, 110, 103, 10, 97, 108, 119, 97, 121, 115, 32, 119, 105, 100, 101, 97, 119, 97, 107, 32, 61, 10, 97, 108, 119, 97, 121, 115, 32, 119, 105, 115, 101, 97, 99, 114, 32, 61, 10, 10, 35, 84, 79, 68, 79, 58, 32, 32, 99, 104, 101, 99, 107, 32, 112, 114, 111, 110, 117, 110, 99, 105, 97, 116, 105, 111, 110, 10, 115, 117, 102, 119, 111, 114, 100, 32, 103, 105, 108, 101, 97, 100, 32, 49, 50, 52, 53, 45, 50, 52, 45, 49, 50, 51, 45, 49, 53, 45, 49, 45, 49, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 100, 101, 97, 110, 100, 114, 101, 32, 49, 52, 53, 45, 50, 45, 49, 51, 52, 53, 45, 49, 52, 53, 45, 49, 50, 51, 53, 45, 49, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 100, 101, 97, 110, 110, 97, 32, 49, 52, 53, 45, 49, 53, 45, 49, 45, 49, 51, 52, 53, 45, 49, 51, 52, 53, 45, 49, 10, 115, 117, 102, 119, 111, 114, 100, 32, 98, 111, 114, 101, 97, 115, 32, 49, 50, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 53, 45, 49, 45, 50, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 114, 111, 115, 101, 97, 110, 110, 32, 49, 50, 51, 53, 45, 49, 51, 53, 45, 50, 51, 52, 45, 49, 53, 45, 49, 45, 49, 51, 52, 53, 45, 49, 51, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 108, 101, 97, 104, 32, 49, 50, 51, 45, 49, 53, 45, 49, 45, 49, 50, 53, 10, 119, 111, 114, 100, 32, 108, 101, 97, 110, 110, 32, 49, 50, 51, 45, 49, 53, 45, 49, 45, 49, 51, 52, 53, 45, 49, 51, 52, 53, 32, 32, 32, 108, 101, 97, 110, 110, 101, 115, 115, 10, 115, 117, 102, 119, 111, 114, 100, 32, 108, 101, 97, 110, 110, 97, 32, 49, 50, 51, 45, 49, 53, 45, 49, 45, 49, 51, 52, 53, 45, 49, 51, 52, 53, 45, 49, 10, 119, 111, 114, 100, 32, 108, 101, 97, 110, 110, 101, 32, 49, 50, 51, 45, 49, 53, 45, 49, 45, 49, 51, 52, 53, 45, 49, 51, 52, 53, 45, 49, 53, 32, 32, 32, 108, 101, 97, 110, 110, 101, 115, 115, 10, 10, 35, 32, 101, 110, 32, 32, 32, 49, 48, 46, 54, 46, 56, 32, 32, 32, 49, 48, 46, 54, 46, 57, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 101, 110, 32, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 61, 32, 32, 32, 109, 117, 115, 116, 32, 98, 101, 32, 102, 105, 114, 115, 116, 10, 109, 97, 116, 99, 104, 32, 33, 37, 91, 95, 49, 93, 37, 49, 42, 32, 101, 110, 32, 45, 32, 50, 54, 10, 109, 97, 116, 99, 104, 32, 45, 32, 101, 110, 32, 37, 49, 42, 33, 37, 91, 95, 49, 93, 32, 50, 54, 10, 10, 110, 111, 102, 111, 114, 32, 97, 108, 119, 97, 121, 115, 32, 101, 110, 32, 50, 54, 10, 10, 109, 105, 100, 101, 110, 100, 119, 111, 114, 100, 32, 101, 110, 101, 115, 115, 32, 49, 53, 45, 53, 54, 45, 50, 51, 52, 32, 99, 108, 111, 115, 101, 110, 101, 115, 115, 10, 115, 117, 102, 119, 111, 114, 100, 32, 98, 108, 117, 101, 110, 111, 115, 101, 32, 49, 50, 45, 49, 50, 51, 45, 49, 51, 54, 45, 49, 53, 45, 49, 51, 52, 53, 45, 49, 51, 53, 45, 50, 51, 52, 45, 49, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 98, 111, 116, 116, 108, 101, 110, 101, 99, 107, 32, 49, 50, 45, 49, 51, 53, 45, 50, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 51, 45, 49, 53, 45, 49, 51, 52, 53, 45, 49, 53, 45, 49, 52, 45, 49, 51, 10, 115, 117, 102, 119, 111, 114, 100, 32, 102, 111, 114, 101, 110, 111, 111, 110, 32, 49, 50, 51, 52, 53, 54, 45, 49, 53, 45, 49, 51, 52, 53, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 51, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 116, 111, 101, 110, 97, 105, 108, 32, 50, 51, 52, 53, 45, 49, 51, 53, 45, 49, 53, 45, 49, 51, 52, 53, 45, 49, 45, 50, 52, 45, 49, 50, 51, 10, 115, 117, 102, 119, 111, 114, 100, 32, 116, 117, 114, 116, 108, 101, 110, 101, 99, 107, 32, 50, 51, 52, 53, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 51, 45, 49, 53, 45, 49, 51, 52, 53, 45, 49, 53, 45, 49, 52, 45, 49, 51, 10, 10, 35, 32, 102, 102, 32, 32, 32, 49, 48, 46, 54, 46, 53, 32, 32, 32, 49, 48, 46, 54, 46, 54, 10, 101, 109, 112, 109, 97, 116, 99, 104, 98, 101, 102, 111, 114, 101, 32, 101, 109, 112, 109, 97, 116, 99, 104, 97, 102, 116, 101, 114, 32, 109, 97, 116, 99, 104, 32, 37, 97, 32, 102, 102, 32, 37, 97, 32, 50, 51, 53, 10, 97, 108, 119, 97, 121, 115, 32, 102, 102, 111, 114, 32, 49, 50, 52, 45, 49, 50, 51, 52, 53, 54, 32, 70, 79, 82, 32, 97, 108, 119, 97, 121, 115, 32, 104, 97, 115, 32, 112, 114, 105, 111, 114, 105, 116, 121, 10, 10, 110, 111, 102, 111, 114, 32, 109, 105, 100, 119, 111, 114, 100, 32, 102, 102, 32, 50, 51, 53, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 104, 105, 102, 102, 111, 114, 111, 98, 101, 32, 49, 54, 45, 50, 52, 45, 50, 51, 53, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 51, 53, 45, 49, 50, 45, 49, 53, 10, 10, 35, 32, 103, 103, 32, 32, 32, 49, 48, 46, 54, 46, 53, 32, 32, 32, 49, 48, 46, 54, 46, 54, 10, 101, 109, 112, 109, 97, 116, 99, 104, 98, 101, 102, 111, 114, 101, 32, 101, 109, 112, 109, 97, 116, 99, 104, 97, 102, 116, 101, 114, 32, 109, 97, 116, 99, 104, 32, 37, 97, 32, 103, 103, 32, 37, 97, 32, 50, 51, 53, 54, 10, 10, 110, 111, 102, 111, 114, 32, 109, 105, 100, 119, 111, 114, 100, 32, 103, 103, 32, 50, 51, 53, 54, 10, 10, 35, 32, 105, 110, 32, 32, 32, 49, 48, 46, 54, 46, 56, 10, 109, 97, 116, 99, 104, 32, 33, 37, 91, 95, 49, 93, 37, 49, 42, 32, 105, 110, 32, 45, 32, 51, 53, 10, 109, 97, 116, 99, 104, 32, 45, 32, 105, 110, 32, 37, 49, 42, 33, 37, 91, 95, 49, 93, 32, 51, 53, 10, 109, 105, 100, 101, 110, 100, 119, 111, 114, 100, 32, 105, 110, 101, 115, 115, 32, 50, 52, 45, 53, 54, 45, 50, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 109, 117, 108, 116, 105, 110, 97, 116, 105, 111, 110, 97, 108, 32, 49, 51, 52, 45, 49, 51, 54, 45, 49, 50, 51, 45, 50, 51, 52, 53, 45, 51, 53, 45, 49, 45, 53, 54, 45, 49, 51, 52, 53, 45, 49, 45, 49, 50, 51, 10, 10, 10, 35, 32, 32, 32, 49, 48, 46, 55, 32, 32, 32, 73, 110, 105, 116, 105, 97, 108, 45, 76, 101, 116, 116, 101, 114, 32, 67, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 115, 10, 10, 35, 32, 99, 97, 110, 110, 111, 116, 10, 97, 108, 119, 97, 121, 115, 32, 99, 97, 110, 110, 111, 116, 32, 52, 53, 54, 45, 49, 52, 10, 10, 35, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 10, 97, 108, 119, 97, 121, 115, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 32, 53, 45, 49, 54, 10, 10, 35, 32, 100, 97, 121, 10, 97, 108, 119, 97, 121, 115, 32, 100, 97, 121, 32, 53, 45, 49, 52, 53, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 32, 32, 100, 97, 121, 97, 110, 32, 32, 32, 49, 52, 53, 45, 49, 45, 49, 51, 52, 53, 54, 45, 49, 45, 49, 51, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 32, 32, 119, 104, 97, 100, 100, 97, 121, 97, 32, 32, 32, 49, 53, 54, 45, 49, 45, 49, 52, 53, 45, 49, 52, 53, 45, 49, 45, 49, 51, 52, 53, 54, 45, 49, 10, 10, 35, 32, 101, 118, 101, 114, 32, 32, 32, 49, 48, 46, 55, 46, 52, 10, 97, 108, 119, 97, 121, 115, 32, 101, 118, 101, 114, 32, 53, 45, 49, 53, 10, 10, 97, 108, 119, 97, 121, 115, 32, 101, 101, 118, 101, 114, 32, 49, 53, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 10, 97, 108, 119, 97, 121, 115, 32, 105, 101, 118, 101, 114, 32, 50, 52, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 10, 10, 109, 97, 116, 99, 104, 32, 45, 32, 97, 110, 116, 101, 118, 101, 114, 32, 91, 83, 84, 115, 116, 93, 32, 49, 45, 49, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 98, 101, 108, 108, 101, 118, 101, 114, 110, 111, 110, 32, 49, 50, 45, 49, 53, 45, 49, 50, 51, 45, 49, 50, 51, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 49, 51, 52, 53, 45, 49, 51, 53, 45, 49, 51, 52, 53, 32, 32, 111, 108, 100, 32, 115, 112, 101, 108, 108, 105, 110, 103, 32, 111, 102, 32, 34, 66, 101, 108, 108, 101, 32, 86, 101, 114, 110, 111, 110, 34, 10, 109, 97, 116, 99, 104, 32, 45, 32, 98, 111, 117, 108, 101, 118, 101, 114, 115, 32, 91, 69, 73, 101, 105, 93, 32, 9, 49, 50, 45, 49, 50, 53, 54, 45, 49, 50, 51, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 45, 32, 100, 101, 118, 101, 114, 98, 32, 91, 65, 97, 93, 91, 76, 84, 108, 116, 93, 32, 49, 52, 53, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 49, 50, 10, 115, 117, 102, 119, 111, 114, 100, 32, 101, 99, 104, 101, 118, 101, 114, 105, 97, 32, 49, 53, 45, 49, 54, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 50, 52, 45, 49, 10, 115, 117, 102, 119, 111, 114, 100, 32, 101, 118, 101, 114, 110, 105, 97, 32, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 49, 51, 52, 53, 45, 50, 52, 45, 49, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 101, 118, 101, 114, 115, 32, 91, 69, 73, 101, 105, 93, 32, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 10, 97, 108, 119, 97, 121, 115, 32, 101, 118, 101, 114, 115, 105, 111, 110, 32, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 52, 54, 45, 49, 51, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 101, 118, 101, 114, 116, 32, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 101, 118, 101, 114, 116, 111, 110, 32, 53, 45, 49, 53, 45, 50, 51, 52, 53, 45, 49, 51, 53, 45, 49, 51, 52, 53, 10, 97, 108, 119, 97, 121, 115, 32, 101, 118, 101, 114, 116, 101, 98, 114, 97, 32, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 53, 45, 49, 53, 45, 49, 50, 45, 49, 50, 51, 53, 45, 49, 10, 97, 108, 119, 97, 121, 115, 32, 101, 118, 101, 114, 116, 105, 98, 32, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 53, 45, 50, 52, 45, 49, 50, 10, 115, 117, 102, 119, 111, 114, 100, 32, 103, 114, 101, 118, 101, 114, 97, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 49, 10, 115, 117, 102, 119, 111, 114]);
fileData263.push.apply(fileData263, [100, 32, 103, 117, 101, 110, 101, 118, 101, 114, 101, 32, 49, 50, 52, 53, 45, 49, 51, 54, 45, 50, 54, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 49, 53, 32, 118, 97, 114, 105, 97, 110, 116, 32, 115, 112, 101, 108, 108, 105, 110, 103, 10, 115, 117, 102, 119, 111, 114, 100, 32, 103, 117, 105, 110, 101, 118, 101, 114, 101, 32, 49, 50, 52, 53, 45, 49, 51, 54, 45, 51, 53, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 49, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 109, 111, 110, 116, 101, 118, 101, 114, 100, 105, 32, 49, 51, 52, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 49, 52, 53, 45, 50, 52, 10, 119, 111, 114, 100, 32, 110, 101, 118, 101, 114, 115, 32, 49, 51, 52, 53, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 32, 112, 108, 97, 99, 101, 32, 110, 97, 109, 101, 10, 115, 117, 102, 119, 111, 114, 100, 32, 112, 114, 101, 118, 101, 114, 98, 32, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 49, 50, 10, 115, 117, 102, 119, 111, 114, 100, 32, 112, 114, 101, 118, 101, 114, 110, 97, 32, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 49, 51, 52, 53, 45, 49, 10, 109, 97, 116, 99, 104, 32, 45, 32, 112, 114, 105, 109, 101, 118, 101, 114, 32, 91, 73, 79, 105, 111, 93, 32, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 50, 52, 45, 49, 51, 52, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 113, 117, 105, 110, 113, 117, 101, 118, 101, 114, 98, 32, 49, 50, 51, 52, 53, 45, 49, 51, 54, 45, 51, 53, 45, 49, 50, 51, 52, 53, 45, 49, 51, 54, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 49, 50, 10, 115, 117, 102, 119, 111, 114, 100, 32, 115, 101, 109, 105, 101, 118, 101, 114, 103, 114, 101, 101, 110, 32, 50, 51, 52, 45, 49, 53, 45, 49, 51, 52, 45, 50, 52, 45, 53, 45, 49, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 53, 45, 50, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 117, 110, 101, 118, 101, 114, 115, 32, 91, 69, 73, 101, 105, 93, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 117, 110, 101, 118, 101, 114, 116, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 118, 105, 99, 101, 118, 101, 114, 115, 97, 32, 49, 50, 51, 54, 45, 50, 52, 45, 49, 52, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 45, 49, 32, 110, 111, 114, 109, 97, 108, 108, 121, 32, 116, 119, 111, 32, 119, 111, 114, 100, 115, 10, 10, 35, 32, 32, 32, 114, 101, 118, 101, 114, 101, 110, 100, 44, 114, 101, 118, 101, 114, 121, 32, 60, 62, 32, 114, 101, 118, 101, 114, 115, 101, 44, 114, 101, 118, 101, 114, 116, 44, 114, 101, 118, 101, 114, 98, 44, 105, 114, 114, 101, 118, 101, 114, 115, 105, 98, 108, 101, 10, 10, 97, 108, 119, 97, 121, 115, 32, 114, 101, 118, 101, 114, 98, 32, 32, 32, 32, 32, 32, 32, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 49, 50, 10, 109, 97, 116, 99, 104, 32, 45, 32, 114, 101, 118, 101, 114, 100, 32, 91, 73, 105, 93, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 45, 32, 114, 101, 118, 101, 114, 100, 117, 114, 32, 91, 69, 101, 93, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 49, 52, 53, 45, 49, 51, 54, 45, 49, 50, 51, 53, 10, 97, 108, 119, 97, 121, 115, 32, 114, 101, 118, 101, 114, 115, 97, 98, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 45, 49, 45, 49, 50, 32, 98, 97, 100, 32, 115, 112, 101, 108, 108, 105, 110, 103, 32, 98, 117, 116, 32, 46, 46, 46, 10, 97, 108, 119, 97, 121, 115, 32, 114, 101, 118, 101, 114, 115, 105, 98, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 45, 50, 52, 45, 49, 50, 10, 97, 108, 119, 97, 121, 115, 32, 114, 101, 118, 101, 114, 115, 105, 102, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 45, 50, 52, 45, 49, 50, 52, 10, 10, 109, 97, 116, 99, 104, 32, 40, 91, 78, 110, 93, 91, 79, 111, 93, 91, 78, 110, 93, 41, 124, 40, 91, 85, 117, 93, 91, 78, 110, 93, 41, 32, 114, 101, 118, 101, 114, 115, 97, 108, 32, 45, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 45, 49, 45, 49, 50, 51, 10, 109, 97, 116, 99, 104, 32, 40, 91, 78, 110, 93, 91, 79, 111, 93, 91, 78, 110, 93, 41, 124, 40, 91, 85, 117, 93, 91, 78, 110, 93, 41, 32, 114, 101, 118, 101, 114, 115, 32, 91, 69, 101, 93, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 40, 91, 78, 110, 93, 91, 79, 111, 93, 91, 78, 110, 93, 41, 124, 40, 91, 85, 117, 93, 91, 78, 110, 93, 41, 32, 114, 101, 118, 101, 114, 115, 105, 110, 103, 32, 45, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 45, 51, 52, 54, 10, 109, 97, 116, 99, 104, 32, 40, 91, 78, 110, 93, 91, 79, 111, 93, 91, 78, 110, 93, 41, 124, 40, 91, 85, 117, 93, 91, 78, 110, 93, 41, 32, 114, 101, 118, 101, 114, 116, 32, 45, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 53, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 112, 114, 101, 114, 101, 118, 101, 114, 115, 97, 108, 32, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 50, 52, 53, 54, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 45, 49, 45, 49, 50, 51, 10, 115, 117, 102, 119, 111, 114, 100, 32, 112, 114, 101, 114, 101, 118, 101, 114, 115, 101, 32, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 50, 52, 53, 54, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 45, 49, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 112, 114, 101, 114, 101, 118, 101, 114, 115, 101, 100, 32, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 50, 52, 53, 54, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 45, 49, 50, 52, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 112, 114, 101, 114, 101, 118, 101, 114, 115, 105, 110, 103, 32, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 50, 52, 53, 54, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 45, 51, 52, 54, 10, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 114, 101, 118, 101, 114, 115, 32, 91, 73, 79, 105, 111, 93, 40, 94, 124, 33, 37, 97, 41, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 114, 101, 118, 101, 114, 32, 91, 69, 101, 93, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 45, 32, 114, 101, 118, 101, 114, 105, 102, 32, 91, 73, 89, 105, 121, 93, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 50, 52, 45, 49, 50, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 114, 101, 118, 101, 114, 105, 110, 103, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 51, 52, 54, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 114, 101, 118, 101, 114, 115, 97, 108, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 45, 49, 45, 49, 50, 51, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 114, 101, 118, 101, 114, 115, 32, 91, 69, 101, 93, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 114, 101, 118, 101, 114, 115, 105, 110, 103, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 45, 51, 52, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 114, 101, 118, 101, 114, 115, 105, 118, 101, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 45, 50, 52, 45, 49, 50, 51, 54, 45, 49, 53, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 114, 101, 118, 101, 114, 101, 110, 99, 101, 32, 49, 50, 51, 53, 45, 53, 45, 49, 53, 45, 53, 54, 45, 49, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 114, 101, 118, 101, 114, 101, 110, 99, 105, 110, 103, 32, 49, 50, 51, 53, 45, 53, 45, 49, 53, 45, 50, 54, 45, 49, 52, 45, 51, 52, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 114, 101, 118, 101, 114, 101, 110, 100, 32, 49, 50, 51, 53, 45, 53, 45, 49, 53, 45, 50, 54, 45, 49, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 114, 101, 118, 101, 114, 101, 110, 116, 32, 49, 50, 51, 53, 45, 53, 45, 49, 53, 45, 50, 54, 45, 50, 51, 52, 53, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 114, 101, 118, 101, 114, 116, 101, 110, 100, 32, 49, 50, 51, 53, 45, 53, 45, 49, 53, 45, 50, 51, 52, 53, 45, 50, 54, 45, 49, 52, 53, 32, 32, 114, 101, 118, 101, 114, 116, 101, 110, 100, 105, 10, 115, 117, 102, 119, 111, 114, 100, 32, 114, 101, 118, 101, 114, 116, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 117, 110, 114, 101, 118, 101, 114, 101, 100, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 49, 50, 52, 54, 10, 10, 35, 32, 32, 32, 115, 101, 118, 101, 114, 32, 60, 62, 32, 115, 101, 118, 101, 114, 101, 10, 10, 109, 97, 116, 99, 104, 32, 45, 32, 112, 101, 114, 115, 101, 118, 101, 114, 97, 32, 91, 84, 116, 93, 91, 69, 73, 101, 105, 93, 32, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 45, 53, 45, 49, 53, 45, 49, 10, 109, 97, 116, 99, 104, 32, 45, 32, 112, 101, 114, 115, 101, 118, 101, 114, 32, 91, 65, 69, 73, 97, 101, 105, 93, 32, 32, 32, 32, 32, 32, 32, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 10, 10, 109, 97, 116, 99, 104, 32, 45, 32, 115, 101, 118, 101, 114, 32, 91, 69, 101, 93, 40, 94, 124, 33, 91, 68, 100, 93, 41, 32, 50, 51, 52, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 115, 101, 118, 101, 114, 105, 115, 104, 32, 50, 51, 52, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 50, 52, 45, 49, 52, 54, 10, 109, 97, 116, 99, 104, 32, 45, 32, 115, 101, 118, 101, 114, 32, 91, 73, 105, 93, 91, 84, 116, 93, 91, 73, 89, 105, 121, 93, 32, 50, 51, 52, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 115, 101, 118, 101, 114, 117, 115, 32, 50, 51, 52, 45, 49, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 49, 51, 54, 45, 50, 51, 52, 10, 10, 97, 108, 119, 97, 121, 115, 32, 115, 101, 118, 101, 114, 101, 100, 32, 32, 50, 51, 52, 45, 53, 45, 49, 53, 45, 49, 50, 52, 54, 10, 10, 35, 32, 102, 97, 116, 104, 101, 114, 10, 97, 108, 119, 97, 121, 115, 32, 102, 97, 116, 104, 101, 114, 32, 53, 45, 49, 50, 52, 10, 10, 35, 32, 104, 97, 100, 32, 32, 32, 49, 48, 46, 55, 46, 51, 10, 97, 108, 119, 97, 121, 115, 32, 104, 97, 100, 32, 52, 53, 54, 45, 49, 50, 53, 10, 97, 108, 119, 97, 121, 115, 32, 112, 104, 97, 100, 32, 49, 50, 51, 52, 45, 49, 50, 53, 45, 49, 45, 49, 52, 53, 10, 10, 35, 84, 79, 68, 79, 58, 32, 32, 99, 104, 101, 99, 107, 32, 119, 111, 114, 100, 32, 106, 101, 104, 97, 100, 32, 61, 10, 35, 84, 79, 68, 79, 58, 32, 32, 99, 104, 101, 99, 107, 32, 119, 111, 114, 100, 32, 106, 105, 104, 97, 100, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 104, 97, 100, 101, 115, 32, 49, 50, 53, 45, 49, 45, 49, 52, 53, 45, 49, 53, 45, 50, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 104, 97, 100, 114, 105, 97, 110, 32, 49, 50, 53, 45, 49, 45, 49, 52, 53, 45, 49, 50, 51, 53, 45, 50, 52, 45, 49, 45, 49, 51, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 109, 101, 110, 104, 97, 100, 101, 110, 32, 49, 51, 52, 45, 50, 54, 45, 49, 50, 53, 45, 49, 45, 49, 52, 53, 45, 50, 54, 10, 10, 35, 32, 104, 101, 114, 101, 32, 32, 32, 49, 48, 46, 55, 46, 53, 10, 97, 108, 119, 97, 121, 115, 32, 104, 101, 114, 101, 32, 53, 45, 49, 50, 53, 10, 97, 108, 119, 97, 121, 115, 32, 104, 101, 114, 101, 100, 32, 49, 50, 53, 45, 49, 50, 52, 53, 54, 45, 49, 50, 52, 54, 32, 112, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 116, 111, 32, 115, 105, 110, 103, 108, 101, 32, 99, 101, 108, 108, 32, 115, 105, 103, 110, 115, 10, 109, 97, 116, 99, 104, 32, 45, 32, 104, 101, 114, 101, 32, 91, 69, 101, 93, 91, 78, 110, 93, 32, 49, 50, 53, 45, 49, 50, 52, 53, 54, 45, 49, 53, 10, 97, 108, 119, 97, 121, 115, 32, 104, 101, 114, 101, 110, 99, 101, 32, 49, 50, 53, 45, 49, 50, 52, 53, 54, 45, 53, 54, 45, 49, 53, 10, 97, 108, 119, 97, 121, 115, 32, 104, 101, 114, 101, 110, 99, 105, 101, 115, 32, 49, 50, 53, 45, 49, 50, 52, 53, 54, 45, 50, 54, 45, 49, 52, 45, 50, 52, 45, 49, 53, 45, 50, 51, 52, 10, 97, 108, 119, 97, 121, 115, 32, 104, 101, 114, 101, 110, 99, 121, 32, 49, 50, 53, 45, 49, 50, 52, 53, 54, 45, 50, 54, 45, 49, 52, 45, 49, 51, 52, 53, 54, 10, 97, 108, 119, 97, 121, 115, 32, 104, 101, 114, 101, 110, 100, 32, 49, 50, 53, 45, 49, 50, 52, 53, 54, 45, 50, 54, 45, 49, 52, 53, 10, 97, 108, 119, 97, 121, 115, 32, 104, 101, 114, 101, 110, 116, 32, 49, 50, 53, 45, 49, 50, 52, 53, 54, 45, 50, 54, 45, 50, 51, 52, 53, 10, 97, 108, 119, 97, 121, 115, 32, 104, 101, 114, 101, 114, 32, 49, 50, 53, 45, 49, 50, 52, 53, 54, 45, 49, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 45, 32, 104, 101, 114, 101, 115, 99, 32, 91, 69, 101, 93, 91, 78, 110, 93, 91, 67, 84, 99, 116, 93, 32, 49, 50, 53, 45, 49, 50, 52, 53, 54, 45, 49, 53, 45, 50, 51, 52, 45, 49, 52, 10, 109, 97, 116, 99, 104, 32, 45, 32, 104, 101, 114, 101, 32, 91, 83, 115, 93, 91, 69, 101, 93, 91, 83, 115, 93, 32, 49, 50, 53, 45, 49, 50, 52, 53, 54, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 45, 32, 104, 101, 114, 101, 32, 91, 83, 115, 93, 91, 73, 105, 89, 121, 93, 32, 49, 50, 53, 45, 49, 50, 52, 53, 54, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 45, 32, 104, 101, 114, 101, 32, 91, 84, 116, 93, 91, 73, 105, 93, 91, 67, 99, 93, 32, 49, 50, 53, 45, 49, 50, 52, 53, 54, 45, 49, 53, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 104, 101, 114, 101, 100, 111, 102, 97, 109, 105, 108, 32, 49, 50, 53, 45, 49, 50, 52, 53, 54, 45, 49, 50, 52, 54, 45, 49, 51, 53, 45, 49, 50, 52, 45, 49, 45, 49, 51, 52, 45, 50, 52, 45, 49, 50, 51, 10, 115, 117, 102, 119, 111, 114, 100, 32, 104, 101, 114, 101, 102, 111, 114, 100, 32, 49, 50, 53, 45, 49, 50, 52, 53, 54, 45, 49, 53, 45, 49, 50, 51, 52, 53, 54, 45, 49, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 104, 101, 114, 101, 108, 100, 32, 49, 50, 53, 45, 49, 50, 52, 53, 54, 45, 49, 53, 45, 49, 50, 51, 45, 49, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 104, 101, 114, 101, 110, 97, 99, 104, 32, 49, 50, 53, 45, 49, 50, 52, 53, 54, 45, 50, 54, 45, 49, 45, 49, 54, 10, 109, 97, 116, 99, 104, 32, 45, 32, 104, 101, 114, 101, 116, 111, 32, 91, 67, 71, 99, 103, 93, 91, 65, 72, 97, 104, 93, 32, 49, 50, 53, 45, 49, 50, 52, 53, 54, 45, 49, 53, 45, 50, 51, 52, 53, 45, 49, 51, 53, 10, 109, 97, 116, 99, 104, 32, 45, 32, 104, 101, 114, 101, 116, 114, 105, 32, 91, 67, 88, 99, 120, 93, 32, 49, 50, 53, 45, 49, 50, 52, 53, 54, 45, 49, 53, 45, 50, 51, 52, 53, 45, 49, 50, 51, 53, 45, 50, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 104, 101, 114, 101, 119, 97, 114, 100, 32, 49, 50, 53, 45, 49, 50, 52, 53, 54, 45, 49, 53, 45, 50, 52, 53, 54, 45, 51, 52, 53, 45, 49, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 104, 101, 114, 101, 122, 32, 49, 50, 53, 45, 49, 50, 52, 53, 54, 45, 49, 53, 45, 49, 51, 53, 54, 10, 109, 97, 116, 99, 104, 32, 45, 32, 112, 104, 101, 114, 101, 99, 108, 117, 32, 91, 83, 115, 93, 32, 49, 50, 51, 52, 45, 49, 50, 53, 45, 49, 50, 52, 53, 54, 45, 49, 53, 45, 49, 52, 45, 49, 50, 51, 45, 49, 51, 54, 10, 109, 97, 116, 99, 104, 32, 45, 32, 112, 104, 101, 114, 101, 99, 114, 97, 32, 91, 84, 116, 93, 91, 69, 73, 101, 105, 93, 32, 49, 50, 51, 52, 45, 49, 50, 53, 45, 49, 50, 52, 53, 54, 45, 49, 53, 45, 49, 52, 45, 49, 50, 51, 53, 45, 49, 10, 109, 97, 116, 99, 104, 32, 45, 32, 112, 104, 101, 114, 101, 109, 105, 32, 91, 65, 97, 93, 32, 49, 50, 51, 52, 45, 49, 50, 53, 45, 49, 50, 52, 53, 54, 45, 49, 53, 45, 49, 51, 52, 45, 50, 52, 10, 119, 111, 114, 100, 32, 112, 104, 101, 114, 101, 115, 32, 49, 50, 51, 52, 45, 49, 50, 53, 45, 49, 50, 52, 53, 54, 45, 49, 53, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 45, 32, 112, 104, 101, 114, 101, 32, 91, 83, 115, 93, 91, 83, 115, 93, 32, 49, 50, 51, 52, 45, 49, 50, 53, 45, 49, 50, 52, 53, 54, 45, 49, 53, 10, 10, 35, 32, 107, 110, 111, 119, 10, 97, 108, 119, 97, 121, 115, 32, 107, 110, 111, 119, 32, 53, 45, 49, 51, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 108, 117, 99, 107, 110, 111, 119, 32, 49, 50, 51, 45, 49, 51, 54, 45, 49, 52, 45, 49, 51, 45, 49, 51, 52, 53, 45, 50, 52, 54, 10, 10, 35, 32, 108, 111, 114, 100, 10, 97, 108, 119, 97, 121, 115, 32, 108, 111, 114, 100, 32, 53, 45, 49, 50, 51, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 98, 97, 99, 104, 101, 108, 111, 114, 100, 111, 109, 32, 49, 50, 45, 49, 45, 49, 54, 45, 49, 53, 45, 49, 50, 51, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 52, 53, 45, 49, 51, 53, 45, 49, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 104, 108, 111, 114, 100, 97, 110, 32, 49, 54, 45, 49, 50, 51, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 52, 53, 45, 49, 45, 49, 51, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 104, 108, 111, 114, 100, 105, 97, 122, 101, 112, 32, 49, 54, 45, 49, 50, 51, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 52, 53, 45, 50, 52, 45, 49, 45, 49, 51, 53, 54, 45, 49, 53, 45, 49, 50, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 116, 97, 105, 108, 111, 114, 100, 111, 109, 32, 61, 10, 10, 35, 32, 109, 97, 110, 121, 10, 97, 108, 119, 97, 121, 115, 32, 109, 97, 110, 121, 32, 52, 53, 54, 45, 49, 51, 52, 10, 10, 35, 32, 109, 111, 116, 104, 101, 114, 10, 97, 108, 119, 97, 121, 115, 32, 109, 111, 116, 104, 101, 114, 32, 53, 45, 49, 51, 52, 10, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 109, 111, 116, 104, 101, 114, 97, 112, 32, 91, 69, 73, 89, 101, 105, 121, 93, 32, 49, 51, 52, 45, 49, 51, 53, 45, 50, 51, 52, 54, 45, 49, 50, 51, 53, 45, 49, 45, 49, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 109, 111, 116, 104, 101, 114, 101, 32, 94, 124, 33, 37, 97, 32, 49, 51, 52, 45, 49, 51, 53, 45, 50, 51, 52, 54, 45, 49, 50, 51, 53, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 109, 111, 116, 104, 101, 114, 105, 117, 109, 32, 45, 32, 49, 51, 52, 45, 49, 51, 53, 45, 50, 51, 52, 54, 45, 49, 50, 51, 53, 45, 50, 52, 45, 49, 51, 54, 45, 49, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 109, 111, 116, 104, 101, 114, 109, 32, 45, 32, 49, 51, 52, 45, 49, 51, 53, 45, 50, 51, 52, 54, 45, 49, 50, 51, 53, 45, 49, 51, 52, 10, 10, 35, 32, 110, 97, 109, 101, 32, 32, 32, 49, 48, 46, 55, 46, 53, 10, 97, 108, 119, 97, 121, 115, 32, 110, 97, 109, 101, 32, 53, 45, 49, 51, 52, 53, 10, 97, 108, 119, 97, 121, 115, 32, 110, 97, 109, 101, 110, 116, 32, 49, 51, 52, 53, 45, 49, 45, 53, 54, 45, 50, 51, 52, 53, 32, 32, 105, 110, 32, 110, 97, 109, 101, 110, 116, 44, 32, 77, 69, 78, 84, 32, 104, 97, 115, 32, 112, 114, 105, 111, 114, 105, 116, 121, 10, 10, 109, 97, 116, 99, 104, 32, 45, 32, 101, 110, 97, 109, 101, 32, 40, 91, 68, 83, 100, 115, 93, 124, 40, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 41, 63, 37, 62, 42, 37, 91, 94, 95, 126, 93, 32, 49, 53, 45, 53, 45, 49, 51, 52, 53, 32, 102, 105, 108, 101, 110, 97, 109, 101, 32, 116, 114, 97, 100, 101, 110, 97, 109, 101, 10, 101, 110, 100, 119, 111, 114, 100, 32, 110, 97, 109, 101, 115, 101, 32, 61, 10, 101, 110, 100, 119, 111, 114, 100, 32, 110, 97, 109, 101, 115, 105, 97, 110, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 110, 97, 109, 101, 32, 91, 84, 116, 93, 91, 69, 101, 93, 91, 82, 114, 93, 32, 49, 51, 52, 53, 45, 49, 45, 49, 51, 52, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 45, 32, 110, 97, 109, 101, 32, 91, 84, 116, 93, 91, 82, 114, 93, 91, 65, 69, 73, 79, 85, 89, 97, 101, 105, 111, 117, 121, 93, 32, 49, 51, 52, 53, 45, 49, 45, 49, 51, 52, 45, 49, 53, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 97, 110, 97, 109, 101, 108, 101, 99, 104, 32, 49, 45, 49, 51, 52, 53, 45, 49, 45, 49, 51, 52, 45, 49, 53, 45, 49, 50, 51, 45, 49, 53, 45, 49, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 97, 110, 97, 109, 101, 108, 101, 107, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 97, 110, 97, 109, 101, 115, 105, 116, 32, 91, 65, 69, 73, 79, 85, 97, 101, 105, 111, 117, 93, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 97, 110, 97, 109, 101, 116, 97, 100, 114, 111, 109, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 99, 105, 110, 110, 97, 109, 32, 91, 69, 101, 93, 37, 97, 32, 49, 52, 45, 51, 53, 45, 49, 51, 52, 53, 45, 49, 45, 49, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 111, 110, 97, 109, 101, 32, 49, 52, 45, 49, 51, 53, 45, 53, 45, 49, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 45, 32, 99, 111, 114, 111, 110, 97, 109, 32, 91, 69, 101, 93, 91, 78, 110, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 94, 124, 33, 37, 97, 32, 110, 111, 110, 97, 109, 32, 91, 69, 101, 93, 37, 97, 32, 49, 51, 52, 53, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 45, 49, 51, 52, 32, 110, 111, 110, 97, 109, 101, 110, 97, 98, 108, 101, 32, 110, 111, 110, 97, 109, 101, 110, 100, 97, 98, 108, 101, 10, 109, 97, 116, 99, 104, 32, 94, 124, 33, 37, 97, 32, 117, 110, 97, 109, 32, 91, 69, 101, 93, 37, 97, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 45, 49, 51, 52, 32, 117, 110, 97, 109, 101, 108, 105, 111, 114, 97, 116, 101, 100, 32, 117, 110, 97, 109, 101, 110, 100, 97, 98, 108, 101, 32, 117, 110, 97, 109, 101, 114, 99, 101, 10, 10, 35, 32, 111, 110, 101, 32, 32, 32, 49, 48, 46, 55, 46, 54, 10, 97, 108, 119, 97, 121, 115, 32, 111, 110, 101, 32, 53, 45, 49, 51, 53, 10, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 110, 101, 97, 32, 94, 124, 33, 37, 97, 32, 61, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 110, 101, 97, 32, 91, 69, 76, 78, 83, 101, 108, 110, 115, 93, 40, 94, 124, 33, 37, 97, 41, 32, 49, 51, 53, 45, 49, 51, 52, 53, 45, 50, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 110, 101, 97, 32, 91, 68, 84, 100, 116, 93, 91, 65, 69, 73, 79, 85, 97, 101, 105, 111, 117, 93, 32, 49, 51, 53, 45, 49, 51, 52, 53, 45, 50, 10, 109, 97, 116, 99, 104, 32, 45, 32, 111, 110, 101, 99, 32, 91, 75, 84, 107, 116, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 111, 110, 101, 99, 114, 111, 32, 91, 83, 84, 115, 116, 93, 91, 69, 73, 101, 105, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 110, 101, 100, 32, 45, 32, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 50, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 110, 101, 32, 91, 69, 101, 93, 32, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 45, 32, 111, 110, 101, 103, 97, 32, 94, 124, 33, 37, 97, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 111, 110, 101, 103, 97, 32, 91, 76, 78, 84, 108, 110, 116, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 110, 101, 105, 32, 94, 124, 33, 37, 97, 32, 61, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 110, 101, 32, 91, 73, 105, 93, 91, 83, 115, 93, 91, 77, 84, 109, 116, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 110, 101, 32, 91, 73, 105, 93, 91, 84, 116, 93, 91, 73, 89, 105, 121, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 110, 101, 108, 32, 91, 65, 73, 79, 85, 97, 105, 111, 117, 93, 63, 91, 83, 115, 93, 63, 40, 94, 124, 33, 37, 97, 41, 32, 61, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 110, 101, 108, 108, 32, 94, 124, 33, 37, 97, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 111, 110, 101, 108, 108, 32, 91, 65, 69, 73, 79, 85, 89, 97, 101, 105, 111, 117, 121, 93, 32, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 45, 49, 50, 51, 45, 49, 50, 51, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 110, 101, 109, 97, 32, 91, 69, 83, 101, 115, 93, 63, 40, 94, 124, 33, 37, 97, 41, 32, 61, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 110, 101, 109, 97, 108, 32, 94, 124, 33, 37, 97, 32, 61, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 110, 101, 109, 97, 116, 32, 91, 65, 73, 79, 85, 97, 105, 111, 85, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 110, 101, 109, 101, 32, 91, 83, 115, 93, 63, 40, 94, 124, 33, 37, 97, 41, 32, 61, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 110, 101, 109, 101, 114, 32, 91, 84, 116, 93, 91, 69, 73, 101, 105, 93, 32, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 45, 49, 51, 52, 45, 49, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 110, 101, 109, 105, 32, 91, 65, 67, 97, 99, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 110, 101, 110, 32, 91, 83, 115, 93, 63, 40, 94, 124, 33, 37, 97, 41, 32, 49, 51, 53, 45, 49, 51, 52, 53, 45, 50, 54, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 110, 101, 110, 99, 101, 32, 45, 32, 49, 51, 53, 45, 49, 51, 52, 53, 45, 53, 54, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 110, 101, 110, 32, 91, 67, 68, 84, 99, 100, 116, 93, 32, 49, 51, 53, 45, 49, 51, 52, 53, 45, 50, 54, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 110, 101, 110, 101, 32, 91, 83, 115, 93, 63, 40, 94, 124, 33, 37, 97, 41, 32, 49, 51, 53, 45, 49, 51, 52, 53, 45, 50, 54, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 110, 101, 32, 91, 79, 111, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 110, 101, 112, 104, 32, 45, 32, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 45, 49, 50, 51, 52, 45, 49, 50, 53, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 110, 101, 114, 32, 45, 32, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 110, 101, 115, 101, 32, 45, 32, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 45, 50, 51, 52, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 110, 101, 115, 105, 97, 32, 45, 32, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 45, 50, 51, 52, 45, 50, 52, 45, 49, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 110, 101, 115, 105, 115, 32, 94, 124, 33, 37, 97, 32, 61, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 110, 101, 115, 113, 117, 32, 91, 69, 101, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 110, 101, 115, 115, 32, 45, 32, 49, 51, 53, 45, 53, 54, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 110, 101, 115, 116, 32, 45, 32, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 45, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 110, 101, 116, 32, 94, 124, 33, 37, 97, 32, 61, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 110, 101, 116, 97, 32, 94, 124, 33, 37, 97, 32, 61, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 110, 101, 116, 105, 32, 91, 65, 67, 83, 90, 97, 99, 115, 122, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 110, 101, 116, 32, 91, 83, 84, 90, 115, 116, 122, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 110, 101, 117, 32, 91, 77, 82, 83, 84, 109, 114, 115, 116, 93, 32, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 45, 49, 51, 54, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 110, 101, 32, 91, 70, 86, 88, 90, 102, 118, 120, 122, 93, 91, 83, 115, 93, 63, 40, 94, 124, 33, 37, 97, 41, 32, 61, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 110, 101, 120, 32, 91, 73, 105, 93, 32, 61, 10, 10, 109, 97, 116, 99, 104, 32, 45, 32, 111, 111, 110, 32, 91, 69, 101, 93, 32, 61, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 97, 98, 97, 108, 111, 110, 101, 32, 49, 45, 49, 50, 45, 49, 45, 49, 50, 51, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 97, 108, 99, 121, 111, 110, 101, 32, 49, 45, 49, 50, 51, 45, 49, 52, 45, 49, 51, 52, 53, 54, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 97, 110, 101, 109, 111, 110, 101, 32, 49, 45, 49, 51, 52, 53, 45, 49, 53, 45, 49, 51, 52, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 97, 110, 116, 105, 103, 111, 110, 101, 32, 49, 45, 49, 51, 52, 53, 45, 50, 51, 52, 53, 45, 50, 52, 45, 49, 50, 52, 53, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 97, 110, 116, 111, 110, 101, 115, 99, 117, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 97, 114, 103, 101, 109, 111, 110, 101, 32, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 53, 45, 49, 51, 52, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 98, 97, 114, 111, 110, 101, 116, 32, 49, 50, 45, 51, 52, 53, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 45, 50, 51, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 98, 97, 121, 111, 110, 101, 116, 32, 49, 50, 45, 49, 45, 49, 51, 52, 53, 54, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 45, 50, 51, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 98, 111, 110, 101, 100, 111, 103, 32, 49, 50, 45, 53, 45, 49, 51, 53, 45, 49, 52, 53, 45, 49, 51, 53, 45, 49, 50, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 98, 111, 110, 101, 100, 114, 121, 32, 49, 50, 45, 53, 45, 49, 51, 53, 45, 49, 52, 53, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 98, 111, 110, 101, 115, 116, 101, 101, 108, 32, 49, 50, 45, 53, 45, 49, 51, 53, 45, 51, 52, 45, 49, 53, 45, 49, 53, 45, 49, 50, 51, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 97, 110, 122, 111, 110, 101, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 97, 115, 115, 111, 110, 101, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 97, 115, 116, 105, 103, 108, 105, 111, 110, 101, 32, 49, 52, 45, 49, 45, 51, 52, 45, 50, 52, 45, 49, 50, 52, 53, 45, 49, 50, 51, 45, 50, 52, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 104, 105, 116, 97, 114, 114, 111, 110, 101, 32, 49, 54, 45, 50, 52, 45, 50, 51, 52, 53, 45, 51, 52, 53, 45, 49, 50, 51, 53, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 105, 99, 101, 114, 111, 110, 101, 32, 49, 52, 45, 50, 52, 45, 49, 52, 45, 49, 50, 52, 53, 54, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 108, 101, 111, 110, 101, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 108, 105, 111, 110, 101, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 111, 108, 111, 110, 101, 108, 32, 49, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 45, 49, 50, 51, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 111, 109, 101, 100, 111, 110, 101, 115, 32, 49, 52, 45, 49, 51, 53, 45, 49, 51, 52, 45, 49, 50, 52, 54, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 45, 50, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 111, 110, 101, 105, 103, 104, 32, 49, 52, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 45, 50, 52, 45, 49, 50, 54, 32, 32, 45, 98, 111, 114, 47, 98, 111, 117, 114, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 111, 110, 118, 101, 114, 115, 97, 122, 105, 111, 110, 101, 32, 50, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 45, 49, 45, 49, 51, 53, 54, 45, 50, 52, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 10, 97, 108, 119, 97, 121, 115, 32, 99, 111, 114, 111, 110, 101, 116, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 100, 97, 105, 109, 111, 110, 32, 61, 32, 112, 108, 117, 114, 97, 108, 32, 105, 115, 32, 45, 101, 115, 32, 112, 114, 111, 110, 46, 32, 45, 101, 101, 122, 10, 115, 117, 102, 119, 111, 114, 100, 32, 100, 101, 111, 110, 101, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 100, 105, 111, 110, 101, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 100, 111, 98, 108, 111, 110, 32, 61, 32, 112, 108, 117, 114, 97, 108, 32, 105, 115, 32, 45, 101, 115, 32, 112, 114, 111, 110, 46, 32, 45, 101, 101, 122, 10, 115, 117, 102, 119, 111, 114, 100, 32, 100, 111, 110, 101, 108, 115, 111, 110, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 100, 111, 110, 101, 118, 32, 91, 65, 69, 97, 101, 93, 91, 78, 110, 93, 32, 61, 10, 119, 111, 114, 100, 32, 101, 112, 117, 108, 111, 110, 101, 115, 32, 61, 10, 119, 111, 114, 100, 32, 101, 114, 105, 103, 111, 110, 101, 32, 49, 50, 52, 53, 54, 45, 50, 52, 45, 49, 50, 52, 53, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 10, 119, 111, 114, 100, 32, 102, 97, 108, 99, 111, 110, 101, 115, 32, 61, 10, 119, 111, 114, 100, 32, 103, 97, 98, 101, 114, 111, 110, 101, 115, 32, 49, 50, 52, 53, 45, 49, 45, 49, 50, 45, 49, 50, 52, 53, 54, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 45, 50, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 103, 97, 98, 111, 114, 111, 110, 101, 32, 61, 10, 119, 111, 114, 100, 32, 103, 101, 107, 107, 111, 110, 101, 115, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 103, 105, 111, 114, 103, 105, 111, 110, 101, 32, 49, 50, 52, 53, 45, 50, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 50, 52, 53, 45, 50, 52, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 104, 97, 108, 99, 121, 111, 110, 101, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 104, 101, 114, 109, 105, 111, 110, 101, 32, 49, 50, 53, 45, 49, 50, 52, 53, 54, 45, 49, 51, 52, 45, 50, 52, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 104, 111, 110, 101, 103, 103, 101, 114, 32, 49, 50, 53, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 45, 50, 51, 53, 54, 45, 49, 50, 52, 53, 54, 10, 97, 108, 119, 97, 121, 115, 32, 104, 111, 110, 101, 115, 116, 32, 49, 50, 53, 45, 53, 45, 49, 51, 53, 45, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 105, 111, 110, 101, 115, 99, 111, 32, 50, 52, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 45, 50, 51, 52, 45, 49, 52, 45, 49, 51, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 106, 97, 115, 105, 111, 110, 101, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 106, 111, 110, 101, 115, 101, 115, 32, 50, 52, 53, 45, 53, 45, 49, 51, 53, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 106, 111, 110, 101, 115, 105, 97, 110, 32, 50, 52, 53, 45, 53, 45, 49, 51, 53, 45, 50, 51, 52, 45, 50, 52, 45, 49, 45, 49, 51, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 106, 111, 110, 101, 115, 116, 111, 119, 110, 32, 50, 52, 53, 45, 53, 45, 49, 51, 53, 45, 50, 51, 52, 45, 50, 51, 52, 53, 45, 50, 52, 54, 45, 49, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 94, 124, 33, 37, 97, 32, 107, 97, 110, 111, 110, 32, 91, 69, 101, 93, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 107, 114, 111, 110, 101, 32, 49, 51, 45, 49, 50, 51, 53, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 107, 114, 111, 110, 101, 110, 32, 49, 51, 45, 49, 50, 51, 53, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 50, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 107, 114, 111, 110, 101, 114, 32, 49, 51, 45, 49, 50, 51, 53, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 50, 52, 53, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 108, 97, 101, 115, 116, 114, 121, 103, 111, 110, 101, 115, 32, 49, 50, 51, 45, 49, 45, 49, 53, 45, 51, 52, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 54, 45, 49, 50, 52, 53, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 45, 50, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 108, 97, 122, 122, 97, 114, 111, 110, 101, 32, 49, 50, 51, 45, 49, 45, 49, 51, 53, 54, 45, 49, 51, 53, 54, 45, 51, 52, 53, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 108, 117, 103, 111, 110, 101, 115, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 109, 97, 100, 114, 111, 110, 101, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 109, 97, 110, 116, 101, 108, 108, 111, 110, 101, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 109, 98, 97, 98, 111, 110, 101, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 109, 101, 114, 105, 111, 110, 101, 116, 104, 32, 49, 51, 52, 45, 49, 50, 52, 53, 54, 45, 50, 52, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 45, 49, 52, 53, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 109, 105, 110, 101, 115, 116, 114, 111, 110, 101, 32, 49, 51, 52, 45, 51, 53, 45, 49, 53, 45, 51, 52, 45, 49, 50, 51, 53, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 109, 111, 108, 105, 111, 110, 101, 115, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 109, 111, 110, 101, 99, 105, 32, 91, 65, 79, 97, 111, 93, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 109, 111, 110, 101, 103, 97, 115, 113, 117, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 109, 111, 110, 101, 109, 98, 114, 121, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 109, 111, 110, 101, 112, 105, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 109, 111, 110, 101, 116, 32, 49, 51, 52, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 45, 50, 51, 52, 53, 10, 119, 111, 114, 100, 32, 109, 111, 110, 101, 116, 104, 32, 49, 51, 52, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 45, 49, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 45, 32, 109, 111, 110, 101, 116, 97, 114, 105, 32, 91, 76, 83, 108, 115, 93, 32, 49, 51, 52, 45, 53, 45, 49, 51, 53, 45, 50, 51, 52, 53, 45, 51, 52, 53, 45, 50, 52, 32, 45, 105, 108, 121, 32, 45, 105, 115, 109, 32, 45, 105, 115, 116, 10, 97, 108, 119, 97, 121, 115, 32, 109, 111, 110, 101, 116, 97, 114, 121, 32, 49, 51, 52, 45, 53, 45, 49, 51, 53, 45, 50, 51, 52, 53, 45, 51, 52, 53, 45, 49, 51, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 45, 32, 109, 111, 110, 101, 116, 105, 32, 91, 83, 90, 115, 122, 93, 91, 65, 69, 73, 97, 101, 105, 93, 32, 49, 51, 52, 45, 53, 45, 49, 51, 53, 45, 50, 51, 52, 53, 45, 50, 52, 32, 109, 111, 110, 101, 116, 105, 122, 97, 116, 105, 111, 110, 10, 115, 117, 102, 119, 111, 114, 100, 32, 109, 111, 110, 116, 101, 102, 105, 97, 115, 99, 111, 110, 101, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 109, 111, 114, 111, 110, 101, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 109, 121, 114, 109, 105, 100, 111, 110, 101, 115, 32, 61, 10, 119, 111, 114, 100, 32, 110, 111, 110, 101, 32, 49, 51, 52, 53, 45, 53, 45, 49, 51, 53, 10, 119, 111, 114, 100, 32, 110, 111, 110, 101, 115, 32, 49, 51, 52, 53, 45, 53, 45, 49, 51, 53, 45, 50, 51, 52, 10, 35, 119, 111, 114, 100, 32, 110, 111, 110, 101, 115, 117, 99, 104, 32, 35, 35, 32, 104, 97, 110, 100, 108, 101, 100, 32, 117, 110, 100, 101, 114, 32, 115, 104, 111, 114, 116, 102, 111, 114, 109, 115, 32, 97, 112, 112, 46, 32, 49, 10, 115, 117, 102, 119, 111, 114, 100, 32, 110, 111, 110, 101, 115, 117, 99, 104, 101, 115, 32, 49, 51, 52, 53, 45, 53, 45, 49, 51, 53, 45, 50, 51, 52, 45, 49, 51, 54, 45, 49, 54, 45, 49, 53, 45, 50, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 110, 111, 110, 101, 116, 104, 101, 108, 101, 115, 115, 32, 49, 51, 52, 53, 45, 53, 45, 49, 51, 53, 45, 50, 51, 52, 54, 45, 52, 54, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 110, 111, 110, 32, 91, 69, 101, 93, 37, 97, 32, 49, 51, 52, 53, 45, 49, 51, 53, 45, 49, 51, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 111, 101, 110, 111, 110, 101, 32, 49, 51, 53, 45, 50, 54, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 111, 110, 101, 97, 108, 32, 49, 51, 53, 45, 49, 51, 52, 53, 45, 50, 45, 49, 50, 51, 10, 115, 117, 102, 119, 111, 114, 100, 32, 111, 110, 101, 99, 111, 32, 61, 10, 109, 97, 116, 99, 104, 32, 94, 124, 33, 37, 97, 32, 111, 110, 101, 103, 32, 91, 65, 69, 73, 79, 85, 97, 101, 105, 111, 117, 93, 32, 61, 32, 79, 110, 101, 103, 97, 32, 79, 110, 101, 103, 105, 110, 32, 79, 110, 101, 103, 105, 116, 101, 32, 79, 110, 101, 103, 111, 10, 115, 117, 102, 119, 111, 114, 100, 32, 111, 110, 101, 105, 100, 97, 32, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 45, 50, 52, 45, 49, 52, 53, 45, 49, 10, 115, 117, 102, 119, 111, 114, 100, 32, 111, 110, 101, 105, 108, 32, 61, 10, 109, 97, 116, 99, 104, 32, 94, 124, 33, 37, 97, 32, 111, 110, 101, 105, 114, 32, 91, 73, 79, 105, 111, 93, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 111, 110, 101, 107, 97, 109, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 111, 110, 101, 111, 110, 116, 32, 61, 10, 109, 97, 116, 99, 104, 32, 94, 124, 33, 37, 97, 32, 111, 110, 101, 114, 32, 91, 65, 69, 73, 79, 85, 89, 97, 101, 105, 111, 117, 121, 93, 32, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 50, 52, 53, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 111, 110, 101, 115, 105, 109, 117, 115, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 111, 110, 101, 115, 105, 112, 104, 111, 114, 117, 115, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 111, 112, 105, 108, 105, 111, 110, 101, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 112, 97, 100, 114, 111, 110, 101, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 112, 97, 110, 101, 116, 116, 111, 110, 101, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 112, 97, 112, 105, 108, 105, 111, 110, 101, 115, 32, 61, 10, 119, 111, 114, 100, 32, 112, 101, 110, 115, 105, 111, 110, 101, 32, 49, 50, 51, 52, 45, 50, 54, 45, 50, 51, 52, 45, 50, 52, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 10, 119, 111, 114, 100, 32, 112, 101, 110, 115, 105, 111, 110, 101, 115, 32, 49, 50, 51, 52, 45, 50, 54, 45, 50, 51, 52, 45, 50, 52, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 45, 50, 51, 52, 10, 119, 111, 114, 100, 32, 112, 101, 111, 110, 101, 115, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 112, 101, 114, 115, 101, 112, 104, 111, 110, 101, 32, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 49, 50, 51, 52, 45, 49, 50, 53, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 45, 32, 112, 104, 111, 110, 101, 115, 32, 91, 84, 116, 93, 91, 72, 104, 93, 91, 69, 101, 93, 91, 77, 109, 93, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 112, 114, 111, 110, 101, 103, 111, 116, 105, 97, 32, 61, 32, 112, 114, 111, 110, 101, 103, 111, 116, 105, 97, 116, 105, 111, 110, 10, 115, 117, 102, 119, 111, 114, 100, 32, 115, 97, 119, 98, 111, 110, 101, 115, 101, 115, 32, 50, 51, 52, 45, 49, 45, 50, 52, 53, 54, 45, 49, 50, 45, 53, 45, 49, 51, 53, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 115, 99, 104, 105, 97, 118, 111, 110, 101, 32, 50, 51, 52, 45, 49, 54, 45, 50, 52, 45, 49, 45, 49, 50, 51, 54, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 10, 119, 111, 114, 100, 32, 115, 99, 111, 114, 112, 105, 111, 110, 101, 115, 32, 61, 10, 109, 97, 116, 99, 104, 32, 94, 124, 33, 37, 97, 32, 115, 104, 111, 115, 104, 111, 110, 32, 91, 69, 73, 101, 105, 93, 32, 49, 52, 54, 45, 49, 51, 53, 45, 49, 52, 54, 45, 49, 51, 53, 45, 49, 51, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 115, 105, 114, 105, 111, 110, 101, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 115, 111, 102, 102, 105, 111, 110, 101, 32, 50, 51, 52, 45, 49, 50, 51, 53, 54, 45, 49, 50, 52, 45, 50, 52, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 115, 112, 117, 109, 111, 110, 101, 32, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 45, 32, 115, 116, 111, 110, 101, 103, 97, 116, 32, 91, 69, 101, 93, 32, 51, 52, 45, 53, 45, 49, 51, 53, 45, 49, 50, 52, 53, 45, 49, 45, 50, 51, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 115, 116, 111, 110, 101, 115, 116, 114, 101, 101, 116, 32, 51, 52, 45, 53, 45, 49, 51, 53, 45, 51, 52, 45, 49, 50, 51, 53, 45, 49, 53, 45, 49, 53, 45, 50, 51, 52, 53, 10, 119, 111, 114, 100, 32, 115, 116, 114, 117, 116, 104, 105, 111, 110, 101, 115, 32, 51, 52, 45, 49, 50, 51, 53, 45, 49, 51, 54, 45, 49, 52, 53, 54, 45, 50, 52, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 45, 50, 51, 52, 10, 119, 111, 114, 100, 32, 115, 116, 117, 114, 105, 111, 110, 101, 115, 32, 51, 52, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 50, 52, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 45, 50, 51, 52, 10, 119, 111, 114, 100, 32, 115, 117, 105, 111, 110, 101, 115, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 115, 117, 108, 102, 111, 110, 32, 91, 69, 101, 93, 91, 84, 116, 93, 91, 72, 104, 93, 91, 65, 69, 73, 79, 85, 89, 97, 101, 105, 111, 117, 121, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 115, 117, 108, 112, 104, 111, 110, 32, 91, 69, 101, 93, 91, 84, 116, 93, 91, 72, 104, 93, 91, 65, 69, 73, 79, 85, 89, 97, 101, 105, 111, 117, 121, 93, 32, 61, 10, 119, 111, 114, 100, 32, 115, 121, 99, 111, 110, 101, 115, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 116, 97, 114, 115, 111, 110, 101, 109, 105, 100, 32, 50, 51, 52, 53, 45, 51, 52, 53, 45, 50, 51, 52, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 45, 49, 51, 52, 45, 50, 52, 45, 49, 52]);
fileData263.push.apply(fileData263, [53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 116, 111, 110, 101, 108, 97, 100, 97, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 116, 111, 114, 114, 111, 110, 101, 32, 61, 10, 115, 117, 102, 119, 111, 114, 100, 32, 122, 97, 98, 97, 103, 108, 105, 111, 110, 101, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 122, 111, 110, 101, 115, 116, 104, 101, 32, 91, 83, 84, 115, 116, 93, 32, 49, 51, 53, 54, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 54, 10, 10, 35, 32, 111, 117, 103, 104, 116, 10, 97, 108, 119, 97, 121, 115, 32, 111, 117, 103, 104, 116, 32, 53, 45, 49, 50, 53, 54, 10, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 117, 103, 104, 116, 32, 91, 65, 97, 93, 91, 73, 105, 93, 91, 76, 108, 93, 32, 49, 50, 53, 54, 45, 49, 50, 54, 45, 50, 51, 52, 53, 32, 112, 108, 111, 117, 103, 104, 116, 97, 105, 108, 10, 10, 35, 32, 112, 97, 114, 116, 10, 97, 108, 119, 97, 121, 115, 32, 112, 97, 114, 116, 32, 53, 45, 49, 50, 51, 52, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 112, 97, 114, 116, 104, 101, 110, 111, 103, 101, 110, 101, 115, 105, 115, 32, 49, 50, 51, 52, 45, 51, 52, 53, 45, 50, 51, 52, 54, 45, 49, 51, 52, 53, 45, 49, 51, 53, 45, 49, 50, 52, 53, 45, 50, 54, 45, 49, 53, 45, 50, 51, 52, 45, 50, 52, 45, 50, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 112, 97, 114, 116, 104, 101, 110, 111, 110, 32, 49, 50, 51, 52, 45, 51, 52, 53, 45, 50, 51, 52, 54, 45, 49, 51, 52, 53, 45, 49, 51, 53, 45, 49, 51, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 112, 97, 114, 116, 104, 105, 97, 32, 49, 50, 51, 52, 45, 51, 52, 53, 45, 49, 52, 53, 54, 45, 50, 52, 45, 49, 10, 10, 35, 32, 113, 117, 101, 115, 116, 105, 111, 110, 10, 97, 108, 119, 97, 121, 115, 32, 113, 117, 101, 115, 116, 105, 111, 110, 32, 53, 45, 49, 50, 51, 52, 53, 10, 10, 35, 32, 114, 105, 103, 104, 116, 10, 97, 108, 119, 97, 121, 115, 32, 114, 105, 103, 104, 116, 32, 53, 45, 49, 50, 51, 53, 10, 10, 35, 32, 115, 111, 109, 101, 32, 32, 32, 49, 48, 46, 55, 46, 55, 10, 97, 108, 119, 97, 121, 115, 32, 115, 111, 109, 101, 32, 53, 45, 50, 51, 52, 10, 10, 109, 97, 116, 99, 104, 32, 45, 32, 115, 111, 109, 101, 114, 32, 91, 73, 105, 93, 91, 67, 99, 93, 32, 50, 51, 52, 45, 49, 51, 53, 45, 49, 51, 52, 45, 49, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 45, 32, 115, 111, 109, 101, 114, 32, 91, 73, 105, 93, 91, 83, 115, 93, 91, 77, 84, 109, 116, 93, 32, 50, 51, 52, 45, 49, 51, 53, 45, 49, 51, 52, 45, 49, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 45, 32, 115, 111, 109, 101, 114, 32, 91, 79, 111, 93, 91, 85, 117, 93, 91, 83, 115, 93, 32, 50, 51, 52, 45, 49, 51, 53, 45, 49, 51, 52, 45, 49, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 45, 32, 115, 111, 109, 101, 32, 91, 84, 116, 93, 91, 69, 101, 93, 91, 82, 114, 93, 32, 50, 51, 52, 45, 49, 51, 53, 45, 49, 51, 52, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 45, 32, 115, 111, 109, 101, 32, 91, 84, 116, 93, 91, 82, 114, 93, 91, 65, 97, 69, 101, 73, 105, 79, 111, 85, 117, 89, 121, 93, 32, 50, 51, 52, 45, 49, 51, 53, 45, 49, 51, 52, 45, 49, 53, 10, 97, 108, 119, 97, 121, 115, 32, 115, 111, 109, 101, 118, 101, 114, 32, 50, 51, 52, 45, 49, 51, 53, 45, 49, 51, 52, 45, 53, 45, 49, 53, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 98, 108, 111, 115, 115, 111, 109, 101, 100, 32, 49, 50, 45, 49, 50, 51, 45, 49, 51, 53, 45, 50, 51, 52, 45, 50, 51, 52, 45, 49, 51, 53, 45, 49, 51, 52, 45, 49, 50, 52, 54, 10, 97, 108, 119, 97, 121, 115, 32, 105, 115, 111, 109, 101, 114, 32, 50, 52, 45, 50, 51, 52, 45, 49, 51, 53, 45, 49, 51, 52, 45, 49, 50, 52, 53, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 114, 97, 110, 115, 111, 109, 101, 100, 32, 49, 50, 51, 53, 45, 49, 45, 49, 51, 52, 53, 45, 50, 51, 52, 45, 49, 51, 53, 45, 49, 51, 52, 45, 49, 50, 52, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 115, 111, 109, 101, 114, 115, 97, 117, 108, 116, 32, 50, 51, 52, 45, 49, 51, 53, 45, 49, 51, 52, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 45, 49, 45, 49, 51, 54, 45, 49, 50, 51, 45, 50, 51, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 115, 111, 109, 101, 114, 115, 101, 116, 32, 50, 51, 52, 45, 49, 51, 53, 45, 49, 51, 52, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 117, 110, 98, 111, 115, 111, 109, 101, 100, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 45, 49, 51, 53, 45, 50, 51, 52, 45, 49, 51, 53, 45, 49, 51, 52, 45, 49, 50, 52, 54, 10, 10, 35, 32, 115, 112, 105, 114, 105, 116, 10, 97, 108, 119, 97, 121, 115, 32, 115, 112, 105, 114, 105, 116, 32, 52, 53, 54, 45, 50, 51, 52, 10, 10, 35, 32, 116, 104, 101, 105, 114, 10, 97, 108, 119, 97, 121, 115, 32, 116, 104, 101, 105, 114, 32, 52, 53, 54, 45, 50, 51, 52, 54, 10, 10, 35, 32, 116, 104, 101, 114, 101, 32, 32, 32, 49, 48, 46, 55, 46, 50, 10, 109, 97, 116, 99, 104, 32, 94, 124, 33, 37, 97, 32, 116, 104, 101, 114, 101, 97, 32, 91, 66, 70, 71, 98, 102, 103, 93, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 52, 54, 45, 49, 50, 51, 53, 45, 50, 32, 32, 110, 111, 116, 32, 116, 104, 101, 114, 101, 97, 98, 111, 117, 116, 44, 32, 45, 97, 102, 116, 101, 114, 32, 101, 116, 99, 10, 109, 97, 116, 99, 104, 32, 94, 124, 33, 37, 97, 32, 116, 104, 101, 114, 101, 32, 91, 77, 109, 93, 32, 50, 51, 52, 54, 45, 49, 50, 51, 53, 45, 49, 53, 32, 116, 104, 101, 114, 101, 109, 105, 110, 10, 109, 97, 116, 99, 104, 32, 94, 124, 33, 37, 97, 32, 116, 104, 101, 114, 101, 32, 91, 83, 115, 93, 91, 65, 69, 73, 79, 83, 85, 89, 97, 101, 105, 111, 115, 117, 121, 93, 32, 50, 51, 52, 54, 45, 49, 50, 51, 53, 45, 49, 53, 32, 32, 84, 104, 101, 114, 101, 115, 97, 44, 32, 84, 104, 101, 114, 101, 115, 101, 32, 101, 116, 99, 10, 109, 97, 116, 99, 104, 32, 94, 124, 33, 37, 97, 32, 116, 104, 101, 114, 101, 118, 105, 32, 91, 68, 100, 93, 32, 50, 51, 52, 54, 45, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 54, 45, 50, 52, 32, 32, 84, 104, 101, 114, 101, 118, 105, 100, 97, 101, 10, 109, 97, 116, 99, 104, 32, 94, 124, 33, 37, 97, 32, 116, 104, 101, 114, 101, 32, 91, 90, 122, 93, 91, 73, 105, 93, 91, 78, 110, 93, 32, 50, 51, 52, 54, 45, 49, 50, 51, 53, 45, 49, 53, 32, 32, 32, 84, 104, 101, 114, 101, 122, 105, 110, 97, 32, 101, 116, 99, 10, 109, 97, 116, 99, 104, 32, 94, 124, 33, 37, 97, 32, 116, 104, 101, 114, 101, 32, 45, 32, 53, 45, 50, 51, 52, 54, 32, 32, 32, 32, 97, 32, 108, 105, 116, 116, 108, 101, 32, 109, 111, 114, 101, 32, 103, 101, 110, 101, 114, 97, 108, 32, 116, 104, 97, 110, 32, 115, 117, 102, 119, 111, 114, 100, 10, 110, 111, 102, 111, 114, 32, 97, 108, 119, 97, 121, 115, 32, 116, 104, 101, 114, 101, 32, 53, 45, 50, 51, 52, 54, 10, 10, 35, 32, 116, 104, 101, 115, 101, 32, 32, 32, 49, 48, 46, 55, 46, 50, 10, 97, 108, 119, 97, 121, 115, 32, 116, 104, 101, 115, 101, 32, 52, 53, 45, 50, 51, 52, 54, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 97, 110, 116, 105, 116, 104, 101, 115, 101, 115, 32, 49, 45, 49, 51, 52, 53, 45, 50, 51, 52, 53, 45, 50, 52, 45, 50, 51, 52, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 104, 121, 112, 111, 116, 104, 101, 115, 101, 115, 32, 49, 50, 53, 45, 49, 51, 52, 53, 54, 45, 49, 50, 51, 52, 45, 49, 51, 53, 45, 50, 51, 52, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 112, 97, 114, 101, 110, 116, 104, 101, 115, 101, 115, 32, 49, 50, 51, 52, 45, 51, 52, 53, 45, 50, 54, 45, 50, 51, 52, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 115, 121, 110, 116, 104, 101, 115, 101, 115, 32, 50, 51, 52, 45, 49, 51, 52, 53, 54, 45, 49, 51, 52, 53, 45, 50, 51, 52, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 116, 104, 101, 115, 101, 115, 32, 50, 51, 52, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 116, 104, 101, 115, 101, 117, 115, 32, 50, 51, 52, 54, 45, 50, 51, 52, 45, 49, 53, 45, 49, 51, 54, 45, 50, 51, 52, 10, 10, 35, 32, 116, 104, 111, 115, 101, 32, 32, 32, 49, 48, 46, 55, 46, 50, 10, 97, 108, 119, 97, 121, 115, 32, 116, 104, 111, 115, 101, 32, 52, 53, 45, 49, 52, 53, 54, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 115, 112, 97, 116, 104, 111, 115, 101, 32, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 45, 49, 52, 53, 54, 45, 49, 51, 53, 45, 50, 51, 52, 45, 49, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 116, 104, 111, 115, 101, 98, 121, 32, 49, 52, 53, 54, 45, 49, 51, 53, 45, 50, 51, 52, 45, 49, 53, 45, 49, 50, 45, 49, 51, 52, 53, 54, 10, 10, 35, 32, 116, 104, 114, 111, 117, 103, 104, 10, 97, 108, 119, 97, 121, 115, 32, 116, 104, 114, 111, 117, 103, 104, 32, 53, 45, 49, 52, 53, 54, 10, 10, 35, 32, 116, 105, 109, 101, 32, 32, 32, 49, 48, 46, 55, 46, 56, 10, 97, 108, 119, 97, 121, 115, 32, 116, 105, 109, 101, 32, 53, 45, 50, 51, 52, 53, 10, 97, 108, 119, 97, 121, 115, 32, 116, 105, 109, 101, 110, 116, 32, 50, 51, 52, 53, 45, 50, 52, 45, 53, 54, 45, 50, 51, 52, 53, 32, 32, 105, 110, 32, 116, 105, 109, 101, 110, 116, 44, 32, 77, 69, 78, 84, 32, 104, 97, 115, 32, 112, 114, 105, 111, 114, 105, 116, 121, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 97, 108, 116, 105, 109, 101, 116, 101, 114, 32, 49, 45, 49, 50, 51, 45, 50, 51, 52, 53, 45, 50, 52, 45, 49, 51, 52, 45, 49, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 101, 110, 116, 105, 109, 101, 32, 49, 52, 45, 50, 54, 45, 50, 51, 52, 53, 45, 50, 52, 45, 49, 51, 52, 45, 49, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 109, 111, 114, 116, 105, 109, 101, 114, 32, 49, 51, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 50, 52, 45, 49, 51, 52, 45, 49, 50, 52, 53, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 109, 117, 108, 116, 105, 109, 101, 100, 105, 97, 32, 49, 51, 52, 45, 49, 51, 54, 45, 49, 50, 51, 45, 50, 51, 52, 53, 45, 50, 52, 45, 49, 51, 52, 45, 49, 50, 52, 54, 45, 50, 52, 45, 49, 10, 10, 35, 32, 117, 110, 100, 101, 114, 32, 32, 32, 49, 48, 46, 55, 46, 57, 10, 109, 97, 116, 99, 104, 32, 45, 32, 97, 117, 110, 100, 32, 91, 69, 101, 93, 91, 82, 114, 93, 32, 49, 45, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 52, 53, 10, 35, 32, 110, 111, 32, 110, 101, 101, 100, 32, 116, 111, 32, 99, 97, 116, 99, 104, 32, 111, 117, 110, 100, 101, 114, 44, 32, 98, 101, 99, 97, 117, 115, 101, 32, 111, 102, 32, 79, 85, 78, 68, 32, 114, 117, 108, 101, 32, 10, 10, 109, 97, 116, 99, 104, 32, 45, 32, 117, 110, 100, 101, 114, 105, 32, 91, 68, 86, 100, 118, 93, 91, 65, 69, 73, 97, 101, 105, 93, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 52, 53, 45, 49, 50, 52, 53, 54, 45, 50, 52, 32, 117, 110, 100, 101, 114, 105, 118, 97, 116, 105, 118, 101, 32, 45, 100, 101, 114, 105, 100, 101, 100, 45, 32, 100, 101, 114, 105, 118, 101, 100, 10, 115, 117, 102, 119, 111, 114, 100, 32, 117, 110, 100, 101, 114, 111, 103, 97, 116, 111, 114, 121, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 52, 53, 45, 49, 50, 52, 53, 54, 45, 49, 51, 53, 45, 49, 50, 52, 53, 45, 49, 45, 50, 51, 52, 53, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 54, 10, 10, 97, 108, 119, 97, 121, 115, 32, 117, 110, 100, 101, 114, 32, 53, 45, 49, 51, 54, 10, 10, 35, 32, 117, 112, 111, 110, 32, 32, 32, 49, 48, 46, 55, 46, 50, 10, 97, 108, 119, 97, 121, 115, 32, 117, 112, 111, 110, 32, 52, 53, 45, 49, 51, 54, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 100, 117, 112, 111, 110, 116, 32, 49, 52, 53, 45, 49, 51, 54, 45, 49, 50, 51, 52, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 50, 51, 52, 53, 10, 10, 35, 32, 119, 104, 101, 114, 101, 10, 97, 108, 119, 97, 121, 115, 32, 119, 104, 101, 114, 101, 32, 53, 45, 49, 53, 54, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 119, 104, 101, 114, 101, 39, 101, 114, 32, 49, 53, 54, 45, 49, 50, 52, 53, 54, 45, 49, 53, 45, 51, 45, 49, 50, 52, 53, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 119, 104, 101, 114, 101, 226, 128, 153, 101, 114, 32, 49, 53, 54, 45, 49, 50, 52, 53, 54, 45, 49, 53, 45, 51, 45, 49, 50, 52, 53, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 119, 104, 101, 114, 101, 117, 112, 111, 110, 32, 53, 45, 49, 53, 54, 45, 52, 53, 45, 49, 51, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 119, 104, 101, 114, 101, 118, 101, 114, 32, 49, 53, 54, 45, 49, 50, 52, 53, 54, 45, 53, 45, 49, 53, 10, 10, 35, 110, 111, 102, 111, 114, 32, 98, 101, 103, 119, 111, 114, 100, 32, 119, 104, 101, 114, 101, 32, 53, 45, 49, 53, 54, 10, 10, 35, 32, 119, 104, 111, 115, 101, 32, 32, 32, 49, 48, 46, 55, 46, 50, 10, 97, 108, 119, 97, 121, 115, 32, 119, 104, 111, 115, 101, 32, 52, 53, 45, 49, 53, 54, 10, 10, 35, 32, 119, 111, 114, 100, 10, 97, 108, 119, 97, 121, 115, 32, 119, 111, 114, 100, 32, 52, 53, 45, 50, 52, 53, 54, 10, 10, 35, 32, 119, 111, 114, 107, 10, 97, 108, 119, 97, 121, 115, 32, 119, 111, 114, 107, 32, 53, 45, 50, 52, 53, 54, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 32, 32, 100, 119, 111, 114, 107, 105, 110, 32, 32, 32, 49, 52, 53, 45, 50, 52, 53, 54, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 51, 45, 51, 53, 10, 10, 35, 32, 119, 111, 114, 108, 100, 10, 97, 108, 119, 97, 121, 115, 32, 119, 111, 114, 108, 100, 32, 52, 53, 54, 45, 50, 52, 53, 54, 10, 10, 35, 32, 121, 111, 117, 110, 103, 10, 97, 108, 119, 97, 121, 115, 32, 121, 111, 117, 110, 103, 32, 53, 45, 49, 51, 52, 53, 54, 10, 10, 10, 35, 32, 32, 32, 49, 48, 46, 56, 32, 32, 32, 70, 105, 110, 97, 108, 45, 76, 101, 116, 116, 101, 114, 32, 71, 114, 111, 117, 112, 115, 105, 103, 110, 115, 10, 10, 35, 32, 97, 110, 99, 101, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 97, 110, 99, 101, 32, 45, 32, 52, 54, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 109, 105, 100, 101, 110, 100, 119, 111, 114, 100, 32, 97, 110, 99, 101, 32, 52, 54, 45, 49, 53, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 102, 105, 97, 110, 99, 101, 32, 49, 50, 52, 45, 50, 52, 45, 49, 45, 49, 51, 52, 53, 45, 49, 52, 45, 49, 53, 32, 32, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 102, 105, 97, 110, 99, 195, 169, 10, 10, 35, 32, 101, 110, 99, 101, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 101, 110, 99, 101, 32, 45, 32, 53, 54, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 109, 105, 100, 101, 110, 100, 119, 111, 114, 100, 32, 101, 110, 99, 101, 32, 53, 54, 45, 49, 53, 10, 10, 35, 109, 105, 100, 101, 110, 100, 119, 111, 114, 100, 32, 111, 101, 110, 99, 101, 32, 49, 51, 53, 45, 50, 54, 45, 49, 52, 45, 49, 53, 32, 101, 108, 101, 99, 116, 114, 111, 101, 110, 99, 101, 112, 104, 97, 108, 111, 103, 114, 97, 109, 10, 97, 108, 119, 97, 121, 115, 32, 101, 110, 99, 101, 112, 104, 97, 108, 32, 50, 54, 45, 49, 52, 45, 49, 53, 45, 49, 50, 51, 52, 45, 49, 50, 53, 45, 49, 45, 49, 50, 51, 10, 10, 35, 32, 102, 117, 108, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 102, 117, 108, 32, 45, 32, 53, 54, 45, 49, 50, 51, 10, 110, 111, 102, 111, 114, 32, 109, 105, 100, 101, 110, 100, 119, 111, 114, 100, 32, 102, 117, 108, 32, 53, 54, 45, 49, 50, 51, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 111, 118, 101, 114, 102, 117, 108, 108, 32, 49, 51, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 49, 50, 52, 45, 49, 51, 54, 45, 49, 50, 51, 45, 49, 50, 51, 32, 35, 84, 79, 68, 79, 58, 32, 32, 99, 104, 101, 99, 107, 10, 10, 35, 32, 105, 116, 121, 32, 32, 32, 49, 48, 46, 56, 46, 51, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 105, 116, 121, 32, 45, 32, 53, 54, 45, 49, 51, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 109, 105, 100, 101, 110, 100, 119, 111, 114, 100, 32, 105, 116, 121, 32, 53, 54, 45, 49, 51, 52, 53, 54, 10, 10, 119, 111, 114, 100, 32, 98, 105, 115, 99, 117, 105, 116, 121, 32, 49, 50, 45, 50, 52, 45, 50, 51, 52, 45, 49, 52, 45, 49, 51, 54, 45, 50, 52, 45, 50, 51, 52, 53, 45, 49, 51, 52, 53, 54, 10, 119, 111, 114, 100, 32, 100, 97, 99, 111, 105, 116, 121, 32, 49, 52, 53, 45, 49, 45, 49, 52, 45, 49, 51, 53, 45, 50, 52, 45, 50, 51, 52, 53, 45, 49, 51, 52, 53, 54, 10, 119, 111, 114, 100, 32, 102, 114, 117, 105, 116, 121, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 51, 54, 45, 50, 52, 45, 50, 51, 52, 53, 45, 49, 51, 52, 53, 54, 10, 119, 111, 114, 100, 32, 104, 111, 105, 116, 121, 45, 116, 111, 105, 116, 121, 32, 49, 50, 53, 45, 49, 51, 53, 45, 50, 52, 45, 50, 51, 52, 53, 45, 49, 51, 52, 53, 54, 45, 51, 54, 45, 50, 51, 52, 53, 45, 49, 51, 53, 45, 50, 52, 45, 50, 51, 52, 53, 45, 49, 51, 52, 53, 54, 10, 119, 111, 114, 100, 32, 114, 97, 98, 98, 105, 116, 121, 32, 49, 50, 51, 53, 45, 49, 45, 50, 51, 45, 50, 52, 45, 50, 51, 52, 53, 45, 49, 51, 52, 53, 54, 10, 119, 111, 114, 100, 32, 112, 105, 116, 121, 97, 114, 100, 32, 49, 50, 51, 52, 45, 50, 52, 45, 50, 51, 52, 53, 45, 49, 51, 52, 53, 54, 45, 51, 52, 53, 45, 49, 52, 53, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 97, 110, 116, 105, 116, 121, 112, 101, 32, 49, 45, 49, 51, 52, 53, 45, 50, 51, 52, 53, 45, 50, 52, 45, 50, 51, 52, 53, 45, 49, 51, 52, 53, 54, 45, 49, 50, 51, 52, 45, 49, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 97, 112, 116, 97, 105, 110, 101, 115, 115, 32, 49, 52, 45, 49, 45, 49, 50, 51, 52, 45, 50, 51, 52, 53, 45, 49, 45, 50, 52, 45, 51, 53, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 10, 35, 32, 108, 101, 115, 115, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 108, 101, 115, 115, 32, 45, 32, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 109, 105, 100, 101, 110, 100, 119, 111, 114, 100, 32, 108, 101, 115, 115, 32, 52, 54, 45, 50, 51, 52, 10, 10, 35, 32, 109, 101, 110, 116, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 109, 101, 110, 116, 32, 45, 32, 53, 54, 45, 50, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 109, 105, 100, 101, 110, 100, 119, 111, 114, 100, 32, 109, 101, 110, 116, 32, 53, 54, 45, 50, 51, 52, 53, 10, 10, 35, 32, 110, 101, 115, 115, 32, 32, 32, 49, 48, 46, 56, 46, 52, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 110, 101, 115, 115, 32, 45, 32, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 109, 105, 100, 101, 110, 100, 119, 111, 114, 100, 32, 110, 101, 115, 115, 32, 53, 54, 45, 50, 51, 52, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 104, 105, 101, 102, 116, 97, 105, 110, 101, 115, 115, 32, 49, 54, 45, 50, 52, 45, 49, 53, 45, 49, 50, 52, 45, 50, 51, 52, 53, 45, 49, 45, 51, 53, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 105, 116, 105, 122, 101, 110, 101, 115, 115, 32, 49, 52, 45, 50, 52, 45, 50, 51, 52, 53, 45, 50, 52, 45, 49, 51, 53, 54, 45, 50, 54, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 104, 101, 97, 116, 104, 101, 110, 101, 115, 115, 32, 49, 50, 53, 45, 50, 45, 50, 51, 52, 54, 45, 49, 51, 52, 53, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 10, 35, 32, 111, 110, 103, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 110, 103, 32, 45, 32, 53, 54, 45, 49, 50, 52, 53, 10, 110, 111, 102, 111, 114, 32, 109, 105, 100, 101, 110, 100, 119, 111, 114, 100, 32, 111, 110, 103, 32, 53, 54, 45, 49, 50, 52, 53, 10, 10, 109, 97, 116, 99, 104, 32, 45, 32, 99, 97, 110, 110, 111, 110, 32, 91, 71, 103, 93, 91, 65, 97, 93, 91, 84, 116, 93, 91, 69, 101, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 108, 101, 109, 111, 110, 32, 91, 71, 103, 93, 91, 82, 114, 93, 91, 65, 97, 93, 91, 83, 115, 93, 91, 83, 115, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 108, 111, 110, 103, 104, 105, 32, 94, 124, 33, 37, 97, 32, 49, 50, 51, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 50, 54, 45, 50, 52, 10, 109, 97, 116, 99, 104, 32, 45, 32, 109, 101, 108, 111, 110, 32, 91, 71, 103, 93, 91, 82, 114, 93, 91, 79, 111, 93, 91, 87, 119, 93, 32, 61, 10, 109, 97, 116, 99, 104, 32, 45, 32, 109, 111, 111, 110, 32, 91, 71, 103, 93, 37, 97, 32, 61, 32, 109, 111, 111, 110, 103, 108, 111, 119, 32, 109, 111, 111, 110, 103, 111, 100, 32, 10, 98, 101, 103, 119, 111, 114, 100, 32, 110, 111, 110, 103, 32, 61, 32, 110, 111, 110, 103, 114, 97, 112, 104, 105, 99, 97, 108, 32, 110, 111, 110, 103, 97, 115, 101, 111, 117, 115, 32, 110, 111, 110, 103, 111, 118, 101, 114, 110, 109, 101, 110, 116, 97, 108, 10, 109, 97, 116, 99, 104, 32, 45, 32, 115, 99, 104, 111, 110, 32, 91, 71, 103, 93, 91, 65, 97, 93, 91, 85, 117, 93, 91, 69, 101, 93, 91, 82, 114, 93, 32, 50, 51, 52, 45, 49, 54, 45, 49, 51, 53, 45, 49, 51, 52, 53, 10, 115, 117, 102, 119, 111, 114, 100, 32, 115, 111, 110, 103, 104, 97, 105, 32, 50, 51, 52, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 49, 50, 54, 45, 49, 45, 50, 52, 10, 10, 35, 32, 111, 117, 110, 100, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 117, 110, 100, 32, 45, 32, 52, 54, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 109, 105, 100, 101, 110, 100, 119, 111, 114, 100, 32, 111, 117, 110, 100, 32, 52, 54, 45, 49, 52, 53, 10, 10, 35, 32, 111, 117, 110, 116, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 111, 117, 110, 116, 32, 45, 32, 52, 54, 45, 50, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 109, 105, 100, 101, 110, 100, 119, 111, 114, 100, 32, 111, 117, 110, 116, 32, 52, 54, 45, 50, 51, 52, 53, 10, 10, 35, 32, 115, 105, 111, 110, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 115, 105, 111, 110, 32, 45, 32, 52, 54, 45, 49, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 109, 105, 100, 101, 110, 100, 119, 111, 114, 100, 32, 115, 105, 111, 110, 32, 52, 54, 45, 49, 51, 52, 53, 10, 10, 35, 32, 116, 105, 111, 110, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 116, 105, 111, 110, 32, 45, 32, 53, 54, 45, 49, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 109, 105, 100, 101, 110, 100, 119, 111, 114, 100, 32, 116, 105, 111, 110, 32, 53, 54, 45, 49, 51, 52, 53, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 99, 97, 116, 105, 111, 110, 32, 49, 52, 45, 49, 45, 50, 51, 52, 53, 45, 50, 52, 45, 49, 51, 53, 45, 49, 51, 52, 53, 10, 97, 108, 119, 97, 121, 115, 32, 109, 101, 110, 116, 105, 111, 110, 32, 49, 51, 52, 45, 50, 54, 45, 53, 54, 45, 49, 51, 52, 53, 32, 84, 73, 79, 78, 32, 104, 97, 115, 32, 112, 114, 105, 111, 114, 105, 116, 121, 10, 10, 35, 32, 32, 32, 49, 48, 46, 57, 32, 32, 32, 83, 104, 111, 114, 116, 102, 111, 114, 109, 115, 32, 32, 32, 110, 111, 116, 32, 105, 110, 99, 108, 117, 100, 105, 110, 103, 32, 49, 48, 46, 57, 46, 51, 10, 35, 84, 79, 68, 79, 58, 32, 32, 50, 46, 54, 46, 52, 10, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 50, 32, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 86, 87, 88, 90, 98, 99, 100, 102, 103, 104, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 118, 119, 120, 122, 39, 226, 128, 153, 32, 32, 110, 111, 32, 118, 111, 119, 101, 108, 115, 32, 40, 101, 120, 99, 101, 112, 116, 32, 119, 41, 32, 97, 110, 100, 32, 50, 46, 54, 46, 52, 10, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 98, 111, 117, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 98, 111, 118, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 45, 49, 50, 51, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 99, 99, 111, 114, 100, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 99, 114, 111, 115, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 52, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 37, 97, 42, 32, 97, 102, 116, 101, 114, 32, 40, 37, 50, 37, 97, 42, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 32, 32, 32, 97, 112, 112, 101, 110, 100, 105, 120, 32, 49, 46, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 110, 111, 111, 110, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 119, 97, 114, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 103, 97, 105, 110, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 103, 97, 105, 110, 115, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 53, 45, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 108, 109, 111, 115, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 51, 45, 49, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 108, 114, 101, 97, 100, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 51, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 108, 115, 111, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 51, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 108, 116, 104, 111, 117, 103, 104, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 51, 45, 49, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 108, 116, 111, 103, 101, 116, 104, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 51, 45, 50, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 108, 119, 97, 121, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 51, 45, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 101, 99, 97, 117, 115, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 45, 49, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 101, 102, 111, 114, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 45, 49, 50, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 101, 104, 105, 110, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 45, 49, 50, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 101, 108, 111, 119, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 45, 49, 50, 51, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 101, 110, 101, 97, 116, 104, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 45, 49, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 101, 115, 105, 100, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 101, 116, 119, 101, 101, 110, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 45, 50, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 101, 121, 111, 110, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 45, 49, 51, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 37, 97, 42, 32, 98, 108, 105, 110, 100, 32, 40, 37, 50, 37, 97, 42, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 45, 49, 50, 51, 32, 32, 32, 97, 112, 112, 101, 110, 100, 105, 120, 32, 49, 46, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 37, 97, 42, 32, 98, 114, 97, 105, 108, 108, 101, 32, 37, 97, 42, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 32, 32, 32, 49, 48, 46, 57, 46, 51, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 37, 97, 42, 32, 99, 104, 105, 108, 100, 114, 101, 110, 32, 40, 37, 50, 37, 97, 42, 41, 63, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 54, 45, 49, 51, 52, 53, 32, 32, 32, 49, 48, 46, 57, 46, 51, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 99, 111, 110, 99, 101, 105, 118, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 53, 45, 49, 52, 45, 49, 50, 51, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 99, 111, 110, 99, 101, 105, 118, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 99, 111, 117, 108, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 100, 101, 99, 101, 105, 118, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 100, 101, 99, 101, 105, 118, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 100, 101, 99, 108, 97, 114, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 100, 101, 99, 108, 97, 114, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 45, 49, 50, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 101, 105, 116, 104, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 53, 45, 50, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 102, 105, 114, 115, 116, 32, 40, 37, 50, 37, 97, 42, 41, 63, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 45, 51, 52, 32, 32, 32, 49, 48, 46, 57, 46, 51, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 37, 97, 42, 32, 102, 114, 105, 101, 110, 100, 32, 40, 37, 50, 37, 97, 42, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 45, 49, 50, 51, 53, 32, 32, 32, 97, 112, 112, 101, 110, 100, 105, 120, 32, 49, 46, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 32, 40, 37, 50, 37, 97, 42, 41, 63, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 32, 32, 32, 49, 48, 46, 57, 46, 51, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 37, 97, 42, 32, 103, 114, 101, 97, 116, 32, 37, 97, 42, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 32, 32, 32, 49, 48, 46, 57, 46, 51, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 104, 101, 114, 115, 101, 108, 102, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 53, 45, 49, 50, 52, 53, 54, 45, 49, 50, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 104, 105, 109, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 53, 45, 49, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 104, 105, 109, 115, 101, 108, 102, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 53, 45, 49, 51, 52, 45, 49, 50, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 105, 109, 109, 101, 100, 105, 97, 116, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 52, 45, 49, 51, 52, 45, 49, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 105, 116, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 54, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 105, 116, 115, 101, 108, 102, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 54, 45, 49, 50, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 101, 116, 116, 101, 114, 32, 40, 37, 50, 37, 97, 42, 41, 63, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 50, 51, 53, 32, 32, 32, 49, 48, 46, 57, 46, 51, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 105, 116, 116, 108, 101, 32, 40, 37, 50, 37, 97, 42, 41, 63, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 50, 51, 32, 32, 32, 49, 48, 46, 57, 46, 51, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 109, 117, 99, 104, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 45, 49, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 109, 117, 115, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 45, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 109, 121, 115, 101, 108, 102, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 45, 49, 51, 52, 53, 54, 45, 49, 50, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 110, 101, 99, 101, 115, 115, 97, 114, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 53, 45, 49, 53, 45, 49, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 110, 101, 105, 116, 104, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 53, 45, 49, 53, 45, 50, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 111, 110, 101, 115, 101, 108, 102, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 53, 45, 49, 51, 53, 45, 49, 50, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 111, 117, 114, 115, 101, 108, 118, 101, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 51, 54, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 112, 97, 105, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 112, 101, 114, 99, 101, 105, 118, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 112, 101, 114, 99, 101, 105, 118, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 112, 101, 114, 104, 97, 112, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 50, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 113, 117, 105, 99, 107, 32, 40, 37, 50, 37, 97, 42, 41, 63, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 53, 45, 49, 51, 32, 32, 32, 49, 48, 46, 57, 46, 51, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 114, 101, 99, 101, 105, 118, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 53, 45, 49, 52, 45, 49, 50, 51, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 114, 101, 99, 101, 105, 118, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 114, 101, 106, 111, 105, 99, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 114, 101, 106, 111, 105, 99, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 49, 50, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 115, 97, 105, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 52, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 115, 104, 111, 117, 108, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 54, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 115, 117, 99, 104, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 52, 45, 49, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 116, 104, 101, 109, 115, 101, 108, 118, 101, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 52, 54, 45, 49, 51, 52, 45, 49, 50, 51, 54, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 116, 104, 121, 115, 101, 108, 102, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 53, 54, 45, 49, 51, 52, 53, 54, 45, 49, 50, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 116, 111, 100, 97, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 52, 53, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 116, 111, 103, 101, 116, 104, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 116, 111, 109, 111, 114, 114, 111, 119, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 52, 53, 45, 49, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 116, 111, 110, 105, 103, 104, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 52, 53, 45, 49, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 119, 111, 117, 108, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 52, 53, 54, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 121, 111, 117, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 53, 54, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 121, 111, 117, 114, 115, 101, 108, 102, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 121, 111, 117, 114, 115, 101, 108, 118, 101, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 51, 54, 45, 50, 51, 52, 10, 10, 35, 84, 79, 68, 79, 58, 32, 32, 98, 97, 99, 107, 109, 97, 116, 99, 104, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 97, 98, 108, 101, 32, 116, 111, 32, 109, 101, 114, 103, 101, 32, 116, 104, 101, 115, 101, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 98, 111, 117, 116, 32, 32, 49, 45, 49, 50, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 98, 111, 118, 101, 32, 32, 49, 45, 49, 50, 45, 49, 50, 51, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 99, 99, 111, 114, 100, 105, 110, 103, 32, 32, 49, 45, 49, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 99, 114, 111, 115, 115, 32, 32, 49, 45, 49, 52, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 32, 32, 49, 45, 49, 50, 52, 32, 32, 32, 97, 112, 112, 101, 110, 100, 105, 120, 32, 49, 46, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 110, 111, 111, 110, 32, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 119, 97, 114, 100, 32, 32, 49, 45, 49, 50, 52, 45, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 103, 97, 105, 110, 32, 32, 49, 45, 49, 50, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32]);
fileData263.push.apply(fileData263, [97, 103, 97, 105, 110, 115, 116, 32, 32, 49, 45, 49, 50, 52, 53, 45, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 108, 109, 111, 115, 116, 32, 32, 49, 45, 49, 50, 51, 45, 49, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 108, 114, 101, 97, 100, 121, 32, 32, 49, 45, 49, 50, 51, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 108, 115, 111, 32, 32, 49, 45, 49, 50, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 108, 116, 104, 111, 117, 103, 104, 32, 32, 49, 45, 49, 50, 51, 45, 49, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 108, 116, 111, 103, 101, 116, 104, 101, 114, 32, 32, 49, 45, 49, 50, 51, 45, 50, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 108, 119, 97, 121, 115, 32, 32, 49, 45, 49, 50, 51, 45, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 99, 97, 117, 115, 101, 32, 32, 50, 51, 45, 49, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 102, 111, 114, 101, 32, 32, 50, 51, 45, 49, 50, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 104, 105, 110, 100, 32, 32, 50, 51, 45, 49, 50, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 108, 111, 119, 32, 32, 50, 51, 45, 49, 50, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 110, 101, 97, 116, 104, 32, 32, 50, 51, 45, 49, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 115, 105, 100, 101, 32, 32, 50, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 116, 119, 101, 101, 110, 32, 32, 50, 51, 45, 50, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 121, 111, 110, 100, 32, 32, 50, 51, 45, 49, 51, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 32, 32, 49, 50, 45, 49, 50, 51, 32, 32, 32, 97, 112, 112, 101, 110, 100, 105, 120, 32, 49, 46, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 114, 97, 105, 108, 108, 101, 32, 32, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 32, 32, 32, 49, 48, 46, 57, 46, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 104, 105, 108, 100, 114, 101, 110, 32, 32, 49, 54, 45, 49, 51, 52, 53, 32, 32, 32, 49, 48, 46, 57, 46, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 110, 99, 101, 105, 118, 101, 32, 32, 50, 53, 45, 49, 52, 45, 49, 50, 51, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 110, 99, 101, 105, 118, 105, 110, 103, 32, 32, 50, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 117, 108, 100, 32, 32, 49, 52, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 101, 99, 101, 105, 118, 101, 32, 32, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 101, 99, 101, 105, 118, 105, 110, 103, 32, 32, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 101, 99, 108, 97, 114, 101, 32, 32, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 101, 99, 108, 97, 114, 105, 110, 103, 32, 32, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 45, 49, 50, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 101, 105, 116, 104, 101, 114, 32, 32, 49, 53, 45, 50, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 32, 32, 49, 50, 52, 45, 51, 52, 32, 32, 32, 49, 48, 46, 57, 46, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 114, 105, 101, 110, 100, 32, 32, 49, 50, 52, 45, 49, 50, 51, 53, 32, 32, 32, 97, 112, 112, 101, 110, 100, 105, 120, 32, 49, 46, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 32, 32, 32, 49, 48, 46, 57, 46, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 32, 32, 32, 49, 48, 46, 57, 46, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 101, 114, 115, 101, 108, 102, 32, 32, 49, 50, 53, 45, 49, 50, 52, 53, 54, 45, 49, 50, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 105, 109, 32, 32, 49, 50, 53, 45, 49, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 105, 109, 115, 101, 108, 102, 32, 32, 49, 50, 53, 45, 49, 51, 52, 45, 49, 50, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 105, 109, 109, 101, 100, 105, 97, 116, 101, 32, 32, 50, 52, 45, 49, 51, 52, 45, 49, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 105, 116, 115, 32, 32, 49, 51, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 105, 116, 115, 101, 108, 102, 32, 32, 49, 51, 52, 54, 45, 49, 50, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 32, 32, 32, 49, 48, 46, 57, 46, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 105, 116, 116, 108, 101, 32, 32, 49, 50, 51, 45, 49, 50, 51, 32, 32, 32, 49, 48, 46, 57, 46, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 99, 104, 32, 32, 49, 51, 52, 45, 49, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 115, 116, 32, 32, 49, 51, 52, 45, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 121, 115, 101, 108, 102, 32, 32, 49, 51, 52, 45, 49, 51, 52, 53, 54, 45, 49, 50, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 110, 101, 99, 101, 115, 115, 97, 114, 121, 32, 32, 49, 51, 52, 53, 45, 49, 53, 45, 49, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 110, 101, 105, 116, 104, 101, 114, 32, 32, 49, 51, 52, 53, 45, 49, 53, 45, 50, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 111, 110, 101, 115, 101, 108, 102, 32, 32, 53, 45, 49, 51, 53, 45, 49, 50, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 111, 117, 114, 115, 101, 108, 118, 101, 115, 32, 32, 49, 50, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 51, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 97, 105, 100, 32, 32, 49, 50, 51, 52, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 101, 114, 99, 101, 105, 118, 101, 32, 32, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 101, 114, 99, 101, 105, 118, 105, 110, 103, 32, 32, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 101, 114, 104, 97, 112, 115, 32, 32, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 50, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 32, 49, 50, 51, 52, 53, 45, 49, 51, 32, 32, 32, 49, 48, 46, 57, 46, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 99, 101, 105, 118, 101, 32, 32, 49, 50, 51, 53, 45, 49, 52, 45, 49, 50, 51, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 99, 101, 105, 118, 105, 110, 103, 32, 32, 49, 50, 51, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 106, 111, 105, 99, 101, 32, 32, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 106, 111, 105, 99, 105, 110, 103, 32, 32, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 49, 50, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 97, 105, 100, 32, 32, 50, 51, 52, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 104, 111, 117, 108, 100, 32, 32, 49, 52, 54, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 117, 99, 104, 32, 32, 50, 51, 52, 45, 49, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 101, 109, 115, 101, 108, 118, 101, 115, 32, 32, 50, 51, 52, 54, 45, 49, 51, 52, 45, 49, 50, 51, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 121, 115, 101, 108, 102, 32, 32, 49, 52, 53, 54, 45, 49, 51, 52, 53, 54, 45, 49, 50, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 111, 100, 97, 121, 32, 32, 50, 51, 52, 53, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 111, 103, 101, 116, 104, 101, 114, 32, 32, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 111, 109, 111, 114, 114, 111, 119, 32, 32, 50, 51, 52, 53, 45, 49, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 111, 110, 105, 103, 104, 116, 32, 32, 50, 51, 52, 53, 45, 49, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 111, 117, 108, 100, 32, 32, 50, 52, 53, 54, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 121, 111, 117, 114, 32, 32, 49, 51, 52, 53, 54, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 121, 111, 117, 114, 115, 101, 108, 102, 32, 32, 49, 51, 52, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 121, 111, 117, 114, 115, 101, 108, 118, 101, 115, 32, 32, 49, 51, 52, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 51, 54, 45, 50, 51, 52, 10, 10, 35, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 98, 111, 117, 116, 115, 32, 32, 49, 45, 49, 50, 45, 50, 51, 52, 32, 32, 32, 97, 112, 112, 101, 110, 100, 105, 120, 32, 49, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 98, 111, 118, 101, 115, 32, 32, 49, 45, 49, 50, 45, 49, 50, 51, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 99, 99, 111, 114, 100, 105, 110, 103, 115, 32, 32, 49, 45, 49, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 99, 114, 111, 115, 115, 115, 32, 32, 49, 45, 49, 52, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 115, 32, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 32, 32, 32, 97, 112, 112, 101, 110, 100, 105, 120, 32, 49, 46, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 110, 111, 111, 110, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 119, 97, 114, 100, 115, 32, 32, 49, 45, 49, 50, 52, 45, 50, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 103, 97, 105, 110, 115, 32, 32, 49, 45, 49, 50, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 103, 97, 105, 110, 115, 116, 115, 32, 32, 49, 45, 49, 50, 52, 53, 45, 51, 52, 45, 50, 51, 52, 10, 35, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 108, 109, 111, 115, 116, 115, 32, 32, 49, 45, 49, 50, 51, 45, 49, 51, 52, 45, 50, 51, 52, 32, 32, 32, 97, 112, 112, 101, 110, 100, 105, 120, 32, 49, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 108, 114, 101, 97, 100, 121, 115, 32, 32, 49, 45, 49, 50, 51, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 108, 115, 111, 115, 32, 32, 49, 45, 49, 50, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 108, 116, 104, 111, 117, 103, 104, 115, 32, 32, 49, 45, 49, 50, 51, 45, 49, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 108, 116, 111, 103, 101, 116, 104, 101, 114, 115, 32, 32, 49, 45, 49, 50, 51, 45, 50, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 108, 119, 97, 121, 115, 115, 32, 32, 49, 45, 49, 50, 51, 45, 50, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 99, 97, 117, 115, 101, 115, 32, 32, 50, 51, 45, 49, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 102, 111, 114, 101, 115, 32, 32, 50, 51, 45, 49, 50, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 104, 105, 110, 100, 115, 32, 32, 50, 51, 45, 49, 50, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 108, 111, 119, 115, 32, 32, 50, 51, 45, 49, 50, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 110, 101, 97, 116, 104, 115, 32, 32, 50, 51, 45, 49, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 115, 105, 100, 101, 115, 32, 32, 50, 51, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 116, 119, 101, 101, 110, 115, 32, 32, 50, 51, 45, 50, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 121, 111, 110, 100, 115, 32, 32, 50, 51, 45, 49, 51, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 50, 51, 52, 32, 32, 32, 97, 112, 112, 101, 110, 100, 105, 120, 32, 49, 46, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 114, 97, 105, 108, 108, 101, 115, 32, 32, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 51, 52, 32, 32, 32, 49, 48, 46, 57, 46, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 104, 105, 108, 100, 114, 101, 110, 115, 32, 32, 49, 54, 45, 49, 51, 52, 53, 45, 50, 51, 52, 32, 32, 32, 49, 48, 46, 57, 46, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 110, 99, 101, 105, 118, 101, 115, 32, 32, 50, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 110, 99, 101, 105, 118, 105, 110, 103, 115, 32, 32, 50, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 117, 108, 100, 115, 32, 32, 49, 52, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 101, 99, 101, 105, 118, 101, 115, 32, 32, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 101, 99, 101, 105, 118, 105, 110, 103, 115, 32, 32, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 101, 99, 108, 97, 114, 101, 115, 32, 32, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 101, 99, 108, 97, 114, 105, 110, 103, 115, 32, 32, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 45, 49, 50, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 101, 105, 116, 104, 101, 114, 115, 32, 32, 49, 53, 45, 50, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 50, 51, 52, 32, 32, 32, 49, 48, 46, 57, 46, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 114, 105, 101, 110, 100, 115, 32, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 50, 51, 52, 32, 32, 32, 97, 112, 112, 101, 110, 100, 105, 120, 32, 49, 46, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 51, 52, 32, 32, 32, 49, 48, 46, 57, 46, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 50, 51, 52, 32, 32, 32, 49, 48, 46, 57, 46, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 101, 114, 115, 101, 108, 102, 115, 32, 32, 49, 50, 53, 45, 49, 50, 52, 53, 54, 45, 49, 50, 52, 45, 50, 51, 52, 10, 35, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 105, 109, 115, 32, 32, 49, 50, 53, 45, 49, 51, 52, 45, 50, 51, 52, 32, 32, 32, 97, 112, 112, 101, 110, 100, 105, 120, 32, 49, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 105, 109, 115, 101, 108, 102, 115, 32, 32, 49, 50, 53, 45, 49, 51, 52, 45, 49, 50, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 105, 109, 109, 101, 100, 105, 97, 116, 101, 115, 32, 32, 50, 52, 45, 49, 51, 52, 45, 49, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 105, 116, 115, 115, 32, 32, 49, 51, 52, 54, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 105, 116, 115, 101, 108, 102, 115, 32, 32, 49, 51, 52, 54, 45, 49, 50, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 50, 51, 52, 32, 32, 32, 49, 48, 46, 57, 46, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 105, 116, 116, 108, 101, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 45, 50, 51, 52, 32, 32, 32, 49, 48, 46, 57, 46, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 99, 104, 115, 32, 32, 49, 51, 52, 45, 49, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 115, 116, 115, 32, 32, 49, 51, 52, 45, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 121, 115, 101, 108, 102, 115, 32, 32, 49, 51, 52, 45, 49, 51, 52, 53, 54, 45, 49, 50, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 110, 101, 99, 101, 115, 115, 97, 114, 121, 115, 32, 32, 49, 51, 52, 53, 45, 49, 53, 45, 49, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 110, 101, 105, 116, 104, 101, 114, 115, 32, 32, 49, 51, 52, 53, 45, 49, 53, 45, 50, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 111, 110, 101, 115, 101, 108, 102, 115, 32, 32, 53, 45, 49, 51, 53, 45, 49, 50, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 111, 117, 114, 115, 101, 108, 118, 101, 115, 115, 32, 32, 49, 50, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 51, 54, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 97, 105, 100, 115, 32, 32, 49, 50, 51, 52, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 101, 114, 99, 101, 105, 118, 101, 115, 32, 32, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 101, 114, 99, 101, 105, 118, 105, 110, 103, 115, 32, 32, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 101, 114, 104, 97, 112, 115, 115, 32, 32, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 50, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 51, 52, 32, 32, 32, 49, 48, 46, 57, 46, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 99, 101, 105, 118, 101, 115, 32, 32, 49, 50, 51, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 99, 101, 105, 118, 105, 110, 103, 115, 32, 32, 49, 50, 51, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 106, 111, 105, 99, 101, 115, 32, 32, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 106, 111, 105, 99, 105, 110, 103, 115, 32, 32, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 49, 50, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 97, 105, 100, 115, 32, 32, 50, 51, 52, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 104, 111, 117, 108, 100, 115, 32, 32, 49, 52, 54, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 117, 99, 104, 115, 32, 32, 50, 51, 52, 45, 49, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 101, 109, 115, 101, 108, 118, 101, 115, 115, 32, 32, 50, 51, 52, 54, 45, 49, 51, 52, 45, 49, 50, 51, 54, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 121, 115, 101, 108, 102, 115, 32, 32, 49, 52, 53, 54, 45, 49, 51, 52, 53, 54, 45, 49, 50, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 111, 100, 97, 121, 115, 32, 32, 50, 51, 52, 53, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 111, 103, 101, 116, 104, 101, 114, 115, 32, 32, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 111, 109, 111, 114, 114, 111, 119, 115, 32, 32, 50, 51, 52, 53, 45, 49, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 111, 110, 105, 103, 104, 116, 115, 32, 32, 50, 51, 52, 53, 45, 49, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 111, 117, 108, 100, 115, 32, 32, 50, 52, 53, 54, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 121, 111, 117, 114, 115, 32, 32, 49, 51, 52, 53, 54, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 121, 111, 117, 114, 115, 101, 108, 102, 115, 32, 32, 49, 51, 52, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 121, 111, 117, 114, 115, 101, 108, 118, 101, 115, 115, 32, 32, 49, 51, 52, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 51, 54, 45, 50, 51, 52, 45, 50, 51, 52, 10, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 98, 111, 117, 116, 39, 115, 32, 32, 49, 45, 49, 50, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 98, 111, 118, 101, 39, 115, 32, 32, 49, 45, 49, 50, 45, 49, 50, 51, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 99, 99, 111, 114, 100, 105, 110, 103, 39, 115, 32, 32, 49, 45, 49, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 99, 114, 111, 115, 115, 39, 115, 32, 32, 49, 45, 49, 52, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 51, 45, 50, 51, 52, 32, 32, 32, 97, 112, 112, 101, 110, 100, 105, 120, 32, 49, 46, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 110, 111, 111, 110, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 119, 97, 114, 100, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 103, 97, 105, 110, 39, 115, 32, 32, 49, 45, 49, 50, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 103, 97, 105, 110, 115, 116, 39, 115, 32, 32, 49, 45, 49, 50, 52, 53, 45, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 108, 109, 111, 115, 116, 39, 115, 32, 32, 49, 45, 49, 50, 51, 45, 49, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 108, 114, 101, 97, 100, 121, 39, 115, 32, 32, 49, 45, 49, 50, 51, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 108, 115, 111, 39, 115, 32, 32, 49, 45, 49, 50, 51, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 108, 116, 104, 111, 117, 103, 104, 39, 115, 32, 32, 49, 45, 49, 50, 51, 45, 49, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 108, 116, 111, 103, 101, 116, 104, 101, 114, 39, 115, 32, 32, 49, 45, 49, 50, 51, 45, 50, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 108, 119, 97, 121, 115, 39, 115, 32, 32, 49, 45, 49, 50, 51, 45, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 99, 97, 117, 115, 101, 39, 115, 32, 32, 50, 51, 45, 49, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 102, 111, 114, 101, 39, 115, 32, 32, 50, 51, 45, 49, 50, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 104, 105, 110, 100, 39, 115, 32, 32, 50, 51, 45, 49, 50, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 108, 111, 119, 39, 115, 32, 32, 50, 51, 45, 49, 50, 51, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 110, 101, 97, 116, 104, 39, 115, 32, 32, 50, 51, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 115, 105, 100, 101, 39, 115, 32, 32, 50, 51, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 116, 119, 101, 101, 110, 39, 115, 32, 32, 50, 51, 45, 50, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 121, 111, 110, 100, 39, 115, 32, 32, 50, 51, 45, 49, 51, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 39, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 51, 45, 50, 51, 52, 32, 32, 32, 97, 112, 112, 101, 110, 100, 105, 120, 32, 49, 46, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 114, 97, 105, 108, 108, 101, 39, 115, 32, 32, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 51, 45, 50, 51, 52, 32, 32, 32, 49, 48, 46, 57, 46, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 104, 105, 108, 100, 114, 101, 110, 39, 115, 32, 32, 49, 54, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 32, 32, 32, 49, 48, 46, 57, 46, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 110, 99, 101, 105, 118, 101, 39, 115, 32, 32, 50, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 110, 99, 101, 105, 118, 105, 110, 103, 39, 115, 32, 32, 50, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 117, 108, 100, 39, 115, 32, 32, 49, 52, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 101, 99, 101, 105, 118, 101, 39, 115, 32, 32, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 101, 99, 101, 105, 118, 105, 110, 103, 39, 115, 32, 32, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 101, 99, 108, 97, 114, 101, 39, 115, 32, 32, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 101, 99, 108, 97, 114, 105, 110, 103, 39, 115, 32, 32, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 45, 49, 50, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 101, 105, 116, 104, 101, 114, 39, 115, 32, 32, 49, 53, 45, 50, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 39, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 51, 45, 50, 51, 52, 32, 32, 32, 49, 48, 46, 57, 46, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 114, 105, 101, 110, 100, 39, 115, 32, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 32, 32, 32, 97, 112, 112, 101, 110, 100, 105, 120, 32, 49, 46, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 32, 32, 32, 49, 48, 46, 57, 46, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 51, 45, 50, 51, 52, 32, 32, 32, 49, 48, 46, 57, 46, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 101, 114, 115, 101, 108, 102, 39, 115, 32, 32, 49, 50, 53, 45, 49, 50, 52, 53, 54, 45, 49, 50, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 105, 109, 39, 115, 32, 32, 49, 50, 53, 45, 49, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 105, 109, 115, 101, 108, 102, 39, 115, 32, 32, 49, 50, 53, 45, 49, 51, 52, 45, 49, 50, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 105, 109, 109, 101, 100, 105, 97, 116, 101, 39, 115, 32, 32, 50, 52, 45, 49, 51, 52, 45, 49, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 105, 116, 115, 39, 115, 32, 32, 49, 51, 52, 54, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 105, 116, 115, 101, 108, 102, 39, 115, 32, 32, 49, 51, 52, 54, 45, 49, 50, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 39, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 32, 32, 32, 49, 48, 46, 57, 46, 51, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 105, 116, 116, 108, 101, 39, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 45, 51, 45, 50, 51, 52, 32, 32, 32, 49, 48, 46, 57, 46, 51, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 99, 104, 39, 115, 32, 32, 49, 51, 52, 45, 49, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 115, 116, 39, 115, 32, 32, 49, 51, 52, 45, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 121, 115, 101, 108, 102, 39, 115, 32, 32, 49, 51, 52, 45, 49, 51, 52, 53, 54, 45, 49, 50, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 110, 101, 99, 101, 115, 115, 97, 114, 121, 39, 115, 32, 32, 49, 51, 52, 53, 45, 49, 53, 45, 49, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 110, 101, 105, 116, 104, 101, 114, 39, 115, 32, 32, 49, 51, 52, 53, 45, 49, 53, 45, 50, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 111, 110, 101, 115, 101, 108, 102, 39, 115, 32, 32, 53, 45, 49, 51, 53, 45, 49, 50, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 111, 117, 114, 115, 101, 108, 118, 101, 115, 39, 115, 32, 32, 49, 50, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 51, 54, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 97, 105, 100, 39, 115, 32, 32, 49, 50, 51, 52, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 101, 114, 99, 101, 105, 118, 101, 39, 115, 32, 32, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 101, 114, 99, 101, 105, 118, 105, 110, 103, 39, 115, 32, 32, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 101, 114, 104, 97, 112, 115, 39, 115, 32, 32, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 50, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 39, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 51, 45, 50, 51, 52, 32, 32, 32, 49, 48, 46, 57, 46, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 99, 101, 105, 118, 101, 39, 115, 32, 32, 49, 50, 51, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 99, 101, 105, 118, 105, 110, 103, 39, 115, 32, 32, 49, 50, 51, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 106, 111, 105, 99, 101, 39, 115, 32, 32, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 106, 111, 105, 99, 105, 110, 103, 39, 115, 32, 32, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 49, 50, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 97, 105, 100, 39, 115, 32, 32, 50, 51, 52, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 104, 111, 117, 108, 100, 39, 115, 32, 32, 49, 52, 54, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 117, 99, 104, 39, 115, 32, 32, 50, 51, 52, 45, 49, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 101, 109, 115, 101, 108, 118, 101, 115, 39, 115, 32, 32, 50, 51, 52, 54, 45, 49, 51, 52, 45, 49, 50, 51, 54, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 121, 115, 101, 108, 102, 39, 115, 32, 32, 49, 52, 53, 54, 45, 49, 51, 52, 53, 54, 45, 49, 50, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 111, 100, 97, 121, 39, 115, 32, 32, 50, 51, 52, 53, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 111, 103, 101, 116, 104, 101, 114, 39, 115, 32, 32, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 111, 109, 111, 114, 114, 111, 119, 39, 115, 32, 32, 50, 51, 52, 53, 45, 49, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 111, 110, 105, 103, 104, 116, 39, 115, 32, 32, 50, 51, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 111, 117, 108, 100, 39, 115, 32, 32, 50, 52, 53, 54, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 121, 111, 117, 114, 39, 115, 32, 32, 49, 51, 52, 53, 54, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 121, 111, 117, 114, 115, 101, 108, 102, 39, 115, 32, 32, 49, 51, 52, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 121, 111, 117, 114, 115, 101, 108, 118, 101, 115, 39, 115, 32, 32, 49, 51, 52, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 51, 54, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 10, 35, 32, 32, 32, 49, 48, 46, 57, 46, 52, 10, 10, 119, 111, 114, 100, 32, 104, 101, 114, 102, 32, 61, 10, 119, 111, 114, 100, 32, 109, 115, 116, 32, 61, 10, 10, 35, 32, 32, 32, 49, 48, 46, 57, 46, 53, 10, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 97, 98, 32, 32, 32, 32, 32, 97, 98, 111, 117, 116, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 97, 98, 118, 32, 32, 32, 32, 97, 98, 111, 118, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 97, 99, 32, 32, 32, 32, 32, 97, 99, 99, 111, 114, 100, 105, 110, 103, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 97, 99, 114, 32, 32, 32, 32, 97, 99, 114, 111, 115, 115, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 97, 102, 32, 32, 32, 32, 32, 97, 102, 116, 101, 114, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 97, 102, 110, 32, 32, 32, 32, 97, 102, 116, 101, 114, 110, 111, 111, 110, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 97, 102, 119, 32, 32, 32, 32, 97, 102, 116, 101, 114, 119, 97, 114, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 97, 103, 32, 32, 32, 32, 32, 97, 103, 97, 105, 110, 10, 119, 111, 114, 100, 32, 97, 103, 115, 116, 32, 61, 32, 32, 32, 32, 32, 32, 32, 32, 97, 103, 97, 105, 110, 115, 116, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 97, 108, 109, 32, 32, 32, 32, 97, 108, 109, 111, 115, 116, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 97, 108, 114, 32, 32, 32, 32, 97, 108, 114, 101, 97, 100, 121, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 97, 108, 32, 32, 32, 32, 32, 97, 108, 115, 111, 10, 119, 111, 114, 100, 32, 97, 108, 116, 104, 32, 61, 32, 32, 32, 32, 32, 32, 32, 32, 97, 108, 116, 104, 111, 117, 103, 104, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 97, 108, 116, 32, 32, 32, 32, 97, 108, 116, 111, 103, 101, 116, 104, 101, 114, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 97, 108, 119, 32, 32, 32, 32, 97, 108, 119, 97, 121, 115, 10, 119, 111, 114, 100, 32, 98, 101, 99, 32, 61, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 101, 99, 97, 117, 115, 101, 10, 119, 111, 114, 100, 32, 98, 101, 102, 32, 61, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 101, 102, 111, 114, 101, 10, 119, 111, 114, 100, 32, 98, 101, 104, 32, 61, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 101, 104, 105, 110, 100, 10, 119, 111, 114, 100, 32, 98, 101, 108, 32, 61, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 101, 108, 111, 119, 10, 119, 111, 114, 100, 32, 98, 101, 110, 32, 49, 50, 45, 50, 54, 32, 32, 32, 32, 32, 98, 101, 110, 101, 97, 116, 104, 10, 119, 111, 114, 100, 32, 98, 101, 115, 32, 61, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 101, 115, 105, 100, 101, 10, 119, 111, 114, 100, 32, 98, 101, 116, 32, 61, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 101, 116, 119, 101, 101, 110, 10, 119, 111, 114, 100, 32, 98, 101, 121, 32, 61, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 101, 121, 111, 110, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 98, 108, 32, 32, 32, 32, 32, 98, 108, 105, 110, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 98, 114, 108, 32, 32, 32, 32, 98, 114, 97, 105, 108, 108, 101, 10, 119, 111, 114, 100, 32, 99, 104, 110, 32, 61, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 104, 105, 108, 100, 114, 101, 110, 10, 119, 111, 114, 100, 32, 99, 111, 110, 99, 118, 32, 61, 32, 32, 32, 32, 32, 32, 32, 99, 111, 110, 99, 101, 105, 118, 101, 10, 119, 111, 114, 100, 32, 99, 111, 110, 99, 118, 103, 32, 61, 32, 32, 32, 32, 32, 32, 99, 111, 110, 99, 101, 105, 118, 105, 110, 103, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 99, 100, 32, 32, 32, 32, 32, 99, 111, 117, 108, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 100, 99, 118, 32, 32, 32, 32, 100, 101, 99, 101, 105, 118, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 100, 99, 118, 103, 32, 32, 32, 100, 101, 99, 101, 105, 118, 105, 110, 103, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 100, 99, 108, 32, 32, 32, 32, 100, 101, 99, 108, 97, 114, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 100, 99, 108, 103, 32, 32, 32, 100, 101, 99, 108, 97, 114, 105, 110, 103, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 101, 105, 32, 32, 32, 32, 32, 101, 105, 116, 104, 101, 114, 10, 119, 111, 114, 100, 32, 102, 115, 116, 32, 61, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 105, 114, 115, 116, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 102, 114, 32, 32, 32, 32, 32, 102, 114, 105, 101, 110, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 103, 100, 32, 32, 32, 32, 32, 103, 111, 111, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 103, 114, 116, 32, 32, 32, 32, 103, 114, 101, 97, 116, 10, 119, 111, 114, 100, 32, 104, 101, 114, 102, 32, 61, 32, 32, 32, 32, 32, 32, 32, 32, 104, 101, 114, 115, 101, 108, 102, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 104, 109, 32, 32, 32, 32, 32, 104, 105, 109, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 104, 109, 102, 32, 32, 32, 32, 104, 105, 109, 115, 101, 108, 102, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 105, 109, 109, 32, 32, 32, 32, 105, 109, 109, 101, 100, 105, 97, 116, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 120, 115, 32, 32, 32, 32, 32, 105, 116, 115, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 120, 102, 32, 32, 32, 32, 32, 105, 116, 115, 101, 108, 102, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 108, 114, 32, 32, 32, 32, 32, 108, 101, 116, 116, 101, 114, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 108, 108, 32, 32, 32, 32, 32, 108, 105, 116, 116, 108, 101, 10, 119, 111, 114, 100, 32, 109, 99, 104, 32, 61, 32, 32, 32, 32, 32, 32, 32, 32, 32, 109, 117, 99, 104, 10, 119, 111, 114, 100, 32, 109, 115, 116, 32, 61, 32, 32, 32, 32, 32, 32, 32, 32, 32, 109, 117, 115, 116, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 109, 121, 102, 32, 32, 32, 32, 109, 121, 115, 101, 108, 102, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 110, 101, 99, 32, 32, 32, 32, 110, 101, 99, 101, 115, 115, 97, 114, 121, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 110, 101, 105, 32, 32, 32, 32, 110, 101, 105, 116, 104, 101, 114, 10, 119, 111, 114, 100, 32, 111, 110, 101, 102, 32, 61, 32, 32, 32, 32, 32, 32, 32, 32, 111, 110, 101, 115, 101, 108, 102, 10, 119, 111, 114, 100, 32, 111, 117, 114, 118, 115, 32, 61, 32, 32, 32, 32, 32, 32, 32, 111, 117, 114, 115, 101, 108, 118, 101, 115, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 112, 100, 32, 32, 32, 32, 32, 112, 97, 105, 100, 10, 119, 111, 114, 100, 32, 112, 101, 114, 99, 118, 32, 61, 32, 32, 32, 32, 32, 32, 32, 112, 101, 114, 99, 101, 105, 118, 101, 10, 119, 111, 114, 100, 32, 112, 101, 114, 99, 118, 103, 32, 61, 32, 32, 32, 32, 32, 32, 112, 101, 114, 99, 101, 105, 118, 105, 110, 103, 10, 119, 111, 114, 100, 32, 112, 101, 114, 104, 32, 61, 32, 32, 32, 32, 32, 32, 32, 32, 112, 101, 114, 104, 97, 112, 115, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 113, 107, 32, 32, 32, 32, 32, 113, 117, 105, 99, 107, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 114, 99, 118, 32, 32, 32, 32, 114, 101, 99, 101, 105, 118, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 114, 99, 118, 103, 32, 32, 32, 114, 101, 99, 101, 105, 118, 105, 110, 103, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 114, 106, 99, 32, 32, 32, 32, 114, 101, 106, 111, 105, 99, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 114, 106, 99, 103, 32, 32, 32, 114, 101, 106, 111, 105, 99, 105, 110, 103, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 115, 100, 32, 32, 32, 32, 32, 115, 97, 105, 100, 10, 119, 111, 114, 100, 32, 115, 104, 100, 32, 61, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 104, 111, 117, 108, 100, 10, 119, 111, 114, 100, 32, 115, 99, 104, 32, 61, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 117, 99, 104, 10, 119, 111, 114, 100, 32, 116, 104, 101, 109, 118, 115, 32, 61, 32, 32, 32, 32, 32, 32, 116, 104, 101, 109, 115, 101, 108, 118, 101, 115, 10, 119, 111, 114, 100, 32, 116, 104, 121, 102, 32, 61, 32, 32, 32, 32, 32, 32, 32, 32, 116, 104, 121, 115, 101, 108, 102, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 116, 100, 32, 32, 32, 32, 32, 116, 111, 100, 97, 121, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 116, 103, 114, 32, 32, 32, 32, 116, 111, 103, 101, 116, 104, 101, 114, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 116, 109, 32, 32, 32, 32, 32, 116, 111, 109, 111, 114, 114, 111, 119, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 116, 110, 32, 32, 32, 32, 32, 116, 111, 110, 105, 103, 104, 116, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 119, 100, 32, 32, 32, 32, 32, 119, 111, 117, 108, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 121, 114, 32, 32, 32, 32, 32, 121, 111, 117, 114, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 121, 114, 102, 32, 32, 32, 32, 121, 111, 117, 114, 115, 101, 108, 102, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 121, 114, 118, 115, 32, 32, 32, 121, 111, 117, 114, 115, 101, 108, 118, 101, 115, 10, 10, 35, 32, 32, 32, 49, 48, 46, 57, 46, 54, 10, 35, 84, 79, 68, 79, 10, 10, 35, 32, 32, 32, 65, 112, 112, 101, 110, 100, 105, 120, 32, 49, 10, 10, 119, 111, 114, 100, 32, 97, 98, 111, 117, 116, 115, 32, 49, 45, 49, 50, 45, 49, 50, 53, 54, 45, 50, 51, 52, 53, 45, 50, 51, 52, 10, 119, 111, 114, 100, 32, 97, 108, 109, 111, 115, 116, 115, 32, 49, 45, 49, 50, 51, 45, 49, 51, 52, 45, 49, 51, 53, 45, 51, 52, 45, 50, 51, 52, 10, 119, 111, 114, 100, 32, 104, 105, 109, 115, 32, 49, 50, 53, 45, 50, 52, 45, 49, 51, 52, 45, 50, 51, 52, 10, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 108, 109, 115, 32, 49, 45, 49, 50, 51, 45, 49, 51, 52, 45, 50, 51, 52, 10, 10, 35, 32, 32, 32, 100, 111, 110, 39, 116, 32, 109, 105, 120, 32, 226, 128, 153, 32, 119, 105, 116, 104, 32, 39, 32, 116, 111, 103, 101, 116, 104, 101, 114, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 226, 128, 153, 116, 119, 111, 117, 108, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128]);
fileData263.push.apply(fileData263, [153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 51, 45, 50, 51, 52, 53, 45, 50, 52, 53, 54, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 39, 116, 119, 111, 117, 108, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 51, 45, 50, 51, 52, 53, 45, 50, 52, 53, 54, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 226, 128, 153, 116, 119, 111, 117, 108, 100, 226, 128, 153, 118, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 51, 45, 50, 51, 52, 53, 45, 50, 52, 53, 54, 45, 49, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 39, 116, 119, 111, 117, 108, 100, 39, 118, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 51, 45, 50, 51, 52, 53, 45, 50, 52, 53, 54, 45, 49, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 226, 128, 153, 116, 119, 111, 117, 108, 100, 97, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 51, 45, 50, 51, 52, 53, 45, 50, 52, 53, 54, 45, 49, 52, 53, 45, 49, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 39, 116, 119, 111, 117, 108, 100, 97, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 51, 45, 50, 51, 52, 53, 45, 50, 52, 53, 54, 45, 49, 52, 53, 45, 49, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 226, 128, 153, 116, 119, 111, 117, 108, 100, 110, 226, 128, 153, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 51, 45, 50, 51, 52, 53, 45, 50, 52, 53, 54, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 39, 116, 119, 111, 117, 108, 100, 110, 39, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 51, 45, 50, 51, 52, 53, 45, 50, 52, 53, 54, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 226, 128, 153, 116, 119, 111, 117, 108, 100, 110, 226, 128, 153, 116, 226, 128, 153, 118, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 51, 45, 50, 51, 52, 53, 45, 50, 52, 53, 54, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 39, 116, 119, 111, 117, 108, 100, 110, 39, 116, 39, 118, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 51, 45, 50, 51, 52, 53, 45, 50, 52, 53, 54, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 98, 111, 117, 116, 102, 97, 99, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 45, 49, 50, 52, 45, 49, 45, 49, 52, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 98, 111, 117, 116, 102, 97, 99, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 45, 49, 50, 52, 45, 49, 45, 49, 52, 45, 49, 50, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 98, 111, 117, 116, 102, 97, 99, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 45, 49, 50, 52, 45, 49, 45, 49, 52, 45, 49, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 98, 111, 117, 116, 102, 97, 99, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 45, 49, 50, 52, 45, 49, 45, 49, 52, 45, 51, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 98, 111, 117, 116, 116, 117, 114, 110, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 45, 50, 51, 52, 53, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 98, 111, 117, 116, 116, 117, 114, 110, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 45, 50, 51, 52, 53, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 45, 49, 50, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 98, 111, 118, 101, 98, 111, 97, 114, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 45, 49, 50, 51, 54, 45, 49, 50, 45, 49, 51, 53, 45, 51, 52, 53, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 98, 111, 118, 101, 103, 114, 111, 117, 110, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 52, 54, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 98, 111, 118, 101, 109, 101, 110, 116, 105, 111, 110, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 45, 49, 50, 51, 54, 45, 49, 51, 52, 45, 50, 54, 45, 53, 54, 45, 49, 51, 52, 53, 45, 49, 50, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 99, 99, 111, 114, 100, 105, 110, 103, 108, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 52, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 111, 114, 101, 115, 97, 105, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 51, 52, 53, 54, 45, 49, 53, 45, 50, 51, 52, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 98, 97, 116, 116, 108, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 50, 45, 49, 45, 50, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 51, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 98, 105, 114, 116, 104, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 50, 45, 50, 52, 45, 49, 50, 51, 53, 45, 49, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 98, 114, 101, 97, 107, 102, 97, 115, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 50, 45, 49, 50, 51, 53, 45, 50, 45, 49, 51, 45, 49, 50, 52, 45, 49, 45, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 98, 117, 114, 110, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 50, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 98, 117, 114, 110, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 50, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 45, 49, 50, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 98, 117, 114, 110, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 50, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 45, 49, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 98, 117, 114, 110, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 50, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 45, 51, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 99, 97, 114, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 52, 45, 51, 52, 53, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 99, 108, 97, 112, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 52, 45, 49, 50, 51, 45, 49, 45, 49, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 99, 111, 102, 102, 101, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 52, 45, 49, 50, 51, 53, 54, 45, 49, 50, 52, 45, 49, 53, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 100, 97, 109, 112, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 52, 53, 45, 49, 45, 49, 51, 52, 45, 49, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 100, 97, 114, 107, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 52, 53, 45, 51, 52, 53, 45, 49, 51, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 100, 101, 99, 107, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 52, 53, 45, 49, 53, 45, 49, 52, 45, 49, 51, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 100, 105, 110, 110, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 52, 53, 45, 51, 53, 45, 49, 51, 52, 53, 45, 49, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 102, 108, 111, 119, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 50, 52, 45, 49, 50, 51, 45, 50, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 103, 97, 109, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 50, 52, 53, 45, 49, 45, 49, 51, 52, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 103, 108, 111, 119, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 50, 52, 53, 45, 49, 50, 51, 45, 50, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 103, 117, 97, 114, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 50, 52, 53, 45, 49, 51, 54, 45, 51, 52, 53, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 104, 97, 116, 99, 104, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 50, 53, 45, 49, 45, 50, 51, 52, 53, 45, 49, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 104, 97, 116, 99, 104, 101, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 50, 53, 45, 49, 45, 50, 51, 52, 53, 45, 49, 54, 45, 49, 53, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 104, 111, 117, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 50, 53, 45, 49, 50, 53, 54, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 108, 105, 102, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 50, 51, 45, 50, 52, 45, 49, 50, 52, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 108, 105, 103, 104, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 50, 51, 45, 50, 52, 45, 49, 50, 54, 45, 50, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 108, 105, 118, 101, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 50, 51, 45, 50, 52, 45, 49, 50, 51, 54, 45, 49, 53, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 108, 117, 110, 99, 104, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 50, 51, 45, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 108, 117, 110, 99, 104, 101, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 50, 51, 45, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 54, 45, 49, 53, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 109, 97, 114, 107, 101, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 45, 51, 52, 53, 45, 49, 51, 45, 49, 53, 45, 50, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 109, 97, 116, 99, 104, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 45, 49, 45, 50, 51, 52, 53, 45, 49, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 109, 97, 116, 99, 104, 101, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 45, 49, 45, 50, 51, 52, 53, 45, 49, 54, 45, 49, 53, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 109, 97, 116, 104, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 45, 49, 45, 49, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 109, 101, 101, 116, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 45, 49, 53, 45, 49, 53, 45, 50, 51, 52, 53, 45, 51, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 109, 101, 110, 116, 105, 111, 110, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 45, 50, 54, 45, 53, 54, 45, 49, 51, 52, 53, 45, 49, 50, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 109, 105, 100, 100, 97, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 45, 50, 52, 45, 49, 52, 53, 45, 53, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 109, 105, 100, 110, 105, 103, 104, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 45, 50, 52, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 50, 52, 45, 49, 50, 54, 45, 50, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 109, 111, 115, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 45, 49, 51, 53, 45, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 110, 111, 111, 110, 116, 101, 97, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 53, 45, 49, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 112, 97, 105, 110, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 50, 51, 52, 45, 49, 45, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 112, 97, 114, 116, 105, 101, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 53, 45, 49, 50, 51, 52, 45, 50, 52, 45, 49, 53, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 112, 97, 114, 116, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 53, 45, 49, 50, 51, 52, 45, 49, 51, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 112, 105, 101, 99, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 50, 51, 52, 45, 50, 52, 45, 49, 53, 45, 49, 52, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 112, 108, 97, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 50, 51, 52, 45, 49, 50, 51, 45, 49, 45, 49, 51, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 115, 97, 108, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 45, 49, 45, 49, 50, 51, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 115, 99, 104, 111, 111, 108, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 45, 49, 54, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 50, 51, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 115, 101, 110, 115, 97, 116, 105, 111, 110, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 45, 50, 54, 45, 50, 51, 52, 45, 49, 45, 53, 54, 45, 49, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 115, 104, 97, 118, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 52, 54, 45, 49, 45, 49, 50, 51, 54, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 115, 104, 111, 99, 107, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 52, 54, 45, 49, 51, 53, 45, 49, 52, 45, 49, 51, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 115, 104, 111, 119, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 52, 54, 45, 50, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 115, 104, 111, 119, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 52, 54, 45, 50, 52, 54, 45, 49, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 115, 117, 112, 112, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 45, 49, 51, 54, 45, 49, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 116, 97, 115, 116, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 53, 45, 49, 45, 51, 52, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 116, 97, 120, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 53, 45, 49, 45, 49, 51, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 116, 97, 120, 101, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 53, 45, 49, 45, 49, 51, 52, 54, 45, 49, 53, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 116, 101, 97, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 53, 45, 49, 53, 45, 49, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 116, 104, 101, 97, 116, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 54, 45, 49, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 116, 104, 101, 97, 116, 114, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 54, 45, 49, 45, 50, 51, 52, 53, 45, 49, 50, 51, 53, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 116, 104, 111, 117, 103, 104, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 49, 52, 53, 54, 45, 53, 45, 49, 50, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 116, 105, 109, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 53, 45, 50, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 116, 114, 101, 97, 116, 109, 101, 110, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 53, 45, 49, 50, 51, 53, 45, 50, 45, 50, 51, 52, 53, 45, 53, 54, 45, 50, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 119, 111, 114, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 52, 53, 45, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 119, 111, 114, 107, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 53, 45, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 102, 116, 101, 114, 119, 111, 114, 108, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 52, 45, 52, 53, 54, 45, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 112, 112, 101, 114, 99, 101, 105, 118, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 112, 112, 101, 114, 99, 101, 105, 118, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 112, 112, 101, 114, 99, 101, 105, 118, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 112, 112, 101, 114, 99, 101, 105, 118, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 45, 49, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 97, 114, 99, 104, 100, 101, 99, 101, 105, 118, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 51, 52, 53, 45, 49, 54, 45, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 101, 102, 111, 114, 101, 104, 97, 110, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 45, 49, 50, 52, 45, 49, 50, 53, 45, 49, 50, 51, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 101, 102, 111, 114, 101, 109, 101, 110, 116, 105, 111, 110, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 45, 49, 50, 52, 45, 49, 51, 52, 45, 50, 54, 45, 53, 54, 45, 49, 51, 52, 53, 45, 49, 50, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 101, 102, 114, 105, 101, 110, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 45, 49, 50, 52, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 101, 104, 105, 110, 100, 104, 97, 110, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 45, 49, 50, 53, 45, 49, 50, 53, 45, 49, 50, 51, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 101, 108, 105, 116, 116, 108, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 45, 49, 50, 51, 45, 49, 50, 51, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 101, 108, 105, 116, 116, 108, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 45, 49, 50, 51, 45, 49, 50, 51, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 101, 108, 105, 116, 116, 108, 101, 109, 101, 110, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 45, 49, 50, 51, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 101, 108, 105, 116, 116, 108, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 45, 49, 50, 51, 45, 49, 50, 51, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 101, 108, 111, 119, 100, 101, 99, 107, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 45, 49, 50, 51, 45, 49, 52, 53, 45, 49, 53, 45, 49, 52, 45, 49, 51, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 101, 108, 111, 119, 103, 114, 111, 117, 110, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 45, 49, 50, 51, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 52, 54, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 101, 108, 111, 119, 109, 101, 110, 116, 105, 111, 110, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 45, 49, 50, 51, 45, 49, 51, 52, 45, 50, 54, 45, 53, 54, 45, 49, 51, 52, 53, 45, 49, 50, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 101, 110, 101, 97, 116, 104, 100, 101, 99, 107, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 45, 49, 51, 52, 53, 45, 49, 52, 53, 45, 49, 53, 45, 49, 52, 45, 49, 51, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 101, 110, 101, 97, 116, 104, 103, 114, 111, 117, 110, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 45, 49, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 52, 54, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 101, 116, 119, 101, 101, 110, 100, 101, 99, 107, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 45, 50, 51, 52, 53, 45, 49, 52, 53, 45, 49, 53, 45, 49, 52, 45, 49, 51, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 101, 116, 119, 101, 101, 110, 116, 105, 109, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 45, 50, 51, 52, 53, 45, 53, 45, 50, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 101, 116, 119, 101, 101, 110, 119, 104, 105, 108, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 45, 50, 51, 52, 53, 45, 49, 53, 54, 45, 50, 52, 45, 49, 50, 51, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 108, 105, 110, 100, 102, 105, 115, 104, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 45, 49, 50, 51, 45, 49, 50, 52, 45, 50, 52, 45, 49, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 108, 105, 110, 100, 102, 105, 115, 104, 101, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 45, 49, 50, 51, 45, 49, 50, 52, 45, 50, 52, 45, 49, 52, 54, 45, 49, 53, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 108, 105, 110, 100, 102, 111, 108, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 45, 49, 50, 51, 45, 49, 50, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 108, 105, 110, 100, 102, 111, 108, 100, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 45, 49, 50, 51, 45, 49, 50, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 45, 49, 50, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 108, 105, 110, 100, 102, 111, 108, 100, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 45, 49, 50, 51, 45, 49, 50, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 45, 49, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 108, 105, 110, 100, 102, 111, 108, 100, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 45, 49, 50, 51, 45, 49, 50, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 45, 51, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 108, 105, 110, 100, 108, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 45, 49, 50, 51, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 108, 105, 110, 100, 109, 97, 110, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 45, 49, 50, 51, 45, 49, 51, 52, 45, 49, 45, 49, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 108, 105, 110, 100, 109, 101, 110, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 45, 49, 50, 51, 45, 49, 51, 52, 45, 50, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 108, 105, 110, 100, 110, 101, 115, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 108, 105, 110, 100, 110, 101, 115, 115, 101, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 108, 105, 110, 100, 115, 105, 100, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 45, 49, 50, 51, 45, 50, 51, 52, 45, 50, 52, 45, 49, 52, 53, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 108, 105, 110, 100, 115, 105, 100, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 45, 49, 50, 51, 45, 50, 51, 52, 45, 50, 52, 45, 49, 52, 53, 45, 49, 50, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 108, 105, 110, 100, 115, 105, 100, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 45, 49, 50, 51, 45, 50, 51, 52, 45, 50, 52, 45, 49, 52, 53, 45, 49, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 108, 105, 110, 100, 115, 105, 100, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 45, 49, 50, 51, 45, 50, 51, 52, 45, 50, 52, 45, 49, 52, 53, 45, 51, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 108, 105, 110, 100, 115, 105, 103, 104, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 45, 49, 50, 51, 45, 50, 51, 52, 45, 50, 52, 45, 49, 50, 54, 45, 50, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 108, 105, 110, 100, 115, 116, 111, 114, 105, 101, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 45, 49, 50, 51, 45, 51, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 50, 52, 45, 49, 53, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 108, 105, 110, 100, 115, 116, 111, 114, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 45, 49, 50, 51, 45, 51, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 108, 105, 110, 100, 119, 111, 114, 109, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 45, 49, 50, 51, 45, 50, 52, 53, 54, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 108, 111, 111, 100, 108, 101, 116, 116, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 45, 49, 50, 51, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 52, 53, 45, 49, 50, 51, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 111, 121, 102, 114, 105, 101, 110, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 45, 49, 51, 53, 45, 49, 51, 52, 53, 54, 45, 49, 50, 52, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 114, 97, 105, 108, 108, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 114, 97, 105, 108, 108, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 114, 97, 105, 108, 108, 101, 119, 114, 105, 116, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 53, 54, 45, 49, 50, 51, 53, 45, 50, 52, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 114, 97, 105, 108, 108, 101, 119, 114, 105, 116, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 53, 54, 45, 49, 50, 51, 53, 45, 50, 52, 45, 50, 51, 52, 53, 45, 51, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 114, 97, 105, 108, 108, 101, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 98, 114, 97, 105, 110, 99, 104, 105, 108, 100, 114, 101, 110, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 45, 49, 50, 51, 53, 45, 49, 45, 51, 53, 45, 49, 54, 45, 49, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 99, 104, 97, 105, 110, 108, 101, 116, 116, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 54, 45, 49, 45, 51, 53, 45, 49, 50, 51, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 99, 104, 105, 108, 100, 114, 101, 110, 226, 128, 153, 115, 119, 101, 97, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 54, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 45, 50, 52, 53, 54, 45, 49, 53, 45, 51, 52, 53]);
fileData263.push.apply(fileData263, [10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 99, 104, 105, 108, 100, 114, 101, 110, 39, 115, 119, 101, 97, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 54, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 45, 50, 52, 53, 54, 45, 49, 53, 45, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 99, 111, 108, 111, 114, 98, 108, 105, 110, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 99, 111, 108, 111, 114, 98, 108, 105, 110, 100, 110, 101, 115, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 99, 111, 108, 111, 114, 98, 108, 105, 110, 100, 110, 101, 115, 115, 101, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 99, 111, 108, 111, 117, 114, 98, 108, 105, 110, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 50, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 99, 111, 108, 111, 117, 114, 98, 108, 105, 110, 100, 110, 101, 115, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 50, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 99, 111, 108, 111, 117, 114, 98, 108, 105, 110, 100, 110, 101, 115, 115, 101, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 50, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 99, 111, 110, 99, 101, 105, 118, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 99, 111, 110, 99, 101, 105, 118, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 99, 111, 117, 108, 100, 226, 128, 153, 118, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 45, 49, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 99, 111, 117, 108, 100, 39, 118, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 45, 49, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 99, 111, 117, 108, 100, 97, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 45, 49, 52, 53, 45, 49, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 99, 111, 117, 108, 100, 101, 115, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 45, 49, 52, 53, 45, 49, 53, 45, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 99, 111, 117, 108, 100, 110, 226, 128, 153, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 99, 111, 117, 108, 100, 110, 39, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 99, 111, 117, 108, 100, 110, 226, 128, 153, 116, 226, 128, 153, 118, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 99, 111, 117, 108, 100, 110, 39, 116, 39, 118, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 99, 111, 117, 108, 100, 115, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 45, 49, 52, 53, 45, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 100, 101, 97, 102, 98, 108, 105, 110, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 53, 45, 50, 45, 49, 50, 52, 45, 49, 50, 45, 49, 50, 51, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 100, 101, 97, 102, 98, 108, 105, 110, 100, 110, 101, 115, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 53, 45, 50, 45, 49, 50, 52, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 100, 101, 97, 102, 98, 108, 105, 110, 100, 110, 101, 115, 115, 101, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 53, 45, 50, 45, 49, 50, 52, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 100, 101, 99, 101, 105, 118, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 100, 101, 99, 101, 105, 118, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 100, 101, 99, 108, 97, 114, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 100, 101, 99, 108, 97, 114, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 100, 101, 102, 114, 105, 101, 110, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 53, 45, 49, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 100, 111, 45, 105, 116, 45, 121, 111, 117, 114, 115, 101, 108, 102, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 53, 45, 51, 54, 45, 49, 51, 52, 54, 45, 51, 54, 45, 49, 51, 52, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 52, 45, 49, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 100, 111, 117, 98, 108, 101, 113, 117, 105, 99, 107, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 53, 45, 49, 50, 53, 54, 45, 49, 50, 45, 49, 50, 51, 45, 49, 53, 45, 49, 50, 51, 52, 53, 45, 49, 51, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 101, 97, 115, 116, 97, 98, 111, 117, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 53, 45, 49, 45, 51, 52, 45, 49, 45, 49, 50, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 102, 101, 101, 108, 103, 111, 111, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 45, 49, 53, 45, 49, 53, 45, 49, 50, 51, 45, 49, 50, 52, 53, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 102, 101, 101, 116, 102, 105, 114, 115, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 45, 49, 53, 45, 49, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 45, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 102, 105, 114, 115, 116, 97, 105, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 45, 51, 52, 45, 49, 45, 50, 52, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 102, 105, 114, 115, 116, 97, 105, 100, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 45, 51, 52, 45, 49, 45, 50, 52, 45, 49, 52, 53, 45, 49, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 102, 105, 114, 115, 116, 98, 111, 114, 110, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 102, 105, 114, 115, 116, 99, 108, 97, 115, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 45, 51, 52, 45, 49, 52, 45, 49, 50, 51, 45, 49, 45, 50, 51, 52, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 102, 105, 114, 115, 116, 99, 108, 97, 115, 115, 101, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 45, 51, 52, 45, 49, 52, 45, 49, 50, 51, 45, 49, 45, 50, 51, 52, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 102, 105, 114, 115, 116, 100, 97, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 45, 51, 52, 45, 53, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 102, 105, 114, 115, 116, 100, 97, 121, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 45, 51, 52, 45, 53, 45, 49, 52, 53, 45, 49, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 102, 105, 114, 115, 116, 102, 114, 117, 105, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 51, 54, 45, 50, 52, 45, 50, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 102, 105, 114, 115, 116, 102, 114, 117, 105, 116, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 51, 54, 45, 50, 52, 45, 50, 51, 52, 53, 45, 51, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 102, 105, 114, 115, 116, 103, 101, 110, 101, 114, 97, 116, 105, 111, 110, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 52, 53, 45, 50, 54, 45, 49, 50, 52, 53, 54, 45, 49, 45, 53, 54, 45, 49, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 102, 105, 114, 115, 116, 104, 97, 110, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 53, 45, 49, 50, 51, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 102, 105, 114, 115, 116, 104, 97, 110, 100, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 53, 45, 49, 50, 51, 52, 54, 45, 49, 50, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 102, 105, 114, 115, 116, 108, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 51, 45, 51, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 102, 105, 114, 115, 116, 108, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 102, 105, 114, 115, 116, 110, 101, 115, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 45, 51, 52, 45, 53, 54, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 102, 105, 114, 115, 116, 110, 105, 103, 104, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 45, 51, 52, 45, 49, 51, 52, 53, 45, 50, 52, 45, 49, 50, 54, 45, 50, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 102, 105, 114, 115, 116, 110, 105, 103, 104, 116, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 45, 51, 52, 45, 49, 51, 52, 53, 45, 50, 52, 45, 49, 50, 54, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 102, 105, 114, 115, 116, 114, 97, 116, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 51, 53, 45, 49, 45, 50, 51, 52, 53, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 102, 105, 114, 115, 116, 114, 97, 116, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 51, 53, 45, 49, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 102, 105, 114, 115, 116, 114, 97, 116, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 51, 53, 45, 49, 45, 50, 51, 52, 53, 45, 51, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 102, 105, 114, 115, 116, 115, 116, 114, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 45, 51, 52, 45, 51, 52, 45, 49, 50, 51, 53, 45, 51, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 102, 111, 114, 97, 115, 109, 117, 99, 104, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 53, 54, 45, 49, 45, 50, 51, 52, 45, 49, 51, 52, 45, 49, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 102, 111, 114, 101, 115, 97, 105, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 53, 54, 45, 49, 53, 45, 50, 51, 52, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 102, 111, 115, 116, 101, 114, 99, 104, 105, 108, 100, 114, 101, 110, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 45, 49, 51, 53, 45, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 54, 45, 49, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 102, 114, 105, 101, 110, 100, 108, 101, 115, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 52, 54, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 102, 114, 105, 101, 110, 100, 108, 101, 115, 115, 110, 101, 115, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 52, 54, 45, 50, 51, 52, 45, 53, 54, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 102, 114, 105, 101, 110, 100, 108, 101, 115, 115, 110, 101, 115, 115, 101, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 52, 54, 45, 50, 51, 52, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 102, 114, 105, 101, 110, 100, 108, 105, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 45, 49, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 102, 114, 105, 101, 110, 100, 108, 105, 101, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 45, 49, 53, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 102, 114, 105, 101, 110, 100, 108, 105, 101, 115, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 45, 49, 53, 45, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 102, 114, 105, 101, 110, 100, 108, 105, 110, 101, 115, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 45, 53, 54, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 102, 114, 105, 101, 110, 100, 108, 105, 110, 101, 115, 115, 101, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 102, 114, 105, 101, 110, 100, 108, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 102, 114, 105, 101, 110, 100, 115, 104, 105, 112, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 52, 54, 45, 50, 52, 45, 49, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 97, 100, 97, 98, 111, 117, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 45, 49, 52, 53, 45, 49, 45, 49, 50, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 97, 105, 110, 115, 97, 105, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 45, 51, 53, 45, 50, 51, 52, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 97, 108, 102, 114, 105, 101, 110, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 45, 49, 50, 51, 45, 49, 50, 52, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 101, 110, 116, 108, 101, 109, 97, 110, 102, 114, 105, 101, 110, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 50, 54, 45, 50, 51, 52, 53, 45, 49, 50, 51, 45, 49, 53, 45, 49, 51, 52, 45, 49, 45, 49, 51, 52, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 101, 110, 116, 108, 101, 109, 101, 110, 102, 114, 105, 101, 110, 100, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 50, 54, 45, 50, 51, 52, 53, 45, 49, 50, 51, 45, 49, 53, 45, 49, 51, 52, 45, 50, 54, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 105, 114, 108, 102, 114, 105, 101, 110, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 50, 52, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 100, 99, 104, 105, 108, 100, 114, 101, 110, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 51, 53, 45, 49, 52, 53, 45, 49, 54, 45, 49, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 97, 102, 116, 101, 114, 110, 111, 111, 110, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 45, 49, 50, 52, 45, 49, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 98, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 45, 49, 51, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 98, 121, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 45, 49, 51, 52, 53, 54, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 98, 121, 101, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 45, 49, 51, 52, 53, 54, 45, 49, 53, 45, 51, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 98, 121, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 45, 49, 51, 52, 53, 54, 45, 51, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 100, 97, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 53, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 101, 115, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 53, 45, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 101, 118, 101, 110, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 53, 45, 49, 50, 51, 54, 45, 50, 54, 45, 51, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 102, 101, 108, 108, 111, 119, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 52, 45, 49, 53, 45, 49, 50, 51, 45, 49, 50, 51, 45, 50, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 102, 101, 108, 108, 111, 119, 115, 104, 105, 112, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 52, 45, 49, 53, 45, 49, 50, 51, 45, 49, 50, 51, 45, 50, 52, 54, 45, 49, 52, 54, 45, 50, 52, 45, 49, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 104, 101, 97, 114, 116, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 53, 45, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 104, 101, 97, 114, 116, 101, 100, 108, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 53, 45, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 104, 101, 97, 114, 116, 101, 100, 110, 101, 115, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 53, 45, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 45, 53, 54, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 104, 117, 109, 111, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 104, 117, 109, 111, 114, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 104, 117, 109, 111, 114, 101, 100, 108, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 104, 117, 109, 111, 114, 101, 100, 110, 101, 115, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 45, 53, 54, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 104, 117, 109, 111, 114, 101, 100, 110, 101, 115, 115, 101, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 104, 117, 109, 111, 117, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 50, 53, 54, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 104, 117, 109, 111, 117, 114, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 50, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 104, 117, 109, 111, 117, 114, 101, 100, 108, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 50, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 104, 117, 109, 111, 117, 114, 101, 100, 110, 101, 115, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 50, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 45, 53, 54, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 104, 117, 109, 111, 117, 114, 101, 100, 110, 101, 115, 115, 101, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 50, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 105, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 52, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 105, 115, 104, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 52, 45, 49, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 108, 105, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 51, 45, 50, 52, 45, 49, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 108, 105, 101, 115, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 51, 45, 50, 52, 45, 49, 53, 45, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 108, 105, 110, 101, 115, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 51, 45, 50, 52, 45, 53, 54, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 108, 111, 111, 107, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 51, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 51, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 108, 111, 111, 107, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 51, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 51, 45, 49, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 108, 111, 111, 107, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 51, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 51, 45, 51, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 108, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 109, 97, 110, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 45, 49, 45, 49, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 109, 101, 110, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 45, 50, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 109, 111, 114, 110, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 45, 51, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 110, 97, 116, 117, 114, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 49, 45, 50, 51, 52, 53, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 110, 97, 116, 117, 114, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 49, 45, 50, 51, 52, 53, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 110, 97, 116, 117, 114, 101, 100, 108, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 49, 45, 50, 51, 52, 53, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 110, 97, 116, 117, 114, 101, 100, 110, 101, 115, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 49, 45, 50, 51, 52, 53, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 45, 53, 54, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 110, 101, 115, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 53, 54, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 110, 101, 115, 115, 101, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 110, 105, 103, 104, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 50, 52, 45, 49, 50, 54, 45, 50, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 115, 105, 122, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 51, 52, 45, 50, 52, 45, 49, 51, 53, 54, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 115, 105, 122, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 51, 52, 45, 50, 52, 45, 49, 51, 53, 54, 45, 49, 50, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 116, 101, 109, 112, 101, 114, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 51, 52, 53, 45, 49, 53, 45, 49, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 50, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 116, 101, 109, 112, 101, 114, 101, 100, 108, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 51, 52, 53, 45, 49, 53, 45, 49, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 50, 52, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 116, 105, 109, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 53, 45, 50, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 117, 110, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 54, 45, 49, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 119, 105, 102, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 52, 53, 54, 45, 50, 52, 45, 49, 50, 52, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 119, 105, 108, 108, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 52, 53, 54, 45, 50, 52, 45, 49, 50, 51, 45, 49, 50, 51, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 119, 105, 108, 108, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 52, 53, 54, 45, 50, 52, 45, 49, 50, 51, 45, 49, 50, 51, 45, 49, 50, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 119, 105, 118, 101, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 52, 53, 54, 45, 50, 52, 45, 49, 50, 51, 54, 45, 49, 53, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 111, 111, 100, 121, 101, 97, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 53, 54, 45, 49, 53, 45, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95]);
fileData263.push.apply(fileData263, [126, 94, 93, 37, 60, 42, 32, 103, 114, 97, 110, 100, 99, 104, 105, 108, 100, 114, 101, 110, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 54, 45, 49, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 114, 101, 97, 116, 97, 117, 110, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 45, 49, 51, 54, 45, 49, 51, 52, 53, 45, 50, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 114, 101, 97, 116, 98, 97, 116, 99, 104, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 45, 49, 45, 50, 51, 52, 53, 45, 49, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 114, 101, 97, 116, 99, 105, 114, 99, 108, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 52, 45, 50, 52, 45, 49, 50, 51, 53, 45, 49, 52, 45, 49, 50, 51, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 114, 101, 97, 116, 99, 111, 97, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 52, 45, 49, 51, 53, 45, 49, 45, 50, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 114, 101, 97, 116, 101, 110, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 50, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 114, 101, 97, 116, 101, 110, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 50, 54, 45, 49, 50, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 114, 101, 97, 116, 101, 110, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 50, 54, 45, 49, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 114, 101, 97, 116, 101, 110, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 50, 54, 45, 51, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 114, 101, 97, 116, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 114, 101, 97, 116, 101, 115, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 53, 45, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 97, 117, 110, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 45, 49, 51, 54, 45, 49, 51, 52, 53, 45, 50, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 99, 104, 105, 108, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 54, 45, 50, 52, 45, 49, 50, 51, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 99, 104, 105, 108, 100, 114, 101, 110, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 54, 45, 49, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 100, 97, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 52, 53, 45, 49, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 100, 97, 117, 103, 104, 116, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 52, 53, 45, 49, 45, 49, 51, 54, 45, 49, 50, 54, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 102, 97, 116, 104, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 53, 45, 49, 50, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 102, 97, 116, 104, 101, 114, 104, 111, 111, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 53, 45, 49, 50, 52, 45, 49, 50, 53, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 109, 97, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 51, 52, 45, 49, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 109, 111, 116, 104, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 53, 45, 49, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 109, 111, 116, 104, 101, 114, 104, 111, 111, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 53, 45, 49, 51, 52, 45, 49, 50, 53, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 110, 101, 112, 104, 101, 119, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 51, 52, 53, 45, 49, 53, 45, 49, 50, 51, 52, 45, 49, 50, 53, 45, 49, 53, 45, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 110, 105, 101, 99, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 51, 52, 53, 45, 50, 52, 45, 49, 53, 45, 49, 52, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 112, 97, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 50, 51, 52, 45, 49, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 112, 97, 114, 101, 110, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 50, 51, 52, 45, 51, 52, 53, 45, 50, 54, 45, 50, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 112, 97, 114, 101, 110, 116, 104, 111, 111, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 50, 51, 52, 45, 51, 52, 53, 45, 50, 54, 45, 50, 51, 52, 53, 45, 49, 50, 53, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 115, 111, 110, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 50, 51, 52, 45, 49, 51, 53, 45, 49, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 117, 110, 99, 108, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 52, 45, 49, 50, 51, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 114, 101, 97, 116, 104, 101, 97, 114, 116, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 53, 45, 49, 53, 45, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 114, 101, 97, 116, 104, 101, 97, 114, 116, 101, 100, 108, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 53, 45, 49, 53, 45, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 114, 101, 97, 116, 104, 101, 97, 114, 116, 101, 100, 110, 101, 115, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 53, 45, 49, 53, 45, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 45, 53, 54, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 114, 101, 97, 116, 104, 101, 97, 114, 116, 101, 100, 110, 101, 115, 115, 101, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 53, 45, 49, 53, 45, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 114, 101, 97, 116, 108, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 114, 101, 97, 116, 110, 101, 112, 104, 101, 119, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 51, 52, 53, 45, 49, 53, 45, 49, 50, 51, 52, 45, 49, 50, 53, 45, 49, 53, 45, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 114, 101, 97, 116, 110, 101, 115, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 53, 54, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 114, 101, 97, 116, 110, 101, 115, 115, 101, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 114, 101, 97, 116, 110, 105, 101, 99, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 51, 52, 53, 45, 50, 52, 45, 49, 53, 45, 49, 52, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 114, 101, 97, 116, 115, 119, 111, 114, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 50, 51, 52, 45, 52, 53, 45, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 114, 101, 97, 116, 117, 110, 99, 108, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 52, 45, 49, 50, 51, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 103, 117, 121, 102, 114, 105, 101, 110, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 52, 53, 45, 49, 51, 54, 45, 49, 51, 52, 53, 54, 45, 49, 50, 52, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 104, 97, 116, 101, 108, 101, 116, 116, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 53, 45, 49, 45, 50, 51, 52, 53, 45, 49, 53, 45, 49, 50, 51, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 104, 101, 97, 100, 102, 105, 114, 115, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 53, 45, 50, 45, 49, 52, 53, 45, 49, 50, 52, 45, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 104, 101, 114, 101, 97, 98, 111, 117, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 53, 45, 49, 50, 53, 45, 49, 45, 49, 50, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 104, 101, 114, 101, 97, 102, 116, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 53, 45, 49, 50, 53, 45, 49, 45, 49, 50, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 104, 101, 114, 101, 97, 103, 97, 105, 110, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 53, 45, 49, 50, 53, 45, 49, 45, 49, 50, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 104, 101, 114, 101, 97, 103, 97, 105, 110, 115, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 53, 45, 49, 50, 53, 45, 49, 45, 49, 50, 52, 53, 45, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 104, 101, 114, 101, 105, 110, 97, 98, 111, 118, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 53, 45, 49, 50, 53, 45, 51, 53, 45, 49, 45, 49, 50, 45, 49, 50, 51, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 104, 101, 114, 101, 105, 110, 97, 102, 116, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 53, 45, 49, 50, 53, 45, 51, 53, 45, 49, 45, 49, 50, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 104, 101, 114, 101, 105, 110, 97, 103, 97, 105, 110, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 53, 45, 49, 50, 53, 45, 51, 53, 45, 49, 45, 49, 50, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 104, 105, 103, 104, 108, 121, 112, 97, 105, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 53, 45, 50, 52, 45, 49, 50, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 49, 50, 51, 52, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 104, 105, 109, 98, 111, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 53, 45, 49, 51, 52, 45, 49, 50, 45, 49, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 104, 105, 109, 98, 111, 101, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 53, 45, 49, 51, 52, 45, 49, 50, 45, 49, 51, 53, 45, 49, 53, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 105, 108, 108, 112, 97, 105, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 52, 45, 49, 50, 51, 45, 49, 50, 51, 45, 49, 50, 51, 52, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 105, 109, 109, 101, 100, 105, 97, 116, 101, 108, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 52, 45, 49, 51, 52, 45, 49, 51, 52, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 105, 109, 109, 101, 100, 105, 97, 116, 101, 110, 101, 115, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 52, 45, 49, 51, 52, 45, 49, 51, 52, 45, 53, 54, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 105, 110, 97, 115, 109, 117, 99, 104, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 51, 53, 45, 49, 45, 50, 51, 52, 45, 49, 51, 52, 45, 49, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 105, 110, 115, 111, 109, 117, 99, 104, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 51, 53, 45, 50, 51, 52, 45, 49, 51, 53, 45, 49, 51, 52, 45, 49, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 107, 110, 111, 99, 107, 97, 98, 111, 117, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 45, 49, 51, 52, 53, 45, 49, 51, 53, 45, 49, 52, 45, 49, 51, 45, 49, 45, 49, 50, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 97, 100, 121, 102, 114, 105, 101, 110, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 45, 49, 52, 53, 45, 49, 51, 52, 53, 54, 45, 49, 50, 52, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 97, 121, 97, 98, 111, 117, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 45, 49, 51, 52, 53, 54, 45, 49, 45, 49, 50, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 101, 116, 116, 101, 114, 98, 111, 100, 105, 101, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 52, 53, 45, 50, 52, 45, 49, 53, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 101, 116, 116, 101, 114, 98, 111, 100, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 52, 53, 45, 49, 51, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 101, 116, 116, 101, 114, 98, 111, 109, 98, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 51, 52, 45, 49, 50, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 101, 116, 116, 101, 114, 98, 111, 109, 98, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 51, 52, 45, 49, 50, 45, 49, 50, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 101, 116, 116, 101, 114, 98, 111, 109, 98, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 51, 52, 45, 49, 50, 45, 49, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 101, 116, 116, 101, 114, 98, 111, 109, 98, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 51, 52, 45, 49, 50, 45, 51, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 101, 116, 116, 101, 114, 98, 111, 120, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 51, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 101, 116, 116, 101, 114, 98, 111, 120, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 51, 52, 54, 45, 49, 50, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 101, 116, 116, 101, 114, 98, 111, 120, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 51, 52, 54, 45, 49, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 101, 116, 116, 101, 114, 98, 111, 120, 101, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 51, 52, 54, 45, 49, 53, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 101, 116, 116, 101, 114, 98, 111, 120, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 51, 52, 54, 45, 51, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 101, 116, 116, 101, 114, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 101, 116, 116, 101, 114, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 101, 116, 116, 101, 114, 102, 111, 114, 109, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 53, 54, 45, 49, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 101, 116, 116, 101, 114, 104, 101, 97, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 53, 45, 50, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 101, 116, 116, 101, 114, 104, 101, 97, 100, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 53, 45, 50, 45, 49, 52, 53, 45, 51, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 101, 116, 116, 101, 114, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 51, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 101, 116, 116, 101, 114, 109, 97, 110, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 51, 52, 45, 49, 45, 49, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 101, 116, 116, 101, 114, 109, 101, 110, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 51, 52, 45, 50, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 101, 116, 116, 101, 114, 111, 112, 101, 110, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 51, 53, 45, 49, 50, 51, 52, 45, 50, 54, 45, 49, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 101, 116, 116, 101, 114, 112, 101, 114, 102, 101, 99, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 50, 52, 45, 49, 53, 45, 49, 52, 45, 50, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 101, 116, 116, 101, 114, 112, 114, 101, 115, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 101, 116, 116, 101, 114, 112, 114, 101, 115, 115, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 45, 49, 50, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 101, 116, 116, 101, 114, 112, 114, 101, 115, 115, 101, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 101, 116, 116, 101, 114, 112, 114, 101, 115, 115, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 45, 51, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 101, 116, 116, 101, 114, 113, 117, 97, 108, 105, 116, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 53, 45, 49, 51, 54, 45, 49, 45, 49, 50, 51, 45, 53, 54, 45, 49, 51, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 101, 116, 116, 101, 114, 115, 112, 97, 99, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 45, 49, 52, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 101, 116, 116, 101, 114, 115, 112, 97, 99, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 45, 49, 52, 45, 49, 50, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 101, 116, 116, 101, 114, 115, 112, 97, 99, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 45, 49, 52, 45, 51, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 101, 116, 116, 101, 114, 116, 101, 120, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 53, 45, 49, 51, 52, 54, 45, 50, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 105, 116, 116, 108, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 50, 51, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 105, 116, 116, 108, 101, 110, 101, 99, 107, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 50, 51, 45, 49, 51, 52, 53, 45, 49, 53, 45, 49, 52, 45, 49, 51, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 105, 116, 116, 108, 101, 110, 101, 115, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 105, 116, 116, 108, 101, 110, 101, 115, 115, 101, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 105, 116, 116, 108, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 50, 51, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 105, 116, 116, 108, 101, 115, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 50, 51, 45, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 111, 118, 101, 99, 104, 105, 108, 100, 114, 101, 110, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 51, 53, 45, 49, 50, 51, 54, 45, 49, 53, 45, 49, 54, 45, 49, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 111, 118, 101, 108, 101, 116, 116, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 49, 51, 53, 45, 49, 50, 51, 54, 45, 49, 53, 45, 49, 50, 51, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 108, 111, 119, 108, 121, 112, 97, 105, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 45, 50, 52, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 49, 50, 51, 52, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 109, 97, 110, 102, 114, 105, 101, 110, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 45, 49, 45, 49, 51, 52, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 109, 101, 110, 102, 114, 105, 101, 110, 100, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 45, 50, 54, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 109, 105, 100, 97, 102, 116, 101, 114, 110, 111, 111, 110, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 45, 50, 52, 45, 49, 52, 53, 45, 49, 45, 49, 50, 52, 45, 49, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 109, 105, 115, 98, 114, 97, 105, 108, 108, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 45, 50, 52, 45, 50, 51, 52, 45, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 109, 105, 115, 98, 114, 97, 105, 108, 108, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 45, 50, 52, 45, 50, 51, 52, 45, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 109, 105, 115, 112, 101, 114, 99, 101, 105, 118, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 45, 50, 52, 45, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 109, 105, 115, 112, 101, 114, 99, 101, 105, 118, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 45, 50, 52, 45, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 109, 105, 115, 112, 101, 114, 99, 101, 105, 118, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 45, 50, 52, 45, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 109, 105, 115, 112, 101, 114, 99, 101, 105, 118, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 45, 50, 52, 45, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 109, 105, 115, 115, 97, 105, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 45, 50, 52, 45, 50, 51, 52, 45, 50, 51, 52, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 109, 111, 114, 110, 105, 110, 103, 97, 102, 116, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 45, 51, 52, 54, 45, 49, 45, 49, 50, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 109, 117, 99, 104, 108, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 45, 49, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 109, 117, 99, 104, 110, 101, 115, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 45, 49, 54, 45, 53, 54, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 109, 117, 115, 116, 226, 128, 153, 118, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 45, 51, 52, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 109, 117, 115, 116, 39, 118, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 45, 51, 52, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 109, 117, 115, 116, 97, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 45, 51, 52, 45, 49, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 109, 117, 115, 116, 97, 114, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 45, 51, 52, 45, 51, 52, 53, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 109, 117, 115, 116, 97, 114, 100, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 45, 51, 52, 45, 51, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 109, 117, 115, 116, 105, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 45, 51, 52, 45, 50, 52, 45, 49, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 109, 117, 115, 116, 105, 101, 115, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 45, 51, 52, 45, 50, 52, 45, 49, 53, 45, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 109, 117, 115, 116, 105, 108, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 45, 51, 52, 45, 50, 52, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 109, 117, 115, 116, 105, 110, 101, 115, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 45, 51, 52, 45, 50, 52, 45, 53, 54, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 109, 117, 115, 116, 110, 226, 128, 153, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 45, 51, 52, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 109, 117, 115, 116, 110, 39, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 45, 51, 52, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 109, 117, 115, 116, 110, 226, 128, 153, 116, 226, 128, 153, 118, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 45, 51, 52, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10]);
fileData263.push.apply(fileData263, [109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 109, 117, 115, 116, 110, 39, 116, 39, 118, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 45, 51, 52, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 109, 117, 115, 116, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 45, 51, 52, 45, 49, 51, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 110, 101, 119, 115, 108, 101, 116, 116, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 53, 45, 49, 53, 45, 50, 52, 53, 54, 45, 50, 51, 52, 45, 49, 50, 51, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 110, 111, 110, 101, 115, 117, 99, 104, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 53, 45, 53, 45, 49, 51, 53, 45, 50, 51, 52, 45, 49, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 110, 111, 110, 115, 117, 99, 104, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 53, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 50, 51, 52, 45, 49, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 110, 111, 114, 116, 104, 97, 98, 111, 117, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 52, 53, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 52, 53, 54, 45, 49, 45, 49, 50, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 111, 118, 101, 114, 109, 117, 99, 104, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 49, 51, 52, 45, 49, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 111, 118, 101, 114, 112, 97, 105, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 49, 50, 51, 52, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 112, 101, 110, 102, 114, 105, 101, 110, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 45, 50, 54, 45, 49, 50, 52, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 112, 101, 114, 99, 101, 105, 118, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 112, 101, 114, 99, 101, 105, 118, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 112, 101, 114, 104, 97, 112, 115, 101, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 50, 53, 45, 49, 53, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 112, 111, 111, 114, 108, 121, 112, 97, 105, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 49, 50, 51, 52, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 112, 111, 115, 116, 112, 97, 105, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 45, 49, 51, 53, 45, 51, 52, 45, 49, 50, 51, 52, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 112, 114, 101, 99, 101, 105, 118, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 52, 45, 49, 50, 51, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 112, 114, 101, 99, 101, 105, 118, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 112, 114, 101, 99, 101, 105, 118, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 112, 114, 101, 112, 97, 105, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 52, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 112, 117, 114, 98, 108, 105, 110, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 112, 117, 114, 98, 108, 105, 110, 100, 108, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 112, 117, 114, 98, 108, 105, 110, 100, 110, 101, 115, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 112, 117, 114, 98, 108, 105, 110, 100, 110, 101, 115, 115, 101, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 113, 117, 105, 99, 107, 100, 114, 97, 119, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 52, 53, 45, 49, 50, 51, 53, 45, 49, 45, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 113, 117, 105, 99, 107, 101, 110, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 113, 117, 105, 99, 107, 101, 110, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 54, 45, 49, 50, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 113, 117, 105, 99, 107, 101, 110, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 54, 45, 49, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 113, 117, 105, 99, 107, 101, 110, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 54, 45, 51, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 113, 117, 105, 99, 107, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 113, 117, 105, 99, 107, 101, 115, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 53, 45, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 113, 117, 105, 99, 107, 102, 105, 114, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 50, 52, 45, 50, 52, 45, 49, 50, 51, 53, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 113, 117, 105, 99, 107, 102, 105, 114, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 50, 52, 45, 50, 52, 45, 49, 50, 51, 53, 45, 51, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 113, 117, 105, 99, 107, 102, 114, 101, 101, 122, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 53, 45, 49, 53, 45, 49, 51, 53, 54, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 113, 117, 105, 99, 107, 102, 114, 101, 101, 122, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 53, 45, 49, 53, 45, 49, 51, 53, 54, 45, 51, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 113, 117, 105, 99, 107, 102, 114, 111, 122, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 51, 53, 45, 49, 51, 53, 54, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 113, 117, 105, 99, 107, 102, 114, 111, 122, 101, 110, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 51, 53, 45, 49, 51, 53, 54, 45, 50, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 113, 117, 105, 99, 107, 105, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 52, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 113, 117, 105, 99, 107, 105, 115, 104, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 52, 45, 49, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 113, 117, 105, 99, 107, 105, 115, 104, 108, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 52, 45, 49, 52, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 113, 117, 105, 99, 107, 108, 105, 109, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 50, 51, 45, 50, 52, 45, 49, 51, 52, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 113, 117, 105, 99, 107, 108, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 113, 117, 105, 99, 107, 110, 101, 115, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 53, 54, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 113, 117, 105, 99, 107, 110, 101, 115, 115, 101, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 113, 117, 105, 99, 107, 115, 97, 110, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 51, 52, 45, 49, 50, 51, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 113, 117, 105, 99, 107, 115, 101, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 113, 117, 105, 99, 107, 115, 105, 108, 118, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 51, 52, 45, 50, 52, 45, 49, 50, 51, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 113, 117, 105, 99, 107, 115, 105, 108, 118, 101, 114, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 51, 52, 45, 50, 52, 45, 49, 50, 51, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 49, 50, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 113, 117, 105, 99, 107, 115, 105, 108, 118, 101, 114, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 51, 52, 45, 50, 52, 45, 49, 50, 51, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 51, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 113, 117, 105, 99, 107, 115, 110, 97, 112, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 51, 52, 45, 49, 51, 52, 53, 45, 49, 45, 49, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 113, 117, 105, 99, 107, 115, 116, 101, 112, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 51, 52, 45, 49, 53, 45, 49, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 113, 117, 105, 99, 107, 115, 116, 101, 112, 112, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 51, 52, 45, 49, 53, 45, 49, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 113, 117, 105, 99, 107, 115, 116, 101, 112, 112, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 51, 52, 45, 49, 53, 45, 49, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 113, 117, 105, 99, 107, 115, 116, 101, 112, 112, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 51, 52, 45, 49, 53, 45, 49, 50, 51, 52, 45, 49, 50, 51, 52, 45, 51, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 113, 117, 105, 99, 107, 116, 101, 109, 112, 101, 114, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 51, 52, 53, 45, 49, 53, 45, 49, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 50, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 113, 117, 105, 99, 107, 116, 105, 109, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 53, 45, 50, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 113, 117, 105, 99, 107, 119, 105, 116, 116, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 52, 53, 54, 45, 50, 52, 45, 50, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 113, 117, 105, 99, 107, 119, 105, 116, 116, 101, 100, 108, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 52, 53, 54, 45, 50, 52, 45, 50, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 113, 117, 105, 99, 107, 119, 105, 116, 116, 101, 100, 110, 101, 115, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 52, 53, 54, 45, 50, 52, 45, 50, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 45, 53, 54, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 113, 117, 105, 99, 107, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 51, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 114, 101, 97, 100, 97, 99, 114, 111, 115, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 53, 45, 50, 45, 49, 52, 53, 45, 49, 45, 49, 52, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 114, 101, 98, 114, 97, 105, 108, 108, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 114, 101, 98, 114, 97, 105, 108, 108, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 114, 101, 98, 114, 97, 105, 108, 108, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 114, 101, 99, 101, 105, 118, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 114, 101, 99, 101, 105, 118, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 114, 101, 99, 101, 105, 118, 101, 114, 115, 104, 105, 112, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 45, 49, 52, 54, 45, 50, 52, 45, 49, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 114, 101, 106, 111, 105, 99, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 114, 101, 106, 111, 105, 99, 101, 102, 117, 108, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 53, 54, 45, 49, 50, 51, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 114, 101, 106, 111, 105, 99, 101, 102, 117, 108, 108, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 53, 54, 45, 49, 50, 51, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 114, 101, 106, 111, 105, 99, 101, 102, 117, 108, 110, 101, 115, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 53, 54, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 114, 101, 106, 111, 105, 99, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 114, 101, 106, 111, 105, 99, 105, 110, 103, 108, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 49, 50, 52, 53, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 114, 101, 108, 101, 116, 116, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 114, 101, 108, 101, 116, 116, 101, 114, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 114, 101, 108, 101, 116, 116, 101, 114, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 45, 49, 50, 51, 53, 45, 51, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 114, 101, 112, 97, 105, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 52, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 114, 105, 103, 104, 116, 97, 98, 111, 117, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 53, 45, 49, 50, 51, 53, 45, 49, 45, 49, 50, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 114, 111, 117, 110, 100, 97, 98, 111, 117, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 53, 45, 52, 54, 45, 49, 52, 53, 45, 49, 45, 49, 50, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 114, 111, 117, 115, 116, 97, 98, 111, 117, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 53, 45, 49, 50, 53, 54, 45, 51, 52, 45, 49, 45, 49, 50, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 114, 117, 110, 97, 98, 111, 117, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 50, 51, 53, 45, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 45, 49, 50, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 115, 97, 105, 100, 101, 115, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 52, 45, 49, 52, 53, 45, 49, 53, 45, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 115, 97, 105, 100, 115, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 52, 45, 49, 52, 53, 45, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 115, 99, 97, 116, 116, 101, 114, 103, 111, 111, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 52, 45, 49, 52, 45, 49, 45, 50, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 54, 45, 49, 50, 52, 53, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 115, 99, 104, 111, 111, 108, 99, 104, 105, 108, 100, 114, 101, 110, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 52, 45, 49, 54, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 54, 45, 49, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 115, 99, 104, 111, 111, 108, 102, 114, 105, 101, 110, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 52, 45, 49, 54, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 50, 52, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 115, 104, 111, 117, 108, 100, 226, 128, 153, 118, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 54, 45, 49, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 115, 104, 111, 117, 108, 100, 39, 118, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 54, 45, 49, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 115, 104, 111, 117, 108, 100, 97, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 54, 45, 49, 52, 53, 45, 49, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 115, 104, 111, 117, 108, 100, 101, 115, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 54, 45, 49, 52, 53, 45, 49, 53, 45, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 115, 104, 111, 117, 108, 100, 110, 226, 128, 153, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 54, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 115, 104, 111, 117, 108, 100, 110, 39, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 54, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 115, 104, 111, 117, 108, 100, 110, 226, 128, 153, 116, 226, 128, 153, 118, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 54, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 115, 104, 111, 117, 108, 100, 110, 39, 116, 39, 118, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 54, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 115, 104, 111, 117, 108, 100, 115, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 52, 54, 45, 49, 52, 53, 45, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 115, 110, 111, 119, 98, 108, 105, 110, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 52, 45, 49, 51, 52, 53, 45, 50, 52, 54, 45, 49, 50, 45, 49, 50, 51, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 115, 110, 111, 119, 98, 108, 105, 110, 100, 110, 101, 115, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 52, 45, 49, 51, 52, 53, 45, 50, 52, 54, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 115, 110, 111, 119, 98, 108, 105, 110, 100, 110, 101, 115, 115, 101, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 52, 45, 49, 51, 52, 53, 45, 50, 52, 54, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 115, 111, 109, 101, 115, 117, 99, 104, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 53, 45, 50, 51, 52, 45, 50, 51, 52, 45, 49, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 115, 111, 117, 116, 104, 97, 98, 111, 117, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 52, 45, 49, 50, 53, 54, 45, 49, 52, 53, 54, 45, 49, 45, 49, 50, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 115, 116, 101, 112, 99, 104, 105, 108, 100, 114, 101, 110, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 51, 52, 45, 49, 53, 45, 49, 50, 51, 52, 45, 49, 54, 45, 49, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 115, 116, 105, 114, 97, 98, 111, 117, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 51, 52, 45, 50, 52, 45, 49, 50, 51, 53, 45, 49, 45, 49, 50, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 115, 117, 99, 104, 108, 105, 107, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 52, 45, 49, 54, 45, 49, 50, 51, 45, 50, 52, 45, 49, 51, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 115, 117, 112, 101, 114, 103, 111, 111, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 52, 45, 49, 51, 54, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 50, 52, 53, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 115, 117, 112, 101, 114, 113, 117, 105, 99, 107, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 52, 45, 49, 51, 54, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 50, 51, 52, 53, 45, 49, 51, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 116, 97, 105, 108, 102, 105, 114, 115, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 52, 53, 45, 49, 45, 50, 52, 45, 49, 50, 51, 45, 49, 50, 52, 45, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 116, 104, 101, 114, 101, 97, 98, 111, 117, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 53, 45, 50, 51, 52, 54, 45, 49, 45, 49, 50, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 116, 104, 101, 114, 101, 97, 102, 116, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 53, 45, 50, 51, 52, 54, 45, 49, 45, 49, 50, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 116, 104, 101, 114, 101, 97, 103, 97, 105, 110, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 53, 45, 50, 51, 52, 54, 45, 49, 45, 49, 50, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 116, 104, 101, 114, 101, 97, 103, 97, 105, 110, 115, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 53, 45, 50, 51, 52, 54, 45, 49, 45, 49, 50, 52, 53, 45, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 116, 104, 101, 114, 101, 105, 110, 97, 102, 116, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 53, 45, 50, 51, 52, 54, 45, 51, 53, 45, 49, 45, 49, 50, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 116, 104, 101, 114, 101, 105, 110, 97, 103, 97, 105, 110, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 53, 45, 50, 51, 52, 54, 45, 51, 53, 45, 49, 45, 49, 50, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 116, 111, 103, 101, 116, 104, 101, 114, 110, 101, 115, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 53, 54, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 116, 117, 114, 110, 97, 98, 111, 117, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 51, 52, 53, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 45, 49, 45, 49, 50, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 117, 110, 97, 99, 99, 111, 114, 100, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 45, 49, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 117, 110, 97, 99, 99, 111, 114, 100, 105, 110, 103, 108, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 45, 49, 52, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 117, 110, 98, 108, 105, 110, 100, 102, 111, 108, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 45, 49, 50, 51, 45, 49, 50, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 117, 110, 98, 108, 105, 110, 100, 102, 111, 108, 100, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 45, 49, 50, 51, 45, 49, 50, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 45, 49, 50, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 117, 110, 98, 108, 105, 110, 100, 102, 111, 108, 100, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 45, 49, 50, 51, 45, 49, 50, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 45, 51, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 117, 110, 98, 114, 97, 105, 108, 108, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 117, 110, 98, 114, 97, 105, 108, 108, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 117, 110, 100, 101, 99, 101, 105, 118, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 117, 110, 100, 101, 99, 101, 105, 118, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 117, 110, 100, 101, 99, 101, 105, 118, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 117, 110, 100, 101, 99, 101, 105, 118, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 117, 110, 100, 101, 99, 108, 97, 114, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 117, 110, 100, 101, 99, 108, 97, 114, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 117, 110, 100, 101, 114, 112, 97, 105, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 53, 45, 49, 51, 54, 45, 49, 50, 51, 52, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 117, 110, 102, 114, 105, 101, 110, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 117, 110, 102, 114, 105, 101, 110, 100, 108, 105, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 45, 49, 50, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 117, 110, 102, 114, 105, 101, 110, 100, 108, 105, 101, 115, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 45, 49, 53, 45, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 117, 110, 102, 114, 105, 101, 110, 100, 108, 105, 110, 101, 115, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 45, 53, 54, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 117, 110, 102, 114, 105, 101, 110, 100, 108, 105, 110, 101, 115, 115, 101, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 117, 110, 102, 114, 105, 101, 110, 100, 108]);
fileData263.push.apply(fileData263, [121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 117, 110, 108, 101, 116, 116, 101, 114, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 117, 110, 110, 101, 99, 101, 115, 115, 97, 114, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 51, 52, 53, 45, 49, 53, 45, 49, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 117, 110, 112, 97, 105, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 52, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 117, 110, 112, 101, 114, 99, 101, 105, 118, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 117, 110, 112, 101, 114, 99, 101, 105, 118, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 117, 110, 112, 101, 114, 99, 101, 105, 118, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 117, 110, 113, 117, 105, 99, 107, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 52, 53, 45, 49, 51, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 117, 110, 114, 101, 99, 101, 105, 118, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 117, 110, 114, 101, 106, 111, 105, 99, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 117, 110, 114, 101, 106, 111, 105, 99, 101, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 117, 110, 114, 101, 106, 111, 105, 99, 101, 102, 117, 108, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 53, 54, 45, 49, 50, 51, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 117, 110, 114, 101, 106, 111, 105, 99, 101, 102, 117, 108, 108, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 53, 54, 45, 49, 50, 51, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 117, 110, 114, 101, 106, 111, 105, 99, 101, 102, 117, 108, 110, 101, 115, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 53, 54, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 117, 110, 114, 101, 106, 111, 105, 99, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 117, 110, 114, 101, 106, 111, 105, 99, 105, 110, 103, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 49, 50, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 117, 110, 114, 101, 106, 111, 105, 99, 105, 110, 103, 108, 121, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 49, 50, 52, 53, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 117, 110, 114, 101, 112, 97, 105, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 52, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 117, 110, 115, 97, 105, 100, 32, 32, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 50, 51, 52, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 119, 97, 108, 107, 97, 98, 111, 117, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 52, 53, 54, 45, 49, 45, 49, 50, 51, 45, 49, 51, 45, 49, 45, 49, 50, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 119, 101, 108, 108, 112, 97, 105, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 52, 53, 54, 45, 49, 53, 45, 49, 50, 51, 45, 49, 50, 51, 45, 49, 50, 51, 52, 45, 49, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 119, 101, 115, 116, 97, 98, 111, 117, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 52, 53, 54, 45, 49, 53, 45, 51, 52, 45, 49, 45, 49, 50, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 119, 104, 101, 114, 101, 97, 98, 111, 117, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 53, 45, 49, 53, 54, 45, 49, 45, 49, 50, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 119, 104, 101, 114, 101, 97, 102, 116, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 53, 45, 49, 53, 54, 45, 49, 45, 49, 50, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 119, 104, 101, 114, 101, 97, 103, 97, 105, 110, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 53, 45, 49, 53, 54, 45, 49, 45, 49, 50, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 119, 104, 101, 114, 101, 97, 103, 97, 105, 110, 115, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 53, 45, 49, 53, 54, 45, 49, 45, 49, 50, 52, 53, 45, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 119, 104, 101, 114, 101, 105, 110, 97, 102, 116, 101, 114, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 53, 45, 49, 53, 54, 45, 51, 53, 45, 49, 45, 49, 50, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 119, 104, 101, 114, 101, 105, 110, 97, 103, 97, 105, 110, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 53, 45, 49, 53, 54, 45, 51, 53, 45, 49, 45, 49, 50, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 119, 111, 109, 97, 110, 102, 114, 105, 101, 110, 100, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 52, 53, 54, 45, 49, 51, 53, 45, 49, 51, 52, 45, 49, 45, 49, 51, 52, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 119, 111, 109, 101, 110, 102, 114, 105, 101, 110, 100, 115, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 52, 53, 54, 45, 49, 51, 53, 45, 49, 51, 52, 45, 50, 54, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 119, 111, 117, 108, 100, 226, 128, 153, 118, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 52, 53, 54, 45, 49, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 119, 111, 117, 108, 100, 39, 118, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 52, 53, 54, 45, 49, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 119, 111, 117, 108, 100, 97, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 52, 53, 54, 45, 49, 52, 53, 45, 49, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 119, 111, 117, 108, 100, 101, 115, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 52, 53, 54, 45, 49, 52, 53, 45, 49, 53, 45, 51, 52, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 119, 111, 117, 108, 100, 110, 226, 128, 153, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 52, 53, 54, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 119, 111, 117, 108, 100, 110, 39, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 52, 53, 54, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 119, 111, 117, 108, 100, 110, 226, 128, 153, 116, 226, 128, 153, 118, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 52, 53, 54, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 119, 111, 117, 108, 100, 110, 39, 116, 39, 118, 101, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 52, 53, 54, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 119, 111, 117, 108, 100, 115, 116, 32, 40, 91, 83, 115, 93, 124, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 50, 52, 53, 54, 45, 49, 52, 53, 45, 51, 52, 10, 10, 109, 97, 116, 99, 104, 32, 37, 91, 95, 126, 94, 93, 37, 60, 42, 32, 119, 104, 101, 114, 101, 97, 98, 111, 117, 116, 115, 32, 40, 91, 39, 226, 128, 153, 93, 91, 83, 115, 93, 41, 63, 37, 62, 42, 37, 91, 95, 126, 94, 93, 32, 53, 45, 49, 53, 54, 45, 49, 45, 49, 50, 45, 50, 51, 52, 10, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 39, 116, 119, 111, 117, 108, 100, 32, 32, 51, 45, 50, 51, 52, 53, 45, 50, 52, 53, 54, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 39, 116, 119, 111, 117, 108, 100, 39, 118, 101, 32, 32, 51, 45, 50, 51, 52, 53, 45, 50, 52, 53, 54, 45, 49, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 39, 116, 119, 111, 117, 108, 100, 97, 32, 32, 51, 45, 50, 51, 52, 53, 45, 50, 52, 53, 54, 45, 49, 52, 53, 45, 49, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 39, 116, 119, 111, 117, 108, 100, 110, 39, 116, 32, 32, 51, 45, 50, 51, 52, 53, 45, 50, 52, 53, 54, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 39, 116, 119, 111, 117, 108, 100, 110, 39, 116, 39, 118, 101, 32, 32, 51, 45, 50, 51, 52, 53, 45, 50, 52, 53, 54, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 98, 111, 117, 116, 102, 97, 99, 101, 32, 32, 49, 45, 49, 50, 45, 49, 50, 52, 45, 49, 45, 49, 52, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 98, 111, 117, 116, 102, 97, 99, 101, 100, 32, 32, 49, 45, 49, 50, 45, 49, 50, 52, 45, 49, 45, 49, 52, 45, 49, 50, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 98, 111, 117, 116, 102, 97, 99, 101, 114, 32, 32, 49, 45, 49, 50, 45, 49, 50, 52, 45, 49, 45, 49, 52, 45, 49, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 98, 111, 117, 116, 102, 97, 99, 105, 110, 103, 32, 32, 49, 45, 49, 50, 45, 49, 50, 52, 45, 49, 45, 49, 52, 45, 51, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 98, 111, 117, 116, 116, 117, 114, 110, 32, 32, 49, 45, 49, 50, 45, 50, 51, 52, 53, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 98, 111, 117, 116, 116, 117, 114, 110, 101, 100, 32, 32, 49, 45, 49, 50, 45, 50, 51, 52, 53, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 45, 49, 50, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 98, 111, 118, 101, 98, 111, 97, 114, 100, 32, 32, 49, 45, 49, 50, 45, 49, 50, 51, 54, 45, 49, 50, 45, 49, 51, 53, 45, 51, 52, 53, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 98, 111, 118, 101, 103, 114, 111, 117, 110, 100, 32, 32, 49, 45, 49, 50, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 52, 54, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 98, 111, 118, 101, 109, 101, 110, 116, 105, 111, 110, 101, 100, 32, 32, 49, 45, 49, 50, 45, 49, 50, 51, 54, 45, 49, 51, 52, 45, 50, 54, 45, 53, 54, 45, 49, 51, 52, 53, 45, 49, 50, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 99, 99, 111, 114, 100, 105, 110, 103, 108, 121, 32, 32, 49, 45, 49, 52, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 111, 114, 101, 115, 97, 105, 100, 32, 32, 49, 45, 49, 50, 51, 52, 53, 54, 45, 49, 53, 45, 50, 51, 52, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 98, 97, 116, 116, 108, 101, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 45, 49, 45, 50, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 51, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 98, 105, 114, 116, 104, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 45, 50, 52, 45, 49, 50, 51, 53, 45, 49, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 98, 114, 101, 97, 107, 102, 97, 115, 116, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 45, 49, 50, 51, 53, 45, 50, 45, 49, 51, 45, 49, 50, 52, 45, 49, 45, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 98, 117, 114, 110, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 98, 117, 114, 110, 101, 100, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 45, 49, 50, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 98, 117, 114, 110, 101, 114, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 45, 49, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 98, 117, 114, 110, 105, 110, 103, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 45, 51, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 99, 97, 114, 101, 32, 32, 49, 45, 49, 50, 52, 45, 49, 52, 45, 51, 52, 53, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 99, 108, 97, 112, 32, 32, 49, 45, 49, 50, 52, 45, 49, 52, 45, 49, 50, 51, 45, 49, 45, 49, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 99, 111, 102, 102, 101, 101, 32, 32, 49, 45, 49, 50, 52, 45, 49, 52, 45, 49, 50, 51, 53, 54, 45, 49, 50, 52, 45, 49, 53, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 100, 97, 109, 112, 32, 32, 49, 45, 49, 50, 52, 45, 49, 52, 53, 45, 49, 45, 49, 51, 52, 45, 49, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 100, 97, 114, 107, 32, 32, 49, 45, 49, 50, 52, 45, 49, 52, 53, 45, 51, 52, 53, 45, 49, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 100, 101, 99, 107, 32, 32, 49, 45, 49, 50, 52, 45, 49, 52, 53, 45, 49, 53, 45, 49, 52, 45, 49, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 100, 105, 110, 110, 101, 114, 32, 32, 49, 45, 49, 50, 52, 45, 49, 52, 53, 45, 51, 53, 45, 49, 51, 52, 53, 45, 49, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 102, 108, 111, 119, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 52, 45, 49, 50, 51, 45, 50, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 103, 97, 109, 101, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 52, 53, 45, 49, 45, 49, 51, 52, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 103, 108, 111, 119, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 52, 53, 45, 49, 50, 51, 45, 50, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 103, 117, 97, 114, 100, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 52, 53, 45, 49, 51, 54, 45, 51, 52, 53, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 104, 97, 116, 99, 104, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 53, 45, 49, 45, 50, 51, 52, 53, 45, 49, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 104, 97, 116, 99, 104, 101, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 53, 45, 49, 45, 50, 51, 52, 53, 45, 49, 54, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 104, 111, 117, 114, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 53, 45, 49, 50, 53, 54, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 108, 105, 102, 101, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 51, 45, 50, 52, 45, 49, 50, 52, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 108, 105, 103, 104, 116, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 51, 45, 50, 52, 45, 49, 50, 54, 45, 50, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 108, 105, 118, 101, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 51, 45, 50, 52, 45, 49, 50, 51, 54, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 108, 117, 110, 99, 104, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 51, 45, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 108, 117, 110, 99, 104, 101, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 51, 45, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 54, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 109, 97, 114, 107, 101, 116, 32, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 45, 51, 52, 53, 45, 49, 51, 45, 49, 53, 45, 50, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 109, 97, 116, 99, 104, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 45, 49, 45, 50, 51, 52, 53, 45, 49, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 109, 97, 116, 99, 104, 101, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 45, 49, 45, 50, 51, 52, 53, 45, 49, 54, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 109, 97, 116, 104, 32, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 45, 49, 45, 49, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 109, 101, 101, 116, 105, 110, 103, 32, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 45, 49, 53, 45, 49, 53, 45, 50, 51, 52, 53, 45, 51, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 109, 101, 110, 116, 105, 111, 110, 101, 100, 32, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 45, 50, 54, 45, 53, 54, 45, 49, 51, 52, 53, 45, 49, 50, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 109, 105, 100, 100, 97, 121, 32, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 45, 50, 52, 45, 49, 52, 53, 45, 53, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 109, 105, 100, 110, 105, 103, 104, 116, 32, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 45, 50, 52, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 50, 52, 45, 49, 50, 54, 45, 50, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 109, 111, 115, 116, 32, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 45, 49, 51, 53, 45, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 110, 111, 111, 110, 116, 101, 97, 32, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 53, 45, 49, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 112, 97, 105, 110, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 51, 52, 45, 49, 45, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 112, 97, 114, 116, 105, 101, 115, 32, 32, 49, 45, 49, 50, 52, 45, 53, 45, 49, 50, 51, 52, 45, 50, 52, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 112, 97, 114, 116, 121, 32, 32, 49, 45, 49, 50, 52, 45, 53, 45, 49, 50, 51, 52, 45, 49, 51, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 112, 105, 101, 99, 101, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 51, 52, 45, 50, 52, 45, 49, 53, 45, 49, 52, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 112, 108, 97, 121, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 51, 52, 45, 49, 50, 51, 45, 49, 45, 49, 51, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 115, 97, 108, 101, 32, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 45, 49, 45, 49, 50, 51, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 115, 99, 104, 111, 111, 108, 32, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 45, 49, 54, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 50, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 115, 101, 110, 115, 97, 116, 105, 111, 110, 32, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 45, 50, 54, 45, 50, 51, 52, 45, 49, 45, 53, 54, 45, 49, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 115, 104, 97, 118, 101, 32, 32, 49, 45, 49, 50, 52, 45, 49, 52, 54, 45, 49, 45, 49, 50, 51, 54, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 115, 104, 111, 99, 107, 32, 32, 49, 45, 49, 50, 52, 45, 49, 52, 54, 45, 49, 51, 53, 45, 49, 52, 45, 49, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 115, 104, 111, 119, 32, 32, 49, 45, 49, 50, 52, 45, 49, 52, 54, 45, 50, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 115, 104, 111, 119, 101, 114, 32, 32, 49, 45, 49, 50, 52, 45, 49, 52, 54, 45, 50, 52, 54, 45, 49, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 115, 117, 112, 112, 101, 114, 32, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 45, 49, 51, 54, 45, 49, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 116, 97, 115, 116, 101, 32, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 53, 45, 49, 45, 51, 52, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 116, 97, 120, 32, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 53, 45, 49, 45, 49, 51, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 116, 97, 120, 101, 115, 32, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 53, 45, 49, 45, 49, 51, 52, 54, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 116, 101, 97, 32, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 53, 45, 49, 53, 45, 49, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 116, 104, 101, 97, 116, 101, 114, 32, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 54, 45, 49, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 116, 104, 101, 97, 116, 114, 101, 32, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 54, 45, 49, 45, 50, 51, 52, 53, 45, 49, 50, 51, 53, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 116, 104, 111, 117, 103, 104, 116, 32, 32, 49, 45, 49, 50, 52, 45, 49, 52, 53, 54, 45, 53, 45, 49, 50, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 116, 105, 109, 101, 32, 32, 49, 45, 49, 50, 52, 45, 53, 45, 50, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 116, 114, 101, 97, 116, 109, 101, 110, 116, 32, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 53, 45, 49, 50, 51, 53, 45, 50, 45, 50, 51, 52, 53, 45, 53, 54, 45, 50, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 119, 111, 114, 100, 32, 32, 49, 45, 49, 50, 52, 45, 52, 53, 45, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 119, 111, 114, 107, 32, 32, 49, 45, 49, 50, 52, 45, 53, 45, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 119, 111, 114, 108, 100, 32, 32, 49, 45, 49, 50, 52, 45, 52, 53, 54, 45, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 112, 112, 101, 114, 99, 101, 105, 118, 101, 32, 32, 49, 45, 49, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 112, 112, 101, 114, 99, 101, 105, 118, 101, 100, 32, 32, 49, 45, 49, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 112, 112, 101, 114, 99, 101, 105, 118, 101, 114, 32, 32, 49, 45, 49, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 112, 112, 101, 114, 99, 101, 105, 118, 105, 110, 103, 32, 32, 49, 45, 49, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 114, 99, 104, 100, 101, 99, 101, 105, 118, 101, 114, 32, 32, 51, 52, 53, 45, 49, 54, 45, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 102, 111, 114, 101, 104, 97, 110, 100, 32, 32, 50, 51, 45, 49, 50, 52, 45, 49, 50, 53, 45, 49, 50, 51, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 102, 111, 114, 101, 109, 101, 110, 116, 105, 111, 110, 101, 100, 32, 32, 50, 51, 45, 49, 50, 52, 45, 49, 51, 52, 45, 50, 54, 45, 53, 54, 45, 49, 51, 52, 53, 45, 49, 50, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 102, 114, 105, 101, 110, 100, 32, 32, 50, 51, 45, 49, 50, 52, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 104, 105, 110, 100, 104, 97, 110, 100, 32, 32, 50, 51, 45, 49, 50, 53, 45, 49, 50, 53, 45, 49, 50, 51, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 108, 105, 116, 116, 108, 101, 32, 32, 50, 51, 45, 49, 50, 51, 45, 49, 50, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 108, 105, 116, 116, 108, 101, 100, 32, 32, 50, 51, 45, 49, 50, 51, 45, 49, 50, 51, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 108, 105, 116, 116, 108, 101, 109, 101, 110, 116, 32, 32, 50, 51, 45, 49, 50, 51, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 108, 105, 116, 116, 108, 101, 114, 32, 32, 50, 51, 45, 49, 50, 51, 45, 49, 50, 51, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 108, 111, 119, 100, 101, 99, 107, 32, 32, 50, 51, 45, 49, 50, 51, 45, 49, 52, 53, 45, 49, 53, 45, 49, 52, 45, 49, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 108, 111, 119, 103, 114, 111, 117, 110, 100, 32, 32, 50, 51, 45, 49, 50, 51, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 52, 54, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 108, 111, 119, 109, 101, 110, 116, 105, 111, 110, 101, 100, 32, 32, 50, 51, 45, 49, 50, 51, 45, 49, 51, 52, 45, 50, 54, 45, 53, 54, 45, 49, 51, 52, 53, 45, 49, 50, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 110, 101, 97, 116, 104, 100, 101, 99, 107, 32, 32, 50, 51, 45, 49, 51, 52, 53, 45, 49, 52, 53, 45, 49, 53, 45, 49, 52, 45, 49, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 110, 101, 97, 116, 104, 103, 114, 111, 117, 110, 100, 32, 32, 50, 51, 45, 49, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 52, 54, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 116, 119, 101, 101, 110, 100, 101, 99, 107, 32, 32, 50, 51, 45, 50, 51, 52, 53, 45, 49, 52, 53, 45, 49, 53, 45, 49, 52, 45, 49, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 116, 119, 101, 101, 110, 116, 105, 109, 101, 32, 32, 50, 51, 45, 50, 51, 52, 53, 45, 53, 45, 50, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 116, 119, 101, 101, 110, 119, 104, 105, 108, 101, 32, 32, 50, 51, 45, 50, 51, 52, 53, 45, 49, 53, 54, 45, 50, 52, 45, 49, 50, 51, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 102, 105, 115, 104, 32, 32, 49, 50, 45, 49, 50, 51, 45, 49, 50, 52, 45, 50, 52, 45, 49, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 102, 105, 115, 104, 101, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 49, 50, 52, 45, 50, 52, 45, 49, 52, 54, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 102, 111, 108, 100, 32, 32, 49, 50, 45, 49, 50, 51, 45, 49, 50, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 102, 111, 108, 100, 101, 100, 32, 32, 49, 50, 45, 49, 50, 51, 45, 49, 50, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 45, 49, 50, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 102, 111, 108, 100, 101, 114, 32, 32, 49, 50, 45, 49, 50, 51, 45, 49, 50, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 45, 49, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 102, 111, 108, 100, 105, 110, 103, 32, 32, 49, 50, 45, 49, 50, 51, 45, 49, 50, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 45, 51, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 108, 121, 32, 32, 49, 50, 45, 49, 50, 51, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 109, 97, 110, 32, 32, 49, 50, 45, 49, 50, 51, 45, 49, 51, 52, 45, 49, 45, 49, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 109, 101, 110, 32, 32, 49, 50, 45, 49, 50, 51, 45, 49, 51, 52, 45, 50, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 110, 101, 115, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 110, 101, 115, 115, 101, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 115, 105, 100, 101, 32, 32, 49, 50, 45, 49, 50, 51, 45, 50, 51, 52, 45, 50, 52, 45, 49, 52, 53, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 115, 105, 100, 101, 100, 32, 32, 49, 50, 45, 49, 50, 51, 45, 50, 51, 52, 45, 50, 52, 45, 49, 52, 53, 45, 49, 50, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 115, 105, 100, 101, 114, 32, 32, 49, 50, 45, 49, 50, 51, 45, 50, 51, 52, 45, 50, 52, 45, 49, 52, 53, 45, 49, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 115, 105, 100, 105, 110, 103, 32, 32, 49, 50, 45, 49, 50, 51, 45, 50, 51, 52, 45, 50, 52, 45, 49, 52, 53, 45, 51, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 115, 105, 103, 104, 116, 32, 32, 49, 50, 45, 49, 50, 51, 45, 50, 51, 52, 45, 50, 52, 45, 49, 50, 54, 45, 50, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 115, 116, 111, 114, 105, 101, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 51, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 50, 52, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 115, 116, 111, 114, 121, 32, 32, 49, 50, 45, 49, 50, 51, 45, 51, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 119, 111, 114, 109, 32, 32, 49, 50, 45, 49, 50, 51, 45, 50, 52, 53, 54, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 111, 111, 100, 108, 101, 116, 116, 101, 114, 32, 32, 49, 50, 45, 49, 50, 51, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 52, 53, 45, 49, 50, 51, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 111, 121, 102, 114, 105, 101, 110, 100, 32, 32, 49, 50, 45, 49, 51, 53, 45, 49, 51, 52, 53, 54, 45, 49, 50, 52, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 114, 97, 105, 108, 108, 101, 100, 32, 32, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 114, 97, 105, 108, 108, 101, 114, 32, 32, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 114, 97, 105, 108, 108, 101, 119, 114, 105, 116, 101, 114, 32, 32, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 53, 54, 45, 49, 50, 51, 53, 45, 50, 52, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 114, 97, 105, 108, 108, 101, 119, 114, 105, 116, 105, 110, 103, 32, 32, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 53, 54, 45, 49, 50, 51, 53, 45, 50, 52, 45, 50, 51, 52, 53, 45, 51, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 114, 97, 105, 108, 108, 101, 121, 32, 32, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 114, 97, 105, 110, 99, 104, 105, 108, 100, 114, 101, 110, 32, 32, 49, 50, 45, 49, 50, 51, 53, 45, 49, 45, 51, 53, 45, 49, 54, 45, 49, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 104, 97, 105, 110, 108, 101, 116, 116, 101, 114, 32, 32, 49, 54, 45, 49, 45, 51, 53, 45, 49, 50, 51, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 104, 105, 108, 100, 114, 101, 110, 39, 115, 119, 101, 97, 114, 32, 32, 49, 54, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 45, 50, 52, 53, 54, 45, 49, 53, 45, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 108, 111, 114, 98, 108, 105, 110, 100, 32, 32, 49, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 108, 111, 114, 98, 108, 105, 110, 100, 110, 101, 115, 115, 32, 32, 49, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 108, 111, 114, 98, 108, 105, 110, 100, 110, 101, 115, 115, 101, 115, 32, 32, 49, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 108, 111, 117, 114, 98, 108, 105, 110, 100, 32, 32, 49, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 50, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 108, 111, 117, 114, 98, 108, 105, 110, 100, 110, 101, 115, 115, 32, 32, 49, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 50, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 108, 111, 117, 114, 98, 108, 105, 110, 100, 110, 101, 115, 115, 101, 115, 32, 32, 49, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 50, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 110, 99, 101, 105, 118, 101, 100, 32, 32, 50, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 110, 99, 101, 105, 118, 101, 114, 32, 32, 50, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 117, 108, 100, 39, 118, 101, 32, 32, 49, 52, 45, 49, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 117, 108, 100, 97, 32, 32, 49, 52, 45, 49, 52, 53, 45, 49, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 117, 108, 100, 101, 115, 116, 32, 32, 49, 52, 45, 49, 52, 53, 45, 49, 53, 45, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 117, 108, 100, 110, 39, 116, 32, 32, 49, 52, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 117, 108, 100, 110, 39, 116, 39, 118, 101, 32, 32, 49, 52, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 117, 108, 100, 115, 116, 32, 32, 49, 52, 45, 49, 52, 53, 45, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 101, 97, 102, 98, 108, 105, 110, 100, 32, 32, 49, 52, 53, 45, 50, 45, 49, 50, 52, 45, 49, 50, 45, 49, 50, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 101, 97, 102, 98, 108, 105, 110, 100, 110, 101, 115, 115, 32, 32, 49, 52, 53, 45, 50, 45, 49, 50, 52, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 101, 97, 102, 98, 108, 105, 110, 100, 110, 101, 115, 115, 101, 115, 32, 32, 49, 52, 53, 45, 50, 45, 49, 50, 52, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 101, 99, 101, 105, 118, 101, 100, 32, 32, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 101, 99, 101, 105, 118, 101, 114, 32, 32, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 101, 99, 108, 97, 114, 101, 100, 32, 32, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 101, 99, 108, 97, 114, 101, 114, 32, 32, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 101, 102, 114, 105, 101, 110, 100, 32, 32, 49, 52, 53, 45, 49, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 111, 45, 105, 116, 45, 121, 111, 117, 114, 115, 101, 108, 102, 101, 114, 32, 32, 49, 52, 53, 45, 51, 54, 45, 49, 51, 52, 54, 45, 51, 54, 45, 49, 51, 52, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 52, 45, 49, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 111, 117, 98, 108, 101, 113, 117, 105, 99, 107, 32, 32, 49, 52, 53, 45, 49, 50, 53, 54, 45, 49, 50, 45, 49, 50, 51, 45, 49, 53, 45, 49, 50, 51, 52, 53, 45, 49, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 101, 97, 115, 116, 97, 98, 111, 117, 116, 32, 32, 49, 53, 45, 49, 45, 51, 52, 45, 49, 45, 49, 50, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 101, 101, 108, 103, 111, 111, 100, 32, 32, 49, 50, 52, 45, 49, 53, 45, 49, 53, 45, 49, 50, 51, 45, 49, 50, 52, 53, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 101, 101, 116, 102, 105, 114, 115, 116, 32, 32, 49, 50, 52, 45, 49, 53, 45, 49, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 45, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 97, 105, 100, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 45, 50, 52, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 97, 105, 100, 101, 114, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 45, 50, 52, 45, 49, 52, 53, 45, 49, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 98, 111, 114, 110, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 10, 110]);
fileData263.push.apply(fileData263, [111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 99, 108, 97, 115, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 52, 45, 49, 50, 51, 45, 49, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 99, 108, 97, 115, 115, 101, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 52, 45, 49, 50, 51, 45, 49, 45, 50, 51, 52, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 100, 97, 121, 32, 32, 49, 50, 52, 45, 51, 52, 45, 53, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 100, 97, 121, 101, 114, 32, 32, 49, 50, 52, 45, 51, 52, 45, 53, 45, 49, 52, 53, 45, 49, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 102, 114, 117, 105, 116, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 51, 54, 45, 50, 52, 45, 50, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 102, 114, 117, 105, 116, 105, 110, 103, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 51, 54, 45, 50, 52, 45, 50, 51, 52, 53, 45, 51, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 103, 101, 110, 101, 114, 97, 116, 105, 111, 110, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 52, 53, 45, 50, 54, 45, 49, 50, 52, 53, 54, 45, 49, 45, 53, 54, 45, 49, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 104, 97, 110, 100, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 53, 45, 49, 50, 51, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 104, 97, 110, 100, 101, 100, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 53, 45, 49, 50, 51, 52, 54, 45, 49, 50, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 108, 105, 110, 103, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 51, 45, 51, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 108, 121, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 110, 101, 115, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 110, 105, 103, 104, 116, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 51, 52, 53, 45, 50, 52, 45, 49, 50, 54, 45, 50, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 110, 105, 103, 104, 116, 101, 114, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 51, 52, 53, 45, 50, 52, 45, 49, 50, 54, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 114, 97, 116, 101, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 51, 53, 45, 49, 45, 50, 51, 52, 53, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 114, 97, 116, 101, 100, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 51, 53, 45, 49, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 114, 97, 116, 105, 110, 103, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 51, 53, 45, 49, 45, 50, 51, 52, 53, 45, 51, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 115, 116, 114, 105, 110, 103, 32, 32, 49, 50, 52, 45, 51, 52, 45, 51, 52, 45, 49, 50, 51, 53, 45, 51, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 111, 114, 97, 115, 109, 117, 99, 104, 32, 32, 49, 50, 51, 52, 53, 54, 45, 49, 45, 50, 51, 52, 45, 49, 51, 52, 45, 49, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 111, 114, 101, 115, 97, 105, 100, 32, 32, 49, 50, 51, 52, 53, 54, 45, 49, 53, 45, 50, 51, 52, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 111, 115, 116, 101, 114, 99, 104, 105, 108, 100, 114, 101, 110, 32, 32, 49, 50, 52, 45, 49, 51, 53, 45, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 54, 45, 49, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 114, 105, 101, 110, 100, 108, 101, 115, 115, 32, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 114, 105, 101, 110, 100, 108, 101, 115, 115, 110, 101, 115, 115, 32, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 52, 54, 45, 50, 51, 52, 45, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 114, 105, 101, 110, 100, 108, 101, 115, 115, 110, 101, 115, 115, 101, 115, 32, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 52, 54, 45, 50, 51, 52, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 114, 105, 101, 110, 100, 108, 105, 101, 114, 32, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 45, 49, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 114, 105, 101, 110, 100, 108, 105, 101, 115, 32, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 114, 105, 101, 110, 100, 108, 105, 101, 115, 116, 32, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 45, 49, 53, 45, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 114, 105, 101, 110, 100, 108, 105, 110, 101, 115, 115, 32, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 45, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 114, 105, 101, 110, 100, 108, 105, 110, 101, 115, 115, 101, 115, 32, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 114, 105, 101, 110, 100, 108, 121, 32, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 114, 105, 101, 110, 100, 115, 104, 105, 112, 32, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 52, 54, 45, 50, 52, 45, 49, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 97, 100, 97, 98, 111, 117, 116, 32, 32, 49, 50, 52, 53, 45, 49, 45, 49, 52, 53, 45, 49, 45, 49, 50, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 97, 105, 110, 115, 97, 105, 100, 32, 32, 49, 50, 52, 53, 45, 49, 45, 51, 53, 45, 50, 51, 52, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 97, 108, 102, 114, 105, 101, 110, 100, 32, 32, 49, 50, 52, 53, 45, 49, 45, 49, 50, 51, 45, 49, 50, 52, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 101, 110, 116, 108, 101, 109, 97, 110, 102, 114, 105, 101, 110, 100, 32, 32, 49, 50, 52, 53, 45, 50, 54, 45, 50, 51, 52, 53, 45, 49, 50, 51, 45, 49, 53, 45, 49, 51, 52, 45, 49, 45, 49, 51, 52, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 101, 110, 116, 108, 101, 109, 101, 110, 102, 114, 105, 101, 110, 100, 115, 32, 32, 49, 50, 52, 53, 45, 50, 54, 45, 50, 51, 52, 53, 45, 49, 50, 51, 45, 49, 53, 45, 49, 51, 52, 45, 50, 54, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 105, 114, 108, 102, 114, 105, 101, 110, 100, 32, 32, 49, 50, 52, 53, 45, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 50, 52, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 100, 99, 104, 105, 108, 100, 114, 101, 110, 32, 32, 49, 50, 52, 53, 45, 49, 51, 53, 45, 49, 52, 53, 45, 49, 54, 45, 49, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 97, 102, 116, 101, 114, 110, 111, 111, 110, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 45, 49, 50, 52, 45, 49, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 98, 121, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 45, 49, 51, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 98, 121, 101, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 45, 49, 51, 52, 53, 54, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 98, 121, 101, 105, 110, 103, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 45, 49, 51, 52, 53, 54, 45, 49, 53, 45, 51, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 98, 121, 105, 110, 103, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 45, 49, 51, 52, 53, 54, 45, 51, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 100, 97, 121, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 53, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 101, 114, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 101, 115, 116, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 53, 45, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 101, 118, 101, 110, 105, 110, 103, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 53, 45, 49, 50, 51, 54, 45, 50, 54, 45, 51, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 102, 101, 108, 108, 111, 119, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 52, 45, 49, 53, 45, 49, 50, 51, 45, 49, 50, 51, 45, 50, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 102, 101, 108, 108, 111, 119, 115, 104, 105, 112, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 52, 45, 49, 53, 45, 49, 50, 51, 45, 49, 50, 51, 45, 50, 52, 54, 45, 49, 52, 54, 45, 50, 52, 45, 49, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 104, 101, 97, 114, 116, 101, 100, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 53, 45, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 104, 101, 97, 114, 116, 101, 100, 108, 121, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 53, 45, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 104, 101, 97, 114, 116, 101, 100, 110, 101, 115, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 53, 45, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 45, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 104, 117, 109, 111, 114, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 104, 117, 109, 111, 114, 101, 100, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 104, 117, 109, 111, 114, 101, 100, 108, 121, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 104, 117, 109, 111, 114, 101, 100, 110, 101, 115, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 45, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 104, 117, 109, 111, 114, 101, 100, 110, 101, 115, 115, 101, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 104, 117, 109, 111, 117, 114, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 50, 53, 54, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 104, 117, 109, 111, 117, 114, 101, 100, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 50, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 104, 117, 109, 111, 117, 114, 101, 100, 108, 121, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 50, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 104, 117, 109, 111, 117, 114, 101, 100, 110, 101, 115, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 50, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 45, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 104, 117, 109, 111, 117, 114, 101, 100, 110, 101, 115, 115, 101, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 50, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 105, 101, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 52, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 105, 115, 104, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 52, 45, 49, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 108, 105, 101, 114, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 51, 45, 50, 52, 45, 49, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 108, 105, 101, 115, 116, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 51, 45, 50, 52, 45, 49, 53, 45, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 108, 105, 110, 101, 115, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 51, 45, 50, 52, 45, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 108, 111, 111, 107, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 51, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 108, 111, 111, 107, 101, 114, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 51, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 51, 45, 49, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 108, 111, 111, 107, 105, 110, 103, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 51, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 51, 45, 51, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 108, 121, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 109, 97, 110, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 45, 49, 45, 49, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 109, 101, 110, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 45, 50, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 109, 111, 114, 110, 105, 110, 103, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 45, 51, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 110, 97, 116, 117, 114, 101, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 49, 45, 50, 51, 52, 53, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 110, 97, 116, 117, 114, 101, 100, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 49, 45, 50, 51, 52, 53, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 110, 97, 116, 117, 114, 101, 100, 108, 121, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 49, 45, 50, 51, 52, 53, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 110, 97, 116, 117, 114, 101, 100, 110, 101, 115, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 49, 45, 50, 51, 52, 53, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 45, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 110, 101, 115, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 110, 101, 115, 115, 101, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 110, 105, 103, 104, 116, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 50, 52, 45, 49, 50, 54, 45, 50, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 115, 105, 122, 101, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 51, 52, 45, 50, 52, 45, 49, 51, 53, 54, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 115, 105, 122, 101, 100, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 51, 52, 45, 50, 52, 45, 49, 51, 53, 54, 45, 49, 50, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 116, 101, 109, 112, 101, 114, 101, 100, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 51, 52, 53, 45, 49, 53, 45, 49, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 50, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 116, 101, 109, 112, 101, 114, 101, 100, 108, 121, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 51, 52, 53, 45, 49, 53, 45, 49, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 50, 52, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 116, 105, 109, 101, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 53, 45, 50, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 117, 110, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 54, 45, 49, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 119, 105, 102, 101, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 52, 53, 54, 45, 50, 52, 45, 49, 50, 52, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 119, 105, 108, 108, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 52, 53, 54, 45, 50, 52, 45, 49, 50, 51, 45, 49, 50, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 119, 105, 108, 108, 101, 100, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 52, 53, 54, 45, 50, 52, 45, 49, 50, 51, 45, 49, 50, 51, 45, 49, 50, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 119, 105, 118, 101, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 52, 53, 54, 45, 50, 52, 45, 49, 50, 51, 54, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 121, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 121, 101, 97, 114, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 53, 54, 45, 49, 53, 45, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 97, 110, 100, 99, 104, 105, 108, 100, 114, 101, 110, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 54, 45, 49, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 97, 117, 110, 116, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 45, 49, 51, 54, 45, 49, 51, 52, 53, 45, 50, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 98, 97, 116, 99, 104, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 45, 49, 45, 50, 51, 52, 53, 45, 49, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 99, 105, 114, 99, 108, 101, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 52, 45, 50, 52, 45, 49, 50, 51, 53, 45, 49, 52, 45, 49, 50, 51, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 99, 111, 97, 116, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 52, 45, 49, 51, 53, 45, 49, 45, 50, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 101, 110, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 50, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 101, 110, 101, 100, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 50, 54, 45, 49, 50, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 101, 110, 101, 114, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 50, 54, 45, 49, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 101, 110, 105, 110, 103, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 50, 54, 45, 51, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 101, 114, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 101, 115, 116, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 53, 45, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 97, 117, 110, 116, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 45, 49, 51, 54, 45, 49, 51, 52, 53, 45, 50, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 99, 104, 105, 108, 100, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 54, 45, 50, 52, 45, 49, 50, 51, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 99, 104, 105, 108, 100, 114, 101, 110, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 54, 45, 49, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 100, 97, 100, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 52, 53, 45, 49, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 100, 97, 117, 103, 104, 116, 101, 114, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 52, 53, 45, 49, 45, 49, 51, 54, 45, 49, 50, 54, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 102, 97, 116, 104, 101, 114, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 53, 45, 49, 50, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 102, 97, 116, 104, 101, 114, 104, 111, 111, 100, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 53, 45, 49, 50, 52, 45, 49, 50, 53, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 109, 97, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 51, 52, 45, 49, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 109, 111, 116, 104, 101, 114, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 53, 45, 49, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 109, 111, 116, 104, 101, 114, 104, 111, 111, 100, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 53, 45, 49, 51, 52, 45, 49, 50, 53, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 110, 101, 112, 104, 101, 119, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 51, 52, 53, 45, 49, 53, 45, 49, 50, 51, 52, 45, 49, 50, 53, 45, 49, 53, 45, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 110, 105, 101, 99, 101, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 51, 52, 53, 45, 50, 52, 45, 49, 53, 45, 49, 52, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 112, 97, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 50, 51, 52, 45, 49, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 112, 97, 114, 101, 110, 116, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 50, 51, 52, 45, 51, 52, 53, 45, 50, 54, 45, 50, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 112, 97, 114, 101, 110, 116, 104, 111, 111, 100, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 50, 51, 52, 45, 51, 52, 53, 45, 50, 54, 45, 50, 51, 52, 53, 45, 49, 50, 53, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 115, 111, 110, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 50, 51, 52, 45, 49, 51, 53, 45, 49, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 117, 110, 99, 108, 101, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 52, 45, 49, 50, 51, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 104, 101, 97, 114, 116, 101, 100, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 53, 45, 49, 53, 45, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 104, 101, 97, 114, 116, 101, 100, 108, 121, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 53, 45, 49, 53, 45, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 104, 101, 97, 114, 116, 101, 100, 110, 101, 115, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 53, 45, 49, 53, 45, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 45, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 104, 101, 97, 114, 116, 101, 100, 110, 101, 115, 115, 101, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 53, 45, 49, 53, 45, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 108, 121, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 110, 101, 112, 104, 101, 119, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 51, 52, 53, 45, 49, 53, 45, 49, 50, 51, 52, 45, 49, 50, 53, 45, 49, 53, 45, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 110, 101, 115, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 110, 101, 115, 115, 101, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 110, 105, 101, 99, 101, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 51, 52, 53, 45, 50, 52, 45, 49, 53, 45, 49, 52, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 115, 119, 111, 114, 100, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 50, 51, 52, 45, 52, 53, 45, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 117, 110, 99, 108, 101, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 52, 45, 49, 50, 51, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 117, 121, 102, 114, 105, 101, 110, 100, 32, 32, 49, 50, 52, 53, 45, 49, 51, 54, 45, 49, 51, 52, 53, 54, 45, 49, 50, 52, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 97, 116, 101, 108, 101, 116, 116, 101, 114, 32, 32, 49, 50, 53, 45, 49, 45, 50, 51, 52, 53, 45, 49, 53, 45, 49, 50, 51, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 101, 97, 100, 102, 105, 114, 115, 116, 32, 32, 49, 50, 53, 45, 50, 45, 49, 52, 53, 45, 49, 50, 52, 45, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 101, 114, 101, 97, 98, 111, 117, 116, 32, 32, 53, 45, 49, 50, 53, 45, 49, 45, 49, 50, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 101, 114, 101, 97, 102, 116, 101, 114, 32, 32, 53, 45, 49, 50, 53, 45, 49, 45, 49, 50, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 101, 114, 101, 97, 103, 97, 105, 110, 32, 32, 53, 45, 49, 50, 53, 45, 49, 45, 49, 50, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 101, 114, 101, 97, 103, 97, 105, 110, 115, 116, 32, 32, 53, 45, 49, 50, 53, 45, 49, 45, 49, 50, 52, 53, 45, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 101, 114, 101, 105, 110, 97, 98, 111, 118, 101, 32, 32, 53, 45, 49, 50, 53, 45, 51, 53, 45, 49, 45, 49, 50, 45, 49, 50, 51, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 101, 114, 101, 105, 110, 97, 102, 116, 101, 114, 32, 32, 53, 45, 49, 50, 53, 45, 51, 53, 45, 49, 45, 49, 50, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 101, 114, 101, 105, 110, 97, 103, 97, 105, 110, 32, 32, 53, 45, 49, 50, 53, 45, 51, 53, 45, 49, 45, 49, 50, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 105, 103, 104, 108, 121, 112, 97, 105, 100, 32, 32, 49, 50, 53, 45, 50, 52, 45, 49, 50, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 49, 50, 51, 52, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 105, 109, 98, 111, 32, 32, 49, 50, 53, 45, 49, 51, 52, 45, 49, 50, 45, 49, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 105, 109, 98, 111, 101, 115, 32, 32, 49, 50, 53, 45, 49, 51, 52, 45, 49, 50, 45, 49, 51, 53, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 105, 108, 108, 112, 97, 105, 100, 32, 32, 50, 52, 45, 49, 50, 51, 45, 49, 50, 51, 45, 49, 50, 51, 52, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 105, 109, 109, 101, 100, 105, 97, 116, 101, 108, 121, 32, 32, 50, 52, 45, 49, 51, 52, 45, 49, 51, 52, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 105, 109, 109, 101, 100, 105, 97, 116, 101, 110, 101, 115, 115, 32, 32, 50, 52, 45, 49, 51, 52, 45, 49, 51, 52, 45, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 105, 110, 97, 115, 109, 117, 99, 104, 32, 32, 51, 53, 45, 49, 45, 50, 51, 52, 45, 49, 51, 52, 45, 49, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 105, 110, 115, 111, 109, 117, 99, 104, 32, 32, 51, 53, 45, 50, 51, 52, 45, 49, 51, 53, 45, 49, 51, 52, 45, 49, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 107, 110, 111, 99, 107, 97, 98, 111, 117, 116, 32, 32, 49, 51, 45, 49, 51, 52, 53, 45, 49, 51, 53, 45, 49, 52, 45, 49, 51, 45, 49, 45, 49, 50, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 97, 100, 121, 102, 114, 105, 101, 110, 100, 32, 32, 49, 50, 51, 45, 49, 45, 49, 52, 53, 45, 49, 51, 52, 53, 54, 45, 49, 50, 52, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 97, 121, 97, 98, 111, 117, 116, 32, 32, 49, 50, 51, 45, 49, 45, 49, 51, 52, 53, 54, 45, 49, 45, 49, 50, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 98, 111, 100, 105, 101, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 52, 53, 45, 50, 52, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 98, 111, 100, 121, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 52, 53, 45, 49, 51, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 98, 111, 109, 98, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 51, 52, 45, 49, 50, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 98, 111, 109, 98, 101, 100, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 51, 52, 45, 49, 50, 45, 49, 50, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 98, 111, 109, 98, 101, 114, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 51, 52, 45, 49, 50, 45, 49, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 98, 111, 109, 98, 105, 110, 103, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 51, 52, 45, 49, 50, 45, 51, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 98, 111, 120, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 51, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 98, 111, 120, 101, 100, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 51, 52, 54, 45, 49, 50, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 98, 111, 120, 101, 114, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 51, 52, 54, 45, 49, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 98, 111, 120, 101, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 51, 52, 54, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 98, 111, 120, 105, 110, 103, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 51, 52, 54, 45, 51, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 101, 100, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 101, 114, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 102, 111, 114, 109, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 53, 54, 45, 49, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 104, 101, 97, 100, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 53, 45, 50, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 104, 101, 97, 100, 105, 110, 103, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 53, 45, 50, 45, 49, 52, 53, 45, 51, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 105, 110, 103, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 51, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 109, 97, 110, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 51, 52, 45, 49, 45, 49, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 109, 101, 110, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 51, 52, 45, 50, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 111, 112, 101, 110, 101, 114, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 51, 53, 45, 49, 50, 51, 52, 45, 50, 54, 45, 49, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 112, 101, 114, 102, 101, 99, 116, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 50, 52, 45, 49, 53, 45, 49, 52, 45, 50, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 112, 114, 101, 115, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 112, 114, 101, 115, 115, 101, 100, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 45, 49, 50, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 112, 114, 101, 115, 115, 101, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 112, 114, 101, 115, 115, 105, 110, 103, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 45, 51, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 113, 117, 97, 108, 105, 116, 121, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 53, 45, 49, 51, 54, 45, 49, 45, 49, 50, 51, 45, 53, 54, 45, 49, 51, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 115, 112, 97, 99, 101, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 45, 49, 52, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 115, 112, 97, 99, 101, 100, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 45, 49, 52, 45, 49, 50, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 115, 112, 97, 99, 105, 110, 103, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 45, 49, 52, 45, 51, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 116, 101, 120, 116, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 53, 45, 49, 51, 52, 54, 45, 50, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 105, 116, 116, 108, 101, 100, 32, 32, 49, 50, 51, 45, 49, 50, 51, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 105, 116, 116, 108, 101, 110, 101, 99, 107, 32, 32, 49, 50, 51, 45, 49, 50, 51, 45, 49, 51, 52, 53, 45, 49, 53, 45, 49, 52, 45, 49, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 105, 116, 116, 108, 101, 110, 101, 115, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 105, 116, 116, 108, 101, 110, 101, 115, 115, 101, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 105, 116, 116, 108, 101, 114, 32, 32, 49, 50, 51, 45, 49, 50, 51, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 105, 116, 116, 108, 101, 115, 116, 32, 32, 49, 50, 51, 45, 49, 50, 51, 45, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 111, 118, 101, 99, 104, 105, 108, 100, 114, 101, 110, 32, 32, 49, 50, 51, 45, 49, 51, 53, 45, 49, 50, 51, 54, 45, 49, 53, 45, 49, 54, 45, 49, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 111, 118, 101, 108, 101, 116, 116, 101, 114, 32, 32, 49, 50, 51, 45, 49, 51, 53, 45, 49, 50, 51, 54, 45, 49, 53, 45, 49, 50, 51, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 111, 119, 108, 121, 112, 97, 105, 100, 32, 32, 49, 50, 51, 45, 50, 52, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 49, 50, 51, 52, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 97, 110, 102, 114, 105, 101, 110, 100, 32, 32, 49, 51, 52, 45, 49, 45, 49, 51, 52, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 101, 110, 102, 114, 105, 101, 110, 100, 115, 32, 32, 49, 51, 52, 45, 50, 54, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 105, 100, 97, 102, 116, 101, 114, 110, 111, 111, 110, 32, 32, 49, 51, 52, 45, 50, 52, 45, 49, 52, 53, 45, 49, 45, 49, 50, 52, 45, 49, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 105, 115, 98, 114, 97, 105, 108, 108, 101, 32, 32, 49, 51, 52, 45, 50, 52, 45, 50, 51, 52, 45, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 105, 115, 98, 114, 97, 105, 108, 108, 101, 100, 32, 32, 49, 51, 52, 45, 50, 52, 45, 50, 51, 52, 45, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 105, 115, 112, 101, 114, 99, 101, 105, 118, 101, 32, 32, 49, 51, 52, 45, 50, 52, 45, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 105, 115, 112, 101, 114, 99, 101, 105, 118, 101, 100, 32, 32, 49, 51, 52, 45, 50, 52, 45, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 105, 115, 112, 101, 114, 99, 101, 105, 118, 101, 114, 32, 32, 49, 51, 52, 45, 50, 52, 45, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 105, 115, 112, 101, 114, 99, 101, 105, 118, 105, 110, 103, 32, 32, 49, 51, 52, 45, 50, 52, 45, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52]);
fileData263.push.apply(fileData263, [53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 105, 115, 115, 97, 105, 100, 32, 32, 49, 51, 52, 45, 50, 52, 45, 50, 51, 52, 45, 50, 51, 52, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 111, 114, 110, 105, 110, 103, 97, 102, 116, 101, 114, 32, 32, 49, 51, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 45, 51, 52, 54, 45, 49, 45, 49, 50, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 99, 104, 108, 121, 32, 32, 49, 51, 52, 45, 49, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 99, 104, 110, 101, 115, 115, 32, 32, 49, 51, 52, 45, 49, 54, 45, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 115, 116, 39, 118, 101, 32, 32, 49, 51, 52, 45, 51, 52, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 115, 116, 97, 32, 32, 49, 51, 52, 45, 51, 52, 45, 49, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 115, 116, 97, 114, 100, 32, 32, 49, 51, 52, 45, 51, 52, 45, 51, 52, 53, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 115, 116, 97, 114, 100, 121, 32, 32, 49, 51, 52, 45, 51, 52, 45, 51, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 115, 116, 105, 101, 114, 32, 32, 49, 51, 52, 45, 51, 52, 45, 50, 52, 45, 49, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 115, 116, 105, 101, 115, 116, 32, 32, 49, 51, 52, 45, 51, 52, 45, 50, 52, 45, 49, 53, 45, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 115, 116, 105, 108, 121, 32, 32, 49, 51, 52, 45, 51, 52, 45, 50, 52, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 115, 116, 105, 110, 101, 115, 115, 32, 32, 49, 51, 52, 45, 51, 52, 45, 50, 52, 45, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 115, 116, 110, 39, 116, 32, 32, 49, 51, 52, 45, 51, 52, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 115, 116, 110, 39, 116, 39, 118, 101, 32, 32, 49, 51, 52, 45, 51, 52, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 115, 116, 121, 32, 32, 49, 51, 52, 45, 51, 52, 45, 49, 51, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 110, 101, 119, 115, 108, 101, 116, 116, 101, 114, 32, 32, 49, 51, 52, 53, 45, 49, 53, 45, 50, 52, 53, 54, 45, 50, 51, 52, 45, 49, 50, 51, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 110, 111, 110, 101, 115, 117, 99, 104, 32, 32, 49, 51, 52, 53, 45, 53, 45, 49, 51, 53, 45, 50, 51, 52, 45, 49, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 110, 111, 110, 115, 117, 99, 104, 32, 32, 49, 51, 52, 53, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 50, 51, 52, 45, 49, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 110, 111, 114, 116, 104, 97, 98, 111, 117, 116, 32, 32, 49, 51, 52, 53, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 52, 53, 54, 45, 49, 45, 49, 50, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 111, 118, 101, 114, 109, 117, 99, 104, 32, 32, 49, 51, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 49, 51, 52, 45, 49, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 111, 118, 101, 114, 112, 97, 105, 100, 32, 32, 49, 51, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 49, 50, 51, 52, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 101, 110, 102, 114, 105, 101, 110, 100, 32, 32, 49, 50, 51, 52, 45, 50, 54, 45, 49, 50, 52, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 101, 114, 99, 101, 105, 118, 101, 100, 32, 32, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 101, 114, 99, 101, 105, 118, 101, 114, 32, 32, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 101, 114, 104, 97, 112, 115, 101, 115, 32, 32, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 50, 53, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 111, 111, 114, 108, 121, 112, 97, 105, 100, 32, 32, 49, 50, 51, 52, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 49, 50, 51, 52, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 111, 115, 116, 112, 97, 105, 100, 32, 32, 49, 50, 51, 52, 45, 49, 51, 53, 45, 51, 52, 45, 49, 50, 51, 52, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 114, 101, 99, 101, 105, 118, 101, 32, 32, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 52, 45, 49, 50, 51, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 114, 101, 99, 101, 105, 118, 101, 114, 32, 32, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 114, 101, 99, 101, 105, 118, 105, 110, 103, 32, 32, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 114, 101, 112, 97, 105, 100, 32, 32, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 52, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 117, 114, 98, 108, 105, 110, 100, 32, 32, 49, 50, 51, 52, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 117, 114, 98, 108, 105, 110, 100, 108, 121, 32, 32, 49, 50, 51, 52, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 117, 114, 98, 108, 105, 110, 100, 110, 101, 115, 115, 32, 32, 49, 50, 51, 52, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 117, 114, 98, 108, 105, 110, 100, 110, 101, 115, 115, 101, 115, 32, 32, 49, 50, 51, 52, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 100, 114, 97, 119, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 52, 53, 45, 49, 50, 51, 53, 45, 49, 45, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 101, 110, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 101, 110, 101, 100, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 54, 45, 49, 50, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 101, 110, 101, 114, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 54, 45, 49, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 101, 110, 105, 110, 103, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 54, 45, 51, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 101, 114, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 101, 115, 116, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 53, 45, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 102, 105, 114, 101, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 50, 52, 45, 50, 52, 45, 49, 50, 51, 53, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 102, 105, 114, 105, 110, 103, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 50, 52, 45, 50, 52, 45, 49, 50, 51, 53, 45, 51, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 102, 114, 101, 101, 122, 101, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 53, 45, 49, 53, 45, 49, 51, 53, 54, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 102, 114, 101, 101, 122, 105, 110, 103, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 53, 45, 49, 53, 45, 49, 51, 53, 54, 45, 51, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 102, 114, 111, 122, 101, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 51, 53, 45, 49, 51, 53, 54, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 102, 114, 111, 122, 101, 110, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 51, 53, 45, 49, 51, 53, 54, 45, 50, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 105, 101, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 52, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 105, 115, 104, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 52, 45, 49, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 105, 115, 104, 108, 121, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 52, 45, 49, 52, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 108, 105, 109, 101, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 50, 51, 45, 50, 52, 45, 49, 51, 52, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 108, 121, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 110, 101, 115, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 110, 101, 115, 115, 101, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 115, 97, 110, 100, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 51, 52, 45, 49, 50, 51, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 115, 101, 116, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 115, 105, 108, 118, 101, 114, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 51, 52, 45, 50, 52, 45, 49, 50, 51, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 115, 105, 108, 118, 101, 114, 101, 100, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 51, 52, 45, 50, 52, 45, 49, 50, 51, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 49, 50, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 115, 105, 108, 118, 101, 114, 105, 110, 103, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 51, 52, 45, 50, 52, 45, 49, 50, 51, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 51, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 115, 110, 97, 112, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 51, 52, 45, 49, 51, 52, 53, 45, 49, 45, 49, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 115, 116, 101, 112, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 51, 52, 45, 49, 53, 45, 49, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 115, 116, 101, 112, 112, 101, 100, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 51, 52, 45, 49, 53, 45, 49, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 115, 116, 101, 112, 112, 101, 114, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 51, 52, 45, 49, 53, 45, 49, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 115, 116, 101, 112, 112, 105, 110, 103, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 51, 52, 45, 49, 53, 45, 49, 50, 51, 52, 45, 49, 50, 51, 52, 45, 51, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 116, 101, 109, 112, 101, 114, 101, 100, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 51, 52, 53, 45, 49, 53, 45, 49, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 50, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 116, 105, 109, 101, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 53, 45, 50, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 119, 105, 116, 116, 101, 100, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 52, 53, 54, 45, 50, 52, 45, 50, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 119, 105, 116, 116, 101, 100, 108, 121, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 52, 53, 54, 45, 50, 52, 45, 50, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 119, 105, 116, 116, 101, 100, 110, 101, 115, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 52, 53, 54, 45, 50, 52, 45, 50, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 45, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 121, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 51, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 97, 100, 97, 99, 114, 111, 115, 115, 32, 32, 49, 50, 51, 53, 45, 50, 45, 49, 52, 53, 45, 49, 45, 49, 52, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 98, 114, 97, 105, 108, 108, 101, 32, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 98, 114, 97, 105, 108, 108, 101, 100, 32, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 98, 114, 97, 105, 108, 108, 101, 114, 32, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 99, 101, 105, 118, 101, 100, 32, 32, 49, 50, 51, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 99, 101, 105, 118, 101, 114, 32, 32, 49, 50, 51, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 99, 101, 105, 118, 101, 114, 115, 104, 105, 112, 32, 32, 49, 50, 51, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 45, 49, 52, 54, 45, 50, 52, 45, 49, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 106, 111, 105, 99, 101, 100, 32, 32, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 106, 111, 105, 99, 101, 102, 117, 108, 32, 32, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 53, 54, 45, 49, 50, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 106, 111, 105, 99, 101, 102, 117, 108, 108, 121, 32, 32, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 53, 54, 45, 49, 50, 51, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 106, 111, 105, 99, 101, 102, 117, 108, 110, 101, 115, 115, 32, 32, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 53, 54, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 106, 111, 105, 99, 101, 114, 32, 32, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 106, 111, 105, 99, 105, 110, 103, 108, 121, 32, 32, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 49, 50, 52, 53, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 108, 101, 116, 116, 101, 114, 32, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 108, 101, 116, 116, 101, 114, 101, 100, 32, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 108, 101, 116, 116, 101, 114, 105, 110, 103, 32, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 45, 49, 50, 51, 53, 45, 51, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 112, 97, 105, 100, 32, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 52, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 105, 103, 104, 116, 97, 98, 111, 117, 116, 32, 32, 53, 45, 49, 50, 51, 53, 45, 49, 45, 49, 50, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 111, 117, 110, 100, 97, 98, 111, 117, 116, 32, 32, 49, 50, 51, 53, 45, 52, 54, 45, 49, 52, 53, 45, 49, 45, 49, 50, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 111, 117, 115, 116, 97, 98, 111, 117, 116, 32, 32, 49, 50, 51, 53, 45, 49, 50, 53, 54, 45, 51, 52, 45, 49, 45, 49, 50, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 117, 110, 97, 98, 111, 117, 116, 32, 32, 49, 50, 51, 53, 45, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 45, 49, 50, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 97, 105, 100, 101, 115, 116, 32, 32, 50, 51, 52, 45, 49, 52, 53, 45, 49, 53, 45, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 97, 105, 100, 115, 116, 32, 32, 50, 51, 52, 45, 49, 52, 53, 45, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 99, 97, 116, 116, 101, 114, 103, 111, 111, 100, 32, 32, 50, 51, 52, 45, 49, 52, 45, 49, 45, 50, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 54, 45, 49, 50, 52, 53, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 99, 104, 111, 111, 108, 99, 104, 105, 108, 100, 114, 101, 110, 32, 32, 50, 51, 52, 45, 49, 54, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 54, 45, 49, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 99, 104, 111, 111, 108, 102, 114, 105, 101, 110, 100, 32, 32, 50, 51, 52, 45, 49, 54, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 50, 52, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 104, 111, 117, 108, 100, 39, 118, 101, 32, 32, 49, 52, 54, 45, 49, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 104, 111, 117, 108, 100, 97, 32, 32, 49, 52, 54, 45, 49, 52, 53, 45, 49, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 104, 111, 117, 108, 100, 101, 115, 116, 32, 32, 49, 52, 54, 45, 49, 52, 53, 45, 49, 53, 45, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 104, 111, 117, 108, 100, 110, 39, 116, 32, 32, 49, 52, 54, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 104, 111, 117, 108, 100, 110, 39, 116, 39, 118, 101, 32, 32, 49, 52, 54, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 104, 111, 117, 108, 100, 115, 116, 32, 32, 49, 52, 54, 45, 49, 52, 53, 45, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 110, 111, 119, 98, 108, 105, 110, 100, 32, 32, 50, 51, 52, 45, 49, 51, 52, 53, 45, 50, 52, 54, 45, 49, 50, 45, 49, 50, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 110, 111, 119, 98, 108, 105, 110, 100, 110, 101, 115, 115, 32, 32, 50, 51, 52, 45, 49, 51, 52, 53, 45, 50, 52, 54, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 110, 111, 119, 98, 108, 105, 110, 100, 110, 101, 115, 115, 101, 115, 32, 32, 50, 51, 52, 45, 49, 51, 52, 53, 45, 50, 52, 54, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 111, 109, 101, 115, 117, 99, 104, 32, 32, 53, 45, 50, 51, 52, 45, 50, 51, 52, 45, 49, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 111, 117, 116, 104, 97, 98, 111, 117, 116, 32, 32, 50, 51, 52, 45, 49, 50, 53, 54, 45, 49, 52, 53, 54, 45, 49, 45, 49, 50, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 116, 101, 112, 99, 104, 105, 108, 100, 114, 101, 110, 32, 32, 51, 52, 45, 49, 53, 45, 49, 50, 51, 52, 45, 49, 54, 45, 49, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 116, 105, 114, 97, 98, 111, 117, 116, 32, 32, 51, 52, 45, 50, 52, 45, 49, 50, 51, 53, 45, 49, 45, 49, 50, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 117, 99, 104, 108, 105, 107, 101, 32, 32, 50, 51, 52, 45, 49, 54, 45, 49, 50, 51, 45, 50, 52, 45, 49, 51, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 117, 112, 101, 114, 103, 111, 111, 100, 32, 32, 50, 51, 52, 45, 49, 51, 54, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 50, 52, 53, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 117, 112, 101, 114, 113, 117, 105, 99, 107, 32, 32, 50, 51, 52, 45, 49, 51, 54, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 50, 51, 52, 53, 45, 49, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 97, 105, 108, 102, 105, 114, 115, 116, 32, 32, 50, 51, 52, 53, 45, 49, 45, 50, 52, 45, 49, 50, 51, 45, 49, 50, 52, 45, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 101, 114, 101, 97, 98, 111, 117, 116, 32, 32, 53, 45, 50, 51, 52, 54, 45, 49, 45, 49, 50, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 101, 114, 101, 97, 102, 116, 101, 114, 32, 32, 53, 45, 50, 51, 52, 54, 45, 49, 45, 49, 50, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 101, 114, 101, 97, 103, 97, 105, 110, 32, 32, 53, 45, 50, 51, 52, 54, 45, 49, 45, 49, 50, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 101, 114, 101, 97, 103, 97, 105, 110, 115, 116, 32, 32, 53, 45, 50, 51, 52, 54, 45, 49, 45, 49, 50, 52, 53, 45, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 101, 114, 101, 105, 110, 97, 102, 116, 101, 114, 32, 32, 53, 45, 50, 51, 52, 54, 45, 51, 53, 45, 49, 45, 49, 50, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 101, 114, 101, 105, 110, 97, 103, 97, 105, 110, 32, 32, 53, 45, 50, 51, 52, 54, 45, 51, 53, 45, 49, 45, 49, 50, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 111, 103, 101, 116, 104, 101, 114, 110, 101, 115, 115, 32, 32, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 117, 114, 110, 97, 98, 111, 117, 116, 32, 32, 50, 51, 52, 53, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 45, 49, 45, 49, 50, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 97, 99, 99, 111, 114, 100, 105, 110, 103, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 45, 49, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 97, 99, 99, 111, 114, 100, 105, 110, 103, 108, 121, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 45, 49, 52, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 98, 108, 105, 110, 100, 102, 111, 108, 100, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 45, 49, 50, 51, 45, 49, 50, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 98, 108, 105, 110, 100, 102, 111, 108, 100, 101, 100, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 45, 49, 50, 51, 45, 49, 50, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 45, 49, 50, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 98, 108, 105, 110, 100, 102, 111, 108, 100, 105, 110, 103, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 45, 49, 50, 51, 45, 49, 50, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 45, 51, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 98, 114, 97, 105, 108, 108, 101, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 98, 114, 97, 105, 108, 108, 101, 100, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 100, 101, 99, 101, 105, 118, 101, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 100, 101, 99, 101, 105, 118, 101, 100, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 100, 101, 99, 101, 105, 118, 101, 114, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 100, 101, 99, 101, 105, 118, 105, 110, 103, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 100, 101, 99, 108, 97, 114, 101, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 100, 101, 99, 108, 97, 114, 101, 100, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 100, 101, 114, 112, 97, 105, 100, 32, 32, 53, 45, 49, 51, 54, 45, 49, 50, 51, 52, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 102, 114, 105, 101, 110, 100, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 102, 114, 105, 101, 110, 100, 108, 105, 101, 114, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 45, 49, 50, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 102, 114, 105, 101, 110, 100, 108, 105, 101, 115, 116, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 45, 49, 53, 45, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 102, 114, 105, 101, 110, 100, 108, 105, 110, 101, 115, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 45, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 102, 114, 105, 101, 110, 100, 108, 105, 110, 101, 115, 115, 101, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 102, 114, 105, 101, 110, 100, 108, 121, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 108, 101, 116, 116, 101, 114, 101, 100, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 110, 101, 99, 101, 115, 115, 97, 114, 121, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 51, 52, 53, 45, 49, 53, 45, 49, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 112, 97, 105, 100, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 52, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 112, 101, 114, 99, 101, 105, 118, 101, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 112, 101, 114, 99, 101, 105, 118, 101, 100, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 112, 101, 114, 99, 101, 105, 118, 105, 110, 103, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 113, 117, 105, 99, 107, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 52, 53, 45, 49, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 114, 101, 99, 101, 105, 118, 101, 100, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 114, 101, 106, 111, 105, 99, 101, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 114, 101, 106, 111, 105, 99, 101, 100, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 114, 101, 106, 111, 105, 99, 101, 102, 117, 108, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 53, 54, 45, 49, 50, 51, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 114, 101, 106, 111, 105, 99, 101, 102, 117, 108, 108, 121, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 53, 54, 45, 49, 50, 51, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 114, 101, 106, 111, 105, 99, 101, 102, 117, 108, 110, 101, 115, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 53, 54, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 114, 101, 106, 111, 105, 99, 101, 114, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 114, 101, 106, 111, 105, 99, 105, 110, 103, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 49, 50, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 114, 101, 106, 111, 105, 99, 105, 110, 103, 108, 121, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 49, 50, 52, 53, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 114, 101, 112, 97, 105, 100, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 52, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 115, 97, 105, 100, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 50, 51, 52, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 97, 108, 107, 97, 98, 111, 117, 116, 32, 32, 50, 52, 53, 54, 45, 49, 45, 49, 50, 51, 45, 49, 51, 45, 49, 45, 49, 50, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 101, 108, 108, 112, 97, 105, 100, 32, 32, 50, 52, 53, 54, 45, 49, 53, 45, 49, 50, 51, 45, 49, 50, 51, 45, 49, 50, 51, 52, 45, 49, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 101, 115, 116, 97, 98, 111, 117, 116, 32, 32, 50, 52, 53, 54, 45, 49, 53, 45, 51, 52, 45, 49, 45, 49, 50, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 104, 101, 114, 101, 97, 98, 111, 117, 116, 32, 32, 53, 45, 49, 53, 54, 45, 49, 45, 49, 50, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 104, 101, 114, 101, 97, 102, 116, 101, 114, 32, 32, 53, 45, 49, 53, 54, 45, 49, 45, 49, 50, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 104, 101, 114, 101, 97, 103, 97, 105, 110, 32, 32, 53, 45, 49, 53, 54, 45, 49, 45, 49, 50, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 104, 101, 114, 101, 97, 103, 97, 105, 110, 115, 116, 32, 32, 53, 45, 49, 53, 54, 45, 49, 45, 49, 50, 52, 53, 45, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 104, 101, 114, 101, 105, 110, 97, 102, 116, 101, 114, 32, 32, 53, 45, 49, 53, 54, 45, 51, 53, 45, 49, 45, 49, 50, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 104, 101, 114, 101, 105, 110, 97, 103, 97, 105, 110, 32, 32, 53, 45, 49, 53, 54, 45, 51, 53, 45, 49, 45, 49, 50, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 111, 109, 97, 110, 102, 114, 105, 101, 110, 100, 32, 32, 50, 52, 53, 54, 45, 49, 51, 53, 45, 49, 51, 52, 45, 49, 45, 49, 51, 52, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 111, 109, 101, 110, 102, 114, 105, 101, 110, 100, 115, 32, 32, 50, 52, 53, 54, 45, 49, 51, 53, 45, 49, 51, 52, 45, 50, 54, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 111, 117, 108, 100, 39, 118, 101, 32, 32, 50, 52, 53, 54, 45, 49, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 111, 117, 108, 100, 97, 32, 32, 50, 52, 53, 54, 45, 49, 52, 53, 45, 49, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 111, 117, 108, 100, 101, 115, 116, 32, 32, 50, 52, 53, 54, 45, 49, 52, 53, 45, 49, 53, 45, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 111, 117, 108, 100, 110, 39, 116, 32, 32, 50, 52, 53, 54, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 111, 117, 108, 100, 110, 39, 116, 39, 118, 101, 32, 32, 50, 52, 53, 54, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 111, 117, 108, 100, 115, 116, 32, 32, 50, 52, 53, 54, 45, 49, 52, 53, 45, 51, 52, 10, 10, 35, 84, 79, 68, 79, 58, 32, 32, 98, 97, 99, 107, 109, 97, 116, 99, 104, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 97, 98, 108, 101, 32, 116, 111, 32, 109, 101, 114, 103, 101, 32, 116, 104, 101, 115, 101, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 39, 116, 119, 111, 117, 108, 100, 115, 32, 32, 51, 45, 50, 51, 52, 53, 45, 50, 52, 53, 54, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 39, 116, 119, 111, 117, 108, 100, 39, 118, 101, 115, 32, 32, 51, 45, 50, 51, 52, 53, 45, 50, 52, 53, 54, 45, 49, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 39, 116, 119, 111, 117, 108, 100, 97, 115, 32, 32, 51, 45, 50, 51, 52, 53, 45, 50, 52, 53, 54, 45, 49, 52, 53, 45, 49, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 39, 116, 119, 111, 117, 108, 100, 110, 39, 116, 115, 32, 32, 51, 45, 50, 51, 52, 53, 45, 50, 52, 53, 54, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 39, 116, 119, 111, 117, 108, 100, 110, 39, 116, 39, 118, 101, 115, 32, 32, 51, 45, 50, 51, 52, 53, 45, 50, 52, 53, 54, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 98, 111, 117, 116, 102, 97, 99, 101, 115, 32, 32, 49, 45, 49, 50, 45, 49, 50, 52, 45, 49, 45, 49, 52, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 98, 111, 117, 116, 102, 97, 99, 101, 114, 115, 32, 32, 49, 45, 49, 50, 45, 49, 50, 52, 45, 49, 45, 49, 52, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 98, 111, 117, 116, 102, 97, 99, 105, 110, 103, 115, 32, 32, 49, 45, 49, 50, 45, 49, 50, 52, 45, 49, 45, 49, 52, 45, 51, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 98, 111, 117, 116, 116, 117, 114, 110, 115, 32, 32, 49, 45, 49, 50, 45, 50, 51, 52, 53, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 98, 111, 118, 101, 98, 111, 97, 114, 100, 115, 32, 32, 49, 45, 49, 50, 45, 49, 50, 51, 54, 45, 49, 50, 45, 49, 51, 53, 45, 51, 52, 53, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 98, 111, 118, 101, 103, 114, 111, 117, 110, 100, 115, 32, 32, 49, 45, 49, 50, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 52, 54, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 111, 114, 101, 115, 97, 105, 100, 115, 32, 32, 49, 45, 49, 50, 51, 52, 53, 54, 45, 49, 53, 45, 50, 51, 52, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 98, 97, 116, 116, 108, 101, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 45, 49, 45, 50, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 51, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 98, 105, 114, 116, 104, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 45, 50, 52, 45, 49, 50, 51, 53, 45, 49, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 98, 114, 101, 97, 107, 102, 97, 115, 116, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 45, 49, 50, 51, 53, 45, 50, 45, 49, 51, 45, 49, 50, 52, 45, 49, 45, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 98, 117, 114, 110, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 98, 117, 114, 110, 101, 114, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 98, 117, 114, 110, 105, 110, 103, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 45, 51, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 99, 97, 114, 101, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 52, 45, 51, 52, 53, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 99, 108, 97, 112, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 52, 45, 49, 50, 51, 45, 49, 45, 49, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 99, 111, 102, 102, 101, 101, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 52, 45, 49, 50, 51, 53, 54, 45, 49, 50, 52, 45, 49, 53, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 100, 97, 109, 112, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 52, 53, 45, 49, 45, 49, 51, 52, 45, 49, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 100, 97, 114, 107, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 52, 53, 45, 51, 52, 53, 45, 49, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 100, 101, 99, 107, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 52, 53, 45, 49, 53, 45, 49, 52, 45, 49, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 100, 105, 110, 110, 101, 114, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 52, 53, 45, 51, 53, 45, 49, 51, 52, 53, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 102, 108, 111, 119, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 52, 45, 49, 50, 51, 45, 50, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 103, 97, 109, 101, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 52, 53, 45, 49, 45, 49, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 103, 108, 111, 119, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 52, 53, 45, 49, 50, 51, 45, 50, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 103, 117, 97, 114, 100, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 52, 53, 45, 49, 51, 54, 45, 51, 52, 53, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 104, 97, 116, 99, 104, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 53, 45, 49, 45, 50, 51, 52, 53, 45, 49, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 104, 97, 116, 99, 104, 101, 115, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 53, 45, 49, 45, 50, 51, 52, 53, 45, 49, 54, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 104, 111, 117, 114, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 53, 45, 49, 50, 53, 54, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 108, 105, 102, 101, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 51, 45, 50, 52, 45, 49, 50, 52, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 108, 105, 103, 104, 116, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 51, 45, 50, 52, 45, 49, 50, 54, 45, 50, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 108, 105, 118, 101, 115, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 51, 45, 50, 52, 45, 49, 50, 51, 54, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 108, 117, 110, 99, 104, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 51, 45, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 108, 117, 110, 99, 104, 101, 115, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 51, 45, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 54, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 109, 97, 114, 107, 101, 116, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 45, 51, 52, 53, 45, 49, 51, 45, 49, 53, 45, 50, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 109, 97, 116, 99, 104, 115, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 45, 49, 45, 50, 51, 52, 53, 45, 49, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 109, 97, 116, 104, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 45, 49, 45, 49, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 109, 101, 101, 116, 105, 110, 103, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 45, 49, 53, 45, 49, 53, 45, 50, 51, 52, 53, 45, 51, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 109, 101, 110, 116, 105, 111, 110, 101, 100, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 45, 50, 54, 45, 53, 54, 45, 49, 51, 52, 53, 45, 49, 50, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 109, 105, 100, 100, 97, 121, 115, 32, 32, 49]);
fileData263.push.apply(fileData263, [45, 49, 50, 52, 45, 49, 51, 52, 45, 50, 52, 45, 49, 52, 53, 45, 53, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 109, 105, 100, 110, 105, 103, 104, 116, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 45, 50, 52, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 50, 52, 45, 49, 50, 54, 45, 50, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 109, 111, 115, 116, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 45, 49, 51, 53, 45, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 110, 111, 111, 110, 116, 101, 97, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 53, 45, 49, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 112, 97, 105, 110, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 51, 52, 45, 49, 45, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 112, 97, 114, 116, 105, 101, 115, 115, 32, 32, 49, 45, 49, 50, 52, 45, 53, 45, 49, 50, 51, 52, 45, 50, 52, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 112, 97, 114, 116, 121, 115, 32, 32, 49, 45, 49, 50, 52, 45, 53, 45, 49, 50, 51, 52, 45, 49, 51, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 112, 105, 101, 99, 101, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 51, 52, 45, 50, 52, 45, 49, 53, 45, 49, 52, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 112, 108, 97, 121, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 51, 52, 45, 49, 50, 51, 45, 49, 45, 49, 51, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 115, 97, 108, 101, 115, 32, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 45, 49, 45, 49, 50, 51, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 115, 99, 104, 111, 111, 108, 115, 32, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 45, 49, 54, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 50, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 115, 101, 110, 115, 97, 116, 105, 111, 110, 115, 32, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 45, 50, 54, 45, 50, 51, 52, 45, 49, 45, 53, 54, 45, 49, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 115, 104, 97, 118, 101, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 52, 54, 45, 49, 45, 49, 50, 51, 54, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 115, 104, 111, 99, 107, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 52, 54, 45, 49, 51, 53, 45, 49, 52, 45, 49, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 115, 104, 111, 119, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 52, 54, 45, 50, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 115, 104, 111, 119, 101, 114, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 52, 54, 45, 50, 52, 54, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 115, 117, 112, 112, 101, 114, 115, 32, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 45, 49, 51, 54, 45, 49, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 116, 97, 115, 116, 101, 115, 32, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 53, 45, 49, 45, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 116, 97, 120, 115, 32, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 53, 45, 49, 45, 49, 51, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 116, 97, 120, 101, 115, 115, 32, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 53, 45, 49, 45, 49, 51, 52, 54, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 116, 101, 97, 115, 32, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 53, 45, 49, 53, 45, 49, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 116, 104, 101, 97, 116, 101, 114, 115, 32, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 54, 45, 49, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 116, 104, 101, 97, 116, 114, 101, 115, 32, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 54, 45, 49, 45, 50, 51, 52, 53, 45, 49, 50, 51, 53, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 116, 104, 111, 117, 103, 104, 116, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 52, 53, 54, 45, 53, 45, 49, 50, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 116, 105, 109, 101, 115, 32, 32, 49, 45, 49, 50, 52, 45, 53, 45, 50, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 116, 114, 101, 97, 116, 109, 101, 110, 116, 115, 32, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 53, 45, 49, 50, 51, 53, 45, 50, 45, 50, 51, 52, 53, 45, 53, 54, 45, 50, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 119, 111, 114, 100, 115, 32, 32, 49, 45, 49, 50, 52, 45, 52, 53, 45, 50, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 119, 111, 114, 107, 115, 32, 32, 49, 45, 49, 50, 52, 45, 53, 45, 50, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 119, 111, 114, 108, 100, 115, 32, 32, 49, 45, 49, 50, 52, 45, 52, 53, 54, 45, 50, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 112, 112, 101, 114, 99, 101, 105, 118, 101, 115, 32, 32, 49, 45, 49, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 112, 112, 101, 114, 99, 101, 105, 118, 101, 114, 115, 32, 32, 49, 45, 49, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 112, 112, 101, 114, 99, 101, 105, 118, 105, 110, 103, 115, 32, 32, 49, 45, 49, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 114, 99, 104, 100, 101, 99, 101, 105, 118, 101, 114, 115, 32, 32, 51, 52, 53, 45, 49, 54, 45, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 102, 111, 114, 101, 104, 97, 110, 100, 115, 32, 32, 50, 51, 45, 49, 50, 52, 45, 49, 50, 53, 45, 49, 50, 51, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 102, 111, 114, 101, 109, 101, 110, 116, 105, 111, 110, 101, 100, 115, 32, 32, 50, 51, 45, 49, 50, 52, 45, 49, 51, 52, 45, 50, 54, 45, 53, 54, 45, 49, 51, 52, 53, 45, 49, 50, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 102, 114, 105, 101, 110, 100, 115, 32, 32, 50, 51, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 104, 105, 110, 100, 104, 97, 110, 100, 115, 32, 32, 50, 51, 45, 49, 50, 53, 45, 49, 50, 53, 45, 49, 50, 51, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 108, 105, 116, 116, 108, 101, 115, 32, 32, 50, 51, 45, 49, 50, 51, 45, 49, 50, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 108, 105, 116, 116, 108, 101, 109, 101, 110, 116, 115, 32, 32, 50, 51, 45, 49, 50, 51, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 108, 105, 116, 116, 108, 101, 114, 115, 32, 32, 50, 51, 45, 49, 50, 51, 45, 49, 50, 51, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 108, 111, 119, 100, 101, 99, 107, 115, 32, 32, 50, 51, 45, 49, 50, 51, 45, 49, 52, 53, 45, 49, 53, 45, 49, 52, 45, 49, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 108, 111, 119, 103, 114, 111, 117, 110, 100, 115, 32, 32, 50, 51, 45, 49, 50, 51, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 52, 54, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 110, 101, 97, 116, 104, 100, 101, 99, 107, 115, 32, 32, 50, 51, 45, 49, 51, 52, 53, 45, 49, 52, 53, 45, 49, 53, 45, 49, 52, 45, 49, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 110, 101, 97, 116, 104, 103, 114, 111, 117, 110, 100, 115, 32, 32, 50, 51, 45, 49, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 52, 54, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 116, 119, 101, 101, 110, 100, 101, 99, 107, 115, 32, 32, 50, 51, 45, 50, 51, 52, 53, 45, 49, 52, 53, 45, 49, 53, 45, 49, 52, 45, 49, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 116, 119, 101, 101, 110, 116, 105, 109, 101, 115, 32, 32, 50, 51, 45, 50, 51, 52, 53, 45, 53, 45, 50, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 116, 119, 101, 101, 110, 119, 104, 105, 108, 101, 115, 32, 32, 50, 51, 45, 50, 51, 52, 53, 45, 49, 53, 54, 45, 50, 52, 45, 49, 50, 51, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 102, 105, 115, 104, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 49, 50, 52, 45, 50, 52, 45, 49, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 102, 105, 115, 104, 101, 115, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 49, 50, 52, 45, 50, 52, 45, 49, 52, 54, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 102, 111, 108, 100, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 49, 50, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 102, 111, 108, 100, 101, 114, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 49, 50, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 102, 111, 108, 100, 105, 110, 103, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 49, 50, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 45, 51, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 108, 121, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 109, 97, 110, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 49, 51, 52, 45, 49, 45, 49, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 109, 101, 110, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 49, 51, 52, 45, 50, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 110, 101, 115, 115, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 110, 101, 115, 115, 101, 115, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 115, 105, 100, 101, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 50, 51, 52, 45, 50, 52, 45, 49, 52, 53, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 115, 105, 100, 101, 114, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 50, 51, 52, 45, 50, 52, 45, 49, 52, 53, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 115, 105, 100, 105, 110, 103, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 50, 51, 52, 45, 50, 52, 45, 49, 52, 53, 45, 51, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 115, 105, 103, 104, 116, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 50, 51, 52, 45, 50, 52, 45, 49, 50, 54, 45, 50, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 115, 116, 111, 114, 105, 101, 115, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 51, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 50, 52, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 115, 116, 111, 114, 121, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 51, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 119, 111, 114, 109, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 50, 52, 53, 54, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 111, 111, 100, 108, 101, 116, 116, 101, 114, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 52, 53, 45, 49, 50, 51, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 111, 121, 102, 114, 105, 101, 110, 100, 115, 32, 32, 49, 50, 45, 49, 51, 53, 45, 49, 51, 52, 53, 54, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 114, 97, 105, 108, 108, 101, 114, 115, 32, 32, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 114, 97, 105, 108, 108, 101, 119, 114, 105, 116, 101, 114, 115, 32, 32, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 53, 54, 45, 49, 50, 51, 53, 45, 50, 52, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 114, 97, 105, 108, 108, 101, 119, 114, 105, 116, 105, 110, 103, 115, 32, 32, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 53, 54, 45, 49, 50, 51, 53, 45, 50, 52, 45, 50, 51, 52, 53, 45, 51, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 114, 97, 105, 108, 108, 101, 121, 115, 32, 32, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 114, 97, 105, 110, 99, 104, 105, 108, 100, 114, 101, 110, 115, 32, 32, 49, 50, 45, 49, 50, 51, 53, 45, 49, 45, 51, 53, 45, 49, 54, 45, 49, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 104, 97, 105, 110, 108, 101, 116, 116, 101, 114, 115, 32, 32, 49, 54, 45, 49, 45, 51, 53, 45, 49, 50, 51, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 104, 105, 108, 100, 114, 101, 110, 39, 115, 119, 101, 97, 114, 115, 32, 32, 49, 54, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 45, 50, 52, 53, 54, 45, 49, 53, 45, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 108, 111, 114, 98, 108, 105, 110, 100, 115, 32, 32, 49, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 108, 111, 114, 98, 108, 105, 110, 100, 110, 101, 115, 115, 115, 32, 32, 49, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 108, 111, 114, 98, 108, 105, 110, 100, 110, 101, 115, 115, 101, 115, 115, 32, 32, 49, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 108, 111, 117, 114, 98, 108, 105, 110, 100, 115, 32, 32, 49, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 50, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 108, 111, 117, 114, 98, 108, 105, 110, 100, 110, 101, 115, 115, 115, 32, 32, 49, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 50, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 108, 111, 117, 114, 98, 108, 105, 110, 100, 110, 101, 115, 115, 101, 115, 115, 32, 32, 49, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 50, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 110, 99, 101, 105, 118, 101, 114, 115, 32, 32, 50, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 117, 108, 100, 39, 118, 101, 115, 32, 32, 49, 52, 45, 49, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 117, 108, 100, 97, 115, 32, 32, 49, 52, 45, 49, 52, 53, 45, 49, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 117, 108, 100, 101, 115, 116, 115, 32, 32, 49, 52, 45, 49, 52, 53, 45, 49, 53, 45, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 117, 108, 100, 110, 39, 116, 115, 32, 32, 49, 52, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 117, 108, 100, 110, 39, 116, 39, 118, 101, 115, 32, 32, 49, 52, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 117, 108, 100, 115, 116, 115, 32, 32, 49, 52, 45, 49, 52, 53, 45, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 101, 97, 102, 98, 108, 105, 110, 100, 115, 32, 32, 49, 52, 53, 45, 50, 45, 49, 50, 52, 45, 49, 50, 45, 49, 50, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 101, 97, 102, 98, 108, 105, 110, 100, 110, 101, 115, 115, 115, 32, 32, 49, 52, 53, 45, 50, 45, 49, 50, 52, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 101, 97, 102, 98, 108, 105, 110, 100, 110, 101, 115, 115, 101, 115, 115, 32, 32, 49, 52, 53, 45, 50, 45, 49, 50, 52, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 101, 99, 101, 105, 118, 101, 114, 115, 32, 32, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 101, 99, 108, 97, 114, 101, 114, 115, 32, 32, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 101, 102, 114, 105, 101, 110, 100, 115, 32, 32, 49, 52, 53, 45, 49, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 111, 45, 105, 116, 45, 121, 111, 117, 114, 115, 101, 108, 102, 101, 114, 115, 32, 32, 49, 52, 53, 45, 51, 54, 45, 49, 51, 52, 54, 45, 51, 54, 45, 49, 51, 52, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 52, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 111, 117, 98, 108, 101, 113, 117, 105, 99, 107, 115, 32, 32, 49, 52, 53, 45, 49, 50, 53, 54, 45, 49, 50, 45, 49, 50, 51, 45, 49, 53, 45, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 101, 97, 115, 116, 97, 98, 111, 117, 116, 115, 32, 32, 49, 53, 45, 49, 45, 51, 52, 45, 49, 45, 49, 50, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 101, 101, 108, 103, 111, 111, 100, 115, 32, 32, 49, 50, 52, 45, 49, 53, 45, 49, 53, 45, 49, 50, 51, 45, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 101, 101, 116, 102, 105, 114, 115, 116, 115, 32, 32, 49, 50, 52, 45, 49, 53, 45, 49, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 45, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 97, 105, 100, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 45, 50, 52, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 97, 105, 100, 101, 114, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 45, 50, 52, 45, 49, 52, 53, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 98, 111, 114, 110, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 99, 108, 97, 115, 115, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 52, 45, 49, 50, 51, 45, 49, 45, 50, 51, 52, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 99, 108, 97, 115, 115, 101, 115, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 52, 45, 49, 50, 51, 45, 49, 45, 50, 51, 52, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 100, 97, 121, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 53, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 100, 97, 121, 101, 114, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 53, 45, 49, 52, 53, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 102, 114, 117, 105, 116, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 51, 54, 45, 50, 52, 45, 50, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 102, 114, 117, 105, 116, 105, 110, 103, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 51, 54, 45, 50, 52, 45, 50, 51, 52, 53, 45, 51, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 103, 101, 110, 101, 114, 97, 116, 105, 111, 110, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 52, 53, 45, 50, 54, 45, 49, 50, 52, 53, 54, 45, 49, 45, 53, 54, 45, 49, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 104, 97, 110, 100, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 53, 45, 49, 50, 51, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 108, 105, 110, 103, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 51, 45, 51, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 108, 121, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 110, 101, 115, 115, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 53, 54, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 110, 105, 103, 104, 116, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 51, 52, 53, 45, 50, 52, 45, 49, 50, 54, 45, 50, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 110, 105, 103, 104, 116, 101, 114, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 51, 52, 53, 45, 50, 52, 45, 49, 50, 54, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 114, 97, 116, 101, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 51, 53, 45, 49, 45, 50, 51, 52, 53, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 114, 97, 116, 105, 110, 103, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 51, 53, 45, 49, 45, 50, 51, 52, 53, 45, 51, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 115, 116, 114, 105, 110, 103, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 51, 52, 45, 49, 50, 51, 53, 45, 51, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 111, 114, 97, 115, 109, 117, 99, 104, 115, 32, 32, 49, 50, 51, 52, 53, 54, 45, 49, 45, 50, 51, 52, 45, 49, 51, 52, 45, 49, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 111, 114, 101, 115, 97, 105, 100, 115, 32, 32, 49, 50, 51, 52, 53, 54, 45, 49, 53, 45, 50, 51, 52, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 111, 115, 116, 101, 114, 99, 104, 105, 108, 100, 114, 101, 110, 115, 32, 32, 49, 50, 52, 45, 49, 51, 53, 45, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 54, 45, 49, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 114, 105, 101, 110, 100, 108, 101, 115, 115, 115, 32, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 52, 54, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 114, 105, 101, 110, 100, 108, 101, 115, 115, 110, 101, 115, 115, 115, 32, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 52, 54, 45, 50, 51, 52, 45, 53, 54, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 114, 105, 101, 110, 100, 108, 101, 115, 115, 110, 101, 115, 115, 101, 115, 115, 32, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 52, 54, 45, 50, 51, 52, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 114, 105, 101, 110, 100, 108, 105, 101, 114, 115, 32, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 114, 105, 101, 110, 100, 108, 105, 101, 115, 115, 32, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 114, 105, 101, 110, 100, 108, 105, 101, 115, 116, 115, 32, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 45, 49, 53, 45, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 114, 105, 101, 110, 100, 108, 105, 110, 101, 115, 115, 115, 32, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 45, 53, 54, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 114, 105, 101, 110, 100, 108, 105, 110, 101, 115, 115, 101, 115, 115, 32, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 114, 105, 101, 110, 100, 108, 121, 115, 32, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 114, 105, 101, 110, 100, 115, 104, 105, 112, 115, 32, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 52, 54, 45, 50, 52, 45, 49, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 97, 100, 97, 98, 111, 117, 116, 115, 32, 32, 49, 50, 52, 53, 45, 49, 45, 49, 52, 53, 45, 49, 45, 49, 50, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 97, 105, 110, 115, 97, 105, 100, 115, 32, 32, 49, 50, 52, 53, 45, 49, 45, 51, 53, 45, 50, 51, 52, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 97, 108, 102, 114, 105, 101, 110, 100, 115, 32, 32, 49, 50, 52, 53, 45, 49, 45, 49, 50, 51, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 101, 110, 116, 108, 101, 109, 97, 110, 102, 114, 105, 101, 110, 100, 115, 32, 32, 49, 50, 52, 53, 45, 50, 54, 45, 50, 51, 52, 53, 45, 49, 50, 51, 45, 49, 53, 45, 49, 51, 52, 45, 49, 45, 49, 51, 52, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 101, 110, 116, 108, 101, 109, 101, 110, 102, 114, 105, 101, 110, 100, 115, 115, 32, 32, 49, 50, 52, 53, 45, 50, 54, 45, 50, 51, 52, 53, 45, 49, 50, 51, 45, 49, 53, 45, 49, 51, 52, 45, 50, 54, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 105, 114, 108, 102, 114, 105, 101, 110, 100, 115, 32, 32, 49, 50, 52, 53, 45, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 100, 99, 104, 105, 108, 100, 114, 101, 110, 115, 32, 32, 49, 50, 52, 53, 45, 49, 51, 53, 45, 49, 52, 53, 45, 49, 54, 45, 49, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 97, 102, 116, 101, 114, 110, 111, 111, 110, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 45, 49, 50, 52, 45, 49, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 98, 121, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 45, 49, 51, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 98, 121, 101, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 45, 49, 51, 52, 53, 54, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 98, 121, 101, 105, 110, 103, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 45, 49, 51, 52, 53, 54, 45, 49, 53, 45, 51, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 98, 121, 105, 110, 103, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 45, 49, 51, 52, 53, 54, 45, 51, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 100, 97, 121, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 53, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 101, 114, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 101, 115, 116, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 53, 45, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 101, 118, 101, 110, 105, 110, 103, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 53, 45, 49, 50, 51, 54, 45, 50, 54, 45, 51, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 102, 101, 108, 108, 111, 119, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 52, 45, 49, 53, 45, 49, 50, 51, 45, 49, 50, 51, 45, 50, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 102, 101, 108, 108, 111, 119, 115, 104, 105, 112, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 52, 45, 49, 53, 45, 49, 50, 51, 45, 49, 50, 51, 45, 50, 52, 54, 45, 49, 52, 54, 45, 50, 52, 45, 49, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 104, 101, 97, 114, 116, 101, 100, 108, 121, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 53, 45, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 104, 101, 97, 114, 116, 101, 100, 110, 101, 115, 115, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 53, 45, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 45, 53, 54, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 104, 117, 109, 111, 114, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 104, 117, 109, 111, 114, 101, 100, 108, 121, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 104, 117, 109, 111, 114, 101, 100, 110, 101, 115, 115, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 45, 53, 54, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 104, 117, 109, 111, 114, 101, 100, 110, 101, 115, 115, 101, 115, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 104, 117, 109, 111, 117, 114, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 50, 53, 54, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 104, 117, 109, 111, 117, 114, 101, 100, 108, 121, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 50, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 104, 117, 109, 111, 117, 114, 101, 100, 110, 101, 115, 115, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 50, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 45, 53, 54, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 104, 117, 109, 111, 117, 114, 101, 100, 110, 101, 115, 115, 101, 115, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 50, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 105, 101, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 52, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 105, 115, 104, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 52, 45, 49, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 108, 105, 101, 114, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 51, 45, 50, 52, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 108, 105, 101, 115, 116, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 51, 45, 50, 52, 45, 49, 53, 45, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 108, 105, 110, 101, 115, 115, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 51, 45, 50, 52, 45, 53, 54, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 108, 111, 111, 107, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 51, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 108, 111, 111, 107, 101, 114, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 51, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 51, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 108, 111, 111, 107, 105, 110, 103, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 51, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 51, 45, 51, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 108, 121, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 109, 97, 110, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 45, 49, 45, 49, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 109, 101, 110, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 45, 50, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 109, 111, 114, 110, 105, 110, 103, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 45, 51, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 110, 97, 116, 117, 114, 101, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 49, 45, 50, 51, 52, 53, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 110, 97, 116, 117, 114, 101, 100, 108, 121, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 49, 45, 50, 51, 52, 53, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 110, 97, 116, 117, 114, 101, 100, 110, 101, 115, 115, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 49, 45, 50, 51, 52, 53, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 45, 53, 54, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 110, 101, 115, 115, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 53, 54, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 110, 101, 115, 115, 101, 115, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 110, 105, 103, 104, 116, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 50, 52, 45, 49, 50, 54, 45, 50, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 115, 105, 122, 101, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 51, 52, 45, 50, 52, 45, 49, 51, 53, 54, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 116, 101, 109, 112, 101, 114, 101, 100, 108, 121, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 51, 52, 53, 45, 49, 53, 45, 49, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 50, 52, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 116, 105, 109, 101, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 53, 45, 50, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 117, 110, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 54, 45, 49, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 119, 105, 102, 101, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 52, 53, 54, 45, 50, 52, 45, 49, 50, 52, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 119, 105, 108, 108, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 52, 53, 54, 45, 50, 52, 45, 49, 50, 51, 45, 49, 50, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 119, 105, 118, 101, 115, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 52, 53, 54, 45, 50, 52, 45, 49, 50, 51, 54, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 121, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 121, 101, 97, 114, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 53, 54, 45, 49, 53, 45, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 97, 110, 100, 99, 104, 105, 108, 100, 114, 101, 110, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 54, 45, 49, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 97, 117, 110, 116, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 45, 49, 51, 54, 45, 49, 51, 52, 53, 45, 50, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 98, 97, 116, 99, 104, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 45, 49, 45, 50, 51, 52, 53, 45, 49, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 99, 105, 114, 99, 108, 101, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 52, 45, 50, 52, 45, 49, 50, 51, 53, 45, 49, 52, 45, 49, 50, 51, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 99, 111, 97, 116, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 52, 45, 49, 51, 53, 45, 49, 45, 50, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 101, 110, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 50, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 101, 110, 101, 114, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 50, 54, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 101, 110, 105, 110, 103, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 50, 54, 45, 51, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 101, 114, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 101, 115, 116, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 53, 45, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 97, 117, 110, 116, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 45, 49, 51, 54, 45, 49, 51, 52, 53, 45, 50, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 99, 104, 105, 108, 100, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 54, 45, 50, 52, 45, 49, 50, 51, 45, 49, 52]);
fileData263.push.apply(fileData263, [53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 99, 104, 105, 108, 100, 114, 101, 110, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 54, 45, 49, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 100, 97, 100, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 52, 53, 45, 49, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 100, 97, 117, 103, 104, 116, 101, 114, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 52, 53, 45, 49, 45, 49, 51, 54, 45, 49, 50, 54, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 102, 97, 116, 104, 101, 114, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 53, 45, 49, 50, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 102, 97, 116, 104, 101, 114, 104, 111, 111, 100, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 53, 45, 49, 50, 52, 45, 49, 50, 53, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 109, 97, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 51, 52, 45, 49, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 109, 111, 116, 104, 101, 114, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 53, 45, 49, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 109, 111, 116, 104, 101, 114, 104, 111, 111, 100, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 53, 45, 49, 51, 52, 45, 49, 50, 53, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 110, 101, 112, 104, 101, 119, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 51, 52, 53, 45, 49, 53, 45, 49, 50, 51, 52, 45, 49, 50, 53, 45, 49, 53, 45, 50, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 110, 105, 101, 99, 101, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 51, 52, 53, 45, 50, 52, 45, 49, 53, 45, 49, 52, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 112, 97, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 50, 51, 52, 45, 49, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 112, 97, 114, 101, 110, 116, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 50, 51, 52, 45, 51, 52, 53, 45, 50, 54, 45, 50, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 112, 97, 114, 101, 110, 116, 104, 111, 111, 100, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 50, 51, 52, 45, 51, 52, 53, 45, 50, 54, 45, 50, 51, 52, 53, 45, 49, 50, 53, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 115, 111, 110, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 50, 51, 52, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 117, 110, 99, 108, 101, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 52, 45, 49, 50, 51, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 104, 101, 97, 114, 116, 101, 100, 108, 121, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 53, 45, 49, 53, 45, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 104, 101, 97, 114, 116, 101, 100, 110, 101, 115, 115, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 53, 45, 49, 53, 45, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 45, 53, 54, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 104, 101, 97, 114, 116, 101, 100, 110, 101, 115, 115, 101, 115, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 53, 45, 49, 53, 45, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 108, 121, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 110, 101, 112, 104, 101, 119, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 51, 52, 53, 45, 49, 53, 45, 49, 50, 51, 52, 45, 49, 50, 53, 45, 49, 53, 45, 50, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 110, 101, 115, 115, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 53, 54, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 110, 101, 115, 115, 101, 115, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 110, 105, 101, 99, 101, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 51, 52, 53, 45, 50, 52, 45, 49, 53, 45, 49, 52, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 115, 119, 111, 114, 100, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 50, 51, 52, 45, 52, 53, 45, 50, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 117, 110, 99, 108, 101, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 52, 45, 49, 50, 51, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 117, 121, 102, 114, 105, 101, 110, 100, 115, 32, 32, 49, 50, 52, 53, 45, 49, 51, 54, 45, 49, 51, 52, 53, 54, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 97, 116, 101, 108, 101, 116, 116, 101, 114, 115, 32, 32, 49, 50, 53, 45, 49, 45, 50, 51, 52, 53, 45, 49, 53, 45, 49, 50, 51, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 101, 97, 100, 102, 105, 114, 115, 116, 115, 32, 32, 49, 50, 53, 45, 50, 45, 49, 52, 53, 45, 49, 50, 52, 45, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 101, 114, 101, 97, 98, 111, 117, 116, 115, 32, 32, 53, 45, 49, 50, 53, 45, 49, 45, 49, 50, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 101, 114, 101, 97, 102, 116, 101, 114, 115, 32, 32, 53, 45, 49, 50, 53, 45, 49, 45, 49, 50, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 101, 114, 101, 97, 103, 97, 105, 110, 115, 32, 32, 53, 45, 49, 50, 53, 45, 49, 45, 49, 50, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 101, 114, 101, 97, 103, 97, 105, 110, 115, 116, 115, 32, 32, 53, 45, 49, 50, 53, 45, 49, 45, 49, 50, 52, 53, 45, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 101, 114, 101, 105, 110, 97, 98, 111, 118, 101, 115, 32, 32, 53, 45, 49, 50, 53, 45, 51, 53, 45, 49, 45, 49, 50, 45, 49, 50, 51, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 101, 114, 101, 105, 110, 97, 102, 116, 101, 114, 115, 32, 32, 53, 45, 49, 50, 53, 45, 51, 53, 45, 49, 45, 49, 50, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 101, 114, 101, 105, 110, 97, 103, 97, 105, 110, 115, 32, 32, 53, 45, 49, 50, 53, 45, 51, 53, 45, 49, 45, 49, 50, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 105, 103, 104, 108, 121, 112, 97, 105, 100, 115, 32, 32, 49, 50, 53, 45, 50, 52, 45, 49, 50, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 49, 50, 51, 52, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 105, 109, 98, 111, 115, 32, 32, 49, 50, 53, 45, 49, 51, 52, 45, 49, 50, 45, 49, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 105, 109, 98, 111, 101, 115, 115, 32, 32, 49, 50, 53, 45, 49, 51, 52, 45, 49, 50, 45, 49, 51, 53, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 105, 108, 108, 112, 97, 105, 100, 115, 32, 32, 50, 52, 45, 49, 50, 51, 45, 49, 50, 51, 45, 49, 50, 51, 52, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 105, 109, 109, 101, 100, 105, 97, 116, 101, 108, 121, 115, 32, 32, 50, 52, 45, 49, 51, 52, 45, 49, 51, 52, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 105, 109, 109, 101, 100, 105, 97, 116, 101, 110, 101, 115, 115, 115, 32, 32, 50, 52, 45, 49, 51, 52, 45, 49, 51, 52, 45, 53, 54, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 105, 110, 97, 115, 109, 117, 99, 104, 115, 32, 32, 51, 53, 45, 49, 45, 50, 51, 52, 45, 49, 51, 52, 45, 49, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 105, 110, 115, 111, 109, 117, 99, 104, 115, 32, 32, 51, 53, 45, 50, 51, 52, 45, 49, 51, 53, 45, 49, 51, 52, 45, 49, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 107, 110, 111, 99, 107, 97, 98, 111, 117, 116, 115, 32, 32, 49, 51, 45, 49, 51, 52, 53, 45, 49, 51, 53, 45, 49, 52, 45, 49, 51, 45, 49, 45, 49, 50, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 97, 100, 121, 102, 114, 105, 101, 110, 100, 115, 32, 32, 49, 50, 51, 45, 49, 45, 49, 52, 53, 45, 49, 51, 52, 53, 54, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 97, 121, 97, 98, 111, 117, 116, 115, 32, 32, 49, 50, 51, 45, 49, 45, 49, 51, 52, 53, 54, 45, 49, 45, 49, 50, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 98, 111, 100, 105, 101, 115, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 52, 53, 45, 50, 52, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 98, 111, 100, 121, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 52, 53, 45, 49, 51, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 98, 111, 109, 98, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 51, 52, 45, 49, 50, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 98, 111, 109, 98, 101, 114, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 51, 52, 45, 49, 50, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 98, 111, 109, 98, 105, 110, 103, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 51, 52, 45, 49, 50, 45, 51, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 98, 111, 120, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 51, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 98, 111, 120, 101, 114, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 51, 52, 54, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 98, 111, 120, 101, 115, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 51, 52, 54, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 98, 111, 120, 105, 110, 103, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 51, 52, 54, 45, 51, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 101, 114, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 102, 111, 114, 109, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 53, 54, 45, 49, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 104, 101, 97, 100, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 53, 45, 50, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 104, 101, 97, 100, 105, 110, 103, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 53, 45, 50, 45, 49, 52, 53, 45, 51, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 105, 110, 103, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 51, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 109, 97, 110, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 51, 52, 45, 49, 45, 49, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 109, 101, 110, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 51, 52, 45, 50, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 111, 112, 101, 110, 101, 114, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 51, 53, 45, 49, 50, 51, 52, 45, 50, 54, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 112, 101, 114, 102, 101, 99, 116, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 50, 52, 45, 49, 53, 45, 49, 52, 45, 50, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 112, 114, 101, 115, 115, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 112, 114, 101, 115, 115, 101, 115, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 112, 114, 101, 115, 115, 105, 110, 103, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 45, 51, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 113, 117, 97, 108, 105, 116, 121, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 53, 45, 49, 51, 54, 45, 49, 45, 49, 50, 51, 45, 53, 54, 45, 49, 51, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 115, 112, 97, 99, 101, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 45, 49, 52, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 115, 112, 97, 99, 105, 110, 103, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 45, 49, 52, 45, 51, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 116, 101, 120, 116, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 53, 45, 49, 51, 52, 54, 45, 50, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 105, 116, 116, 108, 101, 110, 101, 99, 107, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 45, 49, 51, 52, 53, 45, 49, 53, 45, 49, 52, 45, 49, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 105, 116, 116, 108, 101, 110, 101, 115, 115, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 105, 116, 116, 108, 101, 110, 101, 115, 115, 101, 115, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 105, 116, 116, 108, 101, 114, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 105, 116, 116, 108, 101, 115, 116, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 45, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 111, 118, 101, 99, 104, 105, 108, 100, 114, 101, 110, 115, 32, 32, 49, 50, 51, 45, 49, 51, 53, 45, 49, 50, 51, 54, 45, 49, 53, 45, 49, 54, 45, 49, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 111, 118, 101, 108, 101, 116, 116, 101, 114, 115, 32, 32, 49, 50, 51, 45, 49, 51, 53, 45, 49, 50, 51, 54, 45, 49, 53, 45, 49, 50, 51, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 111, 119, 108, 121, 112, 97, 105, 100, 115, 32, 32, 49, 50, 51, 45, 50, 52, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 49, 50, 51, 52, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 97, 110, 102, 114, 105, 101, 110, 100, 115, 32, 32, 49, 51, 52, 45, 49, 45, 49, 51, 52, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 101, 110, 102, 114, 105, 101, 110, 100, 115, 115, 32, 32, 49, 51, 52, 45, 50, 54, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 105, 100, 97, 102, 116, 101, 114, 110, 111, 111, 110, 115, 32, 32, 49, 51, 52, 45, 50, 52, 45, 49, 52, 53, 45, 49, 45, 49, 50, 52, 45, 49, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 105, 115, 98, 114, 97, 105, 108, 108, 101, 115, 32, 32, 49, 51, 52, 45, 50, 52, 45, 50, 51, 52, 45, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 105, 115, 112, 101, 114, 99, 101, 105, 118, 101, 115, 32, 32, 49, 51, 52, 45, 50, 52, 45, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 105, 115, 112, 101, 114, 99, 101, 105, 118, 101, 114, 115, 32, 32, 49, 51, 52, 45, 50, 52, 45, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 105, 115, 112, 101, 114, 99, 101, 105, 118, 105, 110, 103, 115, 32, 32, 49, 51, 52, 45, 50, 52, 45, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 105, 115, 115, 97, 105, 100, 115, 32, 32, 49, 51, 52, 45, 50, 52, 45, 50, 51, 52, 45, 50, 51, 52, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 111, 114, 110, 105, 110, 103, 97, 102, 116, 101, 114, 115, 32, 32, 49, 51, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 45, 51, 52, 54, 45, 49, 45, 49, 50, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 99, 104, 108, 121, 115, 32, 32, 49, 51, 52, 45, 49, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 99, 104, 110, 101, 115, 115, 115, 32, 32, 49, 51, 52, 45, 49, 54, 45, 53, 54, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 115, 116, 39, 118, 101, 115, 32, 32, 49, 51, 52, 45, 51, 52, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 115, 116, 97, 115, 32, 32, 49, 51, 52, 45, 51, 52, 45, 49, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 115, 116, 97, 114, 100, 115, 32, 32, 49, 51, 52, 45, 51, 52, 45, 51, 52, 53, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 115, 116, 97, 114, 100, 121, 115, 32, 32, 49, 51, 52, 45, 51, 52, 45, 51, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 115, 116, 105, 101, 114, 115, 32, 32, 49, 51, 52, 45, 51, 52, 45, 50, 52, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 115, 116, 105, 101, 115, 116, 115, 32, 32, 49, 51, 52, 45, 51, 52, 45, 50, 52, 45, 49, 53, 45, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 115, 116, 105, 108, 121, 115, 32, 32, 49, 51, 52, 45, 51, 52, 45, 50, 52, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 115, 116, 105, 110, 101, 115, 115, 115, 32, 32, 49, 51, 52, 45, 51, 52, 45, 50, 52, 45, 53, 54, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 115, 116, 110, 39, 116, 115, 32, 32, 49, 51, 52, 45, 51, 52, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 115, 116, 110, 39, 116, 39, 118, 101, 115, 32, 32, 49, 51, 52, 45, 51, 52, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 115, 116, 121, 115, 32, 32, 49, 51, 52, 45, 51, 52, 45, 49, 51, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 110, 101, 119, 115, 108, 101, 116, 116, 101, 114, 115, 32, 32, 49, 51, 52, 53, 45, 49, 53, 45, 50, 52, 53, 54, 45, 50, 51, 52, 45, 49, 50, 51, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 110, 111, 110, 101, 115, 117, 99, 104, 115, 32, 32, 49, 51, 52, 53, 45, 53, 45, 49, 51, 53, 45, 50, 51, 52, 45, 49, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 110, 111, 110, 115, 117, 99, 104, 115, 32, 32, 49, 51, 52, 53, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 50, 51, 52, 45, 49, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 110, 111, 114, 116, 104, 97, 98, 111, 117, 116, 115, 32, 32, 49, 51, 52, 53, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 52, 53, 54, 45, 49, 45, 49, 50, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 111, 118, 101, 114, 109, 117, 99, 104, 115, 32, 32, 49, 51, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 49, 51, 52, 45, 49, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 111, 118, 101, 114, 112, 97, 105, 100, 115, 32, 32, 49, 51, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 49, 50, 51, 52, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 101, 110, 102, 114, 105, 101, 110, 100, 115, 32, 32, 49, 50, 51, 52, 45, 50, 54, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 101, 114, 99, 101, 105, 118, 101, 114, 115, 32, 32, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 101, 114, 104, 97, 112, 115, 101, 115, 115, 32, 32, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 50, 53, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 111, 111, 114, 108, 121, 112, 97, 105, 100, 115, 32, 32, 49, 50, 51, 52, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 49, 50, 51, 52, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 111, 115, 116, 112, 97, 105, 100, 115, 32, 32, 49, 50, 51, 52, 45, 49, 51, 53, 45, 51, 52, 45, 49, 50, 51, 52, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 114, 101, 99, 101, 105, 118, 101, 115, 32, 32, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 114, 101, 99, 101, 105, 118, 101, 114, 115, 32, 32, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 114, 101, 99, 101, 105, 118, 105, 110, 103, 115, 32, 32, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 114, 101, 112, 97, 105, 100, 115, 32, 32, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 52, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 117, 114, 98, 108, 105, 110, 100, 115, 32, 32, 49, 50, 51, 52, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 117, 114, 98, 108, 105, 110, 100, 108, 121, 115, 32, 32, 49, 50, 51, 52, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 117, 114, 98, 108, 105, 110, 100, 110, 101, 115, 115, 115, 32, 32, 49, 50, 51, 52, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 117, 114, 98, 108, 105, 110, 100, 110, 101, 115, 115, 101, 115, 115, 32, 32, 49, 50, 51, 52, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 100, 114, 97, 119, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 52, 53, 45, 49, 50, 51, 53, 45, 49, 45, 50, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 101, 110, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 101, 110, 101, 114, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 54, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 101, 110, 105, 110, 103, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 54, 45, 51, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 101, 114, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 101, 115, 116, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 53, 45, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 102, 105, 114, 101, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 50, 52, 45, 50, 52, 45, 49, 50, 51, 53, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 102, 105, 114, 105, 110, 103, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 50, 52, 45, 50, 52, 45, 49, 50, 51, 53, 45, 51, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 102, 114, 101, 101, 122, 101, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 53, 45, 49, 53, 45, 49, 51, 53, 54, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 102, 114, 101, 101, 122, 105, 110, 103, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 53, 45, 49, 53, 45, 49, 51, 53, 54, 45, 51, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 102, 114, 111, 122, 101, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 51, 53, 45, 49, 51, 53, 54, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 102, 114, 111, 122, 101, 110, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 51, 53, 45, 49, 51, 53, 54, 45, 50, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 105, 101, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 52, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 105, 115, 104, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 52, 45, 49, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 105, 115, 104, 108, 121, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 52, 45, 49, 52, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 108, 105, 109, 101, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 50, 51, 45, 50, 52, 45, 49, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 108, 121, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 110, 101, 115, 115, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 53, 54, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 110, 101, 115, 115, 101, 115, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 115, 97, 110, 100, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 51, 52, 45, 49, 50, 51, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 115, 101, 116, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 115, 105, 108, 118, 101, 114, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 51, 52, 45, 50, 52, 45, 49, 50, 51, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 115, 105, 108, 118, 101, 114, 105, 110, 103, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 51, 52, 45, 50, 52, 45, 49, 50, 51, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 51, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 115, 110, 97, 112, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 51, 52, 45, 49, 51, 52, 53, 45, 49, 45, 49, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 115, 116, 101, 112, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 51, 52, 45, 49, 53, 45, 49, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 115, 116, 101, 112, 112, 101, 114, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 51, 52, 45, 49, 53, 45, 49, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 115, 116, 101, 112, 112, 105, 110, 103, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 51, 52, 45, 49, 53, 45, 49, 50, 51, 52, 45, 49, 50, 51, 52, 45, 51, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 116, 105, 109, 101, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 53, 45, 50, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 119, 105, 116, 116, 101, 100, 108, 121, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 52, 53, 54, 45, 50, 52, 45, 50, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 119, 105, 116, 116, 101, 100, 110, 101, 115, 115, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 52, 53, 54, 45, 50, 52, 45, 50, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 45, 53, 54, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 121, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 51, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 97, 100, 97, 99, 114, 111, 115, 115, 115, 32, 32, 49, 50, 51, 53, 45, 50, 45, 49, 52, 53, 45, 49, 45, 49, 52, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 98, 114, 97, 105, 108, 108, 101, 115, 32, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 98, 114, 97, 105, 108, 108, 101, 114, 115, 32, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 99, 101, 105, 118, 101, 114, 115, 32, 32, 49, 50, 51, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 99, 101, 105, 118, 101, 114, 115, 104, 105, 112, 115, 32, 32, 49, 50, 51, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 45, 49, 52, 54, 45, 50, 52, 45, 49, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 106, 111, 105, 99, 101, 102, 117, 108, 115, 32, 32, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 53, 54, 45, 49, 50, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 106, 111, 105, 99, 101, 102, 117, 108, 108, 121, 115, 32, 32, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 53, 54, 45, 49, 50, 51, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 106, 111, 105, 99, 101, 102, 117, 108, 110, 101, 115, 115, 115, 32, 32, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 53, 54, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 106, 111, 105, 99, 101, 114, 115, 32, 32, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 106, 111, 105, 99, 105, 110, 103, 108, 121, 115, 32, 32, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 49, 50, 52, 53, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 108, 101, 116, 116, 101, 114, 115, 32, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 108, 101, 116, 116, 101, 114, 105, 110, 103, 115, 32, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 45, 49, 50, 51, 53, 45, 51, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 112, 97, 105, 100, 115, 32, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 52, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 105, 103, 104, 116, 97, 98, 111, 117, 116, 115, 32, 32, 53, 45, 49, 50, 51, 53, 45, 49, 45, 49, 50, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 111, 117, 110, 100, 97, 98, 111, 117, 116, 115, 32, 32, 49, 50, 51, 53, 45, 52, 54, 45, 49, 52, 53, 45, 49, 45, 49, 50, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 111, 117, 115, 116, 97, 98, 111, 117, 116, 115, 32, 32, 49, 50, 51, 53, 45, 49, 50, 53, 54, 45, 51, 52, 45, 49, 45, 49, 50, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 117, 110, 97, 98, 111, 117, 116, 115, 32, 32, 49, 50, 51, 53, 45, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 45, 49, 50, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 97, 105, 100, 101, 115, 116, 115, 32, 32, 50, 51, 52, 45, 49, 52, 53, 45, 49, 53, 45, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 97, 105, 100, 115, 116, 115, 32, 32, 50, 51, 52, 45, 49, 52, 53, 45, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 99, 97, 116, 116, 101, 114, 103, 111, 111, 100, 115, 32, 32, 50, 51, 52, 45, 49, 52, 45, 49, 45, 50, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 54, 45, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 99, 104, 111, 111, 108, 99, 104, 105, 108, 100, 114, 101, 110, 115, 32, 32, 50, 51, 52, 45, 49, 54, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 54, 45, 49, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 99, 104, 111, 111, 108, 102, 114, 105, 101, 110, 100, 115, 32, 32, 50, 51, 52, 45, 49, 54, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 104, 111, 117, 108, 100, 39, 118, 101, 115, 32, 32, 49, 52, 54, 45, 49, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 104, 111, 117, 108, 100, 97, 115, 32, 32, 49, 52, 54, 45, 49, 52, 53, 45, 49, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 104, 111, 117, 108, 100, 101, 115, 116, 115, 32, 32, 49, 52, 54, 45, 49, 52, 53, 45, 49, 53, 45, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 104, 111, 117, 108, 100, 110, 39, 116, 115, 32, 32, 49, 52, 54, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 104, 111, 117, 108, 100, 110, 39, 116, 39, 118, 101, 115, 32, 32, 49, 52, 54, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 104, 111, 117, 108, 100, 115, 116, 115, 32, 32, 49, 52, 54, 45, 49, 52, 53, 45, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 110, 111, 119, 98, 108, 105, 110, 100, 115, 32, 32, 50, 51, 52, 45, 49, 51, 52, 53, 45, 50, 52, 54, 45, 49, 50, 45, 49, 50, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 110, 111, 119, 98, 108, 105, 110, 100, 110, 101, 115, 115, 115, 32, 32, 50, 51, 52, 45, 49, 51, 52, 53, 45, 50, 52, 54, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 110, 111, 119, 98, 108, 105, 110, 100, 110, 101, 115, 115, 101, 115, 115, 32, 32, 50, 51, 52, 45, 49, 51, 52, 53, 45, 50, 52, 54, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 111, 109, 101, 115, 117, 99, 104, 115, 32, 32, 53, 45, 50, 51, 52, 45, 50, 51, 52, 45, 49, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 111, 117, 116, 104, 97, 98, 111, 117, 116, 115, 32, 32, 50, 51, 52, 45, 49, 50, 53, 54, 45, 49, 52, 53, 54, 45, 49, 45, 49, 50, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 116, 101, 112, 99, 104, 105, 108, 100, 114, 101, 110, 115, 32, 32, 51, 52, 45, 49, 53, 45, 49, 50, 51, 52, 45, 49, 54, 45, 49, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 116, 105, 114, 97, 98, 111, 117, 116, 115, 32, 32, 51, 52, 45, 50, 52, 45, 49, 50, 51, 53, 45, 49, 45, 49, 50, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 117, 99, 104, 108, 105, 107, 101, 115, 32, 32, 50, 51, 52, 45, 49, 54, 45, 49, 50, 51, 45, 50, 52, 45, 49, 51, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 117, 112, 101, 114, 103, 111, 111, 100, 115, 32, 32, 50, 51, 52, 45, 49, 51, 54, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 117, 112, 101, 114, 113, 117, 105, 99, 107, 115, 32, 32, 50, 51, 52, 45, 49, 51, 54, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 97, 105, 108, 102, 105, 114, 115, 116, 115, 32, 32, 50, 51, 52, 53, 45, 49, 45, 50, 52, 45, 49, 50, 51, 45, 49, 50, 52, 45, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 101, 114, 101, 97, 98, 111, 117, 116, 115, 32, 32, 53, 45, 50, 51, 52, 54, 45, 49, 45, 49, 50, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 101, 114, 101, 97, 102, 116, 101, 114, 115, 32, 32, 53, 45, 50, 51, 52, 54, 45, 49, 45, 49, 50, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 101, 114, 101, 97, 103, 97, 105, 110, 115, 32, 32, 53, 45, 50, 51, 52, 54, 45, 49, 45, 49, 50, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 101, 114, 101, 97, 103, 97, 105, 110, 115, 116, 115, 32, 32, 53, 45, 50, 51, 52]);
fileData263.push.apply(fileData263, [54, 45, 49, 45, 49, 50, 52, 53, 45, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 101, 114, 101, 105, 110, 97, 102, 116, 101, 114, 115, 32, 32, 53, 45, 50, 51, 52, 54, 45, 51, 53, 45, 49, 45, 49, 50, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 101, 114, 101, 105, 110, 97, 103, 97, 105, 110, 115, 32, 32, 53, 45, 50, 51, 52, 54, 45, 51, 53, 45, 49, 45, 49, 50, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 111, 103, 101, 116, 104, 101, 114, 110, 101, 115, 115, 115, 32, 32, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 53, 54, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 117, 114, 110, 97, 98, 111, 117, 116, 115, 32, 32, 50, 51, 52, 53, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 45, 49, 45, 49, 50, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 97, 99, 99, 111, 114, 100, 105, 110, 103, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 45, 49, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 97, 99, 99, 111, 114, 100, 105, 110, 103, 108, 121, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 45, 49, 52, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 98, 108, 105, 110, 100, 102, 111, 108, 100, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 45, 49, 50, 51, 45, 49, 50, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 98, 108, 105, 110, 100, 102, 111, 108, 100, 105, 110, 103, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 45, 49, 50, 51, 45, 49, 50, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 45, 51, 52, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 98, 114, 97, 105, 108, 108, 101, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 100, 101, 99, 101, 105, 118, 101, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 100, 101, 99, 101, 105, 118, 101, 114, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 100, 101, 99, 101, 105, 118, 105, 110, 103, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 100, 101, 99, 108, 97, 114, 101, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 100, 101, 114, 112, 97, 105, 100, 115, 32, 32, 53, 45, 49, 51, 54, 45, 49, 50, 51, 52, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 102, 114, 105, 101, 110, 100, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 102, 114, 105, 101, 110, 100, 108, 105, 101, 114, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 45, 49, 50, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 102, 114, 105, 101, 110, 100, 108, 105, 101, 115, 116, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 45, 49, 53, 45, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 102, 114, 105, 101, 110, 100, 108, 105, 110, 101, 115, 115, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 45, 53, 54, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 102, 114, 105, 101, 110, 100, 108, 105, 110, 101, 115, 115, 101, 115, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 102, 114, 105, 101, 110, 100, 108, 121, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 110, 101, 99, 101, 115, 115, 97, 114, 121, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 51, 52, 53, 45, 49, 53, 45, 49, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 112, 97, 105, 100, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 52, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 112, 101, 114, 99, 101, 105, 118, 101, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 112, 101, 114, 99, 101, 105, 118, 105, 110, 103, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 113, 117, 105, 99, 107, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 114, 101, 106, 111, 105, 99, 101, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 114, 101, 106, 111, 105, 99, 101, 102, 117, 108, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 53, 54, 45, 49, 50, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 114, 101, 106, 111, 105, 99, 101, 102, 117, 108, 108, 121, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 53, 54, 45, 49, 50, 51, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 114, 101, 106, 111, 105, 99, 101, 102, 117, 108, 110, 101, 115, 115, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 53, 54, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 114, 101, 106, 111, 105, 99, 101, 114, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 114, 101, 106, 111, 105, 99, 105, 110, 103, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 49, 50, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 114, 101, 106, 111, 105, 99, 105, 110, 103, 108, 121, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 49, 50, 52, 53, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 114, 101, 112, 97, 105, 100, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 52, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 115, 97, 105, 100, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 50, 51, 52, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 97, 108, 107, 97, 98, 111, 117, 116, 115, 32, 32, 50, 52, 53, 54, 45, 49, 45, 49, 50, 51, 45, 49, 51, 45, 49, 45, 49, 50, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 101, 108, 108, 112, 97, 105, 100, 115, 32, 32, 50, 52, 53, 54, 45, 49, 53, 45, 49, 50, 51, 45, 49, 50, 51, 45, 49, 50, 51, 52, 45, 49, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 101, 115, 116, 97, 98, 111, 117, 116, 115, 32, 32, 50, 52, 53, 54, 45, 49, 53, 45, 51, 52, 45, 49, 45, 49, 50, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 104, 101, 114, 101, 97, 98, 111, 117, 116, 115, 32, 32, 53, 45, 49, 53, 54, 45, 49, 45, 49, 50, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 104, 101, 114, 101, 97, 102, 116, 101, 114, 115, 32, 32, 53, 45, 49, 53, 54, 45, 49, 45, 49, 50, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 104, 101, 114, 101, 97, 103, 97, 105, 110, 115, 32, 32, 53, 45, 49, 53, 54, 45, 49, 45, 49, 50, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 104, 101, 114, 101, 97, 103, 97, 105, 110, 115, 116, 115, 32, 32, 53, 45, 49, 53, 54, 45, 49, 45, 49, 50, 52, 53, 45, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 104, 101, 114, 101, 105, 110, 97, 102, 116, 101, 114, 115, 32, 32, 53, 45, 49, 53, 54, 45, 51, 53, 45, 49, 45, 49, 50, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 104, 101, 114, 101, 105, 110, 97, 103, 97, 105, 110, 115, 32, 32, 53, 45, 49, 53, 54, 45, 51, 53, 45, 49, 45, 49, 50, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 111, 109, 97, 110, 102, 114, 105, 101, 110, 100, 115, 32, 32, 50, 52, 53, 54, 45, 49, 51, 53, 45, 49, 51, 52, 45, 49, 45, 49, 51, 52, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 111, 109, 101, 110, 102, 114, 105, 101, 110, 100, 115, 115, 32, 32, 50, 52, 53, 54, 45, 49, 51, 53, 45, 49, 51, 52, 45, 50, 54, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 50, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 111, 117, 108, 100, 39, 118, 101, 115, 32, 32, 50, 52, 53, 54, 45, 49, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 111, 117, 108, 100, 97, 115, 32, 32, 50, 52, 53, 54, 45, 49, 52, 53, 45, 49, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 111, 117, 108, 100, 101, 115, 116, 115, 32, 32, 50, 52, 53, 54, 45, 49, 52, 53, 45, 49, 53, 45, 51, 52, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 111, 117, 108, 100, 110, 39, 116, 115, 32, 32, 50, 52, 53, 54, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 111, 117, 108, 100, 110, 39, 116, 39, 118, 101, 115, 32, 32, 50, 52, 53, 54, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 111, 117, 108, 100, 115, 116, 115, 32, 32, 50, 52, 53, 54, 45, 49, 52, 53, 45, 51, 52, 45, 50, 51, 52, 10, 10, 35, 84, 79, 68, 79, 58, 32, 32, 119, 104, 97, 116, 32, 97, 98, 111, 117, 116, 32, 115, 39, 63, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 39, 116, 119, 111, 117, 108, 100, 39, 115, 32, 32, 51, 45, 50, 51, 52, 53, 45, 50, 52, 53, 54, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 39, 116, 119, 111, 117, 108, 100, 39, 118, 101, 39, 115, 32, 32, 51, 45, 50, 51, 52, 53, 45, 50, 52, 53, 54, 45, 49, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 39, 116, 119, 111, 117, 108, 100, 97, 39, 115, 32, 32, 51, 45, 50, 51, 52, 53, 45, 50, 52, 53, 54, 45, 49, 52, 53, 45, 49, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 39, 116, 119, 111, 117, 108, 100, 110, 39, 116, 39, 115, 32, 32, 51, 45, 50, 51, 52, 53, 45, 50, 52, 53, 54, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 39, 116, 119, 111, 117, 108, 100, 110, 39, 116, 39, 118, 101, 39, 115, 32, 32, 51, 45, 50, 51, 52, 53, 45, 50, 52, 53, 54, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 98, 111, 117, 116, 102, 97, 99, 101, 39, 115, 32, 32, 49, 45, 49, 50, 45, 49, 50, 52, 45, 49, 45, 49, 52, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 98, 111, 117, 116, 102, 97, 99, 101, 100, 39, 115, 32, 32, 49, 45, 49, 50, 45, 49, 50, 52, 45, 49, 45, 49, 52, 45, 49, 50, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 98, 111, 117, 116, 102, 97, 99, 101, 114, 39, 115, 32, 32, 49, 45, 49, 50, 45, 49, 50, 52, 45, 49, 45, 49, 52, 45, 49, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 98, 111, 117, 116, 102, 97, 99, 105, 110, 103, 39, 115, 32, 32, 49, 45, 49, 50, 45, 49, 50, 52, 45, 49, 45, 49, 52, 45, 51, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 98, 111, 117, 116, 116, 117, 114, 110, 39, 115, 32, 32, 49, 45, 49, 50, 45, 50, 51, 52, 53, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 98, 111, 117, 116, 116, 117, 114, 110, 101, 100, 39, 115, 32, 32, 49, 45, 49, 50, 45, 50, 51, 52, 53, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 45, 49, 50, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 98, 111, 118, 101, 98, 111, 97, 114, 100, 39, 115, 32, 32, 49, 45, 49, 50, 45, 49, 50, 51, 54, 45, 49, 50, 45, 49, 51, 53, 45, 51, 52, 53, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 98, 111, 118, 101, 103, 114, 111, 117, 110, 100, 39, 115, 32, 32, 49, 45, 49, 50, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 52, 54, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 98, 111, 118, 101, 109, 101, 110, 116, 105, 111, 110, 101, 100, 39, 115, 32, 32, 49, 45, 49, 50, 45, 49, 50, 51, 54, 45, 49, 51, 52, 45, 50, 54, 45, 53, 54, 45, 49, 51, 52, 53, 45, 49, 50, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 99, 99, 111, 114, 100, 105, 110, 103, 108, 121, 39, 115, 32, 32, 49, 45, 49, 52, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 111, 114, 101, 115, 97, 105, 100, 39, 115, 32, 32, 49, 45, 49, 50, 51, 52, 53, 54, 45, 49, 53, 45, 50, 51, 52, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 98, 97, 116, 116, 108, 101, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 45, 49, 45, 50, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 51, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 98, 105, 114, 116, 104, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 45, 50, 52, 45, 49, 50, 51, 53, 45, 49, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 98, 114, 101, 97, 107, 102, 97, 115, 116, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 45, 49, 50, 51, 53, 45, 50, 45, 49, 51, 45, 49, 50, 52, 45, 49, 45, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 98, 117, 114, 110, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 98, 117, 114, 110, 101, 100, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 45, 49, 50, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 98, 117, 114, 110, 101, 114, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 45, 49, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 98, 117, 114, 110, 105, 110, 103, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 45, 51, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 99, 97, 114, 101, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 52, 45, 51, 52, 53, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 99, 108, 97, 112, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 52, 45, 49, 50, 51, 45, 49, 45, 49, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 99, 111, 102, 102, 101, 101, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 52, 45, 49, 50, 51, 53, 54, 45, 49, 50, 52, 45, 49, 53, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 100, 97, 109, 112, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 52, 53, 45, 49, 45, 49, 51, 52, 45, 49, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 100, 97, 114, 107, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 52, 53, 45, 51, 52, 53, 45, 49, 51, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 100, 101, 99, 107, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 52, 53, 45, 49, 53, 45, 49, 52, 45, 49, 51, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 100, 105, 110, 110, 101, 114, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 52, 53, 45, 51, 53, 45, 49, 51, 52, 53, 45, 49, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 102, 108, 111, 119, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 52, 45, 49, 50, 51, 45, 50, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 103, 97, 109, 101, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 52, 53, 45, 49, 45, 49, 51, 52, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 103, 108, 111, 119, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 52, 53, 45, 49, 50, 51, 45, 50, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 103, 117, 97, 114, 100, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 52, 53, 45, 49, 51, 54, 45, 51, 52, 53, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 104, 97, 116, 99, 104, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 53, 45, 49, 45, 50, 51, 52, 53, 45, 49, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 104, 97, 116, 99, 104, 101, 115, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 53, 45, 49, 45, 50, 51, 52, 53, 45, 49, 54, 45, 49, 53, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 104, 111, 117, 114, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 53, 45, 49, 50, 53, 54, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 108, 105, 102, 101, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 51, 45, 50, 52, 45, 49, 50, 52, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 108, 105, 103, 104, 116, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 51, 45, 50, 52, 45, 49, 50, 54, 45, 50, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 108, 105, 118, 101, 115, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 51, 45, 50, 52, 45, 49, 50, 51, 54, 45, 49, 53, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 108, 117, 110, 99, 104, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 51, 45, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 108, 117, 110, 99, 104, 101, 115, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 51, 45, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 54, 45, 49, 53, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 109, 97, 114, 107, 101, 116, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 45, 51, 52, 53, 45, 49, 51, 45, 49, 53, 45, 50, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 109, 97, 116, 99, 104, 39, 115, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 45, 49, 45, 50, 51, 52, 53, 45, 49, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 109, 97, 116, 99, 104, 101, 115, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 45, 49, 45, 50, 51, 52, 53, 45, 49, 54, 45, 49, 53, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 109, 97, 116, 104, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 45, 49, 45, 49, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 109, 101, 101, 116, 105, 110, 103, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 45, 49, 53, 45, 49, 53, 45, 50, 51, 52, 53, 45, 51, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 109, 101, 110, 116, 105, 111, 110, 101, 100, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 45, 50, 54, 45, 53, 54, 45, 49, 51, 52, 53, 45, 49, 50, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 109, 105, 100, 100, 97, 121, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 45, 50, 52, 45, 49, 52, 53, 45, 53, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 109, 105, 100, 110, 105, 103, 104, 116, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 45, 50, 52, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 50, 52, 45, 49, 50, 54, 45, 50, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 109, 111, 115, 116, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 45, 49, 51, 53, 45, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 110, 111, 111, 110, 116, 101, 97, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 53, 45, 49, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 112, 97, 105, 110, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 51, 52, 45, 49, 45, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 112, 97, 114, 116, 105, 101, 115, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 53, 45, 49, 50, 51, 52, 45, 50, 52, 45, 49, 53, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 112, 97, 114, 116, 121, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 53, 45, 49, 50, 51, 52, 45, 49, 51, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 112, 105, 101, 99, 101, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 51, 52, 45, 50, 52, 45, 49, 53, 45, 49, 52, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 112, 108, 97, 121, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 50, 51, 52, 45, 49, 50, 51, 45, 49, 45, 49, 51, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 115, 97, 108, 101, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 45, 49, 45, 49, 50, 51, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 115, 99, 104, 111, 111, 108, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 45, 49, 54, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 50, 51, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 115, 101, 110, 115, 97, 116, 105, 111, 110, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 45, 50, 54, 45, 50, 51, 52, 45, 49, 45, 53, 54, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 115, 104, 97, 118, 101, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 52, 54, 45, 49, 45, 49, 50, 51, 54, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 115, 104, 111, 99, 107, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 52, 54, 45, 49, 51, 53, 45, 49, 52, 45, 49, 51, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 115, 104, 111, 119, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 52, 54, 45, 50, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 115, 104, 111, 119, 101, 114, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 52, 54, 45, 50, 52, 54, 45, 49, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 115, 117, 112, 112, 101, 114, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 45, 49, 51, 54, 45, 49, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 116, 97, 115, 116, 101, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 53, 45, 49, 45, 51, 52, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 116, 97, 120, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 53, 45, 49, 45, 49, 51, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 116, 97, 120, 101, 115, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 53, 45, 49, 45, 49, 51, 52, 54, 45, 49, 53, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 116, 101, 97, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 53, 45, 49, 53, 45, 49, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 116, 104, 101, 97, 116, 101, 114, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 54, 45, 49, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 116, 104, 101, 97, 116, 114, 101, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 54, 45, 49, 45, 50, 51, 52, 53, 45, 49, 50, 51, 53, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 116, 104, 111, 117, 103, 104, 116, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 49, 52, 53, 54, 45, 53, 45, 49, 50, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 116, 105, 109, 101, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 53, 45, 50, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 116, 114, 101, 97, 116, 109, 101, 110, 116, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 50, 51, 52, 53, 45, 49, 50, 51, 53, 45, 50, 45, 50, 51, 52, 53, 45, 53, 54, 45, 50, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 119, 111, 114, 100, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 52, 53, 45, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 119, 111, 114, 107, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 53, 45, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 102, 116, 101, 114, 119, 111, 114, 108, 100, 39, 115, 32, 32, 49, 45, 49, 50, 52, 45, 52, 53, 54, 45, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 112, 112, 101, 114, 99, 101, 105, 118, 101, 39, 115, 32, 32, 49, 45, 49, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 112, 112, 101, 114, 99, 101, 105, 118, 101, 100, 39, 115, 32, 32, 49, 45, 49, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 112, 112, 101, 114, 99, 101, 105, 118, 101, 114, 39, 115, 32, 32, 49, 45, 49, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 112, 112, 101, 114, 99, 101, 105, 118, 105, 110, 103, 39, 115, 32, 32, 49, 45, 49, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 97, 114, 99, 104, 100, 101, 99, 101, 105, 118, 101, 114, 39, 115, 32, 32, 51, 52, 53, 45, 49, 54, 45, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 102, 111, 114, 101, 104, 97, 110, 100, 39, 115, 32, 32, 50, 51, 45, 49, 50, 52, 45, 49, 50, 53, 45, 49, 50, 51, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 102, 111, 114, 101, 109, 101, 110, 116, 105, 111, 110, 101, 100, 39, 115, 32, 32, 50, 51, 45, 49, 50, 52, 45, 49, 51, 52, 45, 50, 54, 45, 53, 54, 45, 49, 51, 52, 53, 45, 49, 50, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 102, 114, 105, 101, 110, 100, 39, 115, 32, 32, 50, 51, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 104, 105, 110, 100, 104, 97, 110, 100, 39, 115, 32, 32, 50, 51, 45, 49, 50, 53, 45, 49, 50, 53, 45, 49, 50, 51, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 108, 105, 116, 116, 108, 101, 39, 115, 32, 32, 50, 51, 45, 49, 50, 51, 45, 49, 50, 51, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 108, 105, 116, 116, 108, 101, 100, 39, 115, 32, 32, 50, 51, 45, 49, 50, 51, 45, 49, 50, 51, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 108, 105, 116, 116, 108, 101, 109, 101, 110, 116, 39, 115, 32, 32, 50, 51, 45, 49, 50, 51, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 108, 105, 116, 116, 108, 101, 114, 39, 115, 32, 32, 50, 51, 45, 49, 50, 51, 45, 49, 50, 51, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 108, 111, 119, 100, 101, 99, 107, 39, 115, 32, 32, 50, 51, 45, 49, 50, 51, 45, 49, 52, 53, 45, 49, 53, 45, 49, 52, 45, 49, 51, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 108, 111, 119, 103, 114, 111, 117, 110, 100, 39, 115, 32, 32, 50, 51, 45, 49, 50, 51, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 52, 54, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 108, 111, 119, 109, 101, 110, 116, 105, 111, 110, 101, 100, 39, 115, 32, 32, 50, 51, 45, 49, 50, 51, 45, 49, 51, 52, 45, 50, 54, 45, 53, 54, 45, 49, 51, 52, 53, 45, 49, 50, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 110, 101, 97, 116, 104, 100, 101, 99, 107, 39, 115, 32, 32, 50, 51, 45, 49, 51, 52, 53, 45, 49, 52, 53, 45, 49, 53, 45, 49, 52, 45, 49, 51, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 110, 101, 97, 116, 104, 103, 114, 111, 117, 110, 100, 39, 115, 32, 32, 50, 51, 45, 49, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 52, 54, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 116, 119, 101, 101, 110, 100, 101, 99, 107, 39, 115, 32, 32, 50, 51, 45, 50, 51, 52, 53, 45, 49, 52, 53, 45, 49, 53, 45, 49, 52, 45, 49, 51, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 116, 119, 101, 101, 110, 116, 105, 109, 101, 39, 115, 32, 32, 50, 51, 45, 50, 51, 52, 53, 45, 53, 45, 50, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 101, 116, 119, 101, 101, 110, 119, 104, 105, 108, 101, 39, 115, 32, 32, 50, 51, 45, 50, 51, 52, 53, 45, 49, 53, 54, 45, 50, 52, 45, 49, 50, 51, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 102, 105, 115, 104, 39, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 49, 50, 52, 45, 50, 52, 45, 49, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 102, 105, 115, 104, 101, 115, 39, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 49, 50, 52, 45, 50, 52, 45, 49, 52, 54, 45, 49, 53, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 102, 111, 108, 100, 39, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 49, 50, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 102, 111, 108, 100, 101, 100, 39, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 49, 50, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 45, 49, 50, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 102, 111, 108, 100, 101, 114, 39, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 49, 50, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 45, 49, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 102, 111, 108, 100, 105, 110, 103, 39, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 49, 50, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 45, 51, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 108, 121, 39, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 109, 97, 110, 39, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 49, 51, 52, 45, 49, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 109, 101, 110, 39, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 49, 51, 52, 45, 50, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 110, 101, 115, 115, 39, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 110, 101, 115, 115, 101, 115, 39, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 115, 105, 100, 101, 39, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 50, 51, 52, 45, 50, 52, 45, 49, 52, 53, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 115, 105, 100, 101, 100, 39, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 50, 51, 52, 45, 50, 52, 45, 49, 52, 53, 45, 49, 50, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 115, 105, 100, 101, 114, 39, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 50, 51, 52, 45, 50, 52, 45, 49, 52, 53, 45, 49, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 115, 105, 100, 105, 110, 103, 39, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 50, 51, 52, 45, 50, 52, 45, 49, 52, 53, 45, 51, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 115, 105, 103, 104, 116, 39, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 50, 51, 52, 45, 50, 52, 45, 49, 50, 54, 45, 50, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 115, 116, 111, 114, 105, 101, 115, 39, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 51, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 50, 52, 45, 49, 53, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 115, 116, 111, 114, 121, 39, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 51, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 105, 110, 100, 119, 111, 114, 109, 39, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 50, 52, 53, 54, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 108, 111, 111, 100, 108, 101, 116, 116, 101, 114, 39, 115, 32, 32, 49, 50, 45, 49, 50, 51, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 52, 53, 45, 49, 50, 51, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 111, 121, 102, 114, 105, 101, 110, 100, 39, 115, 32, 32, 49, 50, 45, 49, 51, 53, 45, 49, 51, 52, 53, 54, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 114, 97, 105, 108, 108, 101, 100, 39, 115, 32, 32, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 114, 97, 105, 108, 108, 101, 114, 39, 115, 32, 32, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 114, 97, 105, 108, 108, 101, 119, 114, 105, 116, 101, 114, 39, 115, 32, 32, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 53, 54, 45, 49, 50, 51, 53, 45, 50, 52, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 114, 97, 105, 108, 108, 101, 119, 114, 105, 116, 105, 110, 103, 39, 115, 32, 32, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 53, 54, 45, 49, 50, 51, 53, 45, 50, 52, 45, 50, 51, 52, 53, 45, 51, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 114, 97, 105, 108, 108, 101, 121, 39, 115, 32, 32, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 98, 114, 97, 105, 110, 99, 104, 105, 108, 100, 114, 101, 110, 39, 115, 32, 32, 49, 50, 45, 49, 50, 51, 53, 45, 49, 45, 51, 53, 45, 49, 54, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 104, 97, 105, 110, 108, 101, 116, 116, 101, 114, 39, 115, 32, 32, 49, 54, 45, 49, 45, 51, 53, 45, 49, 50, 51, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 104, 105, 108, 100, 114, 101, 110, 39, 115, 119, 101, 97, 114, 39, 115, 32, 32, 49, 54, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 45, 50, 52, 53, 54, 45, 49, 53, 45, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 108, 111, 114, 98, 108, 105, 110, 100, 39, 115, 32, 32, 49, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 108, 111, 114, 98, 108, 105, 110, 100, 110, 101, 115, 115, 39, 115, 32, 32, 49, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 108, 111, 114, 98, 108, 105, 110, 100, 110, 101, 115, 115, 101, 115, 39, 115, 32, 32, 49, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 108, 111, 117, 114, 98, 108, 105, 110, 100, 39, 115, 32, 32, 49, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 50, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 108, 111, 117, 114, 98, 108, 105, 110, 100, 110, 101, 115, 115, 39, 115, 32, 32, 49, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 50, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 108, 111, 117, 114, 98, 108, 105, 110, 100, 110, 101, 115, 115, 101, 115, 39, 115, 32, 32, 49, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 50, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 110, 99, 101, 105, 118, 101, 100, 39, 115, 32, 32, 50, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 110, 99, 101, 105, 118, 101, 114, 39, 115, 32, 32, 50, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 117, 108, 100, 39, 118, 101, 39, 115, 32, 32, 49, 52, 45, 49, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 117, 108, 100, 97, 39, 115, 32, 32, 49, 52, 45, 49, 52, 53, 45, 49, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 117, 108, 100, 101, 115, 116, 39, 115, 32, 32, 49, 52, 45, 49, 52, 53, 45, 49, 53, 45, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 117, 108, 100, 110, 39, 116, 39, 115, 32, 32, 49, 52, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 117, 108, 100, 110, 39, 116, 39, 118, 101, 39, 115, 32, 32, 49, 52, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 99, 111, 117, 108, 100, 115, 116, 39, 115, 32, 32, 49, 52, 45, 49, 52, 53]);
fileData263.push.apply(fileData263, [45, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 101, 97, 102, 98, 108, 105, 110, 100, 39, 115, 32, 32, 49, 52, 53, 45, 50, 45, 49, 50, 52, 45, 49, 50, 45, 49, 50, 51, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 101, 97, 102, 98, 108, 105, 110, 100, 110, 101, 115, 115, 39, 115, 32, 32, 49, 52, 53, 45, 50, 45, 49, 50, 52, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 101, 97, 102, 98, 108, 105, 110, 100, 110, 101, 115, 115, 101, 115, 39, 115, 32, 32, 49, 52, 53, 45, 50, 45, 49, 50, 52, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 101, 99, 101, 105, 118, 101, 100, 39, 115, 32, 32, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 101, 99, 101, 105, 118, 101, 114, 39, 115, 32, 32, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 101, 99, 108, 97, 114, 101, 100, 39, 115, 32, 32, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 101, 99, 108, 97, 114, 101, 114, 39, 115, 32, 32, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 101, 102, 114, 105, 101, 110, 100, 39, 115, 32, 32, 49, 52, 53, 45, 49, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 111, 45, 105, 116, 45, 121, 111, 117, 114, 115, 101, 108, 102, 101, 114, 39, 115, 32, 32, 49, 52, 53, 45, 51, 54, 45, 49, 51, 52, 54, 45, 51, 54, 45, 49, 51, 52, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 52, 45, 49, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 100, 111, 117, 98, 108, 101, 113, 117, 105, 99, 107, 39, 115, 32, 32, 49, 52, 53, 45, 49, 50, 53, 54, 45, 49, 50, 45, 49, 50, 51, 45, 49, 53, 45, 49, 50, 51, 52, 53, 45, 49, 51, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 101, 97, 115, 116, 97, 98, 111, 117, 116, 39, 115, 32, 32, 49, 53, 45, 49, 45, 51, 52, 45, 49, 45, 49, 50, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 101, 101, 108, 103, 111, 111, 100, 39, 115, 32, 32, 49, 50, 52, 45, 49, 53, 45, 49, 53, 45, 49, 50, 51, 45, 49, 50, 52, 53, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 101, 101, 116, 102, 105, 114, 115, 116, 39, 115, 32, 32, 49, 50, 52, 45, 49, 53, 45, 49, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 45, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 97, 105, 100, 39, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 45, 50, 52, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 97, 105, 100, 101, 114, 39, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 45, 50, 52, 45, 49, 52, 53, 45, 49, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 98, 111, 114, 110, 39, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 99, 108, 97, 115, 115, 39, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 52, 45, 49, 50, 51, 45, 49, 45, 50, 51, 52, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 99, 108, 97, 115, 115, 101, 115, 39, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 52, 45, 49, 50, 51, 45, 49, 45, 50, 51, 52, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 100, 97, 121, 39, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 53, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 100, 97, 121, 101, 114, 39, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 53, 45, 49, 52, 53, 45, 49, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 102, 114, 117, 105, 116, 39, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 51, 54, 45, 50, 52, 45, 50, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 102, 114, 117, 105, 116, 105, 110, 103, 39, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 51, 54, 45, 50, 52, 45, 50, 51, 52, 53, 45, 51, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 103, 101, 110, 101, 114, 97, 116, 105, 111, 110, 39, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 52, 53, 45, 50, 54, 45, 49, 50, 52, 53, 54, 45, 49, 45, 53, 54, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 104, 97, 110, 100, 39, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 53, 45, 49, 50, 51, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 104, 97, 110, 100, 101, 100, 39, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 53, 45, 49, 50, 51, 52, 54, 45, 49, 50, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 108, 105, 110, 103, 39, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 51, 45, 51, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 108, 121, 39, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 110, 101, 115, 115, 39, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 53, 54, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 110, 105, 103, 104, 116, 39, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 51, 52, 53, 45, 50, 52, 45, 49, 50, 54, 45, 50, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 110, 105, 103, 104, 116, 101, 114, 39, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 51, 52, 53, 45, 50, 52, 45, 49, 50, 54, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 114, 97, 116, 101, 39, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 51, 53, 45, 49, 45, 50, 51, 52, 53, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 114, 97, 116, 101, 100, 39, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 51, 53, 45, 49, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 114, 97, 116, 105, 110, 103, 39, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 49, 50, 51, 53, 45, 49, 45, 50, 51, 52, 53, 45, 51, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 105, 114, 115, 116, 115, 116, 114, 105, 110, 103, 39, 115, 32, 32, 49, 50, 52, 45, 51, 52, 45, 51, 52, 45, 49, 50, 51, 53, 45, 51, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 111, 114, 97, 115, 109, 117, 99, 104, 39, 115, 32, 32, 49, 50, 51, 52, 53, 54, 45, 49, 45, 50, 51, 52, 45, 49, 51, 52, 45, 49, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 111, 114, 101, 115, 97, 105, 100, 39, 115, 32, 32, 49, 50, 51, 52, 53, 54, 45, 49, 53, 45, 50, 51, 52, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 111, 115, 116, 101, 114, 99, 104, 105, 108, 100, 114, 101, 110, 39, 115, 32, 32, 49, 50, 52, 45, 49, 51, 53, 45, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 54, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 114, 105, 101, 110, 100, 108, 101, 115, 115, 39, 115, 32, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 52, 54, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 114, 105, 101, 110, 100, 108, 101, 115, 115, 110, 101, 115, 115, 39, 115, 32, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 52, 54, 45, 50, 51, 52, 45, 53, 54, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 114, 105, 101, 110, 100, 108, 101, 115, 115, 110, 101, 115, 115, 101, 115, 39, 115, 32, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 52, 54, 45, 50, 51, 52, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 114, 105, 101, 110, 100, 108, 105, 101, 114, 39, 115, 32, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 45, 49, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 114, 105, 101, 110, 100, 108, 105, 101, 115, 39, 115, 32, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 45, 49, 53, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 114, 105, 101, 110, 100, 108, 105, 101, 115, 116, 39, 115, 32, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 45, 49, 53, 45, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 114, 105, 101, 110, 100, 108, 105, 110, 101, 115, 115, 39, 115, 32, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 45, 53, 54, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 114, 105, 101, 110, 100, 108, 105, 110, 101, 115, 115, 101, 115, 39, 115, 32, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 114, 105, 101, 110, 100, 108, 121, 39, 115, 32, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 102, 114, 105, 101, 110, 100, 115, 104, 105, 112, 39, 115, 32, 32, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 52, 54, 45, 50, 52, 45, 49, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 97, 100, 97, 98, 111, 117, 116, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 45, 49, 52, 53, 45, 49, 45, 49, 50, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 97, 105, 110, 115, 97, 105, 100, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 45, 51, 53, 45, 50, 51, 52, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 97, 108, 102, 114, 105, 101, 110, 100, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 45, 49, 50, 51, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 101, 110, 116, 108, 101, 109, 97, 110, 102, 114, 105, 101, 110, 100, 39, 115, 32, 32, 49, 50, 52, 53, 45, 50, 54, 45, 50, 51, 52, 53, 45, 49, 50, 51, 45, 49, 53, 45, 49, 51, 52, 45, 49, 45, 49, 51, 52, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 101, 110, 116, 108, 101, 109, 101, 110, 102, 114, 105, 101, 110, 100, 115, 39, 115, 32, 32, 49, 50, 52, 53, 45, 50, 54, 45, 50, 51, 52, 53, 45, 49, 50, 51, 45, 49, 53, 45, 49, 51, 52, 45, 50, 54, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 105, 114, 108, 102, 114, 105, 101, 110, 100, 39, 115, 32, 32, 49, 50, 52, 53, 45, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 100, 99, 104, 105, 108, 100, 114, 101, 110, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 51, 53, 45, 49, 52, 53, 45, 49, 54, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 97, 102, 116, 101, 114, 110, 111, 111, 110, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 45, 49, 50, 52, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 98, 121, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 45, 49, 51, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 98, 121, 101, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 45, 49, 51, 52, 53, 54, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 98, 121, 101, 105, 110, 103, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 45, 49, 51, 52, 53, 54, 45, 49, 53, 45, 51, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 98, 121, 105, 110, 103, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 45, 49, 51, 52, 53, 54, 45, 51, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 100, 97, 121, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 53, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 101, 114, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 101, 115, 116, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 53, 45, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 101, 118, 101, 110, 105, 110, 103, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 53, 45, 49, 50, 51, 54, 45, 50, 54, 45, 51, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 102, 101, 108, 108, 111, 119, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 52, 45, 49, 53, 45, 49, 50, 51, 45, 49, 50, 51, 45, 50, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 102, 101, 108, 108, 111, 119, 115, 104, 105, 112, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 52, 45, 49, 53, 45, 49, 50, 51, 45, 49, 50, 51, 45, 50, 52, 54, 45, 49, 52, 54, 45, 50, 52, 45, 49, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 104, 101, 97, 114, 116, 101, 100, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 53, 45, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 104, 101, 97, 114, 116, 101, 100, 108, 121, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 53, 45, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 104, 101, 97, 114, 116, 101, 100, 110, 101, 115, 115, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 53, 45, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 45, 53, 54, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 104, 117, 109, 111, 114, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 104, 117, 109, 111, 114, 101, 100, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 104, 117, 109, 111, 114, 101, 100, 108, 121, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 104, 117, 109, 111, 114, 101, 100, 110, 101, 115, 115, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 45, 53, 54, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 104, 117, 109, 111, 114, 101, 100, 110, 101, 115, 115, 101, 115, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 104, 117, 109, 111, 117, 114, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 50, 53, 54, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 104, 117, 109, 111, 117, 114, 101, 100, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 50, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 104, 117, 109, 111, 117, 114, 101, 100, 108, 121, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 50, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 104, 117, 109, 111, 117, 114, 101, 100, 110, 101, 115, 115, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 50, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 45, 53, 54, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 104, 117, 109, 111, 117, 114, 101, 100, 110, 101, 115, 115, 101, 115, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 53, 45, 49, 51, 54, 45, 49, 51, 52, 45, 49, 50, 53, 54, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 105, 101, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 52, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 105, 115, 104, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 52, 45, 49, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 108, 105, 101, 114, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 51, 45, 50, 52, 45, 49, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 108, 105, 101, 115, 116, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 51, 45, 50, 52, 45, 49, 53, 45, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 108, 105, 110, 101, 115, 115, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 51, 45, 50, 52, 45, 53, 54, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 108, 111, 111, 107, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 51, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 51, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 108, 111, 111, 107, 101, 114, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 51, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 51, 45, 49, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 108, 111, 111, 107, 105, 110, 103, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 51, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 51, 45, 51, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 108, 121, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 109, 97, 110, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 45, 49, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 109, 101, 110, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 45, 50, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 109, 111, 114, 110, 105, 110, 103, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 45, 51, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 110, 97, 116, 117, 114, 101, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 49, 45, 50, 51, 52, 53, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 110, 97, 116, 117, 114, 101, 100, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 49, 45, 50, 51, 52, 53, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 110, 97, 116, 117, 114, 101, 100, 108, 121, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 49, 45, 50, 51, 52, 53, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 110, 97, 116, 117, 114, 101, 100, 110, 101, 115, 115, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 49, 45, 50, 51, 52, 53, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 45, 53, 54, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 110, 101, 115, 115, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 53, 54, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 110, 101, 115, 115, 101, 115, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 110, 105, 103, 104, 116, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 50, 52, 45, 49, 50, 54, 45, 50, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 115, 105, 122, 101, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 51, 52, 45, 50, 52, 45, 49, 51, 53, 54, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 115, 105, 122, 101, 100, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 51, 52, 45, 50, 52, 45, 49, 51, 53, 54, 45, 49, 50, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 116, 101, 109, 112, 101, 114, 101, 100, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 51, 52, 53, 45, 49, 53, 45, 49, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 50, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 116, 101, 109, 112, 101, 114, 101, 100, 108, 121, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 51, 52, 53, 45, 49, 53, 45, 49, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 50, 52, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 116, 105, 109, 101, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 53, 45, 50, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 117, 110, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 54, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 119, 105, 102, 101, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 52, 53, 54, 45, 50, 52, 45, 49, 50, 52, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 119, 105, 108, 108, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 52, 53, 54, 45, 50, 52, 45, 49, 50, 51, 45, 49, 50, 51, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 119, 105, 108, 108, 101, 100, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 52, 53, 54, 45, 50, 52, 45, 49, 50, 51, 45, 49, 50, 51, 45, 49, 50, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 119, 105, 118, 101, 115, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 50, 52, 53, 54, 45, 50, 52, 45, 49, 50, 51, 54, 45, 49, 53, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 121, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 111, 111, 100, 121, 101, 97, 114, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 53, 54, 45, 49, 53, 45, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 97, 110, 100, 99, 104, 105, 108, 100, 114, 101, 110, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 54, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 97, 117, 110, 116, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 45, 49, 51, 54, 45, 49, 51, 52, 53, 45, 50, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 98, 97, 116, 99, 104, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 45, 49, 45, 50, 51, 52, 53, 45, 49, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 99, 105, 114, 99, 108, 101, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 52, 45, 50, 52, 45, 49, 50, 51, 53, 45, 49, 52, 45, 49, 50, 51, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 99, 111, 97, 116, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 52, 45, 49, 51, 53, 45, 49, 45, 50, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 101, 110, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 50, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 101, 110, 101, 100, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 50, 54, 45, 49, 50, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 101, 110, 101, 114, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 50, 54, 45, 49, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 101, 110, 105, 110, 103, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 50, 54, 45, 51, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 101, 114, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 101, 115, 116, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 53, 45, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 97, 117, 110, 116, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 45, 49, 51, 54, 45, 49, 51, 52, 53, 45, 50, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 99, 104, 105, 108, 100, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 54, 45, 50, 52, 45, 49, 50, 51, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 99, 104, 105, 108, 100, 114, 101, 110, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 54, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 100, 97, 100, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 52, 53, 45, 49, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 100, 97, 117, 103, 104, 116, 101, 114, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 52, 53, 45, 49, 45, 49, 51, 54, 45, 49, 50, 54, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 102, 97, 116, 104, 101, 114, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 53, 45, 49, 50, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 102, 97, 116, 104, 101, 114, 104, 111, 111, 100, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 53, 45, 49, 50, 52, 45, 49, 50, 53, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 109, 97, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 51, 52, 45, 49, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 109, 111, 116, 104, 101, 114, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 53, 45, 49, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 109, 111, 116, 104, 101, 114, 104, 111, 111, 100, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 53, 45, 49, 51, 52, 45, 49, 50, 53, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 110, 101, 112, 104, 101, 119, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 51, 52, 53, 45, 49, 53, 45, 49, 50, 51, 52, 45, 49, 50, 53, 45, 49, 53, 45, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 110, 105, 101, 99, 101, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 51, 52, 53, 45, 50, 52, 45, 49, 53, 45, 49, 52, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 112, 97, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 50, 51, 52, 45, 49, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 112, 97, 114, 101, 110, 116, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 50, 51, 52, 45, 51, 52, 53, 45, 50, 54, 45, 50, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 112, 97, 114, 101, 110, 116, 104, 111, 111, 100, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 50, 51, 52, 45, 51, 52, 53, 45, 50, 54, 45, 50, 51, 52, 53, 45, 49, 50, 53, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 115, 111, 110, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 50, 51, 52, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 103, 114, 97, 110, 100, 117, 110, 99, 108, 101, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 54, 45, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 52, 45, 49, 50, 51, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 104, 101, 97, 114, 116, 101, 100, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 53, 45, 49, 53, 45, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 104, 101, 97, 114, 116, 101, 100, 108, 121, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 53, 45, 49, 53, 45, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 104, 101, 97, 114, 116, 101, 100, 110, 101, 115, 115, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 53, 45, 49, 53, 45, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 45, 53, 54, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 104, 101, 97, 114, 116, 101, 100, 110, 101, 115, 115, 101, 115, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 53, 45, 49, 53, 45, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 108, 121, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 110, 101, 112, 104, 101, 119, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 51, 52, 53, 45, 49, 53, 45, 49, 50, 51, 52, 45, 49, 50, 53, 45, 49, 53, 45, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 110, 101, 115, 115, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 53, 54, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 110, 101, 115, 115, 101, 115, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 110, 105, 101, 99, 101, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 51, 52, 53, 45, 50, 52, 45, 49, 53, 45, 49, 52, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 115, 119, 111, 114, 100, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 50, 51, 52, 45, 52, 53, 45, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 114, 101, 97, 116, 117, 110, 99, 108, 101, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 52, 45, 49, 50, 51, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 103, 117, 121, 102, 114, 105, 101, 110, 100, 39, 115, 32, 32, 49, 50, 52, 53, 45, 49, 51, 54, 45, 49, 51, 52, 53, 54, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 97, 116, 101, 108, 101, 116, 116, 101, 114, 39, 115, 32, 32, 49, 50, 53, 45, 49, 45, 50, 51, 52, 53, 45, 49, 53, 45, 49, 50, 51, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 101, 97, 100, 102, 105, 114, 115, 116, 39, 115, 32, 32, 49, 50, 53, 45, 50, 45, 49, 52, 53, 45, 49, 50, 52, 45, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 101, 114, 101, 97, 98, 111, 117, 116, 39, 115, 32, 32, 53, 45, 49, 50, 53, 45, 49, 45, 49, 50, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 101, 114, 101, 97, 102, 116, 101, 114, 39, 115, 32, 32, 53, 45, 49, 50, 53, 45, 49, 45, 49, 50, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 101, 114, 101, 97, 103, 97, 105, 110, 39, 115, 32, 32, 53, 45, 49, 50, 53, 45, 49, 45, 49, 50, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 101, 114, 101, 97, 103, 97, 105, 110, 115, 116, 39, 115, 32, 32, 53, 45, 49, 50, 53, 45, 49, 45, 49, 50, 52, 53, 45, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 101, 114, 101, 105, 110, 97, 98, 111, 118, 101, 39, 115, 32, 32, 53, 45, 49, 50, 53, 45, 51, 53, 45, 49, 45, 49, 50, 45, 49, 50, 51, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 101, 114, 101, 105, 110, 97, 102, 116, 101, 114, 39, 115, 32, 32, 53, 45, 49, 50, 53, 45, 51, 53, 45, 49, 45, 49, 50, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 101, 114, 101, 105, 110, 97, 103, 97, 105, 110, 39, 115, 32, 32, 53, 45, 49, 50, 53, 45, 51, 53, 45, 49, 45, 49, 50, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 105, 103, 104, 108, 121, 112, 97, 105, 100, 39, 115, 32, 32, 49, 50, 53, 45, 50, 52, 45, 49, 50, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 49, 50, 51, 52, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 105, 109, 98, 111, 39, 115, 32, 32, 49, 50, 53, 45, 49, 51, 52, 45, 49, 50, 45, 49, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 104, 105, 109, 98, 111, 101, 115, 39, 115, 32, 32, 49, 50, 53, 45, 49, 51, 52, 45, 49, 50, 45, 49, 51, 53, 45, 49, 53, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 105, 108, 108, 112, 97, 105, 100, 39, 115, 32, 32, 50, 52, 45, 49, 50, 51, 45, 49, 50, 51, 45, 49, 50, 51, 52, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 105, 109, 109, 101, 100, 105, 97, 116, 101, 108, 121, 39, 115, 32, 32, 50, 52, 45, 49, 51, 52, 45, 49, 51, 52, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 105, 109, 109, 101, 100, 105, 97, 116, 101, 110, 101, 115, 115, 39, 115, 32, 32, 50, 52, 45, 49, 51, 52, 45, 49, 51, 52, 45, 53, 54, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 105, 110, 97, 115, 109, 117, 99, 104, 39, 115, 32, 32, 51, 53, 45, 49, 45, 50, 51, 52, 45, 49, 51, 52, 45, 49, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 105, 110, 115, 111, 109, 117, 99, 104, 39, 115, 32, 32, 51, 53, 45, 50, 51, 52, 45, 49, 51, 53, 45, 49, 51, 52, 45, 49, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 107, 110, 111, 99, 107, 97, 98, 111, 117, 116, 39, 115, 32, 32, 49, 51, 45, 49, 51, 52, 53, 45, 49, 51, 53, 45, 49, 52, 45, 49, 51, 45, 49, 45, 49, 50, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 97, 100, 121, 102, 114, 105, 101, 110, 100, 39, 115, 32, 32, 49, 50, 51, 45, 49, 45, 49, 52, 53, 45, 49, 51, 52, 53, 54, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 97, 121, 97, 98, 111, 117, 116, 39, 115, 32, 32, 49, 50, 51, 45, 49, 45, 49, 51, 52, 53, 54, 45, 49, 45, 49, 50, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 98, 111, 100, 105, 101, 115, 39, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 52, 53, 45, 50, 52, 45, 49, 53, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 98, 111, 100, 121, 39, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 52, 53, 45, 49, 51, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 98, 111, 109, 98, 39, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 51, 52, 45, 49, 50, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 98, 111, 109, 98, 101, 100, 39, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 51, 52, 45, 49, 50, 45, 49, 50, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116]);
fileData263.push.apply(fileData263, [101, 114, 98, 111, 109, 98, 101, 114, 39, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 51, 52, 45, 49, 50, 45, 49, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 98, 111, 109, 98, 105, 110, 103, 39, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 51, 52, 45, 49, 50, 45, 51, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 98, 111, 120, 39, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 51, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 98, 111, 120, 101, 100, 39, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 51, 52, 54, 45, 49, 50, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 98, 111, 120, 101, 114, 39, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 51, 52, 54, 45, 49, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 98, 111, 120, 101, 115, 39, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 51, 52, 54, 45, 49, 53, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 98, 111, 120, 105, 110, 103, 39, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 51, 53, 45, 49, 51, 52, 54, 45, 51, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 101, 100, 39, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 101, 114, 39, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 102, 111, 114, 109, 39, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 53, 54, 45, 49, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 104, 101, 97, 100, 39, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 53, 45, 50, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 104, 101, 97, 100, 105, 110, 103, 39, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 53, 45, 50, 45, 49, 52, 53, 45, 51, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 105, 110, 103, 39, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 51, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 109, 97, 110, 39, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 51, 52, 45, 49, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 109, 101, 110, 39, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 51, 52, 45, 50, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 111, 112, 101, 110, 101, 114, 39, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 51, 53, 45, 49, 50, 51, 52, 45, 50, 54, 45, 49, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 112, 101, 114, 102, 101, 99, 116, 39, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 50, 52, 45, 49, 53, 45, 49, 52, 45, 50, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 112, 114, 101, 115, 115, 39, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 112, 114, 101, 115, 115, 101, 100, 39, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 45, 49, 50, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 112, 114, 101, 115, 115, 101, 115, 39, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 112, 114, 101, 115, 115, 105, 110, 103, 39, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 53, 45, 50, 51, 52, 45, 50, 51, 52, 45, 51, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 113, 117, 97, 108, 105, 116, 121, 39, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 51, 52, 53, 45, 49, 51, 54, 45, 49, 45, 49, 50, 51, 45, 53, 54, 45, 49, 51, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 115, 112, 97, 99, 101, 39, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 45, 49, 52, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 115, 112, 97, 99, 101, 100, 39, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 45, 49, 52, 45, 49, 50, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 115, 112, 97, 99, 105, 110, 103, 39, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 45, 49, 52, 45, 51, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 101, 116, 116, 101, 114, 116, 101, 120, 116, 39, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 53, 45, 50, 51, 52, 53, 45, 49, 53, 45, 49, 51, 52, 54, 45, 50, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 105, 116, 116, 108, 101, 100, 39, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 105, 116, 116, 108, 101, 110, 101, 99, 107, 39, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 45, 49, 51, 52, 53, 45, 49, 53, 45, 49, 52, 45, 49, 51, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 105, 116, 116, 108, 101, 110, 101, 115, 115, 39, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 105, 116, 116, 108, 101, 110, 101, 115, 115, 101, 115, 39, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 105, 116, 116, 108, 101, 114, 39, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 105, 116, 116, 108, 101, 115, 116, 39, 115, 32, 32, 49, 50, 51, 45, 49, 50, 51, 45, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 111, 118, 101, 99, 104, 105, 108, 100, 114, 101, 110, 39, 115, 32, 32, 49, 50, 51, 45, 49, 51, 53, 45, 49, 50, 51, 54, 45, 49, 53, 45, 49, 54, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 111, 118, 101, 108, 101, 116, 116, 101, 114, 39, 115, 32, 32, 49, 50, 51, 45, 49, 51, 53, 45, 49, 50, 51, 54, 45, 49, 53, 45, 49, 50, 51, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 108, 111, 119, 108, 121, 112, 97, 105, 100, 39, 115, 32, 32, 49, 50, 51, 45, 50, 52, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 49, 50, 51, 52, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 97, 110, 102, 114, 105, 101, 110, 100, 39, 115, 32, 32, 49, 51, 52, 45, 49, 45, 49, 51, 52, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 101, 110, 102, 114, 105, 101, 110, 100, 115, 39, 115, 32, 32, 49, 51, 52, 45, 50, 54, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 105, 100, 97, 102, 116, 101, 114, 110, 111, 111, 110, 39, 115, 32, 32, 49, 51, 52, 45, 50, 52, 45, 49, 52, 53, 45, 49, 45, 49, 50, 52, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 105, 115, 98, 114, 97, 105, 108, 108, 101, 39, 115, 32, 32, 49, 51, 52, 45, 50, 52, 45, 50, 51, 52, 45, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 105, 115, 98, 114, 97, 105, 108, 108, 101, 100, 39, 115, 32, 32, 49, 51, 52, 45, 50, 52, 45, 50, 51, 52, 45, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 105, 115, 112, 101, 114, 99, 101, 105, 118, 101, 39, 115, 32, 32, 49, 51, 52, 45, 50, 52, 45, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 105, 115, 112, 101, 114, 99, 101, 105, 118, 101, 100, 39, 115, 32, 32, 49, 51, 52, 45, 50, 52, 45, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 105, 115, 112, 101, 114, 99, 101, 105, 118, 101, 114, 39, 115, 32, 32, 49, 51, 52, 45, 50, 52, 45, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 105, 115, 112, 101, 114, 99, 101, 105, 118, 105, 110, 103, 39, 115, 32, 32, 49, 51, 52, 45, 50, 52, 45, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 105, 115, 115, 97, 105, 100, 39, 115, 32, 32, 49, 51, 52, 45, 50, 52, 45, 50, 51, 52, 45, 50, 51, 52, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 111, 114, 110, 105, 110, 103, 97, 102, 116, 101, 114, 39, 115, 32, 32, 49, 51, 52, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 45, 51, 52, 54, 45, 49, 45, 49, 50, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 99, 104, 108, 121, 39, 115, 32, 32, 49, 51, 52, 45, 49, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 99, 104, 110, 101, 115, 115, 39, 115, 32, 32, 49, 51, 52, 45, 49, 54, 45, 53, 54, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 115, 116, 39, 118, 101, 39, 115, 32, 32, 49, 51, 52, 45, 51, 52, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 115, 116, 97, 39, 115, 32, 32, 49, 51, 52, 45, 51, 52, 45, 49, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 115, 116, 97, 114, 100, 39, 115, 32, 32, 49, 51, 52, 45, 51, 52, 45, 51, 52, 53, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 115, 116, 97, 114, 100, 121, 39, 115, 32, 32, 49, 51, 52, 45, 51, 52, 45, 51, 52, 53, 45, 49, 52, 53, 45, 49, 51, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 115, 116, 105, 101, 114, 39, 115, 32, 32, 49, 51, 52, 45, 51, 52, 45, 50, 52, 45, 49, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 115, 116, 105, 101, 115, 116, 39, 115, 32, 32, 49, 51, 52, 45, 51, 52, 45, 50, 52, 45, 49, 53, 45, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 115, 116, 105, 108, 121, 39, 115, 32, 32, 49, 51, 52, 45, 51, 52, 45, 50, 52, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 115, 116, 105, 110, 101, 115, 115, 39, 115, 32, 32, 49, 51, 52, 45, 51, 52, 45, 50, 52, 45, 53, 54, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 115, 116, 110, 39, 116, 39, 115, 32, 32, 49, 51, 52, 45, 51, 52, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 115, 116, 110, 39, 116, 39, 118, 101, 39, 115, 32, 32, 49, 51, 52, 45, 51, 52, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 109, 117, 115, 116, 121, 39, 115, 32, 32, 49, 51, 52, 45, 51, 52, 45, 49, 51, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 110, 101, 119, 115, 108, 101, 116, 116, 101, 114, 39, 115, 32, 32, 49, 51, 52, 53, 45, 49, 53, 45, 50, 52, 53, 54, 45, 50, 51, 52, 45, 49, 50, 51, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 110, 111, 110, 101, 115, 117, 99, 104, 39, 115, 32, 32, 49, 51, 52, 53, 45, 53, 45, 49, 51, 53, 45, 50, 51, 52, 45, 49, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 110, 111, 110, 115, 117, 99, 104, 39, 115, 32, 32, 49, 51, 52, 53, 45, 49, 51, 53, 45, 49, 51, 52, 53, 45, 50, 51, 52, 45, 49, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 110, 111, 114, 116, 104, 97, 98, 111, 117, 116, 39, 115, 32, 32, 49, 51, 52, 53, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 52, 53, 54, 45, 49, 45, 49, 50, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 111, 118, 101, 114, 109, 117, 99, 104, 39, 115, 32, 32, 49, 51, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 49, 51, 52, 45, 49, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 111, 118, 101, 114, 112, 97, 105, 100, 39, 115, 32, 32, 49, 51, 53, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 49, 50, 51, 52, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 101, 110, 102, 114, 105, 101, 110, 100, 39, 115, 32, 32, 49, 50, 51, 52, 45, 50, 54, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 101, 114, 99, 101, 105, 118, 101, 100, 39, 115, 32, 32, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 101, 114, 99, 101, 105, 118, 101, 114, 39, 115, 32, 32, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 101, 114, 104, 97, 112, 115, 101, 115, 39, 115, 32, 32, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 50, 53, 45, 49, 53, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 111, 111, 114, 108, 121, 112, 97, 105, 100, 39, 115, 32, 32, 49, 50, 51, 52, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 49, 50, 51, 52, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 111, 115, 116, 112, 97, 105, 100, 39, 115, 32, 32, 49, 50, 51, 52, 45, 49, 51, 53, 45, 51, 52, 45, 49, 50, 51, 52, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 114, 101, 99, 101, 105, 118, 101, 39, 115, 32, 32, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 114, 101, 99, 101, 105, 118, 101, 114, 39, 115, 32, 32, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 114, 101, 99, 101, 105, 118, 105, 110, 103, 39, 115, 32, 32, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 114, 101, 112, 97, 105, 100, 39, 115, 32, 32, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 52, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 117, 114, 98, 108, 105, 110, 100, 39, 115, 32, 32, 49, 50, 51, 52, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 117, 114, 98, 108, 105, 110, 100, 108, 121, 39, 115, 32, 32, 49, 50, 51, 52, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 117, 114, 98, 108, 105, 110, 100, 110, 101, 115, 115, 39, 115, 32, 32, 49, 50, 51, 52, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 112, 117, 114, 98, 108, 105, 110, 100, 110, 101, 115, 115, 101, 115, 39, 115, 32, 32, 49, 50, 51, 52, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 100, 114, 97, 119, 39, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 52, 53, 45, 49, 50, 51, 53, 45, 49, 45, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 101, 110, 39, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 101, 110, 101, 100, 39, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 54, 45, 49, 50, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 101, 110, 101, 114, 39, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 54, 45, 49, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 101, 110, 105, 110, 103, 39, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 54, 45, 51, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 101, 114, 39, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 101, 115, 116, 39, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 53, 45, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 102, 105, 114, 101, 39, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 50, 52, 45, 50, 52, 45, 49, 50, 51, 53, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 102, 105, 114, 105, 110, 103, 39, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 50, 52, 45, 50, 52, 45, 49, 50, 51, 53, 45, 51, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 102, 114, 101, 101, 122, 101, 39, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 53, 45, 49, 53, 45, 49, 51, 53, 54, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 102, 114, 101, 101, 122, 105, 110, 103, 39, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 53, 45, 49, 53, 45, 49, 51, 53, 54, 45, 51, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 102, 114, 111, 122, 101, 39, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 51, 53, 45, 49, 51, 53, 54, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 102, 114, 111, 122, 101, 110, 39, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 51, 53, 45, 49, 51, 53, 54, 45, 50, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 105, 101, 39, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 52, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 105, 115, 104, 39, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 52, 45, 49, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 105, 115, 104, 108, 121, 39, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 52, 45, 49, 52, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 108, 105, 109, 101, 39, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 50, 51, 45, 50, 52, 45, 49, 51, 52, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 108, 121, 39, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 110, 101, 115, 115, 39, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 53, 54, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 110, 101, 115, 115, 101, 115, 39, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 115, 97, 110, 100, 39, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 51, 52, 45, 49, 50, 51, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 115, 101, 116, 39, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 115, 105, 108, 118, 101, 114, 39, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 51, 52, 45, 50, 52, 45, 49, 50, 51, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 115, 105, 108, 118, 101, 114, 101, 100, 39, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 51, 52, 45, 50, 52, 45, 49, 50, 51, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 49, 50, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 115, 105, 108, 118, 101, 114, 105, 110, 103, 39, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 51, 52, 45, 50, 52, 45, 49, 50, 51, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 54, 45, 51, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 115, 110, 97, 112, 39, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 51, 52, 45, 49, 51, 52, 53, 45, 49, 45, 49, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 115, 116, 101, 112, 39, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 51, 52, 45, 49, 53, 45, 49, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 115, 116, 101, 112, 112, 101, 100, 39, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 51, 52, 45, 49, 53, 45, 49, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 115, 116, 101, 112, 112, 101, 114, 39, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 51, 52, 45, 49, 53, 45, 49, 50, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 115, 116, 101, 112, 112, 105, 110, 103, 39, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 51, 52, 45, 49, 53, 45, 49, 50, 51, 52, 45, 49, 50, 51, 52, 45, 51, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 116, 101, 109, 112, 101, 114, 101, 100, 39, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 51, 52, 53, 45, 49, 53, 45, 49, 51, 52, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 50, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 116, 105, 109, 101, 39, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 53, 45, 50, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 119, 105, 116, 116, 101, 100, 39, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 52, 53, 54, 45, 50, 52, 45, 50, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 119, 105, 116, 116, 101, 100, 108, 121, 39, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 52, 53, 54, 45, 50, 52, 45, 50, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 119, 105, 116, 116, 101, 100, 110, 101, 115, 115, 39, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 50, 52, 53, 54, 45, 50, 52, 45, 50, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 54, 45, 53, 54, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 113, 117, 105, 99, 107, 121, 39, 115, 32, 32, 49, 50, 51, 52, 53, 45, 49, 51, 45, 49, 51, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 97, 100, 97, 99, 114, 111, 115, 115, 39, 115, 32, 32, 49, 50, 51, 53, 45, 50, 45, 49, 52, 53, 45, 49, 45, 49, 52, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 98, 114, 97, 105, 108, 108, 101, 39, 115, 32, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 98, 114, 97, 105, 108, 108, 101, 100, 39, 115, 32, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 98, 114, 97, 105, 108, 108, 101, 114, 39, 115, 32, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 99, 101, 105, 118, 101, 100, 39, 115, 32, 32, 49, 50, 51, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 99, 101, 105, 118, 101, 114, 39, 115, 32, 32, 49, 50, 51, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 99, 101, 105, 118, 101, 114, 115, 104, 105, 112, 39, 115, 32, 32, 49, 50, 51, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 45, 49, 52, 54, 45, 50, 52, 45, 49, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 106, 111, 105, 99, 101, 100, 39, 115, 32, 32, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 106, 111, 105, 99, 101, 102, 117, 108, 39, 115, 32, 32, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 53, 54, 45, 49, 50, 51, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 106, 111, 105, 99, 101, 102, 117, 108, 108, 121, 39, 115, 32, 32, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 53, 54, 45, 49, 50, 51, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 106, 111, 105, 99, 101, 102, 117, 108, 110, 101, 115, 115, 39, 115, 32, 32, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 53, 54, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 106, 111, 105, 99, 101, 114, 39, 115, 32, 32, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 106, 111, 105, 99, 105, 110, 103, 108, 121, 39, 115, 32, 32, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 49, 50, 52, 53, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 108, 101, 116, 116, 101, 114, 39, 115, 32, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 108, 101, 116, 116, 101, 114, 101, 100, 39, 115, 32, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 108, 101, 116, 116, 101, 114, 105, 110, 103, 39, 115, 32, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 45, 49, 50, 51, 53, 45, 51, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 101, 112, 97, 105, 100, 39, 115, 32, 32, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 52, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 105, 103, 104, 116, 97, 98, 111, 117, 116, 39, 115, 32, 32, 53, 45, 49, 50, 51, 53, 45, 49, 45, 49, 50, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 111, 117, 110, 100, 97, 98, 111, 117, 116, 39, 115, 32, 32, 49, 50, 51, 53, 45, 52, 54, 45, 49, 52, 53, 45, 49, 45, 49, 50, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 111, 117, 115, 116, 97, 98, 111, 117, 116, 39, 115, 32, 32, 49, 50, 51, 53, 45, 49, 50, 53, 54, 45, 51, 52, 45, 49, 45, 49, 50, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 114, 117, 110, 97, 98, 111, 117, 116, 39, 115, 32, 32, 49, 50, 51, 53, 45, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 45, 49, 50, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 97, 105, 100, 101, 115, 116, 39, 115, 32, 32, 50, 51, 52, 45, 49, 52, 53, 45, 49, 53, 45, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 97, 105, 100, 115, 116, 39, 115, 32, 32, 50, 51, 52, 45, 49, 52, 53, 45, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 99, 97, 116, 116, 101, 114, 103, 111, 111, 100, 39, 115, 32, 32, 50, 51, 52, 45, 49, 52, 45, 49, 45, 50, 51, 52, 53, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 54, 45, 49, 50, 52, 53, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 99, 104, 111, 111, 108, 99, 104, 105, 108, 100, 114, 101, 110, 39, 115, 32, 32, 50, 51, 52, 45, 49, 54, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 54, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 99, 104, 111, 111, 108, 102, 114, 105, 101, 110, 100, 39, 115, 32, 32, 50, 51, 52, 45, 49, 54, 45, 49, 51, 53, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 104, 111, 117, 108, 100, 39, 118, 101, 39, 115, 32, 32, 49, 52, 54, 45, 49, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 104, 111, 117, 108, 100, 97, 39, 115, 32, 32, 49, 52, 54, 45, 49, 52, 53, 45, 49, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 104, 111, 117, 108, 100, 101, 115, 116, 39, 115, 32, 32, 49, 52, 54, 45, 49, 52, 53, 45, 49, 53, 45, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 104, 111, 117, 108, 100, 110, 39, 116, 39, 115, 32, 32, 49, 52, 54, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 104, 111, 117, 108, 100, 110, 39, 116, 39, 118, 101, 39, 115, 32, 32, 49, 52, 54, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 104, 111, 117, 108, 100, 115, 116, 39, 115, 32, 32, 49, 52, 54, 45, 49, 52, 53, 45, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 110, 111, 119, 98, 108, 105, 110, 100, 39, 115, 32, 32, 50, 51, 52, 45, 49, 51, 52, 53, 45, 50, 52, 54, 45, 49, 50, 45, 49, 50, 51, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 110, 111, 119, 98, 108, 105, 110, 100, 110, 101, 115, 115, 39, 115, 32, 32, 50, 51, 52, 45, 49, 51, 52, 53, 45, 50, 52, 54, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 110, 111, 119, 98, 108, 105, 110, 100, 110, 101, 115, 115, 101, 115, 39, 115, 32, 32, 50, 51, 52, 45, 49, 51, 52, 53, 45, 50, 52, 54, 45, 49, 50, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 111, 109, 101, 115, 117, 99, 104, 39, 115, 32, 32, 53, 45, 50, 51, 52, 45, 50, 51, 52, 45, 49, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 111, 117, 116, 104, 97, 98, 111, 117, 116, 39, 115, 32, 32, 50, 51, 52, 45, 49, 50, 53, 54, 45, 49, 52, 53, 54, 45, 49, 45, 49, 50, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 116, 101, 112, 99, 104, 105, 108, 100, 114, 101, 110, 39, 115, 32, 32, 51, 52, 45, 49, 53, 45, 49, 50, 51, 52, 45, 49, 54, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 116, 105, 114, 97, 98, 111, 117, 116, 39, 115, 32, 32, 51, 52, 45, 50, 52, 45, 49, 50, 51, 53, 45, 49, 45, 49, 50, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 117, 99, 104, 108, 105, 107, 101, 39, 115, 32, 32, 50, 51, 52, 45, 49, 54, 45, 49, 50, 51, 45, 50, 52, 45, 49, 51, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 117, 112, 101, 114, 103, 111, 111, 100, 39, 115, 32, 32, 50, 51, 52, 45, 49, 51, 54, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 50, 52, 53, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 115, 117, 112, 101, 114, 113, 117, 105, 99, 107, 39, 115, 32, 32, 50, 51, 52, 45, 49, 51, 54, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 50, 51, 52, 53, 45, 49, 51, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 97, 105, 108, 102, 105, 114, 115, 116, 39, 115, 32, 32, 50, 51, 52, 53, 45, 49, 45, 50, 52, 45, 49, 50, 51, 45, 49, 50, 52, 45, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 101, 114, 101, 97, 98, 111, 117, 116, 39, 115, 32, 32, 53, 45, 50, 51, 52, 54, 45, 49, 45, 49, 50, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 101, 114, 101, 97, 102, 116, 101, 114, 39, 115, 32, 32, 53, 45, 50, 51, 52, 54, 45, 49, 45, 49, 50, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 101, 114, 101, 97, 103, 97, 105, 110, 39, 115, 32, 32, 53, 45, 50, 51, 52, 54, 45, 49, 45, 49, 50, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 101, 114, 101, 97, 103, 97, 105, 110, 115, 116, 39, 115, 32, 32, 53, 45, 50, 51, 52, 54, 45, 49, 45, 49, 50, 52, 53, 45, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 101, 114, 101, 105, 110, 97, 102, 116, 101, 114, 39, 115, 32, 32, 53, 45, 50, 51, 52, 54, 45, 51, 53, 45, 49, 45, 49, 50, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 104, 101, 114, 101, 105, 110, 97, 103, 97, 105, 110, 39, 115, 32, 32, 53, 45, 50, 51, 52, 54, 45, 51, 53, 45, 49, 45, 49, 50, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 111, 103, 101, 116, 104, 101, 114, 110, 101, 115, 115, 39, 115, 32, 32, 50, 51, 52, 53, 45, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 53, 54, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 116, 117, 114, 110, 97, 98, 111, 117, 116, 39, 115, 32, 32, 50, 51, 52, 53, 45, 49, 51, 54, 45, 49, 50, 51, 53, 45, 49, 51, 52, 53, 45, 49, 45, 49, 50, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 97, 99, 99, 111, 114, 100, 105, 110, 103, 39, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 45, 49, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 97, 99, 99, 111, 114, 100, 105, 110, 103, 108, 121, 39, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 45, 49, 52, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 98, 108, 105, 110, 100, 102, 111, 108, 100, 39, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 45, 49, 50, 51, 45, 49, 50, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 98, 108, 105, 110, 100, 102, 111, 108, 100, 101, 100, 39, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 45, 49, 50, 51, 45, 49, 50, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 45, 49, 50, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 98, 108, 105, 110, 100, 102, 111, 108, 100, 105, 110, 103, 39, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 45, 49, 50, 51, 45, 49, 50, 52, 45, 49, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 45, 51, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 98, 114, 97, 105, 108, 108, 101, 39, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 98, 114, 97, 105, 108, 108, 101, 100, 39, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 100, 101, 99, 101, 105, 118, 101, 39, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 100, 101, 99, 101, 105, 118, 101, 100, 39, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 100, 101, 99, 101, 105, 118, 101, 114, 39, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 100, 101, 99, 101, 105, 118, 105, 110, 103, 39, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 100, 101, 99, 108, 97, 114, 101, 39, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 100, 101, 99, 108, 97, 114, 101, 100, 39, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 52, 53, 45, 49, 52, 45, 49, 50, 51, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 100, 101, 114, 112, 97, 105, 100, 39, 115, 32, 32, 53, 45, 49, 51, 54, 45, 49, 50, 51, 52, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 102, 114, 105, 101, 110, 100, 39, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 102, 114, 105, 101, 110, 100, 108, 105, 101, 114, 39, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 45, 49, 50, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 102, 114, 105, 101, 110, 100, 108, 105, 101, 115, 116, 39, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 45, 49, 53, 45, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 102, 114, 105, 101, 110, 100, 108, 105, 110, 101, 115, 115, 39, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 45, 53, 54, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 102, 114, 105, 101, 110, 100, 108, 105, 110, 101, 115, 115, 101, 115, 39, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 50, 52, 45, 53, 54, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 102, 114, 105, 101, 110, 100, 108, 121, 39, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 108, 101, 116, 116, 101, 114, 101, 100, 39, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 110, 101, 99, 101, 115, 115, 97, 114, 121, 39, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 51, 52, 53, 45, 49, 53, 45, 49, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 112, 97, 105, 100, 39, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 52, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 112, 101, 114, 99, 101, 105, 118, 101, 39, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32]);
fileData263.push.apply(fileData263, [119, 111, 114, 100, 32, 117, 110, 112, 101, 114, 99, 101, 105, 118, 101, 100, 39, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 112, 101, 114, 99, 101, 105, 118, 105, 110, 103, 39, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 52, 45, 49, 50, 52, 53, 54, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 50, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 113, 117, 105, 99, 107, 39, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 52, 53, 45, 49, 51, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 114, 101, 99, 101, 105, 118, 101, 100, 39, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 53, 45, 49, 52, 45, 49, 50, 51, 54, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 114, 101, 106, 111, 105, 99, 101, 39, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 114, 101, 106, 111, 105, 99, 101, 100, 39, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 114, 101, 106, 111, 105, 99, 101, 102, 117, 108, 39, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 53, 54, 45, 49, 50, 51, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 114, 101, 106, 111, 105, 99, 101, 102, 117, 108, 108, 121, 39, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 53, 54, 45, 49, 50, 51, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 114, 101, 106, 111, 105, 99, 101, 102, 117, 108, 110, 101, 115, 115, 39, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 53, 54, 45, 49, 50, 51, 45, 53, 54, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 114, 101, 106, 111, 105, 99, 101, 114, 39, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 114, 101, 106, 111, 105, 99, 105, 110, 103, 39, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 49, 50, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 114, 101, 106, 111, 105, 99, 105, 110, 103, 108, 121, 39, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 53, 45, 50, 52, 53, 45, 49, 52, 45, 49, 50, 52, 53, 45, 49, 50, 51, 45, 49, 51, 52, 53, 54, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 114, 101, 112, 97, 105, 100, 39, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 49, 50, 51, 53, 45, 49, 53, 45, 49, 50, 51, 52, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 117, 110, 115, 97, 105, 100, 39, 115, 32, 32, 49, 51, 54, 45, 49, 51, 52, 53, 45, 50, 51, 52, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 97, 108, 107, 97, 98, 111, 117, 116, 39, 115, 32, 32, 50, 52, 53, 54, 45, 49, 45, 49, 50, 51, 45, 49, 51, 45, 49, 45, 49, 50, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 101, 108, 108, 112, 97, 105, 100, 39, 115, 32, 32, 50, 52, 53, 54, 45, 49, 53, 45, 49, 50, 51, 45, 49, 50, 51, 45, 49, 50, 51, 52, 45, 49, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 101, 115, 116, 97, 98, 111, 117, 116, 39, 115, 32, 32, 50, 52, 53, 54, 45, 49, 53, 45, 51, 52, 45, 49, 45, 49, 50, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 104, 101, 114, 101, 97, 98, 111, 117, 116, 39, 115, 32, 32, 53, 45, 49, 53, 54, 45, 49, 45, 49, 50, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 104, 101, 114, 101, 97, 102, 116, 101, 114, 39, 115, 32, 32, 53, 45, 49, 53, 54, 45, 49, 45, 49, 50, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 104, 101, 114, 101, 97, 103, 97, 105, 110, 39, 115, 32, 32, 53, 45, 49, 53, 54, 45, 49, 45, 49, 50, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 104, 101, 114, 101, 97, 103, 97, 105, 110, 115, 116, 39, 115, 32, 32, 53, 45, 49, 53, 54, 45, 49, 45, 49, 50, 52, 53, 45, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 104, 101, 114, 101, 105, 110, 97, 102, 116, 101, 114, 39, 115, 32, 32, 53, 45, 49, 53, 54, 45, 51, 53, 45, 49, 45, 49, 50, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 104, 101, 114, 101, 105, 110, 97, 103, 97, 105, 110, 39, 115, 32, 32, 53, 45, 49, 53, 54, 45, 51, 53, 45, 49, 45, 49, 50, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 111, 109, 97, 110, 102, 114, 105, 101, 110, 100, 39, 115, 32, 32, 50, 52, 53, 54, 45, 49, 51, 53, 45, 49, 51, 52, 45, 49, 45, 49, 51, 52, 53, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 111, 109, 101, 110, 102, 114, 105, 101, 110, 100, 115, 39, 115, 32, 32, 50, 52, 53, 54, 45, 49, 51, 53, 45, 49, 51, 52, 45, 50, 54, 45, 49, 50, 52, 45, 49, 50, 51, 53, 45, 50, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 111, 117, 108, 100, 39, 118, 101, 39, 115, 32, 32, 50, 52, 53, 54, 45, 49, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 111, 117, 108, 100, 97, 39, 115, 32, 32, 50, 52, 53, 54, 45, 49, 52, 53, 45, 49, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 111, 117, 108, 100, 101, 115, 116, 39, 115, 32, 32, 50, 52, 53, 54, 45, 49, 52, 53, 45, 49, 53, 45, 51, 52, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 111, 117, 108, 100, 110, 39, 116, 39, 115, 32, 32, 50, 52, 53, 54, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 111, 117, 108, 100, 110, 39, 116, 39, 118, 101, 39, 115, 32, 32, 50, 52, 53, 54, 45, 49, 52, 53, 45, 49, 51, 52, 53, 45, 51, 45, 50, 51, 52, 53, 45, 51, 45, 49, 50, 51, 54, 45, 49, 53, 45, 51, 45, 50, 51, 52, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 111, 117, 108, 100, 115, 116, 39, 115, 32, 32, 50, 52, 53, 54, 45, 49, 52, 53, 45, 51, 52, 45, 51, 45, 50, 51, 52, 10, 10, 110, 111, 102, 111, 114, 32, 119, 111, 114, 100, 32, 119, 104, 101, 114, 101, 97, 98, 111, 117, 116, 115, 39, 115, 32, 32, 53, 45, 49, 53, 54, 45, 49, 45, 49, 50, 45, 50, 51, 52, 45, 50, 51, 52, 10, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 97, 98, 102, 97, 99, 101, 32, 32, 32, 32, 32, 32, 97, 98, 111, 117, 116, 102, 97, 99, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 97, 98, 116, 117, 114, 110, 32, 32, 32, 32, 32, 32, 97, 98, 111, 117, 116, 116, 117, 114, 110, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 97, 99, 108, 121, 32, 32, 32, 32, 32, 32, 32, 32, 97, 99, 99, 111, 114, 100, 105, 110, 103, 108, 121, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 97, 102, 98, 97, 116, 116, 108, 101, 32, 32, 32, 32, 97, 102, 116, 101, 114, 98, 97, 116, 116, 108, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 97, 102, 98, 117, 114, 110, 32, 32, 32, 32, 32, 32, 97, 102, 116, 101, 114, 98, 117, 114, 110, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 97, 102, 99, 108, 97, 112, 32, 32, 32, 32, 32, 32, 97, 102, 116, 101, 114, 99, 108, 97, 112, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 97, 102, 100, 97, 109, 112, 32, 32, 32, 32, 32, 32, 97, 102, 116, 101, 114, 100, 97, 109, 112, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 97, 102, 100, 101, 99, 107, 32, 32, 32, 32, 32, 32, 97, 102, 116, 101, 114, 100, 101, 99, 107, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 97, 102, 103, 97, 109, 101, 32, 32, 32, 32, 32, 32, 97, 102, 116, 101, 114, 103, 97, 109, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 97, 102, 108, 105, 102, 101, 32, 32, 32, 32, 32, 32, 97, 102, 116, 101, 114, 108, 105, 102, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 97, 102, 108, 105, 118, 101, 115, 32, 32, 32, 32, 32, 97, 102, 116, 101, 114, 108, 105, 118, 101, 115, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 97, 102, 110, 116, 101, 97, 32, 32, 32, 32, 32, 32, 97, 102, 116, 101, 114, 110, 111, 111, 110, 116, 101, 97, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 97, 102, 112, 105, 101, 99, 101, 32, 32, 32, 32, 32, 97, 102, 116, 101, 114, 112, 105, 101, 99, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 97, 102, 112, 108, 97, 121, 32, 32, 32, 32, 32, 32, 97, 102, 116, 101, 114, 112, 108, 97, 121, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 97, 102, 115, 97, 108, 101, 32, 32, 32, 32, 32, 32, 97, 102, 116, 101, 114, 115, 97, 108, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 97, 102, 116, 97, 120, 32, 32, 32, 32, 32, 32, 32, 97, 102, 116, 101, 114, 116, 97, 120, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 97, 102, 116, 97, 120, 101, 115, 32, 32, 32, 32, 32, 97, 102, 116, 101, 114, 116, 97, 120, 101, 115, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 97, 102, 116, 101, 97, 32, 32, 32, 32, 32, 32, 32, 97, 102, 116, 101, 114, 116, 101, 97, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 98, 108, 102, 111, 108, 100, 32, 32, 32, 32, 32, 32, 98, 108, 105, 110, 100, 102, 111, 108, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 98, 108, 108, 121, 32, 32, 32, 32, 32, 32, 32, 32, 98, 108, 105, 110, 100, 108, 121, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 98, 108, 109, 97, 110, 32, 32, 32, 32, 32, 32, 32, 98, 108, 105, 110, 100, 109, 97, 110, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 98, 108, 115, 105, 100, 101, 32, 32, 32, 32, 32, 32, 98, 108, 105, 110, 100, 115, 105, 100, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 98, 108, 119, 111, 114, 109, 32, 32, 32, 32, 32, 32, 98, 108, 105, 110, 100, 119, 111, 114, 109, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 98, 108, 111, 111, 100, 108, 114, 32, 32, 32, 32, 32, 98, 108, 111, 111, 100, 108, 101, 116, 116, 101, 114, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 98, 111, 121, 102, 114, 32, 32, 32, 32, 32, 32, 32, 98, 111, 121, 102, 114, 105, 101, 110, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 98, 114, 108, 100, 32, 32, 32, 32, 32, 32, 32, 32, 98, 114, 97, 105, 108, 108, 101, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 98, 114, 108, 114, 32, 32, 32, 32, 32, 32, 32, 32, 98, 114, 97, 105, 108, 108, 101, 114, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 98, 114, 108, 121, 32, 32, 32, 32, 32, 32, 32, 32, 98, 114, 97, 105, 108, 108, 101, 121, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 99, 111, 108, 111, 114, 98, 108, 32, 32, 32, 32, 32, 99, 111, 108, 111, 114, 98, 108, 105, 110, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 99, 100, 97, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 117, 108, 100, 97, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 100, 99, 118, 100, 32, 32, 32, 32, 32, 32, 32, 32, 100, 101, 99, 101, 105, 118, 101, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 100, 99, 118, 114, 32, 32, 32, 32, 32, 32, 32, 32, 100, 101, 99, 101, 105, 118, 101, 114, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 100, 99, 108, 100, 32, 32, 32, 32, 32, 32, 32, 32, 100, 101, 99, 108, 97, 114, 101, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 100, 99, 108, 114, 32, 32, 32, 32, 32, 32, 32, 32, 100, 101, 99, 108, 97, 114, 101, 114, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 100, 101, 102, 114, 32, 32, 32, 32, 32, 32, 32, 32, 100, 101, 102, 114, 105, 101, 110, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 100, 101, 102, 114, 32, 32, 32, 32, 32, 32, 32, 32, 100, 101, 102, 114, 105, 101, 110, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 102, 101, 101, 108, 103, 100, 32, 32, 32, 32, 32, 32, 102, 101, 101, 108, 103, 111, 111, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 102, 114, 108, 105, 101, 115, 32, 32, 32, 32, 32, 32, 102, 114, 105, 101, 110, 100, 108, 105, 101, 115, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 102, 114, 108, 121, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 105, 101, 110, 100, 108, 121, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 103, 97, 100, 97, 98, 32, 32, 32, 32, 32, 32, 32, 103, 97, 100, 97, 98, 111, 117, 116, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 103, 97, 108, 102, 114, 32, 32, 32, 32, 32, 32, 32, 103, 97, 108, 102, 114, 105, 101, 110, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 103, 105, 114, 108, 102, 114, 32, 32, 32, 32, 32, 32, 103, 105, 114, 108, 102, 114, 105, 101, 110, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 103, 100, 97, 102, 110, 32, 32, 32, 32, 32, 32, 32, 103, 111, 111, 100, 97, 102, 116, 101, 114, 110, 111, 111, 110, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 103, 100, 98, 121, 32, 32, 32, 32, 32, 32, 32, 32, 103, 111, 111, 100, 98, 121, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 103, 100, 98, 121, 101, 32, 32, 32, 32, 32, 32, 32, 103, 111, 111, 100, 98, 121, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 103, 100, 104, 117, 109, 111, 114, 32, 32, 32, 32, 32, 103, 111, 111, 100, 104, 117, 109, 111, 114, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 103, 100, 105, 101, 32, 32, 32, 32, 32, 32, 32, 32, 103, 111, 111, 100, 105, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 103, 100, 108, 111, 111, 107, 32, 32, 32, 32, 32, 32, 103, 111, 111, 100, 108, 111, 111, 107, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 103, 100, 108, 121, 32, 32, 32, 32, 32, 32, 32, 32, 103, 111, 111, 100, 108, 121, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 103, 100, 109, 97, 110, 32, 32, 32, 32, 32, 32, 32, 103, 111, 111, 100, 109, 97, 110, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 103, 100, 110, 97, 116, 117, 114, 101, 32, 32, 32, 32, 103, 111, 111, 100, 110, 97, 116, 117, 114, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 103, 100, 115, 105, 122, 101, 32, 32, 32, 32, 32, 32, 103, 111, 111, 100, 115, 105, 122, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 103, 100, 117, 110, 32, 32, 32, 32, 32, 32, 32, 32, 103, 111, 111, 100, 117, 110, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 103, 100, 119, 105, 102, 101, 32, 32, 32, 32, 32, 32, 103, 111, 111, 100, 119, 105, 102, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 103, 100, 119, 105, 108, 108, 32, 32, 32, 32, 32, 32, 103, 111, 111, 100, 119, 105, 108, 108, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 103, 100, 119, 105, 118, 101, 115, 32, 32, 32, 32, 32, 103, 111, 111, 100, 119, 105, 118, 101, 115, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 103, 100, 121, 32, 32, 32, 32, 32, 32, 32, 32, 32, 103, 111, 111, 100, 121, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 103, 114, 116, 97, 117, 110, 116, 32, 32, 32, 32, 32, 103, 114, 101, 97, 116, 97, 117, 110, 116, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 103, 114, 116, 99, 105, 114, 99, 108, 101, 32, 32, 32, 103, 114, 101, 97, 116, 99, 105, 114, 99, 108, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 103, 114, 116, 99, 111, 97, 116, 32, 32, 32, 32, 32, 103, 114, 101, 97, 116, 99, 111, 97, 116, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 103, 114, 116, 108, 121, 32, 32, 32, 32, 32, 32, 32, 103, 114, 101, 97, 116, 108, 121, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 103, 114, 116, 110, 101, 112, 104, 101, 119, 32, 32, 32, 103, 114, 101, 97, 116, 110, 101, 112, 104, 101, 119, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 103, 114, 116, 110, 105, 101, 99, 101, 32, 32, 32, 32, 103, 114, 101, 97, 116, 110, 105, 101, 99, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 103, 114, 116, 117, 110, 99, 108, 101, 32, 32, 32, 32, 103, 114, 101, 97, 116, 117, 110, 99, 108, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 103, 117, 121, 102, 114, 32, 32, 32, 32, 32, 32, 32, 103, 117, 121, 102, 114, 105, 101, 110, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 104, 97, 116, 101, 108, 114, 32, 32, 32, 32, 32, 32, 104, 97, 116, 101, 108, 101, 116, 116, 101, 114, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 104, 109, 98, 111, 32, 32, 32, 32, 32, 32, 32, 32, 104, 105, 109, 98, 111, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 104, 109, 98, 111, 101, 115, 32, 32, 32, 32, 32, 32, 104, 105, 109, 98, 111, 101, 115, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 105, 108, 108, 112, 100, 32, 32, 32, 32, 32, 32, 32, 105, 108, 108, 112, 97, 105, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 105, 109, 109, 108, 121, 32, 32, 32, 32, 32, 32, 32, 105, 109, 109, 101, 100, 105, 97, 116, 101, 108, 121, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 107, 110, 111, 99, 107, 97, 98, 32, 32, 32, 32, 32, 107, 110, 111, 99, 107, 97, 98, 111, 117, 116, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 108, 97, 100, 121, 102, 114, 32, 32, 32, 32, 32, 32, 108, 97, 100, 121, 102, 114, 105, 101, 110, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 108, 97, 121, 97, 98, 32, 32, 32, 32, 32, 32, 32, 108, 97, 121, 97, 98, 111, 117, 116, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 108, 114, 98, 111, 100, 105, 101, 115, 32, 32, 32, 32, 108, 101, 116, 116, 101, 114, 98, 111, 100, 105, 101, 115, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 108, 114, 98, 111, 100, 121, 32, 32, 32, 32, 32, 32, 108, 101, 116, 116, 101, 114, 98, 111, 100, 121, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 108, 114, 98, 111, 109, 98, 32, 32, 32, 32, 32, 32, 108, 101, 116, 116, 101, 114, 98, 111, 109, 98, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 108, 114, 98, 111, 120, 32, 32, 32, 32, 32, 32, 32, 108, 101, 116, 116, 101, 114, 98, 111, 120, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 108, 114, 98, 111, 120, 101, 115, 32, 32, 32, 32, 32, 108, 101, 116, 116, 101, 114, 98, 111, 120, 101, 115, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 108, 114, 109, 97, 110, 32, 32, 32, 32, 32, 32, 32, 108, 101, 116, 116, 101, 114, 109, 97, 110, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 108, 114, 112, 114, 101, 115, 115, 32, 32, 32, 32, 32, 108, 101, 116, 116, 101, 114, 112, 114, 101, 115, 115, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 108, 114, 112, 114, 101, 115, 115, 101, 115, 32, 32, 32, 108, 101, 116, 116, 101, 114, 112, 114, 101, 115, 115, 101, 115, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 108, 114, 115, 112, 97, 99, 101, 32, 32, 32, 32, 32, 108, 101, 116, 116, 101, 114, 115, 112, 97, 99, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 108, 114, 116, 101, 120, 116, 32, 32, 32, 32, 32, 32, 108, 101, 116, 116, 101, 114, 116, 101, 120, 116, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 108, 108, 100, 32, 32, 32, 32, 32, 32, 32, 32, 32, 108, 105, 116, 116, 108, 101, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 108, 108, 110, 101, 99, 107, 32, 32, 32, 32, 32, 32, 108, 105, 116, 116, 108, 101, 110, 101, 99, 107, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 108, 108, 114, 32, 32, 32, 32, 32, 32, 32, 32, 32, 108, 105, 116, 116, 108, 101, 114, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 108, 111, 118, 101, 108, 114, 32, 32, 32, 32, 32, 32, 108, 111, 118, 101, 108, 101, 116, 116, 101, 114, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 109, 97, 110, 102, 114, 32, 32, 32, 32, 32, 32, 32, 109, 97, 110, 102, 114, 105, 101, 110, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 109, 105, 100, 97, 102, 110, 32, 32, 32, 32, 32, 32, 109, 105, 100, 97, 102, 116, 101, 114, 110, 111, 111, 110, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 109, 105, 115, 98, 114, 108, 32, 32, 32, 32, 32, 32, 109, 105, 115, 98, 114, 97, 105, 108, 108, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 109, 105, 115, 98, 114, 108, 100, 32, 32, 32, 32, 32, 109, 105, 115, 98, 114, 97, 105, 108, 108, 101, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 109, 105, 115, 115, 100, 32, 32, 32, 32, 32, 32, 32, 109, 105, 115, 115, 97, 105, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 110, 101, 119, 115, 108, 114, 32, 32, 32, 32, 32, 32, 110, 101, 119, 115, 108, 101, 116, 116, 101, 114, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 112, 111, 111, 114, 108, 121, 112, 100, 32, 32, 32, 32, 112, 111, 111, 114, 108, 121, 112, 97, 105, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 112, 114, 99, 118, 32, 32, 32, 32, 32, 32, 32, 32, 112, 114, 101, 99, 101, 105, 118, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 112, 114, 99, 118, 114, 32, 32, 32, 32, 32, 32, 32, 112, 114, 101, 99, 101, 105, 118, 101, 114, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 112, 114, 99, 118, 103, 32, 32, 32, 32, 32, 32, 32, 112, 114, 101, 99, 101, 105, 118, 105, 110, 103, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 112, 114, 101, 112, 100, 32, 32, 32, 32, 32, 32, 32, 112, 114, 101, 112, 97, 105, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 112, 117, 114, 98, 108, 32, 32, 32, 32, 32, 32, 32, 112, 117, 114, 98, 108, 105, 110, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 112, 117, 114, 98, 108, 108, 121, 32, 32, 32, 32, 32, 112, 117, 114, 98, 108, 105, 110, 100, 108, 121, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 113, 107, 100, 114, 97, 119, 32, 32, 32, 32, 32, 32, 113, 117, 105, 99, 107, 100, 114, 97, 119, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 113, 107, 102, 105, 114, 101, 32, 32, 32, 32, 32, 32, 113, 117, 105, 99, 107, 102, 105, 114, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 113, 107, 102, 114, 101, 101, 122, 101, 32, 32, 32, 32, 113, 117, 105, 99, 107, 102, 114, 101, 101, 122, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 113, 107, 102, 114, 111, 122, 101, 32, 32, 32, 32, 32, 113, 117, 105, 99, 107, 102, 114, 111, 122, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 113, 107, 105, 101, 32, 32, 32, 32, 32, 32, 32, 32, 113, 117, 105, 99, 107, 105, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 113, 107, 108, 105, 109, 101, 32, 32, 32, 32, 32, 32, 113, 117, 105, 99, 107, 108, 105, 109, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 113, 107, 108, 121, 32, 32, 32, 32, 32, 32, 32, 32, 113, 117, 105, 99, 107, 108, 121, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 113, 107, 115, 101, 116, 32, 32, 32, 32, 32, 32, 32, 113, 117, 105, 99, 107, 115, 101, 116, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 113, 107, 115, 110, 97, 112, 32, 32, 32, 32, 32, 32, 113, 117, 105, 99, 107, 115, 110, 97, 112, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 113, 107, 121, 32, 32, 32, 32, 32, 32, 32, 32, 32, 113, 117, 105, 99, 107, 121, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 114, 101, 98, 114, 108, 32, 32, 32, 32, 32, 32, 32, 114, 101, 98, 114, 97, 105, 108, 108, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 114, 101, 98, 114, 108, 100, 32, 32, 32, 32, 32, 32, 114, 101, 98, 114, 97, 105, 108, 108, 101, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 114, 101, 98, 114, 108, 114, 32, 32, 32, 32, 32, 32, 114, 101, 98, 114, 97, 105, 108, 108, 101, 114, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 114, 99, 118, 100, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 99, 101, 105, 118, 101, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 114, 99, 118, 114, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 99, 101, 105, 118, 101, 114, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 114, 106, 99, 100, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 106, 111, 105, 99, 101, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 114, 106, 99, 114, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 106, 111, 105, 99, 101, 114, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 114, 106, 99, 103, 108, 121, 32, 32, 32, 32, 32, 32, 114, 101, 106, 111, 105, 99, 105, 110, 103, 108, 121, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 114, 101, 108, 114, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 108, 101, 116, 116, 101, 114, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 114, 101, 112, 100, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 112, 97, 105, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 114, 117, 110, 97, 98, 32, 32, 32, 32, 32, 32, 32, 114, 117, 110, 97, 98, 111, 117, 116, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 116, 117, 114, 110, 97, 98, 32, 32, 32, 32, 32, 32, 116, 117, 114, 110, 97, 98, 111, 117, 116, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 117, 110, 97, 99, 32, 32, 32, 32, 32, 32, 32, 32, 117, 110, 97, 99, 99, 111, 114, 100, 105, 110, 103, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 117, 110, 97, 99, 108, 121, 32, 32, 32, 32, 32, 32, 117, 110, 97, 99, 99, 111, 114, 100, 105, 110, 103, 108, 121, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 117, 110, 98, 108, 102, 111, 108, 100, 32, 32, 32, 32, 117, 110, 98, 108, 105, 110, 100, 102, 111, 108, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 117, 110, 98, 114, 108, 32, 32, 32, 32, 32, 32, 32, 117, 110, 98, 114, 97, 105, 108, 108, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 117, 110, 98, 114, 108, 100, 32, 32, 32, 32, 32, 32, 117, 110, 98, 114, 97, 105, 108, 108, 101, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 117, 110, 100, 99, 118, 32, 32, 32, 32, 32, 32, 32, 117, 110, 100, 101, 99, 101, 105, 118, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 117, 110, 100, 99, 118, 100, 32, 32, 32, 32, 32, 32, 117, 110, 100, 101, 99, 101, 105, 118, 101, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 117, 110, 100, 99, 118, 114, 32, 32, 32, 32, 32, 32, 117, 110, 100, 101, 99, 101, 105, 118, 101, 114, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 117, 110, 100, 99, 118, 103, 32, 32, 32, 32, 32, 32, 117, 110, 100, 101, 99, 101, 105, 118, 105, 110, 103, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 117, 110, 100, 99, 108, 32, 32, 32, 32, 32, 32, 32, 117, 110, 100, 101, 99, 108, 97, 114, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 117, 110, 100, 99, 108, 100, 32, 32, 32, 32, 32, 32, 117, 110, 100, 101, 99, 108, 97, 114, 101, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 117, 110, 102, 114, 32, 32, 32, 32, 32, 32, 32, 32, 117, 110, 102, 114, 105, 101, 110, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 117, 110, 102, 114, 108, 121, 32, 32, 32, 32, 32, 32, 117, 110, 102, 114, 105, 101, 110, 100, 108, 121, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 117, 110, 110, 101, 99, 32, 32, 32, 32, 32, 32, 32, 117, 110, 110, 101, 99, 101, 115, 115, 97, 114, 121, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 117, 110, 112, 100, 32, 32, 32, 32, 32, 32, 32, 32, 117, 110, 112, 97, 105, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 117, 110, 113, 107, 32, 32, 32, 32, 32, 32, 32, 32, 117, 110, 113, 117, 105, 99, 107, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 117, 110, 114, 99, 118, 100, 32, 32, 32, 32, 32, 32, 117, 110, 114, 101, 99, 101, 105, 118, 101, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 117, 110, 114, 106, 99, 32, 32, 32, 32, 32, 32, 32, 117, 110, 114, 101, 106, 111, 105, 99, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 117, 110, 114, 106, 99, 100, 32, 32, 32, 32, 32, 32, 117, 110, 114, 101, 106, 111, 105, 99, 101, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 117, 110, 114, 106, 99, 114, 32, 32, 32, 32, 32, 32, 117, 110, 114, 101, 106, 111, 105, 99, 101, 114, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 117, 110, 114, 106, 99, 103, 32, 32, 32, 32, 32, 32, 117, 110, 114, 101, 106, 111, 105, 99, 105, 110, 103, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 117, 110, 114, 106, 99, 103, 108, 121, 32, 32, 32, 32, 117, 110, 114, 101, 106, 111, 105, 99, 105, 110, 103, 108, 121, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 117, 110, 114, 101, 112, 100, 32, 32, 32, 32, 32, 32, 117, 110, 114, 101, 112, 97, 105, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 117, 110, 115, 100, 32, 32, 32, 32, 32, 32, 32, 32, 117, 110, 115, 97, 105, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 119, 97, 108, 107, 97, 98, 32, 32, 32, 32, 32, 32, 119, 97, 108, 107, 97, 98, 111, 117, 116, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 119, 101, 108, 108, 112, 100, 32, 32, 32, 32, 32, 32, 119, 101, 108, 108, 112, 97, 105, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 119, 111, 109, 97, 110, 102, 114, 32, 32, 32, 32, 32, 119, 111, 109, 97, 110, 102, 114, 105, 101, 110, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 119, 100, 97, 32, 32, 32, 32, 32, 32, 32, 32, 32, 119, 111, 117, 108, 100, 97, 10, 10, 35, 32, 32, 32, 65, 112, 112, 101, 110, 100, 105, 120, 32, 49, 46, 50, 10, 10, 35, 115, 117, 102, 119, 111, 114, 100, 32, 97, 99, 114, 111, 115, 115, 101, 115, 32, 49, 45, 49, 52, 45, 49, 50, 51, 53, 45, 49, 51, 53, 45, 50, 51, 52, 45, 50, 51, 52, 45, 49, 53, 45, 50, 51, 52, 10, 115, 117, 102, 119, 111, 114, 100, 32, 100, 97, 102, 116, 101, 114, 32, 49, 52, 53, 45, 49, 45, 49, 50, 52, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 100, 114, 97, 102, 116, 101, 114, 32, 49, 52, 53, 45, 49, 50, 51, 53, 45, 49, 45, 49, 50, 52, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 103, 114, 97, 102, 116, 101, 114, 32, 49, 50, 52, 53, 45, 49, 50, 51, 53, 45, 49, 45, 49, 50, 52, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 54, 10, 115, 117, 102, 119, 111, 114, 100, 32, 114, 97, 102, 116, 101, 114, 32, 49, 50, 51, 53, 45, 49, 45, 49, 50, 52, 45, 50, 51, 52, 53, 45, 49, 50, 52, 53, 54, 10, 10, 10, 35, 32, 32, 32, 109, 105, 115, 99, 10, 10, 115, 117, 102, 119, 111, 114, 100, 32, 112, 114, 101, 97, 100, 109, 105, 116, 32, 49, 50, 51, 52, 45, 49, 50, 51, 53, 45, 49, 53, 45, 49, 45, 49, 52, 53, 45, 49, 51, 52, 45, 50, 52, 45, 50, 51, 52, 53, 10, 119, 111, 114, 100, 32, 114, 97, 114, 101, 100, 32, 49, 50, 51, 53, 45, 49, 45, 49, 50, 51, 53, 45, 49, 50, 52, 54, 10, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 98, 108, 100, 103, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 98, 108, 116, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 98, 108, 118, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 108, 108, 98, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 108, 108, 99, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 108, 108, 100, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 108, 108, 112, 10, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 46, 99, 111, 109, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 46, 111, 114, 103, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 46, 103, 111, 118, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 46, 101, 100, 117, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 46, 109, 105, 108, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 46, 110, 101, 116, 10, 10, 119, 111, 114, 100, 32, 32, 32, 115, 111, 109, 101, 115, 99, 104, 32, 50, 51, 52, 45, 49, 51, 53, 45, 49, 51, 52, 45, 49, 53, 45, 50, 51, 52, 45, 49, 52, 45, 49, 50, 53, 10, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 98, 108, 99, 117, 112, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 103, 114, 116, 115, 97, 109, 97, 100, 97, 10, 10, 35, 32, 83, 104, 97, 112, 101, 32, 115, 121, 109, 98, 111, 108, 115, 32, 114, 101, 113, 117, 105, 114, 101, 32, 97, 32, 103, 114, 97, 100, 101, 32, 49, 32, 105, 110, 100, 105, 99, 97, 116, 111, 114, 32, 40, 83, 101, 99, 116, 105, 111, 110, 32, 51, 46, 50, 50, 46, 49, 41, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 92, 120, 50, 53, 97, 48, 32, 226, 150, 160, 32, 102, 105, 108, 108, 101, 100, 32, 40, 115, 111, 108, 105, 100, 41, 32, 115, 113, 117, 97, 114, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 92, 120, 50, 53, 97, 49, 32, 226, 150, 161, 32, 115, 113, 117, 97, 114, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 92, 120, 50, 53, 97, 55, 32, 226, 150, 167, 32, 115, 104, 97, 100, 101, 100, 32, 115, 113, 117, 97, 114, 101, 32, 40, 117, 112, 112, 101, 114, 32, 108, 101, 102, 116, 32, 116, 111, 32, 108, 111, 119, 101, 114, 32, 114, 105, 103, 104, 116, 41, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 92, 120, 50, 53, 98, 50, 32, 226, 150, 178, 32, 102, 105, 108, 108, 101, 100, 32, 40, 115, 111, 108, 105, 100, 41, 32, 40, 101, 113, 117, 105, 108, 97, 116, 101, 114, 97, 108, 41, 32, 116, 114, 105, 97, 110, 103, 108, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 92, 120, 50, 53, 98, 51, 32, 226, 150, 179, 32, 114, 101, 103, 117, 108, 97, 114, 32, 40, 101, 113, 117, 105, 108, 97, 116, 101, 114, 97, 108, 41, 32, 116, 114, 105, 97, 110, 103, 108, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 92, 120, 50, 53, 99, 98, 32, 226, 151, 139, 32, 99, 105, 114, 99, 108, 101, 10, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 32, 92, 120, 50, 53, 99, 100, 32, 226, 151, 141, 32, 115, 104, 97, 100, 101, 100, 32, 99, 105, 114, 99, 108, 101, 10, 10, 10]);
Module['FS_createDataFile']('/', 'en-ueb-g2.ctb', fileData263, true, true, false);
var fileData289 = [];
fileData289.push.apply(fileData289, [35, 32, 108, 105, 98, 108, 111, 117, 105, 115, 58, 32, 69, 110, 103, 108, 105, 115, 104, 32, 40, 85, 110, 105, 102, 105, 101, 100, 41, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 115, 32, 116, 97, 98, 108, 101, 10, 35, 10, 35, 32, 32, 66, 97, 115, 101, 100, 32, 111, 110, 32, 116, 104, 101, 32, 76, 105, 110, 117, 120, 32, 115, 99, 114, 101, 101, 110, 114, 101, 97, 100, 101, 114, 32, 66, 82, 76, 84, 84, 89, 10, 35, 10, 35, 32, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 49, 57, 57, 57, 45, 50, 48, 48, 54, 32, 98, 121, 32, 84, 104, 101, 32, 66, 82, 76, 84, 84, 89, 32, 84, 101, 97, 109, 10, 35, 32, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 48, 52, 45, 50, 48, 48, 54, 32, 86, 105, 101, 119, 80, 108, 117, 115, 32, 84, 101, 99, 104, 110, 111, 108, 111, 103, 105, 101, 115, 44, 32, 73, 110, 99, 46, 32, 119, 119, 119, 46, 118, 105, 101, 119, 112, 108, 117, 115, 46, 99, 111, 109, 10, 35, 32, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 48, 52, 45, 50, 48, 48, 54, 32, 74, 74, 66, 32, 83, 111, 102, 116, 119, 97, 114, 101, 44, 32, 73, 110, 99, 46, 32, 119, 119, 119, 46, 106, 106, 98, 45, 115, 111, 102, 116, 119, 97, 114, 101, 46, 99, 111, 109, 10, 35, 32, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 49, 54, 32, 65, 109, 101, 114, 105, 99, 97, 110, 32, 80, 114, 105, 110, 116, 105, 110, 103, 32, 72, 111, 117, 115, 101, 32, 102, 111, 114, 32, 116, 104, 101, 32, 66, 108, 105, 110, 100, 44, 32, 73, 110, 99, 46, 32, 119, 119, 119, 46, 97, 112, 104, 46, 111, 114, 103, 10, 35, 32, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 50, 48, 32, 82, 78, 73, 66, 44, 32, 119, 119, 119, 46, 114, 110, 105, 98, 46, 111, 114, 103, 46, 117, 107, 10, 35, 10, 35, 32, 32, 84, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 112, 97, 114, 116, 32, 111, 102, 32, 108, 105, 98, 108, 111, 117, 105, 115, 46, 10, 35, 10, 35, 32, 32, 108, 105, 98, 108, 111, 117, 105, 115, 32, 105, 115, 32, 102, 114, 101, 101, 32, 115, 111, 102, 116, 119, 97, 114, 101, 58, 32, 121, 111, 117, 32, 99, 97, 110, 32, 114, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 32, 105, 116, 32, 97, 110, 100, 47, 111, 114, 32, 109, 111, 100, 105, 102, 121, 32, 105, 116, 10, 35, 32, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 116, 101, 114, 109, 115, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 76, 101, 115, 115, 101, 114, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 115, 10, 35, 32, 32, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 70, 114, 101, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 70, 111, 117, 110, 100, 97, 116, 105, 111, 110, 44, 32, 101, 105, 116, 104, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 50, 46, 49, 32, 111, 102, 32, 116, 104, 101, 10, 35, 32, 32, 76, 105, 99, 101, 110, 115, 101, 44, 32, 111, 114, 32, 40, 97, 116, 32, 121, 111, 117, 114, 32, 111, 112, 116, 105, 111, 110, 41, 32, 97, 110, 121, 32, 108, 97, 116, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 46, 10, 35, 10, 35, 32, 32, 108, 105, 98, 108, 111, 117, 105, 115, 32, 105, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 111, 112, 101, 32, 116, 104, 97, 116, 32, 105, 116, 32, 119, 105, 108, 108, 32, 98, 101, 32, 117, 115, 101, 102, 117, 108, 44, 32, 98, 117, 116, 10, 35, 32, 32, 87, 73, 84, 72, 79, 85, 84, 32, 65, 78, 89, 32, 87, 65, 82, 82, 65, 78, 84, 89, 59, 32, 119, 105, 116, 104, 111, 117, 116, 32, 101, 118, 101, 110, 32, 116, 104, 101, 32, 105, 109, 112, 108, 105, 101, 100, 32, 119, 97, 114, 114, 97, 110, 116, 121, 32, 111, 102, 10, 35, 32, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 32, 111, 114, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 46, 32, 83, 101, 101, 32, 116, 104, 101, 32, 71, 78, 85, 10, 35, 32, 32, 76, 101, 115, 115, 101, 114, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 115, 46, 10, 35, 10, 35, 32, 32, 89, 111, 117, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 114, 101, 99, 101, 105, 118, 101, 100, 32, 97, 32, 99, 111, 112, 121, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 76, 101, 115, 115, 101, 114, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 10, 35, 32, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 108, 111, 110, 103, 32, 119, 105, 116, 104, 32, 108, 105, 98, 108, 111, 117, 105, 115, 46, 32, 73, 102, 32, 110, 111, 116, 44, 32, 115, 101, 101, 10, 35, 32, 32, 60, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 103, 110, 117, 46, 111, 114, 103, 47, 108, 105, 99, 101, 110, 115, 101, 115, 47, 62, 46, 10, 10, 35, 32, 32, 77, 97, 105, 110, 116, 97, 105, 110, 101, 100, 32, 98, 121, 32, 77, 105, 107, 101, 32, 71, 114, 97, 121, 32, 60, 109, 103, 114, 97, 121, 64, 97, 112, 104, 46, 111, 114, 103, 62, 10, 10, 115, 112, 97, 99, 101, 32, 92, 116, 32, 57, 32, 116, 97, 98, 10, 115, 112, 97, 99, 101, 32, 92, 120, 48, 48, 49, 98, 32, 49, 98, 32, 101, 115, 99, 97, 112, 101, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 32, 102, 111, 114, 32, 104, 116, 109, 108, 32, 98, 97, 99, 107, 45, 116, 114, 97, 110, 115, 108, 97, 116, 105, 111, 110, 10, 115, 112, 97, 99, 101, 32, 92, 120, 48, 48, 65, 48, 32, 97, 32, 78, 79, 45, 66, 82, 69, 65, 75, 32, 83, 80, 65, 67, 69, 32, 60, 110, 111, 66, 114, 101, 97, 107, 62, 32, 48, 48, 50, 48, 32, 78, 79, 78, 45, 66, 82, 69, 65, 75, 73, 78, 71, 32, 83, 80, 65, 67, 69, 10, 10, 110, 111, 98, 97, 99, 107, 32, 99, 111, 114, 114, 101, 99, 116, 32, 34, 92, 120, 50, 48, 48, 98, 34, 32, 34, 92, 115, 34, 10, 105, 110, 99, 108, 117, 100, 101, 32, 115, 112, 97, 99, 101, 115, 46, 117, 116, 105, 10, 10, 105, 110, 99, 108, 117, 100, 101, 32, 108, 97, 116, 105, 110, 76, 101, 116, 116, 101, 114, 68, 101, 102, 54, 68, 111, 116, 115, 46, 117, 116, 105, 10, 105, 110, 99, 108, 117, 100, 101, 32, 108, 97, 116, 105, 110, 85, 112, 112, 101, 114, 99, 97, 115, 101, 67, 111, 109, 112, 54, 46, 117, 116, 105, 10, 10, 10, 35, 32, 32, 32, 78, 117, 109, 101, 114, 105, 99, 32, 83, 121, 109, 98, 111, 108, 115, 10, 10, 100, 105, 115, 112, 108, 97, 121, 32, 48, 32, 51, 53, 54, 10, 100, 105, 115, 112, 108, 97, 121, 32, 49, 32, 50, 10, 100, 105, 115, 112, 108, 97, 121, 32, 50, 32, 50, 51, 10, 100, 105, 115, 112, 108, 97, 121, 32, 51, 32, 50, 53, 10, 100, 105, 115, 112, 108, 97, 121, 32, 52, 32, 50, 53, 54, 10, 100, 105, 115, 112, 108, 97, 121, 32, 53, 32, 50, 54, 10, 100, 105, 115, 112, 108, 97, 121, 32, 54, 32, 50, 51, 53, 10, 100, 105, 115, 112, 108, 97, 121, 32, 55, 32, 50, 51, 53, 54, 10, 100, 105, 115, 112, 108, 97, 121, 32, 56, 32, 50, 51, 54, 10, 100, 105, 115, 112, 108, 97, 121, 32, 57, 32, 51, 53, 10, 10, 100, 105, 103, 105, 116, 32, 48, 32, 50, 52, 53, 10, 100, 105, 103, 105, 116, 32, 49, 32, 49, 10, 100, 105, 103, 105, 116, 32, 50, 32, 49, 50, 10, 100, 105, 103, 105, 116, 32, 51, 32, 49, 52, 10, 100, 105, 103, 105, 116, 32, 52, 32, 49, 52, 53, 10, 100, 105, 103, 105, 116, 32, 53, 32, 49, 53, 10, 100, 105, 103, 105, 116, 32, 54, 32, 49, 50, 52, 10, 100, 105, 103, 105, 116, 32, 55, 32, 49, 50, 52, 53, 10, 100, 105, 103, 105, 116, 32, 56, 32, 49, 50, 53, 10, 100, 105, 103, 105, 116, 32, 57, 32, 50, 52, 10, 10, 35, 32, 116, 104, 105, 115, 32, 105, 115, 32, 97, 32, 98, 97, 100, 32, 119, 111, 114, 107, 45, 97, 114, 111, 117, 110, 100, 32, 102, 111, 114, 32, 100, 111, 105, 110, 103, 32, 110, 117, 109, 101, 114, 105, 99, 32, 109, 111, 100, 101, 32, 98, 97, 99, 107, 119, 97, 114, 100, 115, 10, 108, 105, 116, 100, 105, 103, 105, 116, 32, 48, 32, 50, 52, 53, 10, 108, 105, 116, 100, 105, 103, 105, 116, 32, 49, 32, 49, 10, 108, 105, 116, 100, 105, 103, 105, 116, 32, 50, 32, 49, 50, 10, 108, 105, 116, 100, 105, 103, 105, 116, 32, 51, 32, 49, 52, 10, 108, 105, 116, 100, 105, 103, 105, 116, 32, 52, 32, 49, 52, 53, 10, 108, 105, 116, 100, 105, 103, 105, 116, 32, 53, 32, 49, 53, 10, 108, 105, 116, 100, 105, 103, 105, 116, 32, 54, 32, 49, 50, 52, 10, 108, 105, 116, 100, 105, 103, 105, 116, 32, 55, 32, 49, 50, 52, 53, 10, 108, 105, 116, 100, 105, 103, 105, 116, 32, 56, 32, 49, 50, 53, 10, 108, 105, 116, 100, 105, 103, 105, 116, 32, 57, 32, 50, 52, 10, 10, 10, 35, 32, 32, 32, 77, 111, 100, 105, 102, 105, 101, 114, 115, 10, 10, 35, 32, 97, 99, 117, 116, 101, 32, 97, 99, 99, 101, 110, 116, 10, 115, 105, 103, 110, 32, 92, 120, 48, 48, 98, 52, 32, 52, 53, 45, 51, 52, 32, 194, 180, 10, 115, 105, 103, 110, 32, 92, 120, 48, 51, 48, 49, 32, 52, 53, 45, 51, 52, 32, 204, 129, 32, 10, 110, 111, 98, 97, 99, 107, 32, 99, 111, 114, 114, 101, 99, 116, 32, 91, 36, 108, 93, 34, 204, 129, 34, 32, 34, 204, 129, 34, 42, 10, 10, 35, 32, 99, 105, 114, 99, 117, 109, 102, 108, 101, 120, 47, 99, 97, 114, 111, 116, 10, 100, 105, 115, 112, 108, 97, 121, 32, 92, 120, 48, 48, 53, 101, 32, 52, 53, 55, 32, 94, 10, 115, 105, 103, 110, 32, 92, 120, 48, 48, 53, 101, 32, 52, 45, 50, 54, 32, 94, 10, 115, 105, 103, 110, 32, 92, 120, 48, 51, 48, 50, 32, 52, 53, 45, 49, 52, 54, 32, 204, 130, 32, 10, 110, 111, 98, 97, 99, 107, 32, 99, 111, 114, 114, 101, 99, 116, 32, 91, 36, 108, 93, 34, 204, 130, 34, 32, 34, 204, 130, 34, 42, 10, 10, 35, 32, 103, 114, 97, 118, 101, 32, 97, 99, 99, 101, 110, 116, 10, 115, 105, 103, 110, 32, 92, 120, 48, 48, 54, 48, 32, 52, 54, 45, 49, 54, 32, 96, 10, 110, 111, 98, 97, 99, 107, 32, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 96, 32, 52, 10, 115, 105, 103, 110, 32, 92, 120, 48, 51, 48, 48, 32, 52, 53, 45, 49, 54, 32, 204, 128, 204, 128, 32, 10, 110, 111, 98, 97, 99, 107, 32, 99, 111, 114, 114, 101, 99, 116, 32, 91, 36, 108, 93, 34, 204, 128, 34, 32, 34, 204, 128, 34, 42, 10, 10, 35, 32, 116, 105, 108, 100, 101, 10, 100, 105, 115, 112, 108, 97, 121, 32, 92, 120, 48, 48, 55, 101, 32, 52, 53, 32, 126, 10, 109, 97, 116, 104, 32, 92, 120, 48, 48, 55, 101, 32, 52, 45, 51, 53, 32, 126, 10, 115, 105, 103, 110, 32, 92, 120, 48, 51, 48, 51, 32, 52, 53, 45, 49, 50, 52, 53, 54, 32, 204, 131, 32, 10, 110, 111, 98, 97, 99, 107, 32, 99, 111, 114, 114, 101, 99, 116, 32, 91, 36, 108, 93, 34, 204, 131, 34, 32, 34, 204, 131, 34, 42, 10, 110, 111, 98, 97, 99, 107, 32, 112, 97, 115, 115, 50, 32, 64, 52, 53, 45, 49, 50, 52, 53, 54, 45, 54, 32, 64, 54, 45, 52, 53, 45, 49, 50, 52, 53, 54, 32, 32, 109, 111, 118, 101, 32, 97, 102, 116, 101, 114, 32, 99, 97, 112, 105, 116, 97, 108, 32, 115, 105, 103, 110, 10, 10, 35, 32, 109, 97, 99, 114, 111, 110, 10, 115, 105, 103, 110, 32, 92, 120, 48, 48, 97, 102, 32, 52, 45, 51, 54, 32, 194, 175, 10, 115, 105, 103, 110, 32, 92, 120, 48, 51, 48, 52, 32, 52, 53, 45, 52, 45, 51, 54, 32, 204, 132, 32, 10, 110, 111, 98, 97, 99, 107, 32, 99, 111, 114, 114, 101, 99, 116, 32, 91, 36, 108, 93, 34, 204, 132, 34, 32, 34, 204, 132, 34, 42, 10, 10, 35, 32, 99, 101, 100, 105, 108, 108, 97, 10, 115, 105, 103, 110, 32, 92, 120, 48, 48, 98, 56, 32, 52, 53, 45, 49, 50, 51, 52, 54, 32, 194, 184, 10, 115, 105, 103, 110, 32, 92, 120, 48, 51, 50, 55, 32, 52, 53, 45, 49, 50, 51, 52, 54, 32, 204, 167, 32, 10, 110, 111, 98, 97, 99, 107, 32, 99, 111, 114, 114, 101, 99, 116, 32, 91, 36, 108, 93, 34, 204, 167, 34, 32, 34, 204, 167, 34, 42, 10, 10, 35, 32, 100, 105, 97, 101, 114, 101, 115, 105, 115, 47, 117, 109, 108, 97, 116, 10, 115, 105, 103, 110, 32, 92, 120, 48, 48, 97, 56, 32, 52, 53, 45, 50, 53, 32, 194, 168, 10, 115, 105, 103, 110, 32, 92, 120, 48, 51, 48, 56, 32, 52, 53, 45, 50, 53, 32, 204, 136, 32, 32, 10, 110, 111, 98, 97, 99, 107, 32, 99, 111, 114, 114, 101, 99, 116, 32, 91, 36, 108, 93, 34, 204, 136, 34, 32, 34, 204, 136, 34, 42, 10, 10, 35, 32, 99, 97, 114, 111, 110, 10, 115, 105, 103, 110, 32, 92, 120, 48, 50, 99, 55, 32, 52, 53, 45, 51, 52, 53, 32, 203, 135, 10, 115, 105, 103, 110, 32, 92, 120, 48, 51, 48, 99, 32, 52, 53, 45, 51, 52, 54, 32, 204, 140, 32, 10, 110, 111, 98, 97, 99, 107, 32, 99, 111, 114, 114, 101, 99, 116, 32, 91, 36, 108, 93, 34, 204, 140, 34, 32, 34, 204, 140, 34, 42, 10, 10, 35, 32, 98, 114, 101, 118, 101, 10, 115, 105, 103, 110, 32, 92, 120, 48, 50, 100, 56, 32, 52, 45, 51, 52, 54, 32, 203, 152, 10, 115, 105, 103, 110, 32, 92, 120, 48, 51, 48, 54, 32, 52, 45, 51, 52, 54, 32, 204, 134, 32, 10, 110, 111, 98, 97, 99, 107, 32, 99, 111, 114, 114, 101, 99, 116, 32, 91, 36, 108, 93, 34, 204, 134, 34, 32, 34, 204, 134, 34, 42, 10, 10, 35, 32, 114, 105, 110, 103, 47, 99, 105, 114, 99, 108, 101, 10, 115, 105, 103, 110, 32, 92, 120, 48, 50, 100, 97, 32, 52, 53, 45, 49, 50, 52, 54, 32, 203, 154, 10, 115, 105, 103, 110, 32, 92, 120, 48, 51, 48, 97, 32, 52, 53, 45, 49, 50, 52, 54, 32, 204, 138, 32, 32, 10, 110, 111, 98, 97, 99, 107, 32, 99, 111, 114, 114, 101, 99, 116, 32, 91, 36, 108, 93, 34, 204, 138, 34, 32, 34, 204, 138, 34, 42, 10, 10, 10, 35, 35, 35, 35, 35, 32, 32, 32, 83, 116, 97, 114, 116, 32, 111, 102, 32, 85, 110, 105, 99, 111, 100, 101, 10, 10, 10, 35, 32, 32, 32, 85, 110, 105, 99, 111, 100, 101, 58, 32, 32, 66, 97, 115, 105, 99, 32, 76, 97, 116, 105, 110, 10, 10, 100, 105, 115, 112, 108, 97, 121, 32, 33, 32, 50, 51, 52, 54, 10, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 33, 32, 50, 51, 53, 10, 110, 111, 102, 111, 114, 32, 112, 111, 115, 116, 112, 117, 110, 99, 32, 33, 32, 50, 51, 53, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 33, 32, 37, 97, 32, 53, 54, 45, 50, 51, 53, 10, 10, 100, 105, 115, 112, 108, 97, 121, 32, 34, 32, 53, 10, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 34, 32, 54, 45, 50, 51, 53, 54, 10, 35, 32, 84, 104, 101, 32, 34, 63, 34, 32, 115, 121, 109, 98, 111, 108, 32, 105, 115, 32, 109, 111, 115, 116, 108, 121, 32, 104, 97, 110, 100, 108, 101, 100, 32, 98, 101, 108, 111, 119, 44, 10, 35, 32, 98, 117, 116, 32, 116, 104, 101, 32, 112, 97, 116, 116, 101, 114, 110, 32, 110, 101, 101, 100, 115, 32, 116, 111, 32, 98, 101, 32, 100, 101, 102, 105, 110, 101, 100, 32, 98, 101, 102, 111, 114, 101, 32, 112, 114, 101, 112, 117, 110, 99, 32, 97, 110, 100, 32, 112, 111, 115, 116, 112, 117, 110, 99, 32, 99, 97, 110, 32, 98, 101, 32, 117, 115, 101, 100, 46, 10, 100, 105, 115, 112, 108, 97, 121, 32, 63, 32, 49, 52, 53, 54, 10, 110, 111, 102, 111, 114, 32, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 63, 32, 50, 51, 54, 10, 110, 111, 102, 111, 114, 32, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 34, 32, 51, 53, 54, 10, 110, 111, 102, 111, 114, 32, 112, 114, 101, 112, 117, 110, 99, 32, 34, 32, 50, 51, 54, 10, 110, 111, 102, 111, 114, 32, 112, 111, 115, 116, 112, 117, 110, 99, 32, 34, 32, 51, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 94, 95, 126, 93, 37, 60, 42, 32, 34, 32, 37, 91, 95, 46, 36, 93, 42, 37, 91, 97, 35, 93, 32, 50, 51, 54, 10, 109, 97, 116, 99, 104, 32, 37, 91, 97, 35, 93, 37, 91, 95, 46, 36, 93, 42, 32, 34, 32, 37, 62, 42, 37, 91, 94, 95, 126, 93, 32, 51, 53, 54, 10, 10, 100, 105, 115, 112, 108, 97, 121, 32, 35, 32, 51, 52, 53, 54, 10, 115, 105, 103, 110, 32, 35, 32, 52, 53, 54, 45, 49, 52, 53, 54, 10, 100, 105, 115, 112, 108, 97, 121, 32, 36, 32, 49, 50, 52, 54, 10, 115, 105, 103, 110, 32, 36, 32, 52, 45, 50, 51, 52, 10, 100, 105, 115, 112, 108, 97, 121, 32, 37, 32, 49, 52, 54, 10, 115, 105, 103, 110, 32, 37, 32, 52, 54, 45, 51, 53, 54, 10, 100, 105, 115, 112, 108, 97, 121, 32, 38, 32, 49, 50, 51, 52, 54, 10, 115, 105, 103, 110, 32, 38, 32, 52, 45, 49, 50, 51, 52, 54, 10, 100, 105, 115, 112, 108, 97, 121, 32, 39, 32, 51, 10, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 39, 32, 51, 10, 100, 105, 115, 112, 108, 97, 121, 32, 40, 32, 49, 50, 51, 53, 54, 10, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 40, 32, 53, 45, 49, 50, 54, 10, 100, 105, 115, 112, 108, 97, 121, 32, 41, 32, 50, 51, 52, 53, 54, 10, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 41, 32, 53, 45, 51, 52, 53, 10, 100, 105, 115, 112, 108, 97, 121, 32, 42, 32, 49, 54, 10, 115, 105, 103, 110, 32, 42, 32, 53, 45, 51, 53, 10, 100, 105, 115, 112, 108, 97, 121, 32, 43, 32, 51, 52, 54, 10, 109, 97, 116, 104, 32, 43, 32, 53, 45, 50, 51, 53, 10, 100, 105, 115, 112, 108, 97, 121, 32, 44, 32, 54, 10, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 44, 32, 50, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 44, 32, 37, 97, 32, 53, 54, 45, 50, 10, 100, 105, 115, 112, 108, 97, 121, 32, 45, 32, 51, 54, 10, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 45, 32, 51, 54, 10, 104, 121, 112, 104, 101, 110, 32, 45, 32, 51, 54, 10, 100, 105, 115, 112, 108, 97, 121, 32, 46, 32, 52, 54, 10, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 46, 32, 50, 53, 54, 10, 100, 105, 115, 112, 108, 97, 121, 32, 47, 32, 51, 52, 10, 109, 97, 116, 104, 32, 47, 32, 52, 53, 54, 45, 51, 52, 10, 35, 32, 48, 45, 57, 32, 32, 32, 115, 101, 101, 32, 78, 117, 109, 101, 114, 105, 99, 32, 83, 121, 109, 98, 111, 108, 115, 10, 100, 105, 115, 112, 108, 97, 121, 32, 58, 32, 49, 53, 54, 10, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 58, 32, 50, 53, 10, 112, 111, 115, 116, 112, 117, 110, 99, 32, 58, 32, 50, 53, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 58, 32, 37, 97, 32, 53, 54, 45, 50, 53, 10, 35, 84, 79, 68, 79, 58, 32, 32, 116, 104, 105, 115, 32, 105, 115, 32, 117, 110, 110, 101, 99, 101, 115, 115, 97, 114, 105, 108, 121, 32, 110, 101, 99, 101, 115, 115, 97, 114, 121, 10, 100, 105, 115, 112, 108, 97, 121, 32, 59, 32, 53, 54, 10, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 59, 32, 50, 51, 10, 110, 111, 98, 97, 99, 107, 32, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 59, 32, 53, 54, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 59, 32, 37, 97, 32, 53, 54, 45, 50, 51, 10, 100, 105, 115, 112, 108, 97, 121, 32, 60, 32, 49, 50, 54, 10, 109, 97, 116, 104, 32, 60, 32, 52, 45, 49, 50, 54, 10, 100, 105, 115, 112, 108, 97, 121, 32, 61, 32, 49, 50, 51, 52, 53, 54, 10, 109, 97, 116, 104, 32, 61, 32, 53, 45, 50, 51, 53, 54, 10, 100, 105, 115, 112, 108, 97, 121, 32, 62, 32, 51, 52, 53, 10, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 62, 32, 52, 45, 51, 52, 53, 10, 35, 32, 114, 101, 113, 117, 105, 114, 101, 115, 32, 103, 114, 97, 100, 101, 32, 111, 110, 101, 32, 105, 110, 100, 105, 99, 97, 116, 111, 114, 32, 119, 104, 101, 110, 32, 98, 121, 32, 105, 116, 115, 101, 108, 102, 10, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 63, 32, 53, 54, 45, 50, 51, 54, 10, 112, 111, 115, 116, 112, 117, 110, 99, 32, 63, 32, 50, 51, 54, 10, 100, 105, 115, 112, 108, 97, 121, 32, 64, 32, 52, 55, 10, 115, 105, 103, 110, 32, 64, 32, 52, 45, 49, 10, 35, 32, 65, 45, 90, 32, 32, 32, 115, 101, 101, 32, 108, 97, 116, 105, 110, 76, 101, 116, 116, 101, 114, 68, 101, 102, 56, 68, 111, 116, 115, 46, 117, 116, 105, 10, 100, 105, 115, 112, 108, 97, 121, 32, 91, 32, 50, 52, 54, 55, 10, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 91, 32, 52, 54, 45, 49, 50, 54, 10, 100, 105, 115, 112, 108, 97, 121, 32, 92, 92, 32, 49, 50, 53, 54, 55, 10, 115, 105, 103, 110, 32, 92, 92, 32, 52, 53, 54, 45, 49, 54, 10, 100, 105, 115, 112, 108, 97, 121, 32, 93, 32, 49, 50, 52, 53, 54, 55, 10, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 93, 32, 52, 54, 45, 51, 52, 53, 10, 35, 32, 92, 120, 48, 48, 53, 101, 32, 94, 32, 32, 32, 115, 101, 101, 32, 77, 111, 100, 105, 102, 105, 101, 114, 115, 10, 100, 105, 115, 112, 108, 97, 121, 32, 95, 32, 52, 53, 54, 10, 115, 105, 103, 110, 32, 95, 32, 52, 54, 45, 51, 54, 10, 35, 32, 47, 120, 48, 48, 54, 48, 32, 96, 32, 32, 32, 115, 101, 101, 32, 77, 111, 100, 105, 102, 105, 101, 114, 115, 10, 35, 32, 97, 45, 122, 32, 32, 32, 115, 101, 101, 32, 108, 97, 116, 105, 110, 76, 101, 116, 116, 101, 114, 68, 101, 102, 56, 68, 111, 116, 115, 46, 117, 116, 105, 10, 100, 105, 115, 112, 108, 97, 121, 32, 123, 32, 50, 52, 54, 10, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 123, 32, 52, 53, 54, 45, 49, 50, 54, 10, 100, 105, 115, 112, 108, 97, 121, 32, 124, 32, 49, 50, 53, 54, 10, 115, 105, 103, 110, 32, 124, 32, 52, 53, 54, 45, 49, 50, 53, 54, 32, 10, 100, 105, 115, 112, 108, 97, 121, 32, 125, 32, 49, 50, 52, 53, 54, 10, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 125, 32, 52, 53, 54, 45, 51, 52, 53, 10, 35, 32, 92, 120, 48, 48, 55, 101, 32, 126, 32, 32, 32, 115, 101, 101, 32, 77, 111, 100, 105, 102, 105, 101, 114, 115, 10, 10, 10, 35, 32, 32, 32, 85, 110, 105, 99, 111, 100, 101, 58, 32, 32, 76, 97, 116, 105, 110, 45, 49, 32, 83, 117, 112, 112, 108, 101, 109, 101, 110, 116, 10, 10, 35, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 92, 120, 48, 48, 57, 51, 32, 50, 51, 54, 10, 35, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 92, 120, 48, 48, 57, 52, 32, 51, 53, 54, 10, 35, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 92, 120, 48, 48, 57, 54, 32, 51, 54, 10, 115, 112, 97, 99, 101, 32, 92, 120, 48, 48, 97, 48, 32, 97, 32, 32, 32, 110, 111, 110, 45, 98, 114, 101, 97, 107, 105, 110, 103, 32, 115, 112, 97, 99, 101, 10, 115, 105, 103, 110, 32, 92, 120, 48, 48, 97, 49, 32, 52, 53, 45, 53, 54, 45, 50, 51, 53, 32, 194, 161, 10, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 92, 120, 48, 48, 97, 49, 32, 50, 51, 53, 32, 194, 161, 10, 115, 105, 103, 110, 32, 92, 120, 48, 48, 97, 50, 32, 52, 45, 49, 52, 32, 194, 162, 32, 99, 101, 110, 116, 10, 115, 105, 103, 110, 32, 92, 120, 48, 48, 97, 51, 32, 52, 45, 49, 50, 51, 32, 194, 163, 32, 112, 111, 117, 110, 100, 10, 115, 105, 103, 110, 32, 92, 120, 48, 48, 97, 52, 32, 49, 50, 52, 54, 32, 194, 164, 32, 99, 117, 114, 101, 110, 99, 121, 10, 115, 105, 103, 110, 32, 92, 120, 48, 48, 97, 53, 32, 52, 45, 49, 51, 52, 53, 54, 32, 194, 165, 32, 121, 101, 110, 10, 115, 105, 103, 110, 32, 92, 120, 48, 48, 97, 54, 32, 52, 54, 45, 49, 50, 53, 54, 32, 194, 166, 32, 98, 114, 111, 107, 101, 110, 32, 98, 97, 114, 10, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 92, 120, 48, 48, 97, 54, 32, 52, 53, 54, 45, 49, 50, 53, 54, 32, 194, 166, 32, 98, 114, 111, 107, 101, 110, 32, 98, 97, 114, 10, 115, 105, 103, 110, 32, 92, 120, 48, 48, 97, 55, 32, 52, 53, 45, 50, 51, 52, 32, 194, 167, 32, 115, 101, 99, 116, 105, 111, 110, 10, 35, 32, 92, 120, 48, 48, 97, 56, 32, 194, 168, 32, 32, 32, 115, 101, 101, 32, 77, 111, 100, 105, 102, 105, 101, 114, 115, 10, 115, 105, 103, 110, 32, 92, 120, 48, 48, 97, 57, 32, 52, 53, 45, 49, 52, 32, 194, 169, 32, 99, 111, 112, 121, 114, 105, 103, 104, 116, 10, 35, 115, 105, 103, 110, 32, 92, 120, 48, 48, 97, 97, 32, 194, 170, 10, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 92, 120, 48, 48, 97, 98, 32, 52, 53, 54, 45, 50, 51, 54, 32, 194, 171, 10, 115, 105, 103, 110, 32, 92, 120, 48, 48, 97, 99, 32, 52, 45, 49, 52, 53, 54, 32, 194, 172, 10, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 92, 120, 48, 48, 97, 100, 32, 51, 54, 32, 45, 32, 115, 111, 102, 116, 32, 104, 121, 112, 104, 101, 110, 10, 115, 105, 103, 110, 32, 92, 120, 48, 48, 97, 101, 32, 52, 53, 45, 49, 50, 51, 53, 32, 194, 174, 32, 114, 101, 103, 105, 115, 116, 101, 114, 101, 100, 10, 35, 32, 92, 120, 48, 48, 97, 102, 32, 194, 175, 32, 32, 32, 115, 101, 101, 32, 77, 111, 100, 105, 102, 105, 101, 114, 115, 10, 115, 105, 103, 110, 32, 92, 120, 48, 48, 98, 48, 32, 52, 53, 45, 50, 52, 53, 32, 194, 176, 10, 109, 97, 116, 104, 32, 92, 120, 48, 48, 98, 49, 32, 52, 53, 54, 45, 50, 51, 53, 32, 194, 177, 10, 10, 35, 32, 102, 97, 107, 101, 32, 103, 114, 97, 100, 101, 32, 49, 32, 97, 110, 100, 32, 115, 117, 112, 101, 114, 115, 99, 114, 105, 112, 116, 32, 105, 110, 100, 105, 99, 97, 116, 111, 114, 10, 109, 97, 116, 104, 32, 92, 120, 48, 48, 98, 50, 32, 53, 54, 45, 51, 53, 45, 51, 52, 53, 54, 45, 49, 50, 32, 194, 178, 10, 109, 97, 116, 104, 32, 92, 120, 48, 48, 98, 51, 32, 53, 54, 45, 51, 53, 45, 51, 52, 53, 54, 45, 49, 52, 32, 194, 179, 10, 10, 35, 32, 92, 120, 48, 48, 98, 52, 32, 194, 180, 32, 32, 32, 115, 101, 101, 32, 77, 111, 100, 105, 102, 105, 101, 114, 115, 10, 115, 105, 103, 110, 32, 92, 120, 48, 48, 98, 53, 32, 52, 54, 45, 49, 51, 52, 32, 194, 181, 10, 109, 97, 116, 104, 32, 92, 120, 48, 48, 98, 55, 32, 52, 45, 49, 54, 32, 194, 183, 10, 10, 35, 32, 102, 97, 107, 101, 32, 110, 117, 109, 101, 114, 105, 99, 32, 105, 110, 100, 105, 99, 97, 116, 111, 114, 10, 109, 97, 116, 104, 32, 92, 120, 48, 48, 98, 99, 32, 51, 52, 53, 54, 45, 49, 45, 51, 52, 45, 49, 52, 53, 32, 194, 188, 10, 109, 97, 116, 104, 32, 92, 120, 48, 48, 98, 100, 32, 51, 52, 53, 54, 45, 49, 45, 51, 52, 45, 49, 50, 32, 194, 189, 10, 109, 97, 116, 104, 32, 92, 120, 48, 48, 98, 101, 32, 51, 52, 53, 54, 45, 49, 52, 45, 51, 52, 45, 49, 52, 53, 32, 194, 190, 10, 10, 35, 115, 105, 103, 110, 32, 92, 120, 48, 48, 98, 97, 32, 48, 32, 194, 186, 10, 115, 105, 103, 110, 32, 92, 120, 48, 48, 98, 54, 32, 52, 53, 45, 49, 50, 51, 52, 32, 194, 182, 32, 112, 105, 108, 99, 114, 111, 119, 10, 35, 32, 92, 120, 48, 48, 98, 56, 32, 194, 184, 32, 32, 32, 115, 101, 101, 32, 77, 111, 100, 105, 102, 105, 101, 114, 115, 10, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 92, 120, 48, 48, 98, 98, 32, 52, 53, 54, 45, 51, 53, 54, 32, 194, 187, 10, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 92, 120, 48, 48, 98, 102, 32, 52, 53, 45, 53, 54, 45, 50, 51, 54, 32, 194, 191, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 100, 102, 32, 52, 54, 45, 50, 51, 52, 54, 32, 195, 159, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 101, 48, 32, 52, 53, 45, 49, 54, 45, 49, 32, 195, 160, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 101, 49, 32, 52, 53, 45, 51, 52, 45, 49, 32, 195, 161, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 101, 50, 32, 52, 53, 45, 49, 52, 54, 45, 49, 32, 195, 162, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 101, 51, 32, 52, 53, 45, 49, 50, 52, 53, 54, 45, 49, 32, 195, 163, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 101, 52, 32, 52, 53, 45, 50, 53, 45, 49, 32, 195, 164, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 101, 53, 32, 52, 53, 45, 49, 50, 52, 54, 45, 49, 32, 195, 165, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 101, 54, 32, 49, 45, 54, 45, 52, 53, 45, 50, 51, 53, 45, 49, 53, 32, 195, 166, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 110, 101, 101, 100, 101, 100, 32, 116, 104, 101, 32, 100, 111, 116, 32, 54, 32, 105, 115, 32, 114, 101, 109, 111, 118, 101, 100, 32, 105, 110, 32, 112, 97, 115, 115, 50, 32, 40, 115, 101, 101, 32, 98, 101, 108, 111, 119, 41, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 101, 55, 32, 52, 53, 45, 49, 50, 51, 52, 54, 45, 49, 52, 32, 195, 167, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 101, 56, 32, 52, 53, 45, 49, 54, 45, 49, 53, 32, 195, 168, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 101, 57, 32, 52, 53, 45, 51, 52, 45, 49, 53, 32, 195, 169, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 101, 97, 32, 52, 53, 45, 49, 52, 54, 45, 49, 53, 32, 195, 170, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 101, 98, 32, 52, 53, 45, 50, 53, 45, 49, 53, 32, 195, 171, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 101, 99, 32, 52, 53, 45, 49, 54, 45, 50, 52, 32, 195, 172, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 101, 100, 32, 52, 53, 45, 51, 52, 45, 50, 52, 32, 195, 173, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 101, 101, 32, 52, 53, 45, 49, 52, 54, 45, 50, 52, 32, 195, 174, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 101, 102, 32, 52, 53, 45, 50, 53, 45, 50, 52, 32, 195, 175, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 102, 48, 32, 51, 52, 53, 54, 45, 49, 50, 52, 54, 32, 195, 176, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 102, 49, 32, 52, 53, 45, 49, 50, 52, 53, 54, 45, 49, 51, 52, 53, 32, 195, 177, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 102, 50, 32, 52, 53, 45, 49, 54, 45, 49, 51, 53, 32, 195, 178, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 102, 51, 32, 52, 53, 45, 51, 52, 45, 49, 51, 53, 32, 195, 179, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 102, 52, 32, 52, 53, 45, 49, 52, 54, 45, 49, 51, 53, 32, 195, 180, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 102, 53, 32, 52, 53, 45, 49, 50, 52, 53, 54, 45, 49, 51, 53, 32, 195, 181, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 102, 54, 32, 52, 53, 45, 50, 53, 45, 49, 51, 53, 32, 195, 182, 10, 109, 97, 116, 104, 32, 92, 120, 48, 48, 100, 55, 32, 53, 45, 50, 51, 54, 32, 195, 151, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 102, 56, 32, 52, 45, 49, 54, 45, 49, 51, 53, 32, 195, 152, 195, 184, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 102, 57, 32, 52, 53, 45, 49, 54, 45, 49, 51, 54, 32, 195, 185, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 102, 97, 32, 52, 53, 45, 51, 52, 45, 49, 51, 54, 32, 195, 186, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 102, 98, 32, 52, 53, 45, 49, 52, 54, 45, 49, 51, 54, 32, 195, 187, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 102, 99, 32, 52, 53, 45, 50, 53, 45, 49, 51, 54, 32, 195, 188, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 102, 100, 32, 52, 53, 45, 51, 52, 45, 49, 51, 52, 53, 54, 32, 195, 189, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 102, 101, 32, 51, 52, 53, 54, 45, 50, 51, 52, 54, 32, 195, 190, 10, 109, 97, 116, 104, 32, 92, 120, 48, 48, 102, 55, 32, 53, 45, 51, 52, 32, 195, 183, 10, 10, 10, 35, 32, 32, 32, 85, 110, 105, 99, 111, 100, 101, 58, 32, 32, 76, 97, 116, 105, 110, 32, 69, 120, 116, 101, 110, 100, 101, 100, 45, 65, 10, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 48, 49, 32, 52, 45, 51, 54, 45, 49, 32, 196, 129, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 48, 51, 32, 52, 45, 51, 52, 54, 45, 49, 32, 196, 131, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 48, 55, 32, 52, 53, 45, 51, 52, 45, 49, 52, 32, 196, 135, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 48, 57, 32, 52, 53, 45, 49, 52, 54, 45, 49, 52, 32, 196, 137, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 48, 100, 32, 52, 53, 45, 51, 52, 54, 45, 49, 52, 32, 196, 141, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 48, 102, 32, 52, 53, 45, 51, 52, 54, 45, 49, 52, 53, 32, 196, 143, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 49, 49, 32, 52, 45, 50, 53, 45, 49, 52, 53, 32, 196, 145, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 49, 51, 32, 52, 45, 51, 54, 45, 49, 53, 32, 196, 147, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 49, 53, 32, 52, 45, 51, 52, 54, 45, 49, 53, 32, 196, 149, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 49, 98, 32, 52, 53, 45, 51, 52, 54, 45, 49, 53, 32, 196, 155, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 49, 100, 32, 52, 53, 45, 49, 52, 54, 45, 49, 50, 52, 53, 32, 196, 157, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 49, 102, 32, 52, 45, 51, 52, 54, 45, 49, 50, 52, 53, 32, 196, 159, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 50, 51, 32, 52, 53, 45, 49, 50, 51, 52, 54, 45, 49, 50, 52, 53, 32, 196, 163, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 50, 53, 32, 52, 53, 45, 49, 52, 54, 45, 49, 50, 53, 32, 196, 165, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 50, 55, 32, 52, 45, 50, 53, 45, 49, 50, 53, 32, 196, 167, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 50, 57, 32, 52, 53, 45, 49, 50, 52, 53, 54, 45, 50, 52, 32, 196, 169, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 50, 98, 32, 52, 45, 51, 54, 45, 50, 52, 32, 196, 171, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 50, 100, 32, 52, 45, 51, 52, 54, 45, 50, 52, 32, 196, 173, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 51, 51, 32, 50, 52, 45, 54, 45, 52, 53, 45, 50, 51, 53, 45, 50, 52, 53, 32, 196, 178, 196, 179, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 110, 101, 101, 100, 101, 100, 32, 116, 104, 101, 32, 100, 111, 116, 32, 54, 32, 105, 115, 32, 114, 101, 109, 111, 118, 101, 100, 32, 105, 110, 32, 112, 97, 115, 115, 50, 32, 40, 115, 101, 101, 32, 98, 101, 108, 111, 119, 41, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 51, 53, 32, 52, 53, 45, 49, 52, 54, 45, 50, 52, 53, 32, 196, 181, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 51, 55, 32, 52, 53, 45, 49, 50, 51, 52, 54, 45, 49, 51, 32, 196, 183, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 51, 97, 32, 52, 53, 45, 51, 52, 45, 49, 50, 51, 32, 196, 186, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 51, 99, 32, 52, 53, 45, 49, 50, 51, 52, 54, 45, 49, 50, 51, 32, 196, 188, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 51, 101, 32, 52, 53, 45, 51, 52, 54, 45, 49, 50, 51, 32, 196, 190, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 52, 50, 32, 52, 45, 49, 54, 45, 49, 50, 51, 32, 197, 130, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 52, 52, 32, 52, 53, 45, 51, 52, 45, 49, 51, 52, 53, 32, 197, 132, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 52, 54, 32, 52, 53, 45, 49, 50, 51, 52, 54, 45, 49, 51, 52, 53, 32, 197, 134, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 52, 56, 32, 52, 53, 45, 51, 52, 54, 45, 49, 51, 52, 53, 32, 197, 136, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 52, 98, 32, 52, 53, 45, 49, 51, 52, 53, 32, 197, 139, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 52, 100, 32, 52, 45, 51, 54, 45, 49, 51, 53, 32, 197, 141, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 52, 102, 32, 52, 45, 51, 52, 54, 45, 49, 51, 53, 32, 197, 143, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 53, 51, 32, 49, 51, 53, 45, 54, 45, 52, 53, 45, 50, 51, 53, 45, 49, 53, 32, 197, 147, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 110, 101, 101, 100, 101, 100, 32, 116, 104, 101, 32, 100, 111, 116, 32, 54, 32, 105, 115, 32, 114, 101, 109, 111, 118, 101, 100, 32, 105, 110, 32, 112, 97, 115, 115, 50, 32, 40, 115, 101, 101, 32, 98, 101, 108, 111, 119, 41, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 53, 53, 32, 52, 53, 45, 51, 52, 45, 49, 50, 51, 53, 32, 197, 149, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 53, 55, 32, 52, 53, 45, 49, 50, 51, 52, 54, 45, 49, 50, 51, 53, 32, 197, 151, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 53, 57, 32, 52, 53, 45, 51, 52, 54, 45, 49, 50, 51, 53, 32, 197, 153, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 53, 98, 32, 52, 53, 45, 51, 52, 45, 50, 51, 52, 32, 197, 155, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 53, 100, 32, 52, 53, 45, 49, 52, 54, 45, 50, 51, 52, 32, 197, 157, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 53, 102, 32, 52, 53, 45, 49, 50, 51, 52, 54, 45, 50, 51, 52, 32, 197, 159, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 54, 49, 32, 52, 53, 45, 51, 52, 54, 45, 50, 51, 52, 32, 197, 161, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 54, 51, 32, 52, 53, 45, 49, 50, 51, 52, 54, 45, 50, 51, 52, 53, 32, 197, 163, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 54, 53, 32, 52, 53, 45, 51, 52, 54, 45, 50, 51, 52, 53, 32, 197, 165, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 54, 55, 32, 52, 45, 50, 53, 45, 50, 51, 52, 53, 32, 197, 167, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 54, 57, 32, 52, 53, 45, 49, 50, 52, 53, 54, 45, 49, 51, 54, 32, 197, 169, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 54, 98, 32, 52, 45, 51, 54, 45, 49, 51, 54, 32, 197, 171, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 54, 100, 32, 52, 45, 51, 52, 54, 45, 49, 51, 54, 32, 197, 173, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 54, 102, 32, 52, 53, 45, 49, 50, 52, 54, 45, 49, 51, 54, 32, 197, 175, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 55, 53, 32, 52, 53, 45, 49, 52, 54, 45, 50, 52, 53, 54, 32, 197, 181, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 55, 55, 32, 52, 53, 45, 49, 52, 54, 45, 49, 51, 52, 53, 54, 32, 197, 183, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 102, 102, 32, 52, 53, 45, 50, 53, 45, 49, 51, 52, 53, 54, 32, 195, 191, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 55, 97, 32, 52, 53, 45, 51, 52, 45, 49, 51, 53, 54, 32, 197, 186, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 55, 101, 32, 52, 53, 45, 51, 52, 54, 45, 49, 51, 53, 54, 32, 197, 190, 10, 10, 10, 35, 32, 32, 32, 85, 110, 105, 99, 111, 100, 101, 58, 32, 32, 76, 97, 116, 105, 110, 32, 69, 120, 116, 101, 110, 100, 101, 100, 45, 66, 10, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 50, 53, 57, 32, 52, 53, 54, 45, 50, 54, 32, 201, 153, 32, 32, 32, 32, 32, 32, 32, 32, 115, 99, 104, 119, 97, 32, 101, 32, 109, 117, 115, 116, 32, 98, 101, 32, 98, 101, 102, 111, 114, 101, 32, 92, 120, 48, 49, 56, 101, 32, 97, 110, 100, 32, 92, 120, 48, 52, 100, 56, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 100, 100, 32, 52, 53, 54, 45, 50, 54, 32, 199, 157, 32, 32, 32, 32, 32, 32, 32, 32, 116, 117, 114, 110, 101, 100, 32, 101, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 50, 54, 56, 32, 52, 45, 50, 53, 45, 50, 52, 32, 201, 168, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 98, 54, 32, 52, 45, 50, 53, 45, 49, 51, 53, 54, 32, 198, 182, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 99, 101, 32, 52, 53, 45, 51, 52, 54, 45, 49, 32, 199, 142, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 100, 48, 32, 52, 53, 45, 51, 52, 54, 45, 50, 52, 32, 199, 144, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 100, 50, 32, 52, 53, 45, 51, 52, 54, 45, 49, 51, 53, 32, 199, 146, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 100, 52, 32, 52, 53, 45, 51, 52, 54, 45, 49, 51, 54, 32, 199, 148, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 101, 53, 32, 52, 45, 50, 53, 45, 49, 50, 52, 53, 32, 199, 165, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 101, 55, 32, 52, 53, 45, 51, 52, 54, 45, 49, 50, 52, 53, 32, 199, 167, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 101, 57, 32, 52, 53, 45, 51, 52, 54, 45, 49, 51, 32, 199, 169, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 102, 53, 32, 52, 53, 45, 51, 52, 45, 49, 50, 52, 53, 32, 199, 181, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 102, 48, 32, 52, 53, 45, 51, 52, 54, 45, 50, 52, 53, 32, 199, 176, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 98, 102, 32, 51, 52, 53, 54, 45, 50, 52, 53, 54, 32, 198, 191, 32, 32, 32, 32, 32, 32, 32, 119, 121, 110, 110, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 102, 57, 32, 52, 53, 45, 49, 54, 45, 49, 51, 52, 53, 32, 199, 185, 10, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 50, 49, 100, 32, 51, 52, 53, 54, 45, 49, 51, 52, 53, 54, 32, 200, 157, 32, 32, 32, 32, 32, 32, 32, 121, 111, 103, 104, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 50, 49, 102, 32, 52, 53, 45, 51, 52, 54, 45, 49, 50, 53, 32, 200, 159, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 50, 50, 57, 32, 52, 53, 45, 49, 50, 51, 52, 54, 45, 49, 53, 32, 200, 169, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 50, 51, 51, 32, 52, 45, 51, 54, 45, 49, 51, 52, 53, 54, 32, 200, 179, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 50, 99, 54, 53, 32, 52, 45, 49, 54, 45, 49, 32, 226, 177, 165, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 50, 51, 99, 32, 52, 45, 49, 54, 45, 49, 52, 32, 200, 188, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 50, 99, 54, 54, 32, 52, 45, 49, 54, 45, 50, 51, 52, 53, 32, 226, 177, 166, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 56, 48, 32, 52, 45, 50, 53, 45, 49, 50, 32, 198, 128, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 50, 52, 55, 32, 52, 45, 49, 54, 45, 49, 53, 32, 201, 135, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 50, 52, 57, 32, 52, 45, 50, 53, 45, 50, 52, 53, 32, 201, 136, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 50, 52, 100, 32, 52, 45, 50, 53, 45, 49, 50, 51, 53, 32, 201, 141, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 50, 52, 102, 32, 52, 45, 50, 53, 45, 49, 51, 52, 53, 54, 32, 201, 143, 10, 10, 10, 35, 32, 32, 32, 85, 110, 105, 99, 111, 100, 101, 58, 32, 32, 73, 80, 65, 32, 69, 120, 116, 101, 110, 115, 105, 111, 110, 115, 10, 10, 35, 32, 92, 120, 48, 50, 53, 57, 32, 201, 153, 32, 32, 32, 115, 101, 101, 32, 92, 120, 48, 49, 56, 102, 10, 10, 10, 35, 32, 32, 32, 85, 110, 105, 99, 111, 100, 101, 58, 32, 32, 83, 112, 97, 99, 105, 110, 103, 32, 77, 111, 100, 105, 102, 105, 101, 114, 32, 76, 101, 116, 116, 101, 114, 115, 10, 10, 115, 105, 103, 110, 32, 92, 120, 48, 50, 101, 54, 32, 52, 53, 45, 52, 54, 45, 49, 52, 32, 203, 166, 32, 32, 32, 104, 105, 103, 104, 32, 116, 111, 110, 101, 10, 115, 105, 103, 110, 32, 92, 120, 48, 50, 101, 55, 32, 52, 53, 45, 52, 54, 45, 50, 53, 32, 203, 167, 32, 32, 32, 109, 105, 100, 32, 116, 111, 110, 101, 10, 115, 105, 103, 110, 32, 92, 120, 48, 50, 101, 56, 32, 52, 53, 45, 52, 54, 45, 51, 54, 32, 203, 168, 32, 32, 32, 108, 111, 119, 32, 116, 111, 110, 101, 10, 10, 10, 35, 32, 32, 32, 85, 110, 105, 99, 111, 100, 101, 58, 32, 32, 71, 114, 101, 101, 107, 32, 97, 110, 100, 32, 67, 111, 112, 116, 105, 99, 10, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 98, 49, 32, 52, 54, 45, 49, 32, 206, 177, 32, 65, 108, 112, 104, 97, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 98, 50, 32, 52, 54, 45, 49, 50, 32, 206, 178, 32, 66, 101, 116, 97, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 98, 51, 32, 52, 54, 45, 49, 50, 52, 53, 32, 206, 179, 32, 71, 97, 109, 109, 97, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 98, 52, 32, 52, 54, 45, 49, 52, 53, 32, 206, 180, 32, 68, 101, 108, 116, 97, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 98, 53, 32, 52, 54, 45, 49, 53, 32, 206, 181, 32, 69, 112, 115, 105, 108, 111, 110, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 98, 54, 32, 52, 54, 45, 49, 51, 53, 54, 32, 206, 182, 32, 90, 101, 116, 97, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 98, 55, 32, 52, 54, 45, 49, 53, 54, 32, 206, 183, 32, 69, 116, 97, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 98, 56, 32, 52, 54, 45, 49, 52, 53, 54, 32, 206, 184, 32, 84, 104, 101, 116, 97, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 98, 57, 32, 52, 54, 45, 50, 52, 32, 206, 185, 32, 73, 111, 116, 97, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 98, 97, 32, 52, 54, 45, 49, 51, 32, 206, 186, 32, 75, 97, 112, 112, 97, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 98, 98, 32, 52, 54, 45, 49, 50, 51, 32, 206, 187, 32, 76, 97, 109, 100, 97, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 98, 99, 32, 52, 54, 45, 49, 51, 52, 32, 206, 188, 32, 77, 117, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 98, 100, 32, 52, 54, 45, 49, 51, 52, 53, 32, 206, 189, 32, 78, 117, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 98, 101, 32, 52, 54, 45, 49, 51, 52, 54, 32, 206, 190, 32, 88, 105, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 98, 102, 32, 52, 54, 45, 49, 51, 53, 32, 206, 191, 32, 79, 109, 105, 99, 114, 111, 110, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 99, 48, 32, 52, 54, 45, 49, 50, 51, 52, 32, 207, 128, 32, 80, 105, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 99, 49, 32, 52, 54, 45, 49, 50, 51, 53, 32, 207, 129, 32, 82, 104, 111, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 99, 51, 32, 52, 54, 45, 50, 51, 52, 32, 207, 131, 32, 83, 105, 103, 109, 97, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 99, 52, 32, 52, 54, 45, 50, 51, 52, 53, 32, 207, 132, 32, 84, 97, 117, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32]);
fileData289.push.apply(fileData289, [92, 120, 48, 51, 99, 53, 32, 52, 54, 45, 49, 51, 54, 32, 207, 133, 32, 85, 112, 115, 105, 108, 111, 110, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 99, 54, 32, 52, 54, 45, 49, 50, 52, 32, 207, 134, 32, 80, 104, 105, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 99, 55, 32, 52, 54, 45, 49, 50, 51, 52, 54, 32, 207, 135, 32, 67, 104, 105, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 99, 56, 32, 52, 54, 45, 49, 51, 52, 53, 54, 32, 207, 136, 32, 80, 115, 105, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 99, 57, 32, 52, 54, 45, 50, 52, 53, 54, 32, 207, 137, 32, 79, 109, 101, 103, 97, 10, 110, 111, 98, 97, 99, 107, 32, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 99, 50, 32, 52, 54, 45, 50, 51, 52, 32, 207, 130, 32, 83, 109, 97, 108, 108, 32, 76, 101, 116, 116, 101, 114, 32, 83, 105, 103, 109, 97, 10, 10, 10, 35, 32, 32, 32, 85, 110, 105, 99, 111, 100, 101, 58, 32, 32, 67, 121, 114, 105, 108, 108, 105, 99, 10, 35, 32, 115, 105, 109, 105, 108, 97, 114, 32, 99, 121, 114, 105, 108, 108, 105, 99, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 115, 32, 109, 117, 115, 116, 32, 98, 101, 32, 97, 102, 116, 101, 114, 32, 108, 97, 116, 105, 110, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 115, 10, 35, 32, 116, 111, 32, 101, 110, 115, 117, 114, 101, 32, 112, 114, 111, 112, 101, 114, 32, 98, 97, 99, 107, 119, 97, 114, 100, 32, 116, 114, 97, 110, 115, 108, 97, 116, 105, 111, 110, 10, 10, 10, 35, 32, 32, 32, 85, 110, 105, 99, 111, 100, 101, 58, 32, 32, 76, 97, 116, 105, 110, 32, 69, 120, 116, 101, 110, 100, 101, 100, 32, 65, 100, 100, 105, 116, 105, 111, 110, 97, 108, 10, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 49, 101, 49, 49, 32, 52, 53, 45, 49, 50, 51, 52, 54, 45, 49, 52, 53, 32, 225, 184, 145, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 49, 101, 50, 49, 32, 52, 45, 51, 54, 45, 49, 50, 52, 53, 32, 225, 184, 161, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 49, 101, 50, 55, 32, 52, 53, 45, 50, 53, 45, 49, 50, 53, 32, 225, 184, 167, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 49, 101, 50, 57, 32, 52, 53, 45, 49, 50, 51, 52, 54, 45, 49, 50, 53, 32, 225, 184, 169, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 49, 101, 51, 49, 32, 52, 53, 45, 51, 52, 45, 49, 51, 32, 225, 184, 177, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 49, 101, 51, 102, 32, 52, 53, 45, 51, 52, 45, 49, 51, 52, 32, 225, 184, 191, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 49, 101, 53, 53, 32, 52, 53, 45, 51, 52, 45, 49, 50, 51, 52, 32, 225, 185, 149, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 49, 101, 55, 100, 32, 52, 53, 45, 49, 50, 52, 53, 54, 45, 49, 50, 51, 54, 32, 225, 185, 189, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 49, 101, 56, 49, 32, 52, 53, 45, 49, 54, 45, 50, 52, 53, 54, 32, 225, 186, 129, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 49, 101, 56, 51, 32, 52, 53, 45, 51, 52, 45, 50, 52, 53, 54, 32, 225, 186, 131, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 49, 101, 56, 53, 32, 52, 53, 45, 50, 53, 45, 50, 52, 53, 54, 32, 225, 186, 133, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 49, 101, 56, 100, 32, 52, 53, 45, 50, 53, 45, 49, 51, 52, 54, 32, 225, 186, 141, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 49, 101, 57, 49, 32, 52, 53, 45, 49, 52, 54, 45, 49, 51, 53, 54, 32, 225, 186, 145, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 49, 101, 57, 55, 32, 52, 53, 45, 50, 53, 45, 50, 51, 52, 53, 32, 225, 186, 151, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 49, 101, 57, 56, 32, 52, 53, 45, 49, 50, 52, 54, 45, 50, 52, 53, 54, 32, 225, 186, 152, 32, 32, 32, 104, 116, 116, 112, 58, 47, 47, 97, 114, 99, 104, 105, 118, 101, 115, 46, 109, 105, 108, 111, 117, 115, 104, 46, 110, 101, 116, 47, 109, 105, 99, 104, 107, 97, 112, 47, 97, 114, 99, 104, 105, 118, 101, 47, 50, 48, 49, 50, 47, 48, 52, 47, 49, 55, 47, 49, 48, 50, 57, 52, 51, 54, 54, 46, 104, 116, 109, 108, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 49, 101, 57, 57, 32, 52, 53, 45, 49, 50, 52, 54, 45, 49, 51, 52, 53, 54, 32, 225, 186, 153, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 49, 101, 98, 100, 32, 52, 53, 45, 49, 50, 52, 53, 54, 45, 49, 53, 32, 225, 186, 189, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 49, 101, 102, 51, 32, 52, 53, 45, 49, 54, 45, 49, 51, 52, 53, 54, 32, 225, 187, 179, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 49, 101, 102, 57, 32, 52, 53, 45, 49, 50, 52, 53, 54, 45, 49, 51, 52, 53, 54, 32, 225, 187, 185, 10, 10, 10, 35, 32, 32, 32, 85, 110, 105, 99, 111, 100, 101, 58, 32, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 10, 10, 115, 112, 97, 99, 101, 32, 92, 120, 50, 48, 48, 48, 32, 48, 10, 115, 112, 97, 99, 101, 32, 92, 120, 50, 48, 48, 49, 32, 48, 10, 115, 112, 97, 99, 101, 32, 92, 120, 50, 48, 48, 50, 32, 48, 10, 115, 112, 97, 99, 101, 32, 92, 120, 50, 48, 48, 51, 32, 48, 10, 115, 112, 97, 99, 101, 32, 92, 120, 50, 48, 48, 52, 32, 48, 10, 115, 112, 97, 99, 101, 32, 92, 120, 50, 48, 48, 53, 32, 48, 10, 115, 112, 97, 99, 101, 32, 92, 120, 50, 48, 48, 54, 32, 48, 10, 115, 112, 97, 99, 101, 32, 92, 120, 50, 48, 48, 55, 32, 48, 10, 115, 112, 97, 99, 101, 32, 92, 120, 50, 48, 48, 56, 32, 48, 10, 115, 112, 97, 99, 101, 32, 92, 120, 50, 48, 48, 57, 32, 48, 10, 115, 112, 97, 99, 101, 32, 92, 120, 50, 48, 48, 97, 32, 48, 10, 115, 112, 97, 99, 101, 32, 92, 120, 50, 48, 48, 98, 32, 48, 10, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 92, 120, 50, 48, 49, 48, 32, 51, 54, 32, 226, 128, 144, 10, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 92, 120, 50, 48, 49, 49, 32, 51, 54, 32, 226, 128, 145, 10, 110, 111, 98, 97, 99, 107, 32, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 92, 120, 50, 48, 49, 51, 32, 54, 45, 51, 54, 32, 226, 128, 147, 32, 98, 97, 99, 107, 116, 114, 97, 110, 115, 108, 97, 116, 101, 32, 97, 115, 32, 92, 120, 50, 48, 49, 52, 10, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 92, 120, 50, 48, 49, 52, 32, 54, 45, 51, 54, 32, 226, 128, 148, 32, 32, 32, 82, 117, 108, 101, 115, 32, 111, 102, 32, 85, 69, 66, 44, 32, 65, 112, 112, 46, 51, 10, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 92, 120, 50, 48, 49, 53, 32, 53, 45, 54, 45, 51, 54, 32, 226, 128, 149, 10, 110, 111, 98, 97, 99, 107, 32, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 92, 120, 50, 48, 49, 56, 32, 54, 45, 50, 51, 54, 32, 226, 128, 152, 10, 110, 111, 98, 97, 99, 107, 32, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 92, 120, 50, 48, 49, 57, 32, 54, 45, 51, 53, 54, 32, 226, 128, 153, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 92, 120, 50, 48, 49, 57, 32, 37, 97, 32, 51, 32, 35, 32, 115, 105, 110, 103, 108, 101, 32, 113, 117, 111, 116, 101, 32, 98, 101, 116, 119, 101, 101, 110, 32, 108, 101, 116, 116, 101, 114, 115, 32, 105, 115, 32, 114, 101, 97, 108, 108, 121, 32, 32, 97, 112, 111, 115, 116, 114, 111, 112, 104, 101, 10, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 92, 120, 50, 48, 49, 99, 32, 50, 51, 54, 32, 226, 128, 156, 10, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 92, 120, 50, 48, 49, 100, 32, 51, 53, 54, 32, 226, 128, 157, 10, 115, 105, 103, 110, 32, 92, 120, 50, 48, 50, 48, 32, 52, 45, 54, 45, 49, 52, 53, 54, 32, 226, 128, 160, 32, 32, 32, 100, 97, 103, 103, 101, 114, 10, 115, 105, 103, 110, 32, 92, 120, 50, 48, 50, 49, 32, 52, 45, 54, 45, 49, 50, 52, 53, 54, 32, 226, 128, 161, 32, 32, 32, 100, 111, 117, 98, 108, 101, 32, 100, 97, 103, 103, 101, 114, 10, 115, 105, 103, 110, 32, 92, 120, 50, 48, 50, 50, 32, 52, 53, 54, 45, 50, 53, 54, 32, 226, 128, 162, 32, 32, 32, 98, 117, 108, 108, 101, 116, 10, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 92, 120, 50, 48, 50, 54, 32, 50, 53, 54, 45, 50, 53, 54, 45, 50, 53, 54, 32, 226, 128, 166, 32, 32, 32, 101, 108, 108, 105, 112, 115, 105, 115, 10, 115, 112, 97, 99, 101, 32, 92, 120, 50, 48, 50, 102, 32, 48, 32, 32, 32, 110, 97, 114, 114, 111, 119, 32, 110, 111, 45, 98, 114, 101, 97, 107, 32, 115, 112, 97, 99, 101, 10, 115, 105, 103, 110, 32, 92, 120, 50, 48, 51, 50, 32, 50, 51, 53, 54, 32, 226, 128, 178, 32, 32, 32, 112, 114, 105, 109, 101, 32, 40, 100, 101, 114, 105, 118, 97, 116, 105, 118, 101, 41, 10, 115, 105, 103, 110, 32, 92, 120, 50, 48, 51, 51, 32, 50, 51, 53, 54, 45, 50, 51, 53, 54, 32, 226, 128, 179, 32, 32, 32, 100, 111, 117, 98, 108, 101, 32, 112, 114, 105, 109, 101, 32, 40, 115, 101, 99, 111, 110, 100, 32, 100, 101, 114, 105, 118, 97, 116, 105, 118, 101, 41, 10, 10, 10, 35, 32, 32, 32, 85, 110, 105, 99, 111, 100, 101, 58, 32, 32, 83, 117, 112, 101, 114, 115, 99, 114, 105, 112, 116, 115, 32, 97, 110, 100, 32, 83, 117, 98, 115, 99, 114, 105, 112, 116, 115, 10, 10, 35, 32, 102, 97, 107, 101, 32, 105, 110, 100, 105, 99, 97, 116, 111, 114, 115, 32, 97, 110, 100, 32, 110, 117, 109, 101, 114, 105, 99, 32, 105, 110, 100, 105, 99, 97, 116, 111, 114, 10, 35, 109, 97, 116, 104, 32, 92, 120, 50, 48, 55, 48, 32, 51, 53, 45, 51, 52, 53, 54, 45, 50, 52, 53, 32, 226, 129, 176, 10, 10, 10, 35, 32, 32, 32, 85, 110, 105, 99, 111, 100, 101, 58, 32, 32, 67, 117, 114, 114, 101, 110, 99, 121, 32, 83, 121, 109, 98, 111, 108, 115, 10, 10, 115, 105, 103, 110, 32, 92, 120, 50, 48, 97, 51, 32, 52, 45, 49, 50, 52, 32, 226, 130, 163, 32, 102, 114, 97, 110, 99, 10, 115, 105, 103, 110, 32, 92, 120, 50, 48, 97, 54, 32, 52, 45, 49, 51, 52, 53, 32, 226, 130, 166, 32, 110, 97, 105, 114, 97, 10, 115, 105, 103, 110, 32, 92, 120, 50, 48, 97, 99, 32, 52, 45, 49, 53, 32, 226, 130, 172, 32, 101, 117, 114, 111, 10, 10, 10, 35, 32, 32, 32, 85, 110, 105, 99, 111, 100, 101, 58, 32, 32, 76, 101, 116, 116, 101, 114, 108, 105, 107, 101, 32, 83, 121, 109, 98, 111, 108, 115, 10, 10, 115, 105, 103, 110, 32, 92, 120, 50, 49, 50, 50, 32, 52, 53, 45, 50, 51, 52, 53, 32, 226, 132, 162, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 92, 120, 50, 49, 50, 54, 32, 54, 45, 52, 54, 45, 50, 52, 53, 54, 32, 226, 132, 166, 32, 79, 104, 109, 32, 115, 105, 103, 110, 44, 32, 115, 97, 109, 101, 32, 97, 115, 32, 99, 97, 112, 105, 116, 97, 108, 32, 79, 109, 101, 103, 97, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 92, 120, 50, 49, 50, 98, 32, 54, 45, 52, 53, 45, 49, 50, 52, 54, 45, 49, 32, 226, 132, 171, 32, 65, 110, 103, 115, 116, 114, 111, 109, 32, 115, 97, 109, 101, 32, 97, 115, 32, 99, 97, 112, 105, 116, 97, 108, 32, 65, 32, 119, 105, 116, 104, 32, 114, 105, 110, 103, 10, 10, 35, 32, 32, 32, 85, 110, 105, 99, 111, 100, 101, 58, 32, 32, 78, 117, 109, 98, 101, 114, 32, 70, 111, 114, 109, 115, 10, 10, 35, 32, 102, 97, 107, 101, 32, 110, 117, 109, 101, 114, 105, 99, 97, 108, 32, 105, 110, 100, 105, 99, 97, 116, 111, 114, 32, 102, 111, 114, 32, 115, 105, 109, 112, 108, 101, 32, 102, 114, 97, 99, 116, 105, 111, 110, 115, 10, 109, 97, 116, 104, 32, 92, 120, 50, 49, 53, 48, 32, 51, 52, 53, 54, 45, 49, 45, 51, 52, 45, 49, 50, 52, 53, 32, 226, 133, 144, 10, 109, 97, 116, 104, 32, 92, 120, 50, 49, 53, 49, 32, 51, 52, 53, 54, 45, 49, 45, 51, 52, 45, 50, 52, 32, 226, 133, 145, 10, 109, 97, 116, 104, 32, 92, 120, 50, 49, 53, 50, 32, 51, 52, 53, 54, 45, 49, 45, 51, 52, 45, 49, 45, 50, 52, 53, 32, 226, 133, 146, 10, 109, 97, 116, 104, 32, 92, 120, 50, 49, 53, 51, 32, 51, 52, 53, 54, 45, 49, 45, 51, 52, 45, 49, 52, 32, 226, 133, 147, 10, 109, 97, 116, 104, 32, 92, 120, 50, 49, 53, 52, 32, 51, 52, 53, 54, 45, 49, 50, 45, 51, 52, 45, 49, 52, 32, 226, 133, 148, 10, 109, 97, 116, 104, 32, 92, 120, 50, 49, 53, 53, 32, 51, 52, 53, 54, 45, 49, 45, 51, 52, 45, 49, 53, 32, 226, 133, 149, 10, 109, 97, 116, 104, 32, 92, 120, 50, 49, 53, 54, 32, 51, 52, 53, 54, 45, 49, 50, 45, 51, 52, 45, 49, 53, 32, 226, 133, 150, 10, 109, 97, 116, 104, 32, 92, 120, 50, 49, 53, 55, 32, 51, 52, 53, 54, 45, 49, 52, 45, 51, 52, 45, 49, 53, 32, 226, 133, 151, 10, 109, 97, 116, 104, 32, 92, 120, 50, 49, 53, 56, 32, 51, 52, 53, 54, 45, 49, 52, 53, 45, 51, 52, 45, 49, 53, 32, 226, 133, 152, 10, 109, 97, 116, 104, 32, 92, 120, 50, 49, 53, 57, 32, 51, 52, 53, 54, 45, 49, 45, 51, 52, 45, 49, 50, 52, 32, 226, 133, 153, 10, 109, 97, 116, 104, 32, 92, 120, 50, 49, 53, 97, 32, 51, 52, 53, 54, 45, 49, 53, 45, 51, 52, 45, 49, 50, 52, 32, 226, 133, 154, 10, 109, 97, 116, 104, 32, 92, 120, 50, 49, 53, 98, 32, 51, 52, 53, 54, 45, 49, 45, 51, 52, 45, 49, 50, 53, 32, 226, 133, 155, 10, 109, 97, 116, 104, 32, 92, 120, 50, 49, 53, 99, 32, 51, 52, 53, 54, 45, 49, 52, 45, 51, 52, 45, 49, 50, 53, 32, 226, 133, 156, 10, 109, 97, 116, 104, 32, 92, 120, 50, 49, 53, 100, 32, 51, 52, 53, 54, 45, 49, 53, 45, 51, 52, 45, 49, 50, 53, 32, 226, 133, 157, 10, 109, 97, 116, 104, 32, 92, 120, 50, 49, 53, 101, 32, 51, 52, 53, 54, 45, 49, 50, 52, 53, 45, 51, 52, 45, 49, 50, 53, 32, 226, 133, 158, 10, 109, 97, 116, 104, 32, 92, 120, 50, 49, 56, 57, 32, 51, 52, 53, 54, 45, 50, 52, 53, 45, 51, 52, 45, 49, 52, 32, 226, 134, 137, 10, 10, 10, 35, 32, 32, 32, 85, 110, 105, 99, 111, 100, 101, 58, 32, 32, 65, 114, 114, 111, 119, 115, 10, 10, 115, 105, 103, 110, 32, 92, 120, 50, 49, 57, 48, 32, 53, 54, 45, 49, 50, 53, 54, 45, 50, 52, 54, 32, 226, 134, 144, 10, 115, 105, 103, 110, 32, 92, 120, 50, 49, 57, 49, 32, 53, 54, 45, 49, 50, 53, 54, 45, 51, 52, 54, 32, 226, 134, 145, 10, 115, 105, 103, 110, 32, 92, 120, 50, 49, 57, 50, 32, 53, 54, 45, 49, 50, 53, 54, 45, 49, 51, 53, 32, 226, 134, 146, 10, 115, 105, 103, 110, 32, 92, 120, 50, 49, 57, 51, 32, 53, 54, 45, 49, 50, 53, 54, 45, 49, 52, 54, 32, 226, 134, 147, 10, 115, 105, 103, 110, 32, 92, 120, 50, 49, 57, 54, 32, 53, 54, 45, 49, 50, 53, 54, 45, 49, 53, 54, 32, 226, 134, 150, 10, 115, 105, 103, 110, 32, 92, 120, 50, 49, 57, 55, 32, 53, 54, 45, 49, 50, 53, 54, 45, 50, 51, 52, 32, 226, 134, 151, 10, 115, 105, 103, 110, 32, 92, 120, 50, 49, 57, 56, 32, 53, 54, 45, 49, 50, 53, 54, 45, 49, 50, 54, 32, 226, 134, 152, 10, 115, 105, 103, 110, 32, 92, 120, 50, 49, 57, 57, 32, 53, 54, 45, 49, 50, 53, 54, 45, 51, 52, 53, 32, 226, 134, 153, 10, 115, 105, 103, 110, 32, 92, 120, 50, 49, 97, 54, 32, 53, 54, 45, 49, 50, 53, 54, 45, 49, 50, 53, 54, 32, 226, 134, 166, 10, 115, 105, 103, 110, 32, 92, 120, 50, 49, 98, 50, 32, 53, 54, 45, 49, 50, 53, 54, 45, 50, 53, 54, 32, 226, 134, 178, 10, 115, 105, 103, 110, 32, 92, 120, 50, 49, 98, 51, 32, 53, 54, 45, 49, 50, 53, 54, 45, 51, 53, 54, 32, 226, 134, 179, 10, 115, 105, 103, 110, 32, 92, 120, 50, 49, 98, 53, 32, 53, 54, 45, 49, 50, 53, 54, 45, 50, 53, 54, 45, 49, 52, 54, 32, 226, 134, 181, 32, 32, 32, 82, 117, 108, 101, 115, 32, 111, 102, 32, 85, 69, 66, 44, 32, 112, 97, 103, 101, 32, 50, 49, 10, 115, 105, 103, 110, 32, 92, 120, 50, 49, 99, 48, 32, 53, 54, 45, 49, 50, 53, 54, 45, 52, 45, 49, 50, 51, 53, 32, 226, 135, 128, 10, 115, 105, 103, 110, 32, 92, 120, 50, 49, 99, 49, 32, 53, 54, 45, 49, 50, 53, 54, 45, 54, 45, 49, 50, 51, 53, 32, 226, 135, 129, 10, 115, 105, 103, 110, 32, 92, 120, 50, 49, 99, 99, 32, 52, 53, 45, 52, 53, 54, 45, 50, 51, 53, 54, 32, 226, 135, 140, 32, 32, 32, 101, 113, 117, 105, 108, 105, 98, 114, 105, 117, 109, 32, 97, 114, 114, 111, 119, 32, 40, 104, 97, 114, 112, 111, 111, 110, 115, 41, 10, 115, 105, 103, 110, 32, 92, 120, 50, 49, 100, 50, 32, 53, 54, 45, 49, 50, 53, 54, 45, 50, 51, 53, 54, 45, 50, 51, 53, 54, 32, 226, 135, 146, 10, 10, 10, 35, 32, 32, 32, 85, 110, 105, 99, 111, 100, 101, 58, 32, 32, 77, 97, 116, 104, 101, 109, 97, 116, 105, 99, 97, 108, 32, 79, 112, 101, 114, 97, 116, 111, 114, 115, 10, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 48, 48, 32, 52, 53, 45, 49, 32, 226, 136, 128, 32, 32, 32, 102, 111, 114, 32, 97, 108, 108, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 48, 50, 32, 52, 45, 49, 52, 53, 32, 226, 136, 130, 32, 32, 32, 112, 97, 114, 116, 105, 97, 108, 32, 100, 101, 114, 105, 118, 97, 116, 105, 118, 101, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 48, 51, 32, 52, 53, 45, 50, 54, 32, 226, 136, 131, 32, 32, 32, 116, 104, 101, 114, 101, 32, 101, 120, 105, 115, 116, 115, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 48, 52, 32, 52, 53, 45, 50, 54, 45, 52, 45, 49, 53, 54, 32, 226, 136, 132, 32, 32, 32, 116, 104, 101, 114, 101, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 101, 120, 105, 115, 116, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 48, 53, 32, 52, 45, 50, 52, 53, 32, 226, 136, 133, 32, 32, 32, 101, 109, 112, 116, 121, 32, 115, 101, 116, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 92, 120, 50, 50, 48, 54, 32, 54, 45, 52, 54, 45, 49, 52, 53, 32, 226, 136, 134, 32, 73, 110, 99, 114, 101, 109, 101, 110, 116, 32, 115, 97, 109, 101, 32, 97, 115, 32, 99, 97, 112, 105, 116, 97, 108, 32, 68, 101, 108, 116, 97, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 48, 55, 32, 52, 53, 45, 49, 52, 53, 32, 226, 136, 135, 32, 32, 32, 110, 97, 98, 108, 97, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 48, 56, 32, 52, 53, 45, 49, 53, 32, 226, 136, 136, 32, 32, 32, 101, 108, 101, 109, 101, 110, 116, 32, 111, 102, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 48, 57, 32, 52, 53, 45, 49, 53, 45, 52, 45, 49, 53, 54, 32, 226, 136, 137, 32, 110, 111, 116, 32, 97, 110, 32, 101, 108, 101, 109, 101, 110, 116, 32, 111, 102, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 48, 98, 32, 52, 45, 52, 53, 45, 49, 53, 32, 226, 136, 139, 32, 32, 32, 99, 111, 110, 116, 97, 105, 110, 115, 32, 40, 115, 117, 99, 104, 32, 116, 104, 97, 116, 41, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 48, 99, 32, 52, 45, 52, 53, 45, 49, 53, 45, 52, 45, 49, 53, 54, 32, 226, 136, 140, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 99, 111, 110, 116, 97, 105, 110, 32, 97, 115, 32, 109, 101, 109, 98, 101, 114, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 48, 102, 32, 54, 45, 52, 54, 45, 49, 50, 51, 52, 32, 226, 136, 143, 32, 32, 32, 112, 114, 111, 100, 117, 99, 116, 32, 40, 99, 97, 112, 105, 116, 97, 108, 32, 112, 105, 41, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 49, 49, 32, 54, 45, 52, 54, 45, 50, 51, 52, 32, 226, 136, 145, 32, 32, 32, 115, 117, 109, 32, 40, 99, 97, 112, 105, 116, 111, 108, 32, 115, 105, 103, 109, 97, 41, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 49, 50, 32, 53, 45, 51, 54, 32, 226, 136, 146, 32, 32, 32, 109, 105, 110, 117, 115, 32, 115, 105, 103, 110, 32, 40, 110, 111, 116, 32, 104, 121, 112, 104, 101, 110, 41, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 49, 51, 32, 52, 53, 54, 45, 51, 54, 32, 226, 136, 147, 32, 32, 32, 109, 105, 110, 117, 115, 32, 111, 114, 32, 112, 108, 117, 115, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 92, 120, 50, 50, 49, 54, 32, 52, 53, 54, 45, 49, 54, 32, 226, 136, 150, 32, 32, 115, 101, 116, 32, 109, 105, 110, 117, 115, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 92, 120, 50, 50, 49, 55, 32, 53, 45, 51, 53, 32, 226, 136, 151, 32, 32, 32, 97, 115, 116, 101, 114, 105, 115, 107, 32, 111, 112, 101, 114, 97, 116, 111, 114, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 49, 56, 32, 53, 45, 51, 53, 54, 32, 226, 136, 152, 32, 32, 32, 104, 111, 108, 108, 111, 119, 32, 100, 111, 116, 32, 40, 114, 105, 110, 103, 32, 111, 112, 101, 114, 97, 116, 111, 114, 41, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 49, 97, 32, 53, 45, 49, 52, 54, 32, 226, 136, 154, 32, 32, 32, 115, 113, 117, 97, 114, 101, 32, 114, 111, 111, 116, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 49, 100, 32, 52, 53, 54, 45, 53, 45, 50, 51, 53, 54, 32, 32, 32, 226, 136, 157, 32, 112, 114, 111, 112, 111, 114, 116, 105, 111, 110, 97, 108, 32, 116, 111, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 49, 101, 32, 51, 52, 53, 54, 45, 49, 50, 51, 52, 53, 54, 32, 32, 32, 226, 136, 158, 32, 105, 110, 102, 105, 110, 105, 116, 121, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 50, 48, 32, 52, 53, 54, 45, 50, 52, 54, 32, 32, 32, 226, 136, 160, 32, 97, 110, 103, 108, 101, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 50, 49, 32, 52, 54, 45, 52, 53, 54, 45, 50, 52, 54, 32, 32, 32, 226, 136, 161, 32, 109, 101, 97, 115, 117, 114, 101, 100, 32, 97, 110, 103, 108, 101, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 92, 120, 50, 50, 50, 51, 32, 52, 53, 54, 45, 49, 50, 53, 54, 32, 226, 136, 163, 32, 32, 32, 100, 105, 118, 105, 100, 101, 115, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 50, 52, 32, 52, 53, 54, 45, 49, 50, 53, 54, 45, 52, 45, 49, 53, 54, 32, 226, 136, 164, 32, 32, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 100, 105, 118, 105, 100, 101, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 50, 53, 32, 51, 52, 53, 54, 45, 49, 50, 51, 32, 32, 32, 226, 136, 165, 32, 112, 97, 114, 97, 108, 108, 101, 108, 32, 116, 111, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 50, 54, 32, 51, 52, 53, 54, 45, 49, 50, 51, 45, 52, 45, 49, 53, 54, 32, 226, 136, 166, 32, 32, 32, 110, 111, 116, 32, 112, 97, 114, 97, 108, 108, 101, 108, 32, 116, 111, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 50, 55, 32, 52, 45, 50, 51, 54, 32, 226, 136, 167, 32, 32, 32, 108, 111, 103, 105, 99, 97, 108, 32, 97, 110, 100, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 50, 56, 32, 52, 45, 50, 51, 53, 32, 226, 136, 168, 32, 32, 32, 108, 111, 103, 105, 99, 97, 108, 32, 111, 114, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 50, 57, 32, 52, 54, 45, 50, 51, 54, 32, 226, 136, 169, 32, 32, 32, 115, 101, 116, 32, 105, 110, 116, 101, 114, 115, 101, 99, 116, 105, 111, 110, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 50, 97, 32, 52, 54, 45, 50, 51, 53, 32, 226, 136, 170, 32, 32, 32, 115, 101, 116, 32, 117, 110, 105, 111, 110, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 50, 98, 32, 50, 51, 52, 54, 32, 226, 136, 171, 32, 32, 32, 105, 110, 116, 101, 103, 114, 97, 108, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 50, 101, 32, 52, 45, 50, 51, 52, 54, 32, 32, 32, 99, 111, 110, 116, 111, 117, 114, 32, 105, 110, 116, 101, 103, 114, 97, 108, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 92, 120, 50, 50, 51, 52, 32, 54, 45, 49, 54, 32, 226, 136, 180, 32, 32, 32, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 32, 32, 35, 32, 117, 115, 105, 110, 103, 32, 110, 111, 98, 97, 99, 107, 32, 116, 111, 32, 97, 118, 111, 105, 100, 32, 99, 111, 110, 102, 108, 105, 99, 116, 32, 119, 105, 116, 104, 32, 67, 104, 105, 108, 100, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 51, 53, 32, 52, 45, 51, 52, 32, 226, 136, 181, 32, 32, 32, 98, 101, 99, 97, 117, 115, 101, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 92, 120, 50, 50, 51, 54, 32, 50, 53, 32, 226, 136, 182, 32, 32, 32, 114, 97, 116, 105, 111, 32, 32, 32, 35, 32, 117, 115, 105, 110, 103, 32, 110, 111, 98, 97, 99, 107, 32, 116, 111, 32, 97, 118, 111, 105, 100, 32, 99, 111, 110, 102, 108, 105, 99, 116, 32, 119, 105, 116, 104, 32, 58, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 51, 55, 32, 50, 53, 45, 50, 53, 32, 226, 136, 183, 32, 32, 32, 112, 114, 111, 112, 111, 114, 116, 105, 111, 110, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 92, 120, 50, 50, 51, 99, 32, 52, 45, 51, 53, 32, 226, 136, 188, 32, 32, 32, 116, 105, 108, 100, 101, 32, 111, 112, 101, 114, 97, 116, 111, 114, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 52, 49, 32, 52, 45, 51, 53, 45, 52, 45, 49, 53, 54, 32, 226, 137, 129, 32, 32, 32, 110, 111, 116, 32, 116, 105, 108, 100, 101, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 52, 51, 32, 52, 53, 54, 45, 51, 53, 32, 226, 137, 131, 32, 32, 32, 97, 115, 121, 109, 112, 116, 111, 116, 105, 99, 97, 108, 108, 121, 32, 101, 113, 117, 97, 108, 32, 116, 111, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 52, 52, 32, 52, 53, 54, 45, 51, 53, 45, 52, 45, 49, 53, 54, 32, 226, 137, 132, 32, 32, 110, 111, 116, 32, 97, 115, 121, 109, 112, 116, 111, 116, 105, 99, 97, 108, 108, 121, 32, 101, 113, 117, 97, 108, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 52, 53, 32, 53, 45, 52, 53, 54, 45, 51, 53, 32, 226, 137, 133, 32, 32, 32, 97, 112, 112, 114, 111, 120, 105, 109, 97, 116, 101, 108, 121, 32, 101, 113, 117, 97, 108, 32, 116, 111, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 52, 55, 32, 53, 45, 52, 53, 54, 45, 51, 53, 45, 52, 45, 49, 53, 54, 32, 226, 137, 135, 32, 32, 110, 101, 105, 116, 104, 101, 114, 32, 97, 112, 112, 114, 111, 120, 105, 109, 97, 116, 101, 108, 121, 32, 110, 111, 114, 32, 97, 99, 116, 117, 97, 108, 108, 121, 32, 101, 113, 117, 97, 108, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 52, 56, 32, 52, 53, 45, 51, 53, 32, 226, 137, 136, 32, 32, 32, 97, 108, 109, 111, 115, 116, 32, 101, 113, 117, 97, 108, 32, 116, 111, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 52, 57, 32, 52, 53, 45, 51, 53, 45, 52, 45, 49, 53, 54, 32, 226, 137, 137, 32, 32, 110, 111, 116, 32, 97, 108, 109, 111, 115, 116, 32, 101, 113, 117, 97, 108, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 52, 102, 32, 52, 53, 45, 53, 45, 50, 51, 53, 54, 32, 226, 137, 143, 32, 32, 32, 100, 105, 102, 102, 101, 114, 101, 110, 99, 101, 32, 98, 101, 116, 119, 101, 101, 110, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 53, 49, 32, 52, 54, 45, 53, 45, 50, 51, 53, 54, 32, 226, 137, 145, 32, 32, 32, 103, 101, 111, 109, 101, 116, 114, 105, 99, 97, 108, 108, 121, 32, 101, 113, 117, 97, 108, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 54, 48, 32, 53, 45, 50, 51, 53, 54, 45, 52, 45, 49, 53, 54, 32, 226, 137, 160, 32, 32, 32, 110, 111, 116, 32, 101, 113, 117, 97, 108, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 54, 49, 32, 52, 53, 54, 45, 49, 50, 51, 52, 53, 54, 32, 226, 137, 161, 32, 32, 32, 105, 100, 101, 110, 116, 105, 99, 97, 108, 32, 40, 101, 113, 117, 105, 118, 97, 108, 101, 110, 116, 41, 32, 116, 111, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 54, 50, 32, 52, 53, 54, 45, 49, 50, 51, 52, 53, 54, 45, 52, 45, 49, 53, 54, 32, 226, 137, 162, 32, 32, 32, 110, 111, 116, 32, 105, 100, 101, 110, 116, 105, 99, 97, 108, 32, 116, 111, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 54, 52, 32, 52, 53, 54, 45, 52, 45, 49, 50, 54, 32, 226, 137, 164, 32, 32, 32, 108, 101, 115, 115, 32, 116, 104, 97, 110, 32, 111, 114, 32, 101, 113, 117, 97, 108, 32, 116, 111, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 54, 53, 32, 52, 53, 54, 45, 52, 45, 51, 52, 53, 32, 226, 137, 165, 32, 32, 32, 103, 114, 101, 97, 116, 101, 114, 32, 116, 104, 97, 110, 32, 111, 114, 32, 101, 113, 117, 97, 108, 32, 116, 111, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 54, 97, 32, 52, 54, 45, 52, 45, 49, 50, 54, 32, 226, 137, 170, 32, 32, 32, 109, 117, 99, 104, 32, 108, 101, 115, 115, 32, 116, 104, 97, 110, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 54, 98, 32, 52, 54, 45, 52, 45, 51, 52, 53, 32, 226, 137, 171, 32, 32, 32, 109, 117, 99, 104, 32, 103, 114, 101, 97, 116, 101, 114, 32, 116, 104, 97, 110, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 54, 101, 32, 52, 45, 49, 50, 54, 45, 52, 45, 49, 53, 54, 32, 226, 137, 174, 32, 32, 32, 110, 111, 116, 32, 108, 101, 115, 115, 32, 116, 104, 97, 110, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 54, 102, 32, 52, 45, 51, 52, 53, 45, 52, 45, 49, 53, 54, 32, 226, 137, 175, 32, 32, 32, 110, 111, 116, 32, 103, 114, 101, 97, 116, 101, 114, 32, 116, 104, 97, 110, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 55, 48, 32, 52, 53, 54, 45, 52, 45, 49, 50, 54, 45, 52, 45, 49, 53, 54, 32, 226, 137, 176, 32, 32, 110, 101, 105, 116, 104, 101, 114, 32, 108, 101, 115, 115, 32, 116, 104, 97, 110, 32, 110, 111, 114, 32, 101, 113, 117, 97, 108, 32, 116, 111, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 55, 49, 32, 52, 53, 54, 45, 52, 45, 51, 52, 53, 45, 52, 45, 49, 53, 54, 32, 226, 137, 177, 32, 32, 32, 110, 101, 105, 116, 104, 101, 114, 32, 103, 114, 101, 97, 116, 104, 101, 114, 32, 116, 104, 97, 110, 32, 110, 111, 114, 32, 101, 113, 117, 97, 108, 32, 116, 111, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 56, 50, 32, 52, 53, 45, 49, 50, 54, 32, 226, 138, 130, 32, 32, 32, 115, 117, 98, 115, 101, 116, 32, 111, 102, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 56, 51, 32, 52, 53, 45, 51, 52, 53, 32, 226, 138, 131, 32, 32, 32, 115, 117, 112, 101, 114, 115, 101, 116, 32, 111, 102, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 56, 52, 32, 52, 53, 45, 49, 50, 54, 45, 52, 45, 49, 53, 54, 32, 226, 138, 132, 32, 110, 111, 116, 32, 115, 117, 98, 115, 101, 116, 32, 111, 102, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 56, 53, 32, 52, 53, 45, 51, 52, 53, 45, 52, 45, 49, 53, 54, 32, 226, 138, 133, 32, 110, 111, 116, 32, 115, 117, 112, 101, 114, 115, 101, 116, 32, 111, 102, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 56, 54, 32, 52, 53, 54, 45, 52, 53, 45, 49, 50, 54, 32, 226, 138, 134, 32, 32, 32, 115, 117, 98, 115, 101, 116, 32, 111, 114, 32, 101, 113, 117, 97, 108, 32, 116, 111, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 56, 55, 32, 52, 53, 54, 45, 52, 53, 45, 51, 52, 53, 32, 226, 138, 135, 32, 32, 32, 115, 117, 112, 101, 114, 115, 101, 116, 32, 111, 114, 32, 101, 113, 117, 97, 108, 32, 116, 111, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 56, 56, 32, 52, 53, 54, 45, 52, 53, 45, 49, 50, 54, 45, 52, 45, 49, 53, 54, 32, 226, 138, 136, 32, 32, 32, 110, 101, 105, 116, 104, 101, 114, 32, 97, 32, 115, 117, 98, 115, 101, 116, 32, 110, 111, 114, 32, 101, 113, 117, 97, 108, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 56, 57, 32, 52, 53, 54, 45, 52, 53, 45, 51, 52, 53, 45, 52, 45, 49, 53, 54, 32, 226, 138, 137, 32, 32, 110, 101, 105, 116, 104, 101, 114, 32, 97, 32, 115, 117, 112, 101, 114, 115, 101, 116, 32, 110, 111, 114, 32, 101, 113, 117, 97, 108, 32, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 56, 97, 32, 52, 54, 45, 52, 53, 45, 49, 50, 54, 32, 226, 138, 138, 32, 32, 32, 112, 114, 111, 112, 101, 114, 32, 115, 117, 98, 115, 101, 116, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 56, 98, 32, 52, 54, 45, 52, 53, 45, 51, 52, 53, 32, 226, 138, 139, 32, 32, 32, 112, 114, 111, 112, 101, 114, 32, 115, 117, 112, 101, 114, 115, 101, 116, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 92, 120, 50, 50, 97, 50, 32, 52, 53, 54, 45, 50, 53, 32, 226, 138, 162, 32, 32, 114, 105, 103, 104, 116, 32, 116, 97, 99, 107, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 97, 51, 32, 52, 45, 52, 53, 54, 45, 50, 53, 32, 226, 138, 163, 32, 32, 32, 108, 101, 102, 116, 32, 116, 97, 99, 107, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 97, 53, 32, 51, 52, 53, 54, 45, 51, 54, 32, 226, 138, 165, 32, 32, 32, 117, 112, 32, 116, 97, 99, 107, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 97, 54, 32, 52, 53, 54, 45, 50, 53, 32, 226, 138, 166, 32, 32, 32, 97, 115, 115, 101, 114, 116, 105, 111, 110, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 97, 56, 32, 52, 53, 45, 52, 53, 54, 45, 50, 53, 32, 226, 138, 168, 32, 32, 32, 118, 97, 108, 105, 100, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 97, 99, 32, 52, 53, 54, 45, 50, 53, 45, 52, 45, 49, 53, 54, 32, 226, 138, 172, 32, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 112, 114, 111, 118, 101, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 97, 100, 32, 52, 53, 45, 52, 53, 54, 45, 50, 53, 45, 52, 45, 49, 53, 54, 32, 226, 138, 173, 32, 32, 32, 110, 111, 116, 32, 116, 114, 117, 101, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 98, 50, 32, 52, 45, 52, 53, 54, 45, 49, 50, 54, 32, 226, 138, 178, 32, 32, 32, 110, 111, 114, 109, 97, 108, 32, 115, 117, 98, 103, 114, 111, 117, 112, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 98, 51, 32, 52, 45, 52, 53, 54, 45, 51, 52, 53, 32, 226, 138, 179, 32, 32, 32, 99, 111, 110, 116, 97, 105, 110, 115, 32, 97, 115, 32, 110, 111, 114, 109, 97, 108, 32, 115, 117, 98, 103, 114, 111, 117, 112, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 98, 52, 32, 52, 53, 54, 45, 52, 53, 54, 45, 49, 50, 54, 32, 226, 138, 180, 32, 32, 32, 110, 111, 114, 109, 97, 108, 32, 115, 117, 98, 103, 114, 111, 117, 112, 32, 111, 114, 32, 101, 113, 117, 97, 108, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 98, 53, 32, 52, 53, 54, 45, 52, 53, 54, 45, 51, 52, 53, 32, 226, 138, 181, 32, 32, 32, 99, 111, 110, 116, 97, 105, 110, 115, 32, 97, 115, 32, 110, 111, 114, 109, 97, 108, 32, 115, 117, 98, 103, 114, 111, 117, 112, 32, 111, 114, 32, 101, 113, 117, 97, 108, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 98, 101, 32, 51, 52, 53, 54, 45, 52, 53, 54, 45, 50, 52, 54, 32, 226, 138, 190, 32, 32, 32, 114, 105, 103, 104, 116, 32, 97, 110, 103, 108, 101, 32, 119, 105, 116, 104, 32, 97, 114, 99, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 99, 53, 32, 53, 45, 50, 53, 54, 32, 226, 139, 133, 32, 32, 32, 100, 111, 116, 32, 111, 112, 101, 114, 97, 116, 111, 114, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 101, 97, 32, 52, 45, 52, 53, 54, 45, 49, 50, 54, 45, 52, 45, 49, 53, 54, 32, 226, 139, 170, 32, 110, 111, 116, 32, 110, 111, 114, 109, 97, 108, 32, 115, 117, 98, 103, 114, 111, 117, 112, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 101, 98, 32, 52, 45, 52, 53, 54, 45, 51, 52, 53, 45, 52, 45, 49, 53, 54, 32, 226, 139, 171, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 99, 111, 110, 116, 97, 105, 110, 32, 97, 115, 32, 110, 111, 114, 109, 97, 108, 32, 115, 117, 98, 103, 114, 111, 117, 112, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 101, 99, 32, 52, 53, 54, 45, 52, 53, 54, 45, 49, 50, 54, 45, 52, 45, 49, 53, 54, 32, 226, 139, 172, 32, 110, 111, 116, 32, 110, 111, 114, 109, 97, 108, 32, 115, 117, 98, 103, 114, 111, 117, 112, 32, 110, 111, 114, 32, 101, 113, 117, 97, 108, 10, 115, 105, 103, 110, 32, 92, 120, 50, 50, 101, 100, 32, 52, 53, 54, 45, 52, 53, 54, 45, 51, 52, 53, 45, 52, 45, 49, 53, 54, 32, 226, 139, 173, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 99, 111, 110, 116, 97, 105, 110, 32, 97, 115, 32, 110, 111, 114, 109, 97, 108, 32, 115, 117, 98, 103, 114, 111, 117, 112, 32, 110, 111, 114, 32, 101, 113, 117, 97, 108, 10, 10, 35, 32, 32, 32, 85, 110, 105, 99, 111, 100, 101, 58, 32, 32, 77, 105, 115, 99, 101, 108, 108, 97, 110, 101, 111, 117, 115, 32, 84, 101, 99, 104, 110, 105, 99, 97, 108, 10, 10, 109, 97, 116, 104, 32, 92, 120, 50, 51, 50, 57, 32, 52, 45, 49, 50, 54, 32, 226, 140, 169, 10, 109, 97, 116, 104, 32, 92, 120, 50, 51, 50, 65, 32, 52, 45, 51, 52, 53, 32, 226, 140, 170, 10, 10, 10, 35, 32, 32, 32, 85, 110, 105, 99, 111, 100, 101, 58, 32, 32, 66, 111, 120, 32, 68, 114, 97, 119, 105, 110, 103, 10, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 92, 120, 50, 53, 48, 50, 32, 52, 53, 54, 32, 226, 148, 130, 32, 32, 32, 116, 97, 108, 108, 121, 32, 109, 97, 114, 107, 32, 45, 32, 118, 101, 114, 116, 105, 99, 97, 108, 32, 115, 105, 110, 103, 108, 101, 32, 115, 111, 108, 105, 100, 32, 108, 105, 110, 101, 32, 115, 101, 103, 109, 101, 110, 116, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 92, 120, 50, 53, 48, 97, 32, 52, 53, 32, 226, 148, 138, 32, 32, 32, 102, 105, 114, 115, 116, 32, 118, 97, 114, 105, 97, 110, 116, 32, 118, 101, 114, 116, 105, 99, 97, 108, 32, 108, 105, 110, 101, 32, 115, 101, 103, 109, 101, 110, 116, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 92, 120, 50, 53, 53, 49, 32, 54, 45, 52, 53, 54, 32, 226, 149, 145, 32, 32, 32, 115, 101, 99, 111, 110, 100, 32, 118, 97, 114, 105, 97, 110, 116, 32, 118, 101, 114, 116, 105, 99, 97, 108, 32, 108, 105, 110, 101, 32, 115, 101, 103, 109, 101, 110, 116, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 92, 120, 50, 53, 55, 49, 32, 51, 52, 53, 32, 226, 149, 177, 32, 32, 32, 114, 105, 103, 104, 116, 45, 108, 101, 97, 110, 105, 110, 103, 32, 115, 105, 110, 103, 108, 101, 32, 115, 111, 108, 105, 100, 32, 100, 105, 97, 103, 111, 110, 97, 108, 32, 108, 105, 110, 101, 32, 115, 101, 103, 109, 101, 110, 116, 32, 32, 32, 35, 32, 117, 115, 105, 110, 103, 32, 110, 111, 98, 97, 99, 107, 32, 116, 111, 32, 97, 118, 111, 105, 100, 32, 99, 111, 110, 102, 108, 105, 99, 116, 32, 119, 105, 116, 104, 32, 34, 97, 114, 34, 32, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 92, 120, 50, 53, 55, 50, 32, 49, 50, 54, 32, 226, 149, 178, 32, 32, 32, 108, 101, 102, 116, 45, 108, 101, 97, 110, 105, 110, 103, 32, 115, 105, 110, 103, 108, 101, 32, 115, 111, 108, 105, 100, 32, 100, 105, 97, 103, 111, 110, 97, 108, 32, 108, 105, 110, 101, 32, 115, 101, 103, 109, 101, 110, 116, 32, 32, 32, 35, 32, 117, 115, 105, 110, 103, 32, 110, 111, 98, 97, 99, 107, 32, 116, 111, 32, 97, 118, 111, 105, 100, 32, 99, 111, 110, 102, 108, 105, 99, 116, 32, 119, 105, 116, 104, 32, 34, 103, 104, 34, 32, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 10, 10, 10, 35, 32, 32, 32, 85, 110, 105, 99, 111, 100, 101, 58, 32, 32, 71, 101, 111, 109, 101, 116, 114, 105, 99, 32, 83, 104, 97, 112, 101, 115, 10, 10, 115, 105, 103, 110, 32, 92, 120, 50, 53, 97, 48, 32, 52, 53, 54, 45, 49, 50, 52, 54, 45, 51, 52, 53, 54, 45, 49, 52, 53, 32, 226, 150, 160, 32, 32, 32, 102, 105, 108, 108, 101, 100, 32, 40, 115, 111, 108, 105, 100, 41, 32, 115, 113, 117, 97, 114, 101, 10, 115, 105, 103, 110, 32, 92, 120, 50, 53, 97, 49, 32, 49, 50, 52, 54, 45, 51, 52, 53, 54, 45, 49, 52, 53, 32, 226, 150, 161, 32, 32, 32, 115, 113, 117, 97, 114, 101, 10, 115, 105, 103, 110, 32, 92, 120, 50, 53, 97, 55, 32, 52, 54, 45, 49, 50, 52, 54, 45, 51, 52, 53, 54, 45, 49, 52, 53, 32, 226, 150, 167, 32, 32, 32, 115, 104, 97, 100, 101, 100, 32, 115, 113, 117, 97, 114, 101, 32, 40, 117, 112, 112, 101, 114, 32, 108, 101, 102, 116, 32, 116, 111, 32, 108, 111, 119, 101, 114, 32, 114, 105, 103, 104, 116, 41, 10, 115, 105, 103, 110, 32, 92, 120, 50, 53, 98, 50, 32, 52, 53, 54, 45, 49, 50, 52, 54, 45, 51, 52, 53, 54, 45, 49, 52, 32, 226, 150, 178, 32, 32, 32, 102, 105, 108, 108, 101, 100, 32, 40, 115, 111, 108, 105, 100, 41, 32, 40, 101, 113, 117, 105, 108, 97, 116, 101, 114, 97, 108, 41, 32, 116, 114, 105, 97, 110, 103, 108, 101, 10, 115, 105, 103, 110, 32, 92, 120, 50, 53, 98, 51, 32, 49, 50, 52, 54, 45, 51, 52, 53, 54, 45, 49, 52, 32, 226, 150, 179, 32, 32, 32, 114, 101, 103, 117, 108, 97, 114, 32, 40, 101, 113, 117, 105, 108, 97, 116, 101, 114, 97, 108, 41, 32, 116, 114, 105, 97, 110, 103, 108, 101, 10, 115, 105, 103, 110, 32, 92, 120, 50, 53, 99, 98, 32, 49, 50, 52, 54, 45, 49, 50, 51, 52, 53, 54, 32, 226, 151, 139, 32, 32, 32, 99, 105, 114, 99, 108, 101, 10, 115, 105, 103, 110, 32, 92, 120, 50, 53, 99, 100, 32, 52, 54, 45, 49, 50, 52, 54, 45, 49, 50, 51, 52, 53, 54, 32, 226, 151, 141, 32, 32, 32, 115, 104, 97, 100, 101, 100, 32, 99, 105, 114, 99, 108, 101, 10, 115, 105, 103, 110, 32, 92, 120, 50, 53, 97, 97, 32, 52, 53, 54, 45, 50, 53, 54, 32, 226, 150, 170, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 92, 120, 50, 53, 99, 102, 32, 53, 45, 51, 53, 32, 226, 151, 143, 32, 32, 32, 98, 108, 97, 99, 107, 32, 99, 105, 114, 99, 108, 101, 32, 32, 32, 35, 32, 110, 111, 116, 32, 114, 101, 112, 114, 101, 115, 101, 110, 116, 105, 110, 103, 32, 102, 105, 108, 108, 101, 100, 32, 99, 105, 114, 99, 108, 101, 32, 115, 104, 97, 112, 101, 32, 97, 115, 32, 105, 116, 32, 105, 115, 32, 109, 111, 115, 116, 108, 121, 32, 117, 115, 101, 100, 32, 105, 110, 32, 112, 97, 115, 115, 119, 111, 114, 100, 32, 102, 105, 101, 108, 100, 115, 32, 116, 111, 32, 114, 101, 112, 114, 101, 115, 101, 110, 116, 32, 104, 105, 100, 100, 101, 110, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 115, 10, 10, 10, 35, 32, 32, 32, 85, 110, 105, 99, 111, 100, 101, 58, 32, 32, 77, 105, 115, 99, 101, 108, 108, 97, 110, 101, 111, 117, 115, 32, 83, 121, 109, 98, 111, 108, 115, 10, 10, 115, 105, 103, 110, 32, 92, 120, 50, 54, 52, 48, 32, 52, 53, 45, 49, 51, 52, 54, 32, 226, 153, 128, 10, 115, 105, 103, 110, 32, 92, 120, 50, 54, 52, 50, 32, 52, 53, 45, 49, 51, 52, 53, 54, 32, 226, 153, 130, 10, 115, 105, 103, 110, 32, 92, 120, 50, 54, 54, 68, 32, 51, 52, 53, 54, 45, 49, 50, 54, 32, 226, 153, 173, 10, 115, 105, 103, 110, 32, 92, 120, 50, 54, 54, 69, 32, 51, 52, 53, 54, 45, 49, 54, 32, 226, 153, 174, 10, 115, 105, 103, 110, 32, 92, 120, 50, 54, 54, 70, 32, 51, 52, 53, 54, 45, 49, 52, 54, 32, 226, 153, 175, 10, 10, 10, 35, 32, 32, 32, 85, 110, 105, 99, 111, 100, 101, 58, 32, 32, 68, 105, 110, 103, 98, 97, 116, 115, 10, 10, 115, 105, 103, 110, 32, 92, 120, 50, 55, 49, 51, 32, 52, 45, 49, 52, 54, 32, 226, 156, 147, 32, 99, 104, 101, 99, 107, 32, 109, 97, 114, 107, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 92, 120, 50, 55, 49, 52, 32, 52, 45, 49, 52, 54, 32, 226, 156, 148, 32, 99, 104, 101, 99, 107, 32, 109, 97, 114, 107, 10, 10, 10, 35, 32, 32, 32, 85, 110, 105, 99, 111, 100, 101, 58, 32, 32, 77, 105, 115, 99, 101, 108, 108, 97, 110, 101, 111, 117, 115, 32, 77, 97, 116, 104, 101, 109, 97, 116, 105, 99, 97, 108, 32, 83, 121, 109, 98, 111, 108, 115, 45, 65, 10, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 92, 120, 50, 55, 99, 50, 32, 51, 52, 53, 54, 45, 51, 54, 32, 226, 159, 130, 32, 32, 112, 101, 114, 112, 101, 110, 100, 105, 99, 117, 108, 97, 114, 10, 10, 10, 35, 32, 32, 32, 85, 110, 105, 99, 111, 100, 101, 58, 32, 32, 77, 105, 115, 99, 101, 108, 108, 97, 110, 101, 111, 117, 115, 32, 77, 97, 116, 104, 101, 109, 97, 116, 105, 99, 97, 108, 32, 83, 121, 109, 98, 111, 108, 115, 45, 66, 10, 10, 115, 105, 103, 110, 32, 92, 120, 50, 57, 56, 48, 32, 51, 52, 53, 54, 45, 52, 53, 54, 45, 49, 50, 51, 32, 226, 166, 128, 32, 116, 114, 105, 112, 108, 101, 32, 118, 101, 114, 116, 105, 99, 97, 108, 32, 98, 97, 114, 32, 100, 101, 108, 105, 109, 105, 116, 101, 114, 10, 115, 105, 103, 110, 32, 92, 120, 50, 57, 98, 53, 32, 52, 54, 45, 50, 52, 53, 32, 226, 166, 181, 32, 32, 32, 39, 110, 111, 114, 109, 97, 108, 39, 32, 40, 115, 117, 112, 101, 114, 115, 99, 114, 105, 112, 116, 32, 99, 105, 114, 99, 108, 101, 32, 99, 114, 111, 115, 115, 101, 100, 32, 98, 121, 32, 104, 111, 114, 105, 122, 111, 110, 116, 97, 108, 32, 108, 105, 110, 101, 41, 10, 10, 10, 35, 32, 32, 32, 85, 110, 105, 99, 111, 100, 101, 58, 32, 32, 83, 117, 112, 112, 108, 101, 109, 101, 110, 116, 97, 108, 32, 77, 97, 116, 104, 101, 109, 97, 116, 105, 99, 97, 108, 32, 79, 112, 101, 114, 97, 116, 111, 114, 115, 10, 10, 115, 105, 103, 110, 32, 92, 120, 50, 97, 50, 51, 32, 52, 53, 45, 49, 52, 54, 45, 53, 45, 50, 51, 53, 32, 226, 168, 163, 10, 115, 105, 103, 110, 32, 92, 120, 50, 97, 50, 52, 32, 52, 53, 45, 49, 50, 52, 53, 54, 45, 53, 45, 50, 51, 53, 32, 226, 168, 164, 10, 115, 105, 103, 110, 32, 92, 120, 50, 97, 101, 52, 32, 52, 54, 45, 52, 53, 54, 45, 50, 53, 32, 226, 171, 164, 32, 32, 32, 114, 101, 118, 101, 114, 115, 101, 32, 39, 105, 115, 32, 118, 97, 108, 105, 100, 39, 32, 115, 105, 103, 110, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 92, 120, 50, 97, 102, 52, 32, 51, 52, 53, 54, 45, 52, 53, 54, 45, 49, 50, 51, 32, 226, 171, 180, 32, 116, 114, 105, 112, 108, 101, 32, 118, 101, 114, 116, 105, 99, 97, 108, 32, 98, 97, 114, 32, 98, 105, 110, 97, 114, 121, 32, 114, 101, 108, 97, 116, 105, 111, 110, 10, 110, 111, 98, 97, 99, 107, 32, 115, 105, 103, 110, 32, 92, 120, 50, 97, 102, 99, 32, 51, 52, 53, 54, 45, 52, 53, 54, 45, 49, 50, 51, 32, 226, 171, 188, 32, 108, 97, 114, 103, 101, 32, 116, 114, 105, 112, 108, 101, 32, 118, 101, 114, 116, 105, 99, 97, 108, 32, 98, 97, 114, 32, 111, 112, 101, 114, 97, 116, 111, 114, 10, 10, 10, 35, 32, 32, 32, 85, 110, 105, 99, 111, 100, 101, 58, 32, 32, 76, 97, 116, 105, 110, 32, 69, 120, 116, 101, 110, 100, 101, 100, 45, 67, 10, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 49, 100, 55, 100, 32, 52, 45, 50, 53, 45, 49, 50, 51, 52, 32, 225, 181, 189, 10, 10, 10, 35, 32, 32, 32, 85, 110, 105, 99, 111, 100, 101, 58, 32, 32, 67, 74, 75, 32, 83, 121, 109, 98, 111, 108, 115, 32, 97, 110, 100, 32, 80, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 10, 10, 115, 105, 103, 110, 32, 92, 120, 51, 48, 48, 51, 32, 53, 45, 50, 32, 227, 128, 131, 32, 32, 32, 100, 105, 116, 116, 111, 32, 109, 97, 114, 107, 10, 109, 97, 116, 104, 32, 92, 120, 51, 48, 48, 56, 32, 52, 45, 49, 50, 54, 32, 227, 128, 136, 10, 109, 97, 116, 104, 32, 92, 120, 51, 48, 48, 57, 32, 52, 45, 51, 52, 53, 32, 227, 128, 137, 10, 10, 10, 35, 32, 32, 32, 85, 110, 105, 99, 111, 100, 101, 58, 32, 32, 76, 97, 116, 105, 110, 32, 69, 120, 116, 101, 110, 100, 101, 100, 45, 68, 10, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 97, 55, 52, 49, 32, 52, 45, 50, 53, 45, 49, 51, 32, 234, 157, 129, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 97, 55, 52, 51, 32, 52, 45, 49, 54, 45, 49, 51, 32, 234, 157, 131, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 97, 55, 53, 49, 32, 52, 45, 50, 53, 45, 49, 50, 51, 52, 32, 234, 157, 145, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 97, 55, 53, 55, 32, 52, 45, 50, 53, 45, 49, 50, 51, 52, 53, 32, 234, 157, 151, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 97, 55, 53, 57, 32, 52, 45, 49, 54, 45, 49, 50, 51, 52, 53, 32, 234, 157, 153, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 97, 55, 53, 102, 32, 52, 45, 49, 54, 45, 49, 50, 51, 54, 32, 234, 157, 159, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 97, 55, 57, 57, 32, 52, 45, 50, 53, 45, 49, 50, 52, 32, 234, 158, 153, 10, 10, 10, 35, 32, 32, 32, 85, 110, 105, 99, 111, 100, 101, 58, 32, 32, 76, 97, 116, 105, 110, 32, 69, 120, 116, 101, 110, 100, 101, 100, 45, 68, 10, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 102, 98, 48, 48, 32, 49, 50, 52, 45, 52, 53, 45, 50, 51, 53, 45, 49, 50, 52, 32, 239, 172, 128, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 102, 98, 48, 49, 32, 49, 50, 52, 45, 52, 53, 45, 50, 51, 53, 45, 50, 52, 32, 239, 172, 129, 10, 35, 92, 120, 102, 98, 48, 50, 32, 239, 172, 131, 10, 35, 92, 120, 102, 98, 48, 51, 32, 239, 172, 132, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 102, 98, 48, 53, 32, 49, 50, 52, 45, 52, 53, 45, 50, 51, 53, 45, 50, 51, 52, 53, 32, 239, 172, 133, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 102, 98, 48, 54, 32, 50, 51, 52, 45, 52, 53, 45, 50, 51, 53, 45, 50, 51, 52, 53, 32, 239, 172, 134, 10]);
fileData289.push.apply(fileData289, [10, 10, 35, 32, 32, 32, 85, 110, 105, 99, 111, 100, 101, 58, 32, 32, 67, 121, 114, 105, 108, 108, 105, 99, 10, 35, 32, 115, 101, 101, 32, 97, 98, 111, 118, 101, 32, 97, 115, 32, 116, 111, 32, 119, 104, 121, 32, 116, 104, 101, 115, 101, 32, 97, 114, 101, 32, 104, 101, 114, 101, 10, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 52, 53, 48, 32, 52, 53, 45, 49, 54, 45, 49, 53, 32, 209, 144, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 52, 53, 49, 32, 52, 53, 45, 50, 53, 45, 49, 53, 32, 209, 145, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 52, 53, 55, 32, 52, 53, 45, 50, 53, 45, 50, 52, 32, 209, 151, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 52, 53, 99, 32, 52, 53, 45, 51, 52, 45, 49, 51, 32, 209, 156, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 52, 101, 53, 32, 52, 53, 45, 51, 52, 54, 45, 49, 51, 52, 53, 54, 32, 209, 158, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 52, 97, 98, 32, 52, 53, 45, 49, 50, 51, 52, 54, 45, 49, 52, 32, 210, 171, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 52, 98, 49, 32, 52, 45, 50, 53, 45, 49, 51, 52, 53, 54, 32, 210, 177, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 52, 100, 49, 32, 52, 45, 51, 52, 54, 45, 49, 32, 211, 145, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 52, 100, 51, 32, 52, 53, 45, 50, 53, 45, 49, 32, 211, 147, 10, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 52, 100, 52, 32, 49, 45, 54, 45, 52, 53, 45, 50, 51, 53, 45, 49, 53, 32, 211, 148, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 52, 100, 53, 32, 49, 45, 52, 53, 45, 50, 51, 53, 45, 49, 53, 32, 211, 149, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 52, 100, 55, 32, 52, 53, 45, 51, 52, 54, 45, 49, 53, 32, 211, 151, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 52, 100, 57, 32, 52, 53, 54, 45, 50, 54, 32, 211, 153, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 52, 101, 102, 32, 52, 45, 51, 54, 45, 49, 51, 52, 53, 54, 32, 211, 175, 10, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 52, 102, 49, 32, 52, 53, 45, 50, 53, 45, 49, 51, 52, 53, 54, 32, 211, 177, 10, 10, 10, 35, 35, 35, 35, 35, 32, 32, 32, 69, 110, 100, 32, 111, 102, 32, 85, 110, 105, 99, 111, 100, 101, 10, 10, 35, 32, 85, 112, 112, 101, 114, 99, 97, 115, 101, 32, 108, 101, 116, 116, 101, 114, 115, 10, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 99, 48, 32, 92, 120, 48, 48, 101, 48, 32, 195, 128, 195, 160, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 99, 49, 32, 92, 120, 48, 48, 101, 49, 32, 195, 129, 195, 161, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 99, 50, 32, 92, 120, 48, 48, 101, 50, 32, 195, 130, 195, 162, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 99, 51, 32, 92, 120, 48, 48, 101, 51, 32, 195, 131, 195, 163, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 99, 52, 32, 92, 120, 48, 48, 101, 52, 32, 195, 132, 195, 164, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 99, 53, 32, 92, 120, 48, 48, 101, 53, 32, 195, 133, 195, 165, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 99, 54, 32, 92, 120, 48, 48, 101, 54, 32, 195, 134, 195, 166, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 99, 55, 32, 92, 120, 48, 48, 101, 55, 32, 195, 135, 195, 167, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 99, 56, 32, 92, 120, 48, 48, 101, 56, 32, 195, 136, 195, 168, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 99, 57, 32, 92, 120, 48, 48, 101, 57, 32, 195, 137, 195, 169, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 99, 97, 32, 92, 120, 48, 48, 101, 97, 32, 195, 138, 195, 170, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 99, 98, 32, 92, 120, 48, 48, 101, 98, 32, 195, 139, 195, 171, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 99, 99, 32, 92, 120, 48, 48, 101, 99, 32, 195, 140, 195, 172, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 99, 100, 32, 92, 120, 48, 48, 101, 100, 32, 195, 141, 195, 173, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 99, 101, 32, 92, 120, 48, 48, 101, 101, 32, 195, 142, 195, 174, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 99, 102, 32, 92, 120, 48, 48, 101, 102, 32, 195, 143, 195, 175, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 100, 48, 32, 92, 120, 48, 48, 102, 48, 32, 195, 144, 195, 176, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 100, 49, 32, 92, 120, 48, 48, 102, 49, 32, 195, 145, 195, 177, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 100, 50, 32, 92, 120, 48, 48, 102, 50, 32, 195, 146, 195, 178, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 100, 51, 32, 92, 120, 48, 48, 102, 51, 32, 195, 147, 195, 179, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 100, 52, 32, 92, 120, 48, 48, 102, 52, 32, 195, 148, 195, 180, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 100, 53, 32, 92, 120, 48, 48, 102, 53, 32, 195, 149, 195, 181, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 100, 54, 32, 92, 120, 48, 48, 102, 54, 32, 195, 150, 195, 182, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 100, 56, 32, 92, 120, 48, 48, 102, 56, 32, 195, 152, 195, 184, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 100, 57, 32, 92, 120, 48, 48, 102, 57, 32, 195, 153, 195, 185, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 100, 97, 32, 92, 120, 48, 48, 102, 97, 32, 195, 154, 195, 186, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 100, 98, 32, 92, 120, 48, 48, 102, 98, 32, 195, 155, 195, 187, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 100, 99, 32, 92, 120, 48, 48, 102, 99, 32, 195, 156, 195, 188, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 100, 100, 32, 92, 120, 48, 48, 102, 100, 32, 195, 157, 195, 189, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 48, 100, 101, 32, 92, 120, 48, 48, 102, 101, 32, 195, 158, 195, 190, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 48, 48, 32, 92, 120, 48, 49, 48, 49, 32, 196, 128, 196, 129, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 48, 50, 32, 92, 120, 48, 49, 48, 51, 32, 196, 130, 196, 131, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 48, 54, 32, 92, 120, 48, 49, 48, 55, 32, 196, 134, 196, 135, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 48, 56, 32, 92, 120, 48, 49, 48, 57, 32, 196, 136, 196, 137, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 48, 99, 32, 92, 120, 48, 49, 48, 100, 32, 196, 140, 196, 141, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 48, 101, 32, 92, 120, 48, 49, 48, 102, 32, 196, 142, 196, 143, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 49, 48, 32, 92, 120, 48, 49, 49, 49, 32, 196, 144, 196, 145, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 49, 50, 32, 92, 120, 48, 49, 49, 51, 32, 196, 146, 196, 147, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 49, 52, 32, 92, 120, 48, 49, 49, 53, 32, 196, 148, 196, 149, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 49, 97, 32, 92, 120, 48, 49, 49, 98, 32, 196, 154, 196, 155, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 49, 99, 32, 92, 120, 48, 49, 49, 100, 32, 196, 156, 196, 157, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 49, 101, 32, 92, 120, 48, 49, 49, 102, 32, 196, 158, 196, 159, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 50, 50, 32, 92, 120, 48, 49, 50, 51, 32, 196, 162, 196, 163, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 50, 52, 32, 92, 120, 48, 49, 50, 53, 32, 196, 164, 196, 165, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 50, 54, 32, 92, 120, 48, 49, 50, 55, 32, 196, 166, 196, 167, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 50, 56, 32, 92, 120, 48, 49, 50, 57, 32, 196, 168, 196, 169, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 50, 97, 32, 92, 120, 48, 49, 50, 98, 32, 196, 170, 196, 171, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 50, 99, 32, 92, 120, 48, 49, 50, 100, 32, 196, 172, 196, 173, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 51, 50, 32, 92, 120, 48, 49, 51, 51, 32, 196, 178, 32, 196, 179, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 51, 52, 32, 92, 120, 48, 49, 51, 53, 32, 196, 180, 196, 181, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 51, 54, 32, 92, 120, 48, 49, 51, 55, 32, 196, 182, 196, 183, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 51, 57, 32, 92, 120, 48, 49, 51, 97, 32, 196, 185, 196, 186, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 51, 98, 32, 92, 120, 48, 49, 51, 99, 32, 196, 187, 196, 188, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 51, 100, 32, 92, 120, 48, 49, 51, 101, 32, 196, 189, 196, 190, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 52, 49, 32, 92, 120, 48, 49, 52, 50, 32, 197, 129, 197, 130, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 52, 51, 32, 92, 120, 48, 49, 52, 52, 32, 197, 131, 197, 132, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 52, 53, 32, 92, 120, 48, 49, 52, 54, 32, 197, 133, 197, 134, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 52, 55, 32, 92, 120, 48, 49, 52, 56, 32, 197, 135, 197, 136, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 52, 97, 32, 92, 120, 48, 49, 52, 98, 32, 197, 138, 197, 139, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 52, 99, 32, 92, 120, 48, 49, 52, 100, 32, 197, 140, 197, 141, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 52, 101, 32, 92, 120, 48, 49, 52, 102, 32, 197, 142, 197, 143, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 53, 50, 32, 92, 120, 48, 49, 53, 51, 32, 197, 146, 197, 147, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 53, 52, 32, 92, 120, 48, 49, 53, 53, 32, 197, 148, 197, 149, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 53, 54, 32, 92, 120, 48, 49, 53, 55, 32, 197, 150, 197, 151, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 53, 56, 32, 92, 120, 48, 49, 53, 57, 32, 197, 152, 197, 153, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 53, 97, 32, 92, 120, 48, 49, 53, 98, 32, 197, 154, 197, 155, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 53, 99, 32, 92, 120, 48, 49, 53, 100, 32, 197, 156, 197, 157, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 53, 101, 32, 92, 120, 48, 49, 53, 102, 32, 197, 158, 197, 159, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 54, 48, 32, 92, 120, 48, 49, 54, 49, 32, 197, 160, 197, 161, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 54, 50, 32, 92, 120, 48, 49, 54, 51, 32, 197, 162, 197, 163, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 54, 52, 32, 92, 120, 48, 49, 54, 53, 32, 197, 164, 197, 165, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 54, 54, 32, 92, 120, 48, 49, 54, 55, 32, 197, 166, 197, 167, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 54, 56, 32, 92, 120, 48, 49, 54, 57, 32, 197, 168, 197, 169, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 54, 97, 32, 92, 120, 48, 49, 54, 98, 32, 197, 170, 197, 171, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 54, 99, 32, 92, 120, 48, 49, 54, 100, 32, 197, 172, 197, 173, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 54, 101, 32, 92, 120, 48, 49, 54, 102, 32, 197, 174, 197, 175, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 55, 52, 32, 92, 120, 48, 49, 55, 53, 32, 197, 180, 197, 181, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 55, 54, 32, 92, 120, 48, 49, 55, 55, 32, 197, 182, 197, 183, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 55, 56, 32, 92, 120, 48, 48, 102, 102, 32, 197, 184, 195, 191, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 55, 57, 32, 92, 120, 48, 49, 55, 97, 32, 197, 185, 197, 186, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 55, 100, 32, 92, 120, 48, 49, 55, 101, 32, 197, 189, 197, 190, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 56, 102, 32, 92, 120, 48, 50, 53, 57, 32, 198, 143, 201, 153, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 56, 101, 32, 92, 120, 48, 49, 100, 100, 32, 198, 142, 199, 157, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 57, 55, 32, 92, 120, 48, 50, 54, 56, 32, 198, 151, 201, 168, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 98, 53, 32, 92, 120, 48, 49, 98, 54, 32, 198, 181, 198, 182, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 99, 100, 32, 92, 120, 48, 49, 99, 101, 32, 199, 141, 199, 142, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 99, 102, 32, 92, 120, 48, 49, 100, 48, 32, 199, 143, 199, 144, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 100, 49, 32, 92, 120, 48, 49, 100, 50, 32, 199, 145, 199, 146, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 100, 51, 32, 92, 120, 48, 49, 100, 52, 32, 199, 147, 199, 148, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 101, 52, 32, 92, 120, 48, 49, 101, 53, 32, 199, 164, 199, 165, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 101, 54, 32, 92, 120, 48, 49, 101, 55, 32, 199, 166, 199, 167, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 101, 56, 32, 92, 120, 48, 49, 101, 57, 32, 199, 168, 199, 169, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 102, 52, 32, 92, 120, 48, 49, 102, 53, 32, 199, 180, 199, 181, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 102, 55, 32, 92, 120, 48, 49, 98, 102, 32, 199, 183, 198, 191, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 49, 102, 56, 32, 92, 120, 48, 49, 102, 57, 32, 199, 184, 199, 185, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 50, 49, 99, 32, 92, 120, 48, 50, 49, 100, 32, 200, 156, 200, 157, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 50, 49, 101, 32, 92, 120, 48, 50, 49, 102, 32, 200, 158, 200, 159, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 50, 50, 56, 32, 92, 120, 48, 50, 50, 57, 32, 200, 168, 200, 169, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 50, 51, 50, 32, 92, 120, 48, 50, 51, 51, 32, 200, 178, 200, 179, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 50, 51, 97, 32, 92, 120, 50, 99, 54, 53, 32, 200, 186, 226, 177, 165, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 50, 51, 98, 32, 92, 120, 48, 50, 51, 99, 32, 200, 187, 200, 188, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 50, 51, 101, 32, 92, 120, 50, 99, 54, 54, 32, 200, 190, 226, 177, 166, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 50, 52, 51, 32, 92, 120, 48, 49, 56, 48, 32, 201, 131, 198, 128, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 50, 52, 54, 32, 92, 120, 48, 50, 52, 55, 32, 201, 134, 201, 135, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 50, 52, 56, 32, 92, 120, 48, 50, 52, 57, 32, 201, 136, 201, 137, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 50, 52, 99, 32, 92, 120, 48, 50, 52, 100, 32, 201, 140, 201, 141, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 50, 52, 101, 32, 92, 120, 48, 50, 52, 102, 32, 201, 142, 201, 143, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 57, 49, 32, 92, 120, 48, 51, 98, 49, 32, 206, 145, 206, 177, 32, 65, 108, 112, 104, 97, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 57, 50, 32, 92, 120, 48, 51, 98, 50, 32, 206, 146, 206, 178, 32, 66, 101, 116, 97, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 57, 51, 32, 92, 120, 48, 51, 98, 51, 32, 206, 147, 206, 179, 32, 71, 97, 109, 109, 97, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 57, 52, 32, 92, 120, 48, 51, 98, 52, 32, 206, 148, 206, 180, 32, 68, 101, 108, 116, 97, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 57, 53, 32, 92, 120, 48, 51, 98, 53, 32, 206, 149, 206, 181, 32, 69, 112, 115, 105, 108, 111, 110, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 57, 54, 32, 92, 120, 48, 51, 98, 54, 32, 206, 150, 206, 182, 32, 90, 101, 116, 97, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 57, 55, 32, 92, 120, 48, 51, 98, 55, 32, 206, 151, 206, 183, 32, 69, 116, 97, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 57, 56, 32, 92, 120, 48, 51, 98, 56, 32, 206, 152, 206, 184, 32, 84, 104, 101, 116, 97, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 57, 57, 32, 92, 120, 48, 51, 98, 57, 32, 206, 153, 206, 185, 32, 73, 111, 116, 97, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 57, 97, 32, 92, 120, 48, 51, 98, 97, 32, 206, 154, 206, 186, 32, 75, 97, 112, 112, 97, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 57, 98, 32, 92, 120, 48, 51, 98, 98, 32, 206, 155, 206, 187, 32, 76, 97, 109, 100, 97, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 57, 99, 32, 92, 120, 48, 51, 98, 99, 32, 206, 156, 206, 188, 32, 77, 117, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 57, 100, 32, 92, 120, 48, 51, 98, 100, 32, 206, 157, 206, 189, 32, 78, 117, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 57, 101, 32, 92, 120, 48, 51, 98, 101, 32, 206, 158, 206, 190, 32, 88, 105, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 57, 102, 32, 92, 120, 48, 51, 98, 102, 32, 206, 159, 206, 191, 32, 79, 109, 105, 99, 114, 111, 110, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 97, 48, 32, 92, 120, 48, 51, 99, 48, 32, 206, 160, 207, 128, 32, 80, 105, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 97, 49, 32, 92, 120, 48, 51, 99, 49, 32, 206, 161, 207, 129, 32, 82, 104, 111, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 97, 51, 32, 92, 120, 48, 51, 99, 51, 32, 206, 163, 207, 131, 32, 83, 105, 103, 109, 97, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 97, 52, 32, 92, 120, 48, 51, 99, 52, 32, 206, 164, 207, 132, 32, 84, 97, 117, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 97, 53, 32, 92, 120, 48, 51, 99, 53, 32, 206, 165, 207, 133, 32, 85, 112, 115, 105, 108, 111, 110, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 97, 54, 32, 92, 120, 48, 51, 99, 54, 32, 206, 166, 207, 134, 32, 80, 104, 105, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 97, 55, 32, 92, 120, 48, 51, 99, 55, 32, 206, 167, 207, 135, 32, 67, 104, 105, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 97, 56, 32, 92, 120, 48, 51, 99, 56, 32, 206, 168, 207, 136, 32, 80, 115, 105, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 51, 97, 57, 32, 92, 120, 48, 51, 99, 57, 32, 206, 169, 207, 137, 32, 79, 109, 101, 103, 97, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 49, 101, 49, 48, 32, 92, 120, 49, 101, 49, 49, 32, 225, 184, 144, 225, 184, 145, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 49, 101, 50, 48, 32, 92, 120, 49, 101, 50, 49, 32, 225, 184, 160, 225, 184, 161, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 49, 101, 50, 54, 32, 92, 120, 49, 101, 50, 55, 32, 225, 184, 166, 225, 184, 167, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 49, 101, 50, 56, 32, 92, 120, 49, 101, 50, 57, 32, 225, 184, 168, 225, 184, 169, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 49, 101, 51, 48, 32, 92, 120, 49, 101, 51, 49, 32, 225, 184, 176, 225, 184, 177, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 49, 101, 51, 101, 32, 92, 120, 49, 101, 51, 102, 32, 225, 184, 190, 225, 184, 191, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 49, 101, 53, 52, 32, 92, 120, 49, 101, 53, 53, 32, 225, 185, 148, 225, 185, 149, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 49, 101, 55, 99, 32, 92, 120, 49, 101, 55, 100, 32, 225, 185, 188, 225, 185, 189, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 49, 101, 56, 48, 32, 92, 120, 49, 101, 56, 49, 32, 225, 186, 128, 225, 186, 129, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 49, 101, 56, 50, 32, 92, 120, 49, 101, 56, 51, 32, 225, 186, 130, 225, 186, 131, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 49, 101, 56, 52, 32, 92, 120, 49, 101, 56, 53, 32, 225, 186, 132, 225, 186, 133, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 49, 101, 56, 99, 32, 92, 120, 49, 101, 56, 100, 32, 225, 186, 140, 225, 186, 141, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 49, 101, 57, 48, 32, 92, 120, 49, 101, 57, 49, 32, 225, 186, 144, 225, 186, 145, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 49, 101, 57, 101, 32, 92, 120, 48, 48, 100, 102, 32, 225, 186, 158, 195, 159, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 49, 101, 98, 99, 32, 92, 120, 49, 101, 98, 100, 32, 225, 186, 188, 225, 186, 189, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 49, 101, 102, 50, 32, 92, 120, 49, 101, 102, 51, 32, 225, 187, 178, 225, 187, 179, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 49, 101, 102, 56, 32, 92, 120, 49, 101, 102, 57, 32, 225, 187, 184, 225, 187, 185, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 50, 99, 54, 51, 32, 92, 120, 49, 100, 55, 100, 32, 226, 177, 163, 225, 181, 189, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 97, 55, 52, 48, 32, 92, 120, 97, 55, 52, 49, 32, 234, 157, 128, 234, 157, 129, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 97, 55, 52, 50, 32, 92, 120, 97, 55, 52, 51, 32, 234, 157, 130, 234, 157, 131, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 97, 55, 53, 48, 32, 92, 120, 97, 55, 53, 49, 32, 234, 157, 144, 234, 157, 145, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 97, 55, 53, 54, 32, 92, 120, 97, 55, 53, 55, 32, 234, 157, 150, 234, 157, 151, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 97, 55, 53, 56, 32, 92, 120, 97, 55, 53, 57, 32, 234, 157, 152, 234, 157, 153, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 97, 55, 53, 101, 32, 92, 120, 97, 55, 53, 102, 32, 234, 157, 158, 234, 157, 159, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 97, 55, 57, 56, 32, 92, 120, 97, 55, 57, 57, 32, 234, 158, 152, 234, 158, 153, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 52, 48, 48, 32, 92, 120, 48, 52, 53, 48, 32, 208, 128, 209, 144, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 52, 48, 49, 32, 92, 120, 48, 52, 53, 49, 32, 208, 129, 209, 145, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 52, 48, 55, 32, 92, 120, 48, 52, 53, 55, 32, 208, 135, 209, 151, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 52, 48, 99, 32, 92, 120, 48, 52, 53, 99, 32, 208, 140, 209, 156, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 52, 48, 101, 32, 92, 120, 48, 52, 101, 53, 32, 208, 142, 209, 158, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 52, 97, 97, 32, 92, 120, 48, 52, 97, 98, 32, 210, 170, 210, 171, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 52, 98, 48, 32, 92, 120, 48, 52, 98, 49, 32, 210, 176, 210, 177, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 52, 100, 48, 32, 92, 120, 48, 52, 100, 49, 32, 211, 144, 211, 145, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 52, 100, 50, 32, 92, 120, 48, 52, 100, 51, 32, 211, 146, 211, 147, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 52, 100, 54, 32, 92, 120, 48, 52, 100, 55, 32, 211, 150, 211, 151, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 52, 100, 56, 32, 92, 120, 48, 52, 100, 57, 32, 211, 152, 211, 153, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 52, 101, 101, 32, 92, 120, 48, 52, 101, 102, 32, 211, 174, 211, 175, 10, 98, 97, 115, 101, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 92, 120, 48, 52, 102, 48, 32, 92, 120, 48, 52, 102, 49, 32, 211, 176, 211, 177, 10, 10, 35, 32, 85, 110, 105, 99, 111, 100, 101, 32, 112, 114, 101, 102, 101, 114, 115, 32, 92, 120, 50, 48, 49, 57, 32, 102, 111, 114, 32, 97, 112, 111, 115, 116, 114, 111, 112, 104, 101, 32, 105, 110, 115, 116, 101, 97, 100, 32, 111, 102, 32, 92, 120, 48, 48, 50, 55, 10, 10, 101, 110, 100, 119, 111, 114, 100, 32, 92, 120, 50, 48, 49, 57, 100, 32, 51, 45, 49, 52, 53, 10, 101, 110, 100, 119, 111, 114, 100, 32, 92, 120, 50, 48, 49, 57, 109, 32, 51, 45, 49, 51, 52, 10, 101, 110, 100, 119, 111, 114, 100, 32, 92, 120, 50, 48, 49, 57, 114, 101, 32, 51, 45, 49, 50, 51, 53, 45, 49, 53, 10, 101, 110, 100, 119, 111, 114, 100, 32, 92, 120, 50, 48, 49, 57, 118, 101, 32, 51, 45, 49, 50, 51, 54, 45, 49, 53, 10, 101, 110, 100, 119, 111, 114, 100, 32, 92, 120, 50, 48, 49, 57, 108, 108, 32, 51, 45, 49, 50, 51, 45, 49, 50, 51, 10, 101, 110, 100, 119, 111, 114, 100, 32, 92, 120, 50, 48, 49, 57, 115, 32, 51, 45, 50, 51, 52, 10, 101, 110, 100, 119, 111, 114, 100, 32, 115, 92, 120, 50, 48, 49, 57, 32, 50, 51, 52, 45, 51, 10, 101, 110, 100, 119, 111, 114, 100, 32, 92, 120, 50, 48, 49, 57, 116, 32, 51, 45, 50, 51, 52, 53, 10, 10, 10, 35, 32, 82, 101, 109, 111, 118, 101, 32, 100, 111, 116, 32, 54, 32, 102, 114, 111, 109, 32, 108, 105, 103, 97, 116, 117, 114, 101, 115, 32, 40, 195, 166, 44, 32, 197, 147, 32, 97, 110, 100, 32, 196, 179, 41, 32, 119, 104, 101, 110, 32, 116, 104, 101, 121, 32, 97, 114, 101, 32, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 111, 114, 32, 112, 97, 114, 116, 32, 111, 102, 32, 97, 110, 32, 117, 112, 112, 101, 114, 99, 97, 115, 101, 32, 119, 111, 114, 100, 10, 10, 110, 111, 98, 97, 99, 107, 32, 112, 97, 115, 115, 50, 32, 64, 54, 45, 54, 45, 49, 45, 54, 45, 52, 53, 45, 50, 51, 53, 45, 49, 53, 32, 64, 54, 45, 54, 45, 49, 45, 52, 53, 45, 50, 51, 53, 45, 49, 53, 10, 110, 111, 98, 97, 99, 107, 32, 112, 97, 115, 115, 50, 32, 64, 54, 45, 49, 45, 54, 45, 52, 53, 45, 50, 51, 53, 45, 49, 53, 32, 42, 10, 110, 111, 98, 97, 99, 107, 32, 112, 97, 115, 115, 50, 32, 64, 49, 45, 54, 45, 52, 53, 45, 50, 51, 53, 45, 49, 53, 32, 64, 49, 45, 52, 53, 45, 50, 51, 53, 45, 49, 53, 10, 10, 110, 111, 98, 97, 99, 107, 32, 112, 97, 115, 115, 50, 32, 64, 54, 45, 54, 45, 49, 51, 53, 45, 54, 45, 52, 53, 45, 50, 51, 53, 45, 49, 53, 32, 64, 54, 45, 54, 45, 49, 51, 53, 45, 52, 53, 45, 50, 51, 53, 45, 49, 53, 10, 110, 111, 98, 97, 99, 107, 32, 112, 97, 115, 115, 50, 32, 64, 54, 45, 49, 51, 53, 45, 54, 45, 52, 53, 45, 50, 51, 53, 45, 49, 53, 32, 42, 10, 110, 111, 98, 97, 99, 107, 32, 112, 97, 115, 115, 50, 32, 64, 49, 51, 53, 45, 54, 45, 52, 53, 45, 50, 51, 53, 45, 49, 53, 32, 64, 49, 51, 53, 45, 52, 53, 45, 50, 51, 53, 45, 49, 53, 10, 10, 110, 111, 98, 97, 99, 107, 32, 112, 97, 115, 115, 50, 32, 64, 54, 45, 54, 45, 50, 52, 45, 54, 45, 52, 53, 45, 50, 51, 53, 45, 50, 52, 53, 32, 64, 54, 45, 54, 45, 50, 52, 45, 52, 53, 45, 50, 51, 53, 45, 50, 52, 53, 10, 110, 111, 98, 97, 99, 107, 32, 112, 97, 115, 115, 50, 32, 64, 54, 45, 50, 52, 45, 54, 45, 52, 53, 45, 50, 51, 53, 45, 50, 52, 53, 32, 42, 10, 110, 111, 98, 97, 99, 107, 32, 112, 97, 115, 115, 50, 32, 64, 50, 52, 45, 54, 45, 52, 53, 45, 50, 51, 53, 45, 50, 52, 53, 32, 64, 50, 52, 45, 52, 53, 45, 50, 51, 53, 45, 50, 52, 53, 10]);
Module['FS_createDataFile']('/', 'en-ueb-chardefs.uti', fileData289, true, true, false);
var fileData314 = [];
fileData314.push.apply(fileData314, [35, 32, 108, 105, 98, 108, 111, 117, 105, 115, 58, 32, 85, 110, 105, 102, 105, 101, 100, 32, 69, 110, 103, 108, 105, 115, 104, 32, 66, 114, 97, 105, 108, 108, 101, 32, 67, 111, 100, 101, 32, 40, 71, 114, 97, 100, 101, 32, 49, 41, 10, 35, 10, 35, 32, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 35, 45, 110, 97, 109, 101, 58, 32, 85, 110, 105, 102, 105, 101, 100, 32, 69, 110, 103, 108, 105, 115, 104, 32, 98, 114, 97, 105, 108, 108, 101, 44, 32, 103, 114, 97, 100, 101, 32, 49, 10, 35, 45, 105, 110, 100, 101, 120, 45, 110, 97, 109, 101, 58, 32, 69, 110, 103, 108, 105, 115, 104, 44, 32, 117, 110, 105, 102, 105, 101, 100, 44, 32, 117, 110, 99, 111, 110, 116, 114, 97, 99, 116, 101, 100, 10, 35, 45, 100, 105, 115, 112, 108, 97, 121, 45, 110, 97, 109, 101, 58, 32, 85, 110, 105, 102, 105, 101, 100, 32, 69, 110, 103, 108, 105, 115, 104, 32, 117, 110, 99, 111, 110, 116, 114, 97, 99, 116, 101, 100, 32, 98, 114, 97, 105, 108, 108, 101, 10, 35, 10, 35, 43, 108, 97, 110, 103, 117, 97, 103, 101, 58, 101, 110, 10, 35, 43, 116, 121, 112, 101, 58, 108, 105, 116, 101, 114, 97, 114, 121, 10, 35, 43, 99, 111, 110, 116, 114, 97, 99, 116, 105, 111, 110, 58, 110, 111, 10, 35, 43, 103, 114, 97, 100, 101, 58, 49, 10, 35, 43, 115, 121, 115, 116, 101, 109, 58, 117, 101, 98, 10, 35, 10, 35, 32, 84, 79, 68, 79, 58, 32, 80, 108, 101, 97, 115, 101, 32, 99, 111, 114, 114, 101, 99, 116, 32, 116, 104, 101, 32, 109, 101, 116, 97, 100, 97, 116, 97, 32, 97, 98, 111, 118, 101, 46, 32, 73, 116, 32, 105, 115, 32, 110, 111, 116, 32, 109, 101, 97, 110, 116, 32, 116, 111, 32, 98, 101, 10, 35, 32, 97, 99, 99, 117, 114, 97, 116, 101, 32, 110, 111, 114, 32, 99, 111, 109, 112, 108, 101, 116, 101, 46, 32, 73, 116, 32, 104, 97, 115, 110, 39, 116, 32, 98, 101, 101, 110, 32, 118, 101, 114, 105, 102, 105, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 116, 97, 98, 108, 101, 10, 35, 32, 97, 117, 116, 104, 111, 114, 32, 121, 101, 116, 46, 32, 73, 116, 32, 105, 115, 32, 109, 101, 114, 101, 108, 121, 32, 97, 110, 32, 97, 116, 116, 101, 109, 112, 116, 32, 98, 121, 32, 116, 104, 101, 32, 108, 105, 98, 108, 111, 117, 105, 115, 32, 109, 97, 105, 110, 116, 97, 105, 110, 101, 114, 115, 10, 35, 32, 116, 111, 32, 103, 101, 116, 32, 115, 111, 109, 101, 32, 115, 101, 110, 115, 105, 98, 108, 101, 32, 105, 110, 105, 116, 105, 97, 108, 32, 118, 97, 108, 117, 101, 115, 32, 105, 110, 32, 112, 108, 97, 99, 101, 46, 10, 35, 10, 35, 32, 84, 79, 68, 79, 58, 32, 80, 108, 101, 97, 115, 101, 32, 97, 100, 100, 32, 97, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 116, 111, 32, 111, 102, 102, 105, 99, 105, 97, 108, 32, 100, 111, 99, 117, 109, 101, 110, 116, 97, 116, 105, 111, 110, 32, 97, 98, 111, 117, 116, 10, 35, 32, 116, 104, 101, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 101, 100, 32, 98, 114, 97, 105, 108, 108, 101, 32, 99, 111, 100, 101, 46, 32, 80, 114, 101, 102, 101, 114, 97, 98, 108, 121, 32, 115, 117, 98, 109, 105, 116, 32, 116, 104, 101, 32, 100, 111, 99, 117, 109, 101, 110, 116, 115, 10, 35, 32, 116, 111, 32, 104, 116, 116, 112, 115, 58, 47, 47, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 47, 108, 105, 98, 108, 111, 117, 105, 115, 47, 98, 114, 97, 105, 108, 108, 101, 45, 115, 112, 101, 99, 115, 46, 10, 35, 32, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 35, 10, 35, 32, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 48, 52, 45, 50, 48, 48, 56, 32, 86, 105, 101, 119, 80, 108, 117, 115, 32, 84, 101, 99, 104, 110, 111, 108, 111, 103, 105, 101, 115, 44, 32, 73, 110, 99, 46, 32, 119, 119, 119, 46, 118, 105, 101, 119, 112, 108, 117, 115, 46, 99, 111, 109, 10, 35, 32, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 48, 52, 45, 50, 48, 48, 54, 32, 74, 74, 66, 32, 83, 111, 102, 116, 119, 97, 114, 101, 44, 32, 73, 110, 99, 46, 32, 119, 119, 119, 46, 106, 106, 98, 45, 115, 111, 102, 116, 119, 97, 114, 101, 46, 99, 111, 109, 10, 35, 32, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 49, 54, 32, 65, 109, 101, 114, 105, 99, 97, 110, 32, 80, 114, 105, 110, 116, 105, 110, 103, 32, 72, 111, 117, 115, 101, 32, 102, 111, 114, 32, 116, 104, 101, 32, 66, 108, 105, 110, 100, 44, 32, 73, 110, 99, 46, 32, 119, 119, 119, 46, 97, 112, 104, 46, 111, 114, 103, 10, 35, 32, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 49, 54, 32, 74, 111, 115, 101, 112, 104, 32, 76, 101, 101, 32, 60, 106, 111, 115, 101, 112, 104, 46, 108, 101, 101, 50, 50, 53, 57, 48, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 62, 10, 35, 32, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 50, 49, 32, 82, 78, 73, 66, 44, 32, 119, 119, 119, 46, 114, 110, 105, 98, 46, 111, 114, 103, 46, 117, 107, 10, 35, 10, 35, 32, 32, 84, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 112, 97, 114, 116, 32, 111, 102, 32, 108, 105, 98, 108, 111, 117, 105, 115, 46, 10, 35, 10, 35, 32, 32, 108, 105, 98, 108, 111, 117, 105, 115, 32, 105, 115, 32, 102, 114, 101, 101, 32, 115, 111, 102, 116, 119, 97, 114, 101, 58, 32, 121, 111, 117, 32, 99, 97, 110, 32, 114, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 32, 105, 116, 32, 97, 110, 100, 47, 111, 114, 32, 109, 111, 100, 105, 102, 121, 32, 105, 116, 10, 35, 32, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 116, 101, 114, 109, 115, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 76, 101, 115, 115, 101, 114, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 115, 10, 35, 32, 32, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 70, 114, 101, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 70, 111, 117, 110, 100, 97, 116, 105, 111, 110, 44, 32, 101, 105, 116, 104, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 50, 46, 49, 32, 111, 102, 32, 116, 104, 101, 10, 35, 32, 32, 76, 105, 99, 101, 110, 115, 101, 44, 32, 111, 114, 32, 40, 97, 116, 32, 121, 111, 117, 114, 32, 111, 112, 116, 105, 111, 110, 41, 32, 97, 110, 121, 32, 108, 97, 116, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 46, 10, 35, 10, 35, 32, 32, 108, 105, 98, 108, 111, 117, 105, 115, 32, 105, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 111, 112, 101, 32, 116, 104, 97, 116, 32, 105, 116, 32, 119, 105, 108, 108, 32, 98, 101, 32, 117, 115, 101, 102, 117, 108, 44, 32, 98, 117, 116, 10, 35, 32, 32, 87, 73, 84, 72, 79, 85, 84, 32, 65, 78, 89, 32, 87, 65, 82, 82, 65, 78, 84, 89, 59, 32, 119, 105, 116, 104, 111, 117, 116, 32, 101, 118, 101, 110, 32, 116, 104, 101, 32, 105, 109, 112, 108, 105, 101, 100, 32, 119, 97, 114, 114, 97, 110, 116, 121, 32, 111, 102, 10, 35, 32, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 32, 111, 114, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 46, 32, 83, 101, 101, 32, 116, 104, 101, 32, 71, 78, 85, 10, 35, 32, 32, 76, 101, 115, 115, 101, 114, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 115, 46, 10, 35, 10, 35, 32, 32, 89, 111, 117, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 114, 101, 99, 101, 105, 118, 101, 100, 32, 97, 32, 99, 111, 112, 121, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 76, 101, 115, 115, 101, 114, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 10, 35, 32, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 108, 111, 110, 103, 32, 119, 105, 116, 104, 32, 108, 105, 98, 108, 111, 117, 105, 115, 46, 32, 73, 102, 32, 110, 111, 116, 44, 32, 115, 101, 101, 10, 35, 32, 32, 60, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 103, 110, 117, 46, 111, 114, 103, 47, 108, 105, 99, 101, 110, 115, 101, 115, 47, 62, 46, 10, 35, 10, 35, 32, 32, 77, 97, 105, 110, 116, 97, 105, 110, 101, 100, 32, 98, 121, 32, 74, 111, 104, 110, 32, 74, 46, 32, 66, 111, 121, 101, 114, 32, 106, 111, 104, 110, 46, 98, 111, 121, 101, 114, 64, 106, 106, 98, 45, 115, 111, 102, 116, 119, 97, 114, 101, 46, 99, 111, 109, 10, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 77, 105, 107, 101, 32, 71, 114, 97, 121, 32, 60, 109, 103, 114, 97, 121, 64, 97, 112, 104, 46, 111, 114, 103, 62, 10, 35, 32, 32, 77, 111, 100, 105, 102, 105, 101, 100, 32, 98, 121, 32, 77, 105, 107, 101, 32, 71, 114, 97, 121, 32, 60, 109, 103, 114, 97, 121, 64, 97, 112, 104, 46, 111, 114, 103, 62, 10, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 74, 111, 115, 101, 112, 104, 32, 76, 101, 101, 32, 60, 106, 111, 115, 101, 112, 104, 46, 108, 101, 101, 50, 50, 53, 57, 48, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 62, 10, 10, 105, 110, 99, 108, 117, 100, 101, 32, 101, 110, 45, 117, 101, 98, 45, 99, 104, 97, 114, 100, 101, 102, 115, 46, 117, 116, 105, 32, 85, 69, 66, 32, 115, 112, 101, 99, 105, 102, 105, 99, 32, 99, 104, 97, 114, 32, 100, 101, 102, 115, 46, 10, 35, 32, 32, 32, 115, 111, 109, 101, 32, 100, 111, 116, 115, 32, 97, 114, 101, 32, 117, 110, 100, 101, 102, 105, 110, 101, 100, 32, 110, 111, 119, 10, 105, 110, 99, 108, 117, 100, 101, 32, 101, 110, 45, 117, 101, 98, 45, 109, 97, 116, 104, 46, 99, 116, 98, 32, 85, 69, 66, 32, 109, 97, 116, 104, 32, 102, 114, 111, 109, 32, 99, 111, 109, 109, 111, 110, 32, 108, 105, 110, 101, 97, 114, 32, 102, 111, 114, 109, 97, 116, 10, 10, 110, 117, 109, 115, 105, 103, 110, 32, 51, 52, 53, 54, 32, 32, 110, 117, 109, 98, 101, 114, 32, 115, 105, 103, 110, 44, 32, 106, 117, 115, 116, 32, 97, 32, 100, 111, 116, 115, 32, 111, 112, 101, 114, 97, 110, 100, 10, 110, 117, 109, 101, 114, 105, 99, 109, 111, 100, 101, 99, 104, 97, 114, 115, 32, 46, 44, 10, 110, 111, 99, 111, 110, 116, 114, 97, 99, 116, 115, 105, 103, 110, 32, 53, 54, 10, 110, 111, 110, 117, 109, 115, 105, 103, 110, 32, 53, 54, 10, 110, 117, 109, 101, 114, 105, 99, 110, 111, 99, 111, 110, 116, 99, 104, 97, 114, 115, 32, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 10, 10, 35, 32, 67, 111, 114, 114, 101, 99, 116, 32, 111, 114, 100, 101, 114, 32, 111, 102, 32, 99, 111, 109, 109, 97, 32, 97, 110, 100, 32, 110, 117, 109, 101, 114, 105, 99, 32, 105, 110, 100, 105, 99, 97, 116, 111, 114, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 44, 32, 37, 35, 32, 50, 45, 51, 52, 53, 54, 57, 32, 32, 102, 111, 114, 99, 101, 32, 99, 111, 114, 114, 101, 99, 116, 32, 112, 111, 115, 105, 116, 105, 111, 110, 32, 111, 102, 32, 110, 117, 109, 101, 114, 105, 99, 32, 105, 110, 100, 105, 99, 97, 116, 111, 114, 10, 110, 111, 98, 97, 99, 107, 32, 112, 97, 115, 115, 50, 32, 64, 51, 52, 53, 54, 45, 50, 45, 51, 52, 53, 54, 57, 32, 64, 50, 45, 51, 52, 53, 54, 32, 32, 32, 32, 67, 108, 101, 97, 114, 32, 117, 112, 32, 101, 120, 116, 114, 97, 32, 105, 110, 100, 105, 99, 97, 116, 111, 114, 32, 97, 102, 116, 101, 114, 32, 116, 104, 101, 32, 109, 97, 116, 99, 104, 32, 108, 105, 110, 101, 10, 10, 35, 32, 67, 111, 114, 114, 101, 99, 116, 32, 111, 114, 100, 101, 114, 32, 111, 102, 32, 100, 111, 116, 32, 97, 110, 100, 32, 110, 117, 109, 101, 114, 105, 99, 32, 105, 110, 100, 105, 99, 97, 116, 111, 114, 10, 109, 97, 116, 99, 104, 32, 37, 97, 32, 46, 32, 37, 35, 32, 50, 53, 54, 45, 51, 52, 53, 54, 57, 32, 32, 102, 111, 114, 99, 101, 32, 99, 111, 114, 114, 101, 99, 116, 32, 112, 111, 115, 105, 116, 105, 111, 110, 32, 111, 102, 32, 110, 117, 109, 101, 114, 105, 99, 32, 105, 110, 100, 105, 99, 97, 116, 111, 114, 10, 110, 111, 98, 97, 99, 107, 32, 112, 97, 115, 115, 50, 32, 64, 51, 52, 53, 54, 45, 50, 53, 54, 45, 51, 52, 53, 54, 57, 32, 64, 50, 53, 54, 45, 51, 52, 53, 54, 32, 32, 32, 32, 67, 108, 101, 97, 114, 32, 117, 112, 32, 101, 120, 116, 114, 97, 32, 105, 110, 100, 105, 99, 97, 116, 111, 114, 32, 97, 102, 116, 101, 114, 32, 116, 104, 101, 32, 109, 97, 116, 99, 104, 32, 108, 105, 110, 101, 10, 10, 35, 32, 110, 117, 109, 101, 114, 105, 99, 32, 115, 112, 97, 99, 101, 10, 110, 111, 98, 97, 99, 107, 32, 99, 111, 114, 114, 101, 99, 116, 32, 95, 36, 100, 91, 34, 92, 115, 34, 93, 36, 100, 32, 32, 32, 32, 32, 34, 92, 120, 69, 48, 50, 48, 34, 32, 32, 32, 35, 32, 99, 104, 97, 110, 103, 101, 32, 115, 112, 97, 99, 101, 32, 116, 111, 32, 99, 117, 115, 116, 111, 109, 32, 115, 121, 109, 98, 111, 108, 32, 114, 101, 112, 114, 101, 115, 101, 110, 116, 105, 110, 103, 32, 110, 117, 109, 101, 114, 105, 99, 32, 115, 112, 97, 99, 101, 10, 110, 111, 102, 111, 114, 32, 32, 99, 111, 114, 114, 101, 99, 116, 32, 95, 36, 100, 91, 34, 92, 120, 69, 48, 50, 48, 34, 93, 36, 100, 32, 34, 92, 115, 34, 10, 108, 105, 116, 100, 105, 103, 105, 116, 32, 92, 120, 69, 48, 50, 48, 32, 53, 97, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 97, 100, 100, 32, 118, 105, 114, 116, 117, 97, 108, 32, 100, 111, 116, 32, 116, 111, 32, 109, 97, 107, 101, 32, 100, 105, 115, 116, 105, 110, 99, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 111, 116, 104, 101, 114, 32, 117, 115, 101, 115, 32, 111, 102, 32, 100, 111, 116, 32, 53, 10, 110, 111, 98, 97, 99, 107, 32, 112, 97, 115, 115, 50, 32, 32, 32, 64, 53, 97, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 64, 53, 10, 110, 111, 102, 111, 114, 32, 32, 112, 97, 115, 115, 50, 32, 32, 32, 91, 64, 51, 52, 53, 54, 93, 36, 100, 32, 32, 32, 32, 32, 32, 32, 64, 51, 52, 53, 54, 35, 49, 61, 49, 32, 32, 35, 32, 101, 110, 116, 101, 114, 32, 110, 117, 109, 101, 114, 105, 99, 32, 109, 111, 100, 101, 32, 119, 104, 101, 110, 32, 110, 117, 109, 98, 101, 114, 32, 115, 105, 103, 110, 32, 102, 111, 108, 108, 111, 119, 101, 100, 32, 98, 121, 32, 100, 105, 103, 105, 116, 32, 105, 115, 32, 101, 110, 99, 111, 117, 110, 116, 101, 114, 101, 100, 10, 110, 111, 102, 111, 114, 32, 32, 112, 97, 115, 115, 50, 32, 32, 32, 36, 100, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 42, 10, 110, 111, 102, 111, 114, 32, 32, 112, 97, 115, 115, 50, 32, 32, 32, 35, 49, 61, 49, 91, 64, 53, 93, 36, 100, 32, 32, 32, 32, 32, 32, 64, 53, 97, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 119, 104, 101, 110, 32, 105, 110, 32, 110, 117, 109, 101, 114, 105, 99, 32, 109, 111, 100, 101, 32, 105, 110, 116, 101, 114, 112, 114, 101, 116, 32, 100, 111, 116, 32, 53, 32, 97, 115, 32, 110, 117, 109, 101, 114, 105, 99, 32, 115, 112, 97, 99, 101, 10, 110, 111, 102, 111, 114, 32, 32, 112, 97, 115, 115, 50, 32, 32, 32, 36, 97, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 42, 35, 49, 61, 48, 32, 32, 32, 32, 32, 32, 35, 32, 101, 120, 105, 116, 32, 110, 117, 109, 101, 114, 105, 99, 32, 109, 111, 100, 101, 32, 119, 104, 101, 110, 32, 111, 116, 104, 101, 114, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 32, 116, 104, 97, 110, 32, 100, 105, 103, 105, 116, 32, 111, 114, 32, 110, 117, 109, 101, 114, 105, 99, 32, 115, 112, 97, 99, 101, 32, 105, 115, 32, 101, 110, 99, 111, 117, 110, 116, 101, 114, 101, 100, 10, 10, 99, 97, 112, 115, 108, 101, 116, 116, 101, 114, 32, 54, 10, 98, 101, 103, 99, 97, 112, 115, 119, 111, 114, 100, 32, 54, 45, 54, 10, 101, 110, 100, 99, 97, 112, 115, 119, 111, 114, 100, 32, 54, 45, 51, 10, 108, 101, 110, 99, 97, 112, 115, 112, 104, 114, 97, 115, 101, 32, 51, 10, 98, 101, 103, 99, 97, 112, 115, 112, 104, 114, 97, 115, 101, 32, 54, 45, 54, 45, 54, 10, 101, 110, 100, 99, 97, 112, 115, 112, 104, 114, 97, 115, 101, 32, 97, 102, 116, 101, 114, 32, 54, 45, 51, 10, 10, 101, 109, 112, 104, 99, 108, 97, 115, 115, 32, 105, 116, 97, 108, 105, 99, 10, 101, 109, 112, 104, 99, 108, 97, 115, 115, 32, 117, 110, 100, 101, 114, 108, 105, 110, 101, 10, 101, 109, 112, 104, 99, 108, 97, 115, 115, 32, 98, 111, 108, 100, 10, 101, 109, 112, 104, 99, 108, 97, 115, 115, 32, 115, 99, 114, 105, 112, 116, 10, 101, 109, 112, 104, 99, 108, 97, 115, 115, 32, 116, 114, 97, 110, 115, 110, 111, 116, 101, 10, 101, 109, 112, 104, 99, 108, 97, 115, 115, 32, 116, 114, 97, 110, 115, 49, 10, 101, 109, 112, 104, 99, 108, 97, 115, 115, 32, 116, 114, 97, 110, 115, 50, 10, 101, 109, 112, 104, 99, 108, 97, 115, 115, 32, 116, 114, 97, 110, 115, 51, 10, 101, 109, 112, 104, 99, 108, 97, 115, 115, 32, 116, 114, 97, 110, 115, 52, 10, 101, 109, 112, 104, 99, 108, 97, 115, 115, 32, 116, 114, 97, 110, 115, 53, 10, 10, 101, 109, 112, 104, 108, 101, 116, 116, 101, 114, 32, 105, 116, 97, 108, 105, 99, 32, 52, 54, 45, 50, 51, 10, 98, 101, 103, 101, 109, 112, 104, 119, 111, 114, 100, 32, 105, 116, 97, 108, 105, 99, 32, 52, 54, 45, 50, 10, 101, 110, 100, 101, 109, 112, 104, 119, 111, 114, 100, 32, 105, 116, 97, 108, 105, 99, 32, 52, 54, 45, 51, 10, 108, 101, 110, 101, 109, 112, 104, 112, 104, 114, 97, 115, 101, 32, 105, 116, 97, 108, 105, 99, 32, 51, 10, 98, 101, 103, 101, 109, 112, 104, 112, 104, 114, 97, 115, 101, 32, 105, 116, 97, 108, 105, 99, 32, 52, 54, 45, 50, 51, 53, 54, 10, 101, 110, 100, 101, 109, 112, 104, 112, 104, 114, 97, 115, 101, 32, 105, 116, 97, 108, 105, 99, 32, 97, 102, 116, 101, 114, 32, 52, 54, 45, 51, 10, 10, 101, 109, 112, 104, 108, 101, 116, 116, 101, 114, 32, 98, 111, 108, 100, 32, 52, 53, 45, 50, 51, 10, 98, 101, 103, 101, 109, 112, 104, 119, 111, 114, 100, 32, 98, 111, 108, 100, 32, 52, 53, 45, 50, 10, 101, 110, 100, 101, 109, 112, 104, 119, 111, 114, 100, 32, 98, 111, 108, 100, 32, 52, 53, 45, 51, 10, 108, 101, 110, 101, 109, 112, 104, 112, 104, 114, 97, 115, 101, 32, 98, 111, 108, 100, 32, 51, 10, 98, 101, 103, 101, 109, 112, 104, 112, 104, 114, 97, 115, 101, 32, 98, 111, 108, 100, 32, 52, 53, 45, 50, 51, 53, 54, 10, 101, 110, 100, 101, 109, 112, 104, 112, 104, 114, 97, 115, 101, 32, 98, 111, 108, 100, 32, 97, 102, 116, 101, 114, 32, 52, 53, 45, 51, 10, 10, 101, 109, 112, 104, 108, 101, 116, 116, 101, 114, 32, 117, 110, 100, 101, 114, 108, 105, 110, 101, 32, 52, 53, 54, 45, 50, 51, 10, 98, 101, 103, 101, 109, 112, 104, 119, 111, 114, 100, 32, 117, 110, 100, 101, 114, 108, 105, 110, 101, 32, 52, 53, 54, 45, 50, 10, 101, 110, 100, 101, 109, 112, 104, 119, 111, 114, 100, 32, 117, 110, 100, 101, 114, 108, 105, 110, 101, 32, 52, 53, 54, 45, 51, 10, 108, 101, 110, 101, 109, 112, 104, 112, 104, 114, 97, 115, 101, 32, 117, 110, 100, 101, 114, 108, 105, 110, 101, 32, 51, 10, 98, 101, 103, 101, 109, 112, 104, 112, 104, 114, 97, 115, 101, 32, 117, 110, 100, 101, 114, 108, 105, 110, 101, 32, 52, 53, 54, 45, 50, 51, 53, 54, 10, 101, 110, 100, 101, 109, 112, 104, 112, 104, 114, 97, 115, 101, 32, 117, 110, 100, 101, 114, 108, 105, 110, 101, 32, 97, 102, 116, 101, 114, 32, 52, 53, 54, 45, 51, 10, 10, 101, 109, 112, 104, 108, 101, 116, 116, 101, 114, 32, 115, 99, 114, 105, 112, 116, 32, 52, 45, 50, 51, 10, 98, 101, 103, 101, 109, 112, 104, 119, 111, 114, 100, 32, 115, 99, 114, 105, 112, 116, 32, 52, 45, 50, 10, 101, 110, 100, 101, 109, 112, 104, 119, 111, 114, 100, 32, 115, 99, 114, 105, 112, 116, 32, 52, 45, 51, 10, 108, 101, 110, 101, 109, 112, 104, 112, 104, 114, 97, 115, 101, 32, 115, 99, 114, 105, 112, 116, 32, 51, 10, 98, 101, 103, 101, 109, 112, 104, 112, 104, 114, 97, 115, 101, 32, 115, 99, 114, 105, 112, 116, 32, 52, 45, 50, 51, 53, 54, 10, 101, 110, 100, 101, 109, 112, 104, 112, 104, 114, 97, 115, 101, 32, 115, 99, 114, 105, 112, 116, 32, 97, 102, 116, 101, 114, 32, 52, 45, 51, 10, 10, 98, 101, 103, 101, 109, 112, 104, 32, 116, 114, 97, 110, 115, 110, 111, 116, 101, 32, 52, 45, 52, 54, 45, 49, 50, 54, 10, 101, 110, 100, 101, 109, 112, 104, 32, 116, 114, 97, 110, 115, 110, 111, 116, 101, 32, 52, 45, 52, 54, 45, 51, 53, 52, 10, 10, 10, 101, 109, 112, 104, 108, 101, 116, 116, 101, 114, 32, 116, 114, 97, 110, 115, 49, 32, 52, 45, 51, 52, 53, 54, 45, 50, 51, 10, 98, 101, 103, 101, 109, 112, 104, 119, 111, 114, 100, 32, 116, 114, 97, 110, 115, 49, 32, 52, 45, 51, 52, 53, 54, 45, 50, 10, 101, 110, 100, 101, 109, 112, 104, 119, 111, 114, 100, 32, 116, 114, 97, 110, 115, 49, 32, 52, 45, 51, 52, 53, 54, 45, 51, 10, 108, 101, 110, 101, 109, 112, 104, 112, 104, 114, 97, 115, 101, 32, 116, 114, 97, 110, 115, 49, 32, 51, 10, 98, 101, 103, 101, 109, 112, 104, 112, 104, 114, 97, 115, 101, 32, 116, 114, 97, 110, 115, 49, 32, 52, 45, 51, 52, 53, 54, 45, 50, 51, 53, 54, 10, 101, 110, 100, 101, 109, 112, 104, 112, 104, 114, 97, 115, 101, 32, 116, 114, 97, 110, 115, 49, 32, 97, 102, 116, 101, 114, 32, 52, 45, 51, 52, 53, 54, 45, 51, 10, 10, 101, 109, 112, 104, 108, 101, 116, 116, 101, 114, 32, 116, 114, 97, 110, 115, 50, 32, 52, 53, 45, 51, 52, 53, 54, 45, 50, 51, 10, 98, 101, 103, 101, 109, 112, 104, 119, 111, 114, 100, 32, 116, 114, 97, 110, 115, 50, 32, 52, 53, 45, 51, 52, 53, 54, 45, 50, 10, 101, 110, 100, 101, 109, 112, 104, 119, 111, 114, 100, 32, 116, 114, 97, 110, 115, 50, 32, 52, 53, 45, 51, 52, 53, 54, 45, 51, 10, 108, 101, 110, 101, 109, 112, 104, 112, 104, 114, 97, 115, 101, 32, 116, 114, 97, 110, 115, 50, 32, 51, 10, 98, 101, 103, 101, 109, 112, 104, 112, 104, 114, 97, 115, 101, 32, 116, 114, 97, 110, 115, 50, 32, 52, 53, 45, 51, 52, 53, 54, 45, 50, 51, 53, 54, 10, 101, 110, 100, 101, 109, 112, 104, 112, 104, 114, 97, 115, 101, 32, 116, 114, 97, 110, 115, 50, 32, 97, 102, 116, 101, 114, 32, 52, 53, 45, 51, 52, 53, 54, 45, 51, 10, 10, 101, 109, 112, 104, 108, 101, 116, 116, 101, 114, 32, 116, 114, 97, 110, 115, 51, 32, 52, 53, 54, 45, 51, 52, 53, 54, 45, 50, 51, 10, 98, 101, 103, 101, 109, 112, 104, 119, 111, 114, 100, 32, 116, 114, 97, 110, 115, 51, 32, 52, 53, 54, 45, 51, 52, 53, 54, 45, 50, 10, 101, 110, 100, 101, 109, 112, 104, 119, 111, 114, 100, 32, 116, 114, 97, 110, 115, 51, 32, 52, 53, 54, 45, 51, 52, 53, 54, 45, 51, 10, 108, 101, 110, 101, 109, 112, 104, 112, 104, 114, 97, 115, 101, 32, 116, 114, 97, 110, 115, 51, 32, 51, 10, 98, 101, 103, 101, 109, 112, 104, 112, 104, 114, 97, 115, 101, 32, 116, 114, 97, 110, 115, 51, 32, 52, 53, 54, 45, 51, 52, 53, 54, 45, 50, 51, 53, 54, 10, 101, 110, 100, 101, 109, 112, 104, 112, 104, 114, 97, 115, 101, 32, 116, 114, 97, 110, 115, 51, 32, 97, 102, 116, 101, 114, 32, 52, 53, 54, 45, 51, 52, 53, 54, 45, 51, 10, 10, 101, 109, 112, 104, 108, 101, 116, 116, 101, 114, 32, 116, 114, 97, 110, 115, 52, 32, 53, 45, 51, 52, 53, 54, 45, 50, 51, 10, 98, 101, 103, 101, 109, 112, 104, 119, 111, 114, 100, 32, 116, 114, 97, 110, 115, 52, 32, 53, 45, 51, 52, 53, 54, 45, 50, 10, 101, 110, 100, 101, 109, 112, 104, 119, 111, 114, 100, 32, 116, 114, 97, 110, 115, 52, 32, 53, 45, 51, 52, 53, 54, 45, 51, 10, 108, 101, 110, 101, 109, 112, 104, 112, 104, 114, 97, 115, 101, 32, 116, 114, 97, 110, 115, 52, 32, 51, 10, 98, 101, 103, 101, 109, 112, 104, 112, 104, 114, 97, 115, 101, 32, 116, 114, 97, 110, 115, 52, 32, 53, 45, 51, 52, 53, 54, 45, 50, 51, 53, 54, 10, 101, 110, 100, 101, 109, 112, 104, 112, 104, 114, 97, 115, 101, 32, 116, 114, 97, 110, 115, 52, 32, 97, 102, 116, 101, 114, 32, 53, 45, 51, 52, 53, 54, 45, 51, 10, 10, 101, 109, 112, 104, 108, 101, 116, 116, 101, 114, 32, 116, 114, 97, 110, 115, 53, 32, 52, 54, 45, 51, 52, 53, 54, 45, 50, 51, 10, 98, 101, 103, 101, 109, 112, 104, 119, 111, 114, 100, 32, 116, 114, 97, 110, 115, 53, 32, 52, 54, 45, 51, 52, 53, 54, 45, 50, 10, 101, 110, 100, 101, 109, 112, 104, 119, 111, 114, 100, 32, 116, 114, 97, 110, 115, 53, 32, 52, 54, 45, 51, 52, 53, 54, 45, 51, 10, 108, 101, 110, 101, 109, 112, 104, 112, 104, 114, 97, 115, 101, 32, 116, 114, 97, 110, 115, 53, 32, 51, 10, 98, 101, 103, 101, 109, 112, 104, 112, 104, 114, 97, 115, 101, 32, 116, 114, 97, 110, 115, 53, 32, 52, 54, 45, 51, 52, 53, 54, 45, 50, 51, 53, 54, 10, 101, 110, 100, 101, 109, 112, 104, 112, 104, 114, 97, 115, 101, 32, 116, 114, 97, 110, 115, 53, 32, 97, 102, 116, 101, 114, 32, 52, 54, 45, 51, 52, 53, 54, 45, 51, 10, 10, 35, 32, 100, 105, 115, 112, 108, 97, 121, 47, 112, 97, 115, 115, 116, 104, 114, 111, 117, 103, 104, 32, 102, 111, 114, 32, 117, 110, 105, 99, 111, 100, 101, 32, 98, 114, 97, 105, 108, 108, 101, 10, 105, 110, 99, 108, 117, 100, 101, 32, 98, 114, 97, 105, 108, 108, 101, 45, 112, 97, 116, 116, 101, 114, 110, 115, 46, 99, 116, 105, 10]);
Module['FS_createDataFile']('/', 'en-ueb-g1.ctb', fileData314, true, true, false);
var fileData402 = [];
fileData402.push.apply(fileData402, [35, 32, 108, 105, 98, 108, 111, 117, 105, 115, 58, 32, 69, 110, 103, 108, 105, 115, 104, 32, 40, 85, 110, 105, 102, 105, 101, 100, 41, 32, 109, 97, 116, 104, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 115, 10, 35, 10, 35, 32, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 49, 54, 32, 65, 109, 101, 114, 105, 99, 97, 110, 32, 80, 114, 105, 110, 116, 105, 110, 103, 32, 72, 111, 117, 115, 101, 32, 102, 111, 114, 32, 116, 104, 101, 32, 66, 108, 105, 110, 100, 44, 32, 73, 110, 99, 46, 32, 119, 119, 119, 46, 97, 112, 104, 46, 111, 114, 103, 10, 35, 10, 35, 32, 32, 84, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 112, 97, 114, 116, 32, 111, 102, 32, 108, 105, 98, 108, 111, 117, 105, 115, 46, 10, 35, 10, 35, 32, 32, 108, 105, 98, 108, 111, 117, 105, 115, 32, 105, 115, 32, 102, 114, 101, 101, 32, 115, 111, 102, 116, 119, 97, 114, 101, 58, 32, 121, 111, 117, 32, 99, 97, 110, 32, 114, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 32, 105, 116, 32, 97, 110, 100, 47, 111, 114, 32, 109, 111, 100, 105, 102, 121, 32, 105, 116, 10, 35, 32, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 116, 101, 114, 109, 115, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 76, 101, 115, 115, 101, 114, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 115, 10, 35, 32, 32, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 70, 114, 101, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 70, 111, 117, 110, 100, 97, 116, 105, 111, 110, 44, 32, 101, 105, 116, 104, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 50, 46, 49, 32, 111, 102, 32, 116, 104, 101, 10, 35, 32, 32, 76, 105, 99, 101, 110, 115, 101, 44, 32, 111, 114, 32, 40, 97, 116, 32, 121, 111, 117, 114, 32, 111, 112, 116, 105, 111, 110, 41, 32, 97, 110, 121, 32, 108, 97, 116, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 46, 10, 35, 10, 35, 32, 32, 108, 105, 98, 108, 111, 117, 105, 115, 32, 105, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 111, 112, 101, 32, 116, 104, 97, 116, 32, 105, 116, 32, 119, 105, 108, 108, 32, 98, 101, 32, 117, 115, 101, 102, 117, 108, 44, 32, 98, 117, 116, 10, 35, 32, 32, 87, 73, 84, 72, 79, 85, 84, 32, 65, 78, 89, 32, 87, 65, 82, 82, 65, 78, 84, 89, 59, 32, 119, 105, 116, 104, 111, 117, 116, 32, 101, 118, 101, 110, 32, 116, 104, 101, 32, 105, 109, 112, 108, 105, 101, 100, 32, 119, 97, 114, 114, 97, 110, 116, 121, 32, 111, 102, 10, 35, 32, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 32, 111, 114, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 46, 32, 83, 101, 101, 32, 116, 104, 101, 32, 71, 78, 85, 10, 35, 32, 32, 76, 101, 115, 115, 101, 114, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 115, 46, 10, 35, 10, 35, 32, 32, 89, 111, 117, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 114, 101, 99, 101, 105, 118, 101, 100, 32, 97, 32, 99, 111, 112, 121, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 76, 101, 115, 115, 101, 114, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 10, 35, 32, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 108, 111, 110, 103, 32, 119, 105, 116, 104, 32, 108, 105, 98, 108, 111, 117, 105, 115, 46, 32, 73, 102, 32, 110, 111, 116, 44, 32, 115, 101, 101, 10, 35, 32, 32, 60, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 103, 110, 117, 46, 111, 114, 103, 47, 108, 105, 99, 101, 110, 115, 101, 115, 47, 62, 46, 10, 10, 35, 32, 83, 101, 109, 97, 110, 116, 105, 99, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 32, 115, 101, 113, 117, 101, 110, 99, 101, 115, 10, 35, 32, 80, 114, 101, 102, 105, 120, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 115, 44, 32, 111, 110, 108, 121, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 115, 32, 97, 115, 32, 116, 104, 101, 121, 32, 115, 104, 111, 117, 108, 100, 32, 97, 108, 119, 97, 121, 115, 32, 111, 99, 99, 117, 114, 32, 97, 115, 32, 112, 97, 105, 114, 115, 32, 119, 105, 116, 104, 32, 111, 116, 104, 101, 114, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 115, 46, 10, 10, 109, 97, 116, 104, 32, 92, 120, 102, 52, 48, 48, 32, 48, 10, 109, 97, 116, 104, 32, 92, 120, 102, 52, 48, 49, 32, 48, 10, 109, 97, 116, 104, 32, 92, 120, 102, 52, 48, 50, 32, 48, 10, 109, 97, 116, 104, 32, 92, 120, 102, 52, 48, 51, 32, 48, 10, 35, 32, 66, 101, 103, 105, 110, 32, 97, 110, 100, 32, 101, 110, 100, 32, 101, 113, 117, 97, 116, 105, 111, 110, 115, 10, 114, 101, 112, 108, 97, 99, 101, 32, 92, 120, 102, 51, 50, 101, 10, 114, 101, 112, 108, 97, 99, 101, 32, 92, 120, 102, 51, 50, 102, 10, 35, 32, 83, 117, 98, 115, 99, 114, 105, 112, 116, 32, 97, 110, 100, 32, 115, 117, 112, 101, 114, 115, 99, 114, 105, 112, 116, 10, 109, 97, 116, 104, 32, 92, 120, 102, 51, 50, 48, 32, 50, 54, 45, 49, 50, 54, 10, 114, 101, 112, 108, 97, 99, 101, 32, 92, 120, 102, 52, 48, 49, 92, 120, 102, 51, 50, 48, 10, 35, 97, 108, 119, 97, 121, 115, 32, 92, 120, 102, 52, 48, 50, 92, 120, 102, 51, 50, 48, 32, 51, 52, 53, 10, 109, 97, 116, 104, 32, 92, 120, 102, 51, 50, 49, 32, 51, 53, 45, 49, 50, 54, 10, 114, 101, 112, 108, 97, 99, 101, 32, 92, 120, 102, 52, 48, 49, 92, 120, 102, 51, 50, 49, 10, 35, 97, 108, 119, 97, 121, 115, 32, 92, 120, 102, 52, 48, 50, 92, 120, 102, 51, 50, 49, 32, 51, 52, 53, 10, 35, 32, 85, 110, 100, 101, 114, 115, 99, 114, 105, 112, 116, 32, 97, 110, 100, 32, 111, 118, 101, 114, 115, 99, 114, 105, 112, 116, 10, 109, 97, 116, 104, 32, 92, 120, 102, 51, 50, 50, 32, 52, 54, 45, 50, 54, 45, 49, 50, 54, 10, 114, 101, 112, 108, 97, 99, 101, 32, 92, 120, 102, 52, 48, 49, 92, 120, 102, 51, 50, 50, 10, 35, 97, 108, 119, 97, 121, 115, 32, 92, 120, 102, 52, 48, 50, 92, 120, 102, 51, 50, 50, 32, 51, 52, 53, 10, 109, 97, 116, 104, 32, 92, 120, 102, 51, 50, 51, 32, 52, 54, 45, 51, 53, 45, 49, 50, 54, 10, 114, 101, 112, 108, 97, 99, 101, 32, 92, 120, 102, 52, 48, 49, 92, 120, 102, 51, 50, 51, 10, 35, 97, 108, 119, 97, 121, 115, 32, 92, 120, 102, 52, 48, 50, 92, 120, 102, 51, 50, 51, 32, 51, 52, 53, 10, 35, 32, 82, 111, 111, 116, 115, 10, 109, 97, 116, 104, 32, 92, 120, 102, 51, 50, 97, 32, 49, 52, 54, 10, 109, 97, 116, 104, 32, 92, 120, 102, 51, 50, 98, 32, 51, 52, 54, 10, 109, 97, 116, 104, 32, 92, 120, 102, 51, 50, 99, 32, 49, 52, 54, 45, 51, 53, 45, 49, 50, 54, 10, 35, 97, 108, 119, 97, 121, 115, 32, 92, 120, 102, 52, 48, 51, 92, 120, 102, 51, 50, 97, 32, 51, 52, 53, 10, 35, 32, 70, 114, 97, 99, 116, 105, 111, 110, 115, 10, 109, 97, 116, 104, 32, 92, 120, 102, 53, 48, 48, 32, 49, 50, 51, 53, 54, 10, 109, 97, 116, 104, 32, 92, 120, 102, 53, 48, 49, 32, 50, 51, 52, 53, 54, 10, 109, 97, 116, 104, 32, 92, 120, 102, 53, 48, 51, 32, 52, 54, 45, 51, 52, 10, 35, 32, 71, 114, 111, 117, 112, 105, 110, 103, 32, 115, 121, 109, 98, 111, 108, 115, 10, 109, 97, 116, 104, 32, 92, 120, 102, 51, 50, 54, 32, 49, 50, 54, 10, 35, 109, 97, 116, 104, 32, 92, 120, 102, 51, 50, 55, 32, 51, 52, 53, 10, 10, 35, 32, 80, 114, 111, 116, 101, 99, 116, 32, 97, 103, 97, 105, 110, 115, 116, 32, 105, 110, 99, 111, 114, 114, 101, 99, 116, 32, 117, 115, 101, 32, 111, 102, 32, 101, 115, 99, 97, 112, 101, 115, 32, 111, 114, 32, 119, 104, 101, 114, 101, 32, 101, 115, 99, 97, 112, 101, 32, 110, 111, 116, 32, 114, 101, 97, 108, 108, 121, 32, 110, 101, 101, 100, 101, 100, 10, 35, 32, 101, 103, 46, 32, 98, 114, 97, 99, 107, 101, 116, 115, 32, 102, 114, 111, 109, 32, 109, 102, 101, 110, 99, 101, 100, 10, 114, 101, 112, 108, 97, 99, 101, 32, 92, 120, 102, 52, 48, 48, 10, 114, 101, 112, 108, 97, 99, 101, 32, 92, 120, 102, 52, 48, 49, 10, 114, 101, 112, 108, 97, 99, 101, 32, 92, 120, 102, 52, 48, 50, 10, 114, 101, 112, 108, 97, 99, 101, 32, 92, 120, 102, 52, 48, 51, 10, 10, 35, 32, 67, 111, 114, 114, 101, 99, 116, 105, 111, 110, 115, 10, 35, 32, 82, 101, 109, 111, 118, 101, 32, 103, 114, 111, 117, 112, 105, 110, 103, 32, 102, 114, 111, 109, 32, 97, 114, 111, 117, 110, 100, 32, 115, 117, 112, 101, 114, 115, 99, 114, 105, 112, 116, 115, 32, 97, 110, 100, 32, 115, 117, 98, 115, 99, 114, 105, 112, 116, 115, 10, 110, 111, 98, 97, 99, 107, 32, 112, 97, 115, 115, 50, 32, 64, 51, 53, 45, 49, 50, 54, 91, 36, 100, 49, 45, 53, 93, 64, 51, 52, 53, 32, 64, 51, 53, 42, 10, 110, 111, 98, 97, 99, 107, 32, 112, 97, 115, 115, 50, 32, 64, 50, 54, 45, 49, 50, 54, 91, 36, 100, 49, 45, 53, 93, 64, 51, 52, 53, 32, 64, 50, 54, 42, 10, 35, 32, 82, 101, 109, 111, 118, 101, 32, 103, 114, 111, 117, 112, 105, 110, 103, 32, 102, 114, 111, 109, 32, 102, 114, 97, 99, 116, 105, 111, 110, 115, 10, 110, 111, 98, 97, 99, 107, 32, 112, 97, 115, 115, 50, 32, 64, 49, 50, 51, 53, 54, 45, 49, 50, 54, 91, 36, 100, 49, 45, 53, 93, 64, 51, 52, 53, 45, 52, 54, 45, 51, 52, 95, 50, 32, 64, 49, 50, 51, 53, 54, 42, 10, 110, 111, 98, 97, 99, 107, 32, 112, 97, 115, 115, 50, 32, 64, 52, 54, 45, 51, 52, 45, 49, 50, 54, 91, 36, 100, 49, 45, 53, 93, 64, 51, 52, 53, 45, 50, 51, 52, 53, 54, 32, 64, 52, 54, 45, 51, 52, 42, 64, 50, 51, 52, 53, 54, 10]);
Module['FS_createDataFile']('/', 'en-ueb-math.ctb', fileData402, true, true, false);

  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage({"files": []});

})();


// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof liblouisBuild !== 'undefined' ? liblouisBuild : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [null],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { assert(DYNAMICTOP_PTR);var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF16"] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
  if (__cxa_demangle_func) {
    try {
      var s =
        func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = __cxa_demangle_func(buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - asm.stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var WASM_PAGE_SIZE = 64 * 1024;

var totalMemory = WASM_PAGE_SIZE;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024;
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var lastChar, end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 44416;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([64,192,0,0,0,0,0,0,0,0,0,46,16,60,43,41,47,4,55,62,33,44,32,36,40,12,52,2,6,18,50,34,22,54,38,20,49,48,35,63,28,57,8,1,3,9,25,17,11,27,19,10,26,5,7,13,29,21,15,31,23,14,30,37,39,58,45,61,53,42,51,59,24,56,108,105,98,108,111,117,105,115,58,32,73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,10,0,37,120,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0,114,119,97,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10242);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

   
  Module["_memset"] = _memset;

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Module['dynCall_vi'](routine, arg) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  
  
  
  
  var _environ=STATICTOP; STATICTOP += 16;;var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _abort() {
      Module['abort']();
    }

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall195(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_stat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___lock() {}

  function ___unlock() {}

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC); 
  Module["_llvm_cttz_i32"] = _llvm_cttz_i32; 
  Module["___udivmoddi4"] = ___udivmoddi4; 
  Module["___udivdi3"] = ___udivdi3;

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      Runtime.stackRestore(ret);
    }

   
  Module["_sbrk"] = _sbrk;

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(Runtime.stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  
  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy; 
  Module["_memmove"] = _memmove;

   
  Module["___uremdi3"] = ___uremdi3;


  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

   
  Module["_pthread_self"] = _pthread_self;

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall220(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_getdents64
      var stream = SYSCALLS.getStreamFromFD(), dirp = SYSCALLS.get(), count = SYSCALLS.get();
      if (!stream.getdents) {
        stream.getdents = FS.readdir(stream.path);
      }
      var pos = 0;
      while (stream.getdents.length > 0 && pos + 268 <= count) {
        var id;
        var type;
        var name = stream.getdents.pop();
        assert(name.length < 256); // limit of dirent struct
        if (name[0] === '.') {
          id = 1;
          type = 4; // DT_DIR
        } else {
          var child = FS.lookupNode(stream.node, name);
          id = child.id;
          type = FS.isChrdev(child.mode) ? 2 :  // DT_CHR, character device.
                 FS.isDir(child.mode) ? 4 :     // DT_DIR, directory.
                 FS.isLink(child.mode) ? 10 :   // DT_LNK, symbolic link.
                 8;                             // DT_REG, regular file.
        }
        HEAP32[((dirp + pos)>>2)]=id;
        HEAP32[(((dirp + pos)+(4))>>2)]=stream.position;
        HEAP16[(((dirp + pos)+(8))>>1)]=268;
        HEAP8[(((dirp + pos)+(10))>>0)]=type;
        for (var i = 0; i < name.length; i++) {
          HEAP8[(((dirp + pos)+(11 + i))>>0)]=name.charCodeAt(i);
        }
        HEAP8[(((dirp + pos)+(11 + i))>>0)]=0;
        pos += 268;
      }
      return pos;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
___buildEnvironment(ENV);;
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_ii(index,a1) {
    return Runtime.functionPointers[index](a1);
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iiii(index,a1,a2,a3) {
    return Runtime.functionPointers[index](a1,a2,a3);
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_vii(index,a1,a2) {
    Runtime.functionPointers[index](a1,a2);
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iii(index,a1,a2) {
    return Runtime.functionPointers[index](a1,a2);
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_vi(index,a1) {
    Runtime.functionPointers[index](a1);
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_ii": nullFunc_ii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_vii": nullFunc_vii, "nullFunc_iii": nullFunc_iii, "nullFunc_vi": nullFunc_vi, "invoke_ii": invoke_ii, "jsCall_ii": jsCall_ii, "invoke_iiii": invoke_iiii, "jsCall_iiii": jsCall_iiii, "invoke_vii": invoke_vii, "jsCall_vii": jsCall_vii, "invoke_iii": invoke_iii, "jsCall_iii": jsCall_iii, "invoke_vi": invoke_vi, "jsCall_vi": jsCall_vi, "_pthread_cleanup_pop": _pthread_cleanup_pop, "___syscall221": ___syscall221, "___syscall220": ___syscall220, "_abort": _abort, "_pthread_cleanup_push": _pthread_cleanup_push, "_llvm_stackrestore": _llvm_stackrestore, "___buildEnvironment": ___buildEnvironment, "___setErrNo": ___setErrNo, "___syscall195": ___syscall195, "__exit": __exit, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_llvm_stacksave": _llvm_stacksave, "_getenv": _getenv, "___syscall54": ___syscall54, "___unlock": ___unlock, "___lock": ___lock, "___syscall6": ___syscall6, "___syscall5": ___syscall5, "___syscall140": ___syscall140, "_exit": _exit, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_vi=env.nullFunc_vi;
  var invoke_ii=env.invoke_ii;
  var jsCall_ii=env.jsCall_ii;
  var invoke_iiii=env.invoke_iiii;
  var jsCall_iiii=env.jsCall_iiii;
  var invoke_vii=env.invoke_vii;
  var jsCall_vii=env.jsCall_vii;
  var invoke_iii=env.invoke_iii;
  var jsCall_iii=env.jsCall_iii;
  var invoke_vi=env.invoke_vi;
  var jsCall_vi=env.jsCall_vi;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var ___syscall221=env.___syscall221;
  var ___syscall220=env.___syscall220;
  var _abort=env._abort;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var _llvm_stackrestore=env._llvm_stackrestore;
  var ___buildEnvironment=env.___buildEnvironment;
  var ___setErrNo=env.___setErrNo;
  var ___syscall195=env.___syscall195;
  var __exit=env.__exit;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _llvm_stacksave=env._llvm_stacksave;
  var _getenv=env._getenv;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var ___syscall140=env.___syscall140;
  var _exit=env._exit;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _lou_setDataPath($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 __lou_logMessage(30000,1880,$vararg_buffer);
 HEAP32[3276] = 0;
 $3 = $2;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = $2;
  $6 = (_strlen($5)|0);
  $7 = ($6>>>0)>=(2048);
  if (!($7)) {
   $8 = $2;
   (_strcpy(26704,$8)|0);
   HEAP32[3276] = 26704;
   $9 = HEAP32[3276]|0;
   $1 = $9;
   $10 = $1;
   STACKTOP = sp;return ($10|0);
  }
 }
 $1 = 0;
 $10 = $1;
 STACKTOP = sp;return ($10|0);
}
function _lou_getDataPath() {
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 __lou_logMessage(30000,1920,$vararg_buffer);
 $0 = HEAP32[3276]|0;
 STACKTOP = sp;return ($0|0);
}
function __lou_getALine($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = 0;
 $5 = $2;
 $6 = ((($5)) + 24|0);
 HEAP32[$6>>2] = 0;
 while(1) {
  $7 = $2;
  $8 = (_getAChar($7)|0);
  $3 = $8;
  $9 = ($8|0)!=(-1);
  if (!($9)) {
   break;
  }
  $10 = $3;
  $11 = ($10|0)==(13);
  if ($11) {
   continue;
  }
  $12 = $4;
  $13 = ($12|0)==(92);
  $14 = $3;
  $15 = ($14|0)==(10);
  $or$cond = $13 & $15;
  if ($or$cond) {
   $16 = $2;
   $17 = ((($16)) + 24|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($18) + -1)|0;
   HEAP32[$17>>2] = $19;
   $20 = $3;
   $4 = $20;
   continue;
  }
  $21 = $3;
  $22 = ($21|0)==(10);
  if ($22) {
   break;
  }
  $23 = $2;
  $24 = ((($23)) + 24|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)>=(2047);
  if ($26) {
   break;
  }
  $27 = $3;
  $28 = $27&65535;
  $29 = $2;
  $30 = ((($29)) + 24|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + 1)|0;
  HEAP32[$30>>2] = $32;
  $33 = $2;
  $34 = ((($33)) + 40|0);
  $35 = (($34) + ($31<<1)|0);
  HEAP16[$35>>1] = $28;
  $36 = $3;
  $4 = $36;
 }
 $37 = $2;
 $38 = ((($37)) + 24|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $2;
 $41 = ((($40)) + 40|0);
 $42 = (($41) + ($39<<1)|0);
 HEAP16[$42>>1] = 0;
 $43 = $2;
 $44 = ((($43)) + 28|0);
 HEAP32[$44>>2] = 0;
 $45 = $3;
 $46 = ($45|0)==(-1);
 if ($46) {
  $47 = $2;
  $48 = ((($47)) + 24|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($49|0)!=(0);
  if (!($50)) {
   $1 = 0;
   $55 = $1;
   STACKTOP = sp;return ($55|0);
  }
 }
 $51 = $2;
 $52 = ((($51)) + 12|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (($53) + 1)|0;
 HEAP32[$52>>2] = $54;
 $1 = 1;
 $55 = $1;
 STACKTOP = sp;return ($55|0);
}
function _getAChar($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = 0;
 $4 = 0;
 $6 = $2;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(3);
 if ($9) {
  $10 = $2;
  $11 = ((($10)) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(2);
  if ($13) {
   $14 = $2;
   $15 = ((($14)) + 20|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($16) + 1)|0;
   HEAP32[$15>>2] = $17;
   $18 = $2;
   $19 = ((($18)) + 32|0);
   $20 = ((($19)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $1 = $21;
   $120 = $1;
   STACKTOP = sp;return ($120|0);
  }
 }
 L5: while(1) {
  $22 = $2;
  $23 = ((($22)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (_fgetc($24)|0);
  $3 = $25;
  $26 = ($25|0)!=(-1);
  if (!($26)) {
   break;
  }
  $27 = $2;
  $28 = ((($27)) + 20|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)<(2);
  if ($30) {
   $31 = $3;
   $32 = $2;
   $33 = ((($32)) + 20|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $2;
   $36 = ((($35)) + 32|0);
   $37 = (($36) + ($34<<2)|0);
   HEAP32[$37>>2] = $31;
  }
  $38 = $2;
  $39 = ((($38)) + 20|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (($40) + 1)|0;
  HEAP32[$39>>2] = $41;
  $42 = $2;
  $43 = ((($42)) + 20|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)==(2);
  $46 = $2;
  if (!($45)) {
   $83 = ((($46)) + 16|0);
   $84 = HEAP32[$83>>2]|0;
   switch ($84|0) {
   case 3:  {
    label = 19;
    break L5;
    break;
   }
   case 2:  {
    $101 = $2;
    $102 = ((($101)) + 8|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = (_fgetc($103)|0);
    $4 = $104;
    $105 = $4;
    $106 = ($105|0)==(-1);
    if (!($106)) {
     label = 23;
     break L5;
    }
    break;
   }
   case 1:  {
    $86 = $2;
    $87 = ((($86)) + 8|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = (_fgetc($88)|0);
    $4 = $89;
    $90 = $4;
    $91 = ($90|0)==(-1);
    if (!($91)) {
     label = 21;
     break L5;
    }
    break;
   }
   default: {
   }
   }
   $116 = $3;
   $117 = ($116|0)==(-1);
   $118 = $4;
   $119 = ($118|0)==(-1);
   $or$cond = $117 | $119;
   if ($or$cond) {
    break;
   } else {
    continue;
   }
  }
  $47 = ((($46)) + 32|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)==(254);
  if ($49) {
   $50 = $2;
   $51 = ((($50)) + 32|0);
   $52 = ((($51)) + 4|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($53|0)==(255);
   if ($54) {
    $55 = $2;
    $56 = ((($55)) + 16|0);
    HEAP32[$56>>2] = 1;
    continue;
   }
  }
  $57 = $2;
  $58 = ((($57)) + 32|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($59|0)==(255);
  if (!($60)) {
   label = 14;
   break;
  }
  $61 = $2;
  $62 = ((($61)) + 32|0);
  $63 = ((($62)) + 4|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($64|0)==(254);
  if (!($65)) {
   label = 14;
   break;
  }
  $66 = $2;
  $67 = ((($66)) + 16|0);
  HEAP32[$67>>2] = 2;
 }
 if ((label|0) == 14) {
  $68 = $2;
  $69 = ((($68)) + 32|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ($70|0)<(128);
  if ($71) {
   $72 = $2;
   $73 = ((($72)) + 32|0);
   $74 = ((($73)) + 4|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = ($75|0)<(128);
   if ($76) {
    $77 = $2;
    $78 = ((($77)) + 16|0);
    HEAP32[$78>>2] = 3;
    $79 = $2;
    $80 = ((($79)) + 32|0);
    $81 = HEAP32[$80>>2]|0;
    $1 = $81;
    $120 = $1;
    STACKTOP = sp;return ($120|0);
   }
  }
  $82 = $2;
  _compileError($82,2144,$vararg_buffer);
  $3 = -1;
 }
 else if ((label|0) == 19) {
  $85 = $3;
  $1 = $85;
  $120 = $1;
  STACKTOP = sp;return ($120|0);
 }
 else if ((label|0) == 21) {
  $92 = $3;
  $93 = $92 << 8;
  $94 = $93&65535;
  $95 = $94&65535;
  $96 = $4;
  $97 = $95 | $96;
  $98 = $97&65535;
  $5 = $98;
  $99 = $5;
  $100 = $99&65535;
  $1 = $100;
  $120 = $1;
  STACKTOP = sp;return ($120|0);
 }
 else if ((label|0) == 23) {
  $107 = $4;
  $108 = $107 << 8;
  $109 = $108&65535;
  $110 = $109&65535;
  $111 = $3;
  $112 = $110 | $111;
  $113 = $112&65535;
  $5 = $113;
  $114 = $5;
  $115 = $114&65535;
  $1 = $115;
  $120 = $1;
  STACKTOP = sp;return ($120|0);
 }
 $1 = -1;
 $120 = $1;
 STACKTOP = sp;return ($120|0);
}
function __lou_getDotsForChar($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = $4;
 $8 = (_getDotsForChar($6,$7)|0);
 $5 = $8;
 $9 = $5;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $5;
  $12 = ((($11)) + 6|0);
  $13 = HEAP16[$12>>1]|0;
  $2 = $13;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 } else {
  $2 = -32768;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _getDotsForChar($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = (__lou_charHash($8)|0);
 $10 = $4;
 $11 = ((($10)) + 8|0);
 $12 = (($11) + ($9<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $6 = $13;
 $14 = $6;
 $7 = $14;
 while(1) {
  $15 = $7;
  $16 = ($15|0)!=(0);
  if (!($16)) {
   label = 6;
   break;
  }
  $17 = $7;
  $18 = $4;
  $19 = ((($18)) + 8992|0);
  $20 = (($19) + ($17<<3)|0);
  $5 = $20;
  $21 = $5;
  $22 = ((($21)) + 4|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23&65535;
  $25 = $3;
  $26 = $25&65535;
  $27 = ($24|0)==($26|0);
  $28 = $5;
  if ($27) {
   label = 4;
   break;
  }
  $29 = HEAP32[$28>>2]|0;
  $7 = $29;
 }
 if ((label|0) == 4) {
  $2 = $28;
  $30 = $2;
  STACKTOP = sp;return ($30|0);
 }
 else if ((label|0) == 6) {
  $2 = 0;
  $30 = $2;
  STACKTOP = sp;return ($30|0);
 }
 return (0)|0;
}
function __lou_getCharForDots($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = $4;
 $8 = (_getCharForDots($6,$7)|0);
 $5 = $8;
 $9 = $5;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $5;
  $12 = ((($11)) + 6|0);
  $13 = HEAP16[$12>>1]|0;
  $2 = $13;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 } else {
  $2 = 0;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _getCharForDots($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = (__lou_charHash($8)|0);
 $10 = $4;
 $11 = ((($10)) + 4500|0);
 $12 = (($11) + ($9<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $6 = $13;
 $14 = $6;
 $7 = $14;
 while(1) {
  $15 = $7;
  $16 = ($15|0)!=(0);
  if (!($16)) {
   label = 6;
   break;
  }
  $17 = $7;
  $18 = $4;
  $19 = ((($18)) + 8992|0);
  $20 = (($19) + ($17<<3)|0);
  $5 = $20;
  $21 = $5;
  $22 = ((($21)) + 4|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23&65535;
  $25 = $3;
  $26 = $25&65535;
  $27 = ($24|0)==($26|0);
  $28 = $5;
  if ($27) {
   label = 4;
   break;
  }
  $29 = HEAP32[$28>>2]|0;
  $7 = $29;
 }
 if ((label|0) == 4) {
  $2 = $28;
  $30 = $2;
  STACKTOP = sp;return ($30|0);
 }
 else if ((label|0) == 6) {
  $2 = 0;
  $30 = $2;
  STACKTOP = sp;return ($30|0);
 }
 return (0)|0;
}
function __lou_findOpcodeNumber($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = HEAP32[3277]|0;
 $3 = $5;
 $6 = $2;
 $7 = (_strlen($6)|0);
 $4 = $7;
 while(1) {
  $8 = $4;
  $9 = $3;
  $10 = (18272 + ($9<<1)|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = $11 << 16 >> 16;
  $13 = ($8|0)==($12|0);
  if ($13) {
   $14 = $2;
   $15 = $3;
   $16 = (824 + ($15<<2)|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (_strcasecmp($14,$17)|0);
   $19 = ($18|0)==(0);
   if ($19) {
    label = 4;
    break;
   }
  }
  $22 = $3;
  $23 = (($22) + 1)|0;
  $3 = $23;
  $24 = $3;
  $25 = ($24>>>0)>=(117);
  $$ = $25 ? 0 : $23;
  $3 = $$;
  $26 = $3;
  $27 = HEAP32[3277]|0;
  $28 = ($26|0)!=($27|0);
  if (!($28)) {
   label = 6;
   break;
  }
 }
 if ((label|0) == 4) {
  $20 = $3;
  HEAP32[3277] = $20;
  $21 = $3;
  $1 = $21;
  $29 = $1;
  STACKTOP = sp;return ($29|0);
 }
 else if ((label|0) == 6) {
  $1 = 117;
  $29 = $1;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function __lou_findOpcodeName($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $2;
 $4 = ($3>>>0)<(0);
 $5 = $2;
 $6 = ($5>>>0)>=(117);
 $or$cond = $4 | $6;
 $7 = $2;
 if ($or$cond) {
  HEAP32[$vararg_buffer>>2] = $7;
  (_sprintf(28752,1960,$vararg_buffer)|0);
  $1 = 28752;
  $10 = $1;
  STACKTOP = sp;return ($10|0);
 } else {
  $8 = (824 + ($7<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $1 = $9;
  $10 = $1;
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function __lou_extParseChars($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(8224|0);
 $5 = sp + 4114|0;
 $6 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $7 = 0;
 while(1) {
  $8 = $7;
  $9 = $3;
  $10 = (($9) + ($8)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)!=(0);
  $14 = $7;
  $15 = ($14|0)<(2047);
  $16 = $13 ? $15 : 0;
  $17 = $7;
  if (!($16)) {
   break;
  }
  $18 = $3;
  $19 = (($18) + ($17)|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20 << 24 >> 24;
  $22 = $7;
  $23 = ((($5)) + 2|0);
  $24 = (($23) + ($22<<1)|0);
  HEAP16[$24>>1] = $21;
  $25 = $7;
  $26 = (($25) + 1)|0;
  $7 = $26;
 }
 $27 = ((($5)) + 2|0);
 $28 = (($27) + ($17<<1)|0);
 HEAP16[$28>>1] = 0;
 $29 = $7;
 $30 = $29&65535;
 HEAP16[$5>>1] = $30;
 (_parseChars(0,$6,$5)|0);
 $31 = HEAP32[3278]|0;
 $32 = ($31|0)!=(0);
 if ($32) {
  HEAP32[3278] = 0;
  $2 = 0;
  $48 = $2;
  STACKTOP = sp;return ($48|0);
 }
 $7 = 0;
 while(1) {
  $33 = $7;
  $34 = HEAP16[$6>>1]|0;
  $35 = $34&65535;
  $36 = ($33|0)<($35|0);
  if (!($36)) {
   break;
  }
  $37 = $7;
  $38 = ((($6)) + 2|0);
  $39 = (($38) + ($37<<1)|0);
  $40 = HEAP16[$39>>1]|0;
  $41 = $7;
  $42 = $4;
  $43 = (($42) + ($41<<1)|0);
  HEAP16[$43>>1] = $40;
  $44 = $7;
  $45 = (($44) + 1)|0;
  $7 = $45;
 }
 $46 = HEAP16[$6>>1]|0;
 $47 = $46&65535;
 $2 = $47;
 $48 = $2;
 STACKTOP = sp;return ($48|0);
}
function _parseChars($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer16 = sp + 64|0;
 $vararg_buffer14 = sp + 56|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 $8 = 0;
 $9 = 0;
 $11 = 0;
 $12 = 0;
 $13 = 0;
 L1: while(1) {
  $15 = $7;
  $16 = $6;
  $17 = HEAP16[$16>>1]|0;
  $18 = $17&65535;
  $19 = ($15|0)<($18|0);
  if (!($19)) {
   label = 45;
   break;
  }
  $20 = $7;
  $21 = (($20) + 1)|0;
  $7 = $21;
  $22 = $6;
  $23 = ((($22)) + 2|0);
  $24 = (($23) + ($20<<1)|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $25&65535;
  $27 = $26 & 255;
  $11 = $27;
  $28 = $11;
  $29 = ($28>>>0)<(128);
  if (!($29)) {
   $73 = $8;
   $9 = $73;
   $74 = $7;
   $10 = $74;
   $12 = 6;
   while(1) {
    $75 = $12;
    $76 = ($75|0)>(0);
    if (!($76)) {
     break;
    }
    $77 = $11;
    $78 = $12;
    $79 = (1300 + ($78<<2)|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ($77>>>0)>=($80>>>0);
    if ($81) {
     break;
    }
    $82 = $12;
    $83 = (($82) + -1)|0;
    $12 = $83;
   }
   $84 = $11;
   $85 = $12;
   $86 = (1300 + ($85<<2)|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = (255 - ($87))|0;
   $89 = $84 & $88;
   $13 = $89;
   $14 = 0;
   while(1) {
    $90 = $14;
    $91 = $12;
    $92 = ($90|0)>=($91|0);
    $93 = $7;
    $94 = ($93|0)>=(2047);
    $or$cond = $92 | $94;
    if ($or$cond) {
     break;
    }
    $95 = $7;
    $96 = $6;
    $97 = HEAP16[$96>>1]|0;
    $98 = $97&65535;
    $99 = ($95|0)>=($98|0);
    if ($99) {
     break;
    }
    $100 = $8;
    $101 = ($100|0)>=(2047);
    if ($101) {
     label = 34;
     break L1;
    }
    $106 = $7;
    $107 = $6;
    $108 = ((($107)) + 2|0);
    $109 = (($108) + ($106<<1)|0);
    $110 = HEAP16[$109>>1]|0;
    $111 = $110&65535;
    $112 = ($111|0)<(128);
    if ($112) {
     label = 37;
    } else {
     $113 = $7;
     $114 = $6;
     $115 = ((($114)) + 2|0);
     $116 = (($115) + ($113<<1)|0);
     $117 = HEAP16[$116>>1]|0;
     $118 = $117&65535;
     $119 = $118 & 64;
     $120 = ($119|0)!=(0);
     if ($120) {
      label = 37;
     } else {
      $134 = $13;
      $135 = $134 << 6;
      $136 = $7;
      $137 = (($136) + 1)|0;
      $7 = $137;
      $138 = $6;
      $139 = ((($138)) + 2|0);
      $140 = (($139) + ($136<<1)|0);
      $141 = HEAP16[$140>>1]|0;
      $142 = $141&65535;
      $143 = $142 & 63;
      $144 = (($135) + ($143))|0;
      $13 = $144;
     }
    }
    if ((label|0) == 37) {
     label = 0;
     $121 = $4;
     _compileWarning($121,3598,$vararg_buffer14);
     $122 = $10;
     $123 = $6;
     $124 = ((($123)) + 2|0);
     $125 = (($124) + ($122<<1)|0);
     $126 = HEAP16[$125>>1]|0;
     $127 = $8;
     $128 = (($127) + 1)|0;
     $8 = $128;
     $129 = $5;
     $130 = ((($129)) + 2|0);
     $131 = (($130) + ($127<<1)|0);
     HEAP16[$131>>1] = $126;
     $132 = $10;
     $133 = (($132) + 1)|0;
     $7 = $133;
    }
    $145 = $14;
    $146 = (($145) + 1)|0;
    $14 = $146;
   }
   $147 = $8;
   $148 = ($147|0)>=(2047);
   if ($148) {
    label = 41;
    break;
   }
   $153 = $13;
   $154 = ($153>>>0)>(65535);
   if ($154) {
    $13 = 65535;
   }
   $155 = $13;
   $156 = $155&65535;
   $157 = $8;
   $158 = (($157) + 1)|0;
   $8 = $158;
   $159 = $5;
   $160 = ((($159)) + 2|0);
   $161 = (($160) + ($157<<1)|0);
   HEAP16[$161>>1] = $156;
   continue;
  }
  $30 = $11;
  $31 = ($30|0)==(92);
  if ($31) {
   $32 = $7;
   $33 = $6;
   $34 = ((($33)) + 2|0);
   $35 = (($34) + ($32<<1)|0);
   $36 = HEAP16[$35>>1]|0;
   $37 = $36&65535;
   $11 = $37;
   do {
    switch ($37|0) {
    case 92:  {
     break;
    }
    case 101:  {
     $11 = 27;
     break;
    }
    case 102:  {
     $11 = 12;
     break;
    }
    case 110:  {
     $11 = 10;
     break;
    }
    case 114:  {
     $11 = 13;
     break;
    }
    case 115:  {
     $11 = 32;
     break;
    }
    case 116:  {
     $11 = 9;
     break;
    }
    case 118:  {
     $11 = 11;
     break;
    }
    case 119:  {
     $11 = 65535;
     break;
    }
    case 34:  {
     $11 = 28;
     break;
    }
    case 88:  {
     $38 = $4;
     _compileWarning($38,3369,$vararg_buffer);
     label = 16;
     break;
    }
    case 120:  {
     label = 16;
     break;
    }
    case 89:  {
     $55 = $4;
     _compileWarning($55,3412,$vararg_buffer2);
     label = 19;
     break;
    }
    case 122: case 121:  {
     label = 19;
     break;
    }
    case 90:  {
     $57 = $4;
     _compileWarning($57,3506,$vararg_buffer6);
     label = 19;
     break;
    }
    default: {
     $58 = $4;
     $59 = $11;
     HEAP32[$vararg_buffer8>>2] = $59;
     _compileError($58,3553,$vararg_buffer8);
    }
    }
   } while(0);
   if ((label|0) == 16) {
    label = 0;
    $39 = $6;
    $40 = HEAP16[$39>>1]|0;
    $41 = $40&65535;
    $42 = $7;
    $43 = (($41) - ($42))|0;
    $44 = ($43|0)>(4);
    if ($44) {
     $45 = $4;
     $46 = $7;
     $47 = (($46) + 1)|0;
     $48 = $6;
     $49 = ((($48)) + 2|0);
     $50 = (($49) + ($47<<1)|0);
     $51 = (_hexValue($45,$50,4)|0);
     $52 = $51&65535;
     $11 = $52;
     $53 = $7;
     $54 = (($53) + 4)|0;
     $7 = $54;
    }
   }
   else if ((label|0) == 19) {
    label = 0;
    $56 = $4;
    _compileError($56,3456,$vararg_buffer4);
   }
   $60 = $7;
   $61 = (($60) + 1)|0;
   $7 = $61;
  }
  $62 = $8;
  $63 = ($62|0)>=(2047);
  if ($63) {
   label = 24;
   break;
  }
  $66 = $11;
  $67 = $66&65535;
  $68 = $8;
  $69 = (($68) + 1)|0;
  $8 = $69;
  $70 = $5;
  $71 = ((($70)) + 2|0);
  $72 = (($71) + ($68<<1)|0);
  HEAP16[$72>>1] = $67;
 }
 if ((label|0) == 24) {
  $64 = $4;
  _compileError($64,3583,$vararg_buffer10);
  $65 = $5;
  HEAP16[$65>>1] = 2047;
  $3 = 1;
  $165 = $3;
  STACKTOP = sp;return ($165|0);
 }
 else if ((label|0) == 34) {
  $102 = $4;
  _compileError($102,3583,$vararg_buffer12);
  $103 = $9;
  $104 = $103&65535;
  $105 = $5;
  HEAP16[$105>>1] = $104;
  $3 = 1;
  $165 = $3;
  STACKTOP = sp;return ($165|0);
 }
 else if ((label|0) == 41) {
  $149 = $4;
  _compileError($149,3583,$vararg_buffer16);
  $150 = $9;
  $151 = $150&65535;
  $152 = $5;
  HEAP16[$152>>1] = $151;
  $3 = 1;
  $165 = $3;
  STACKTOP = sp;return ($165|0);
 }
 else if ((label|0) == 45) {
  $162 = $8;
  $163 = $162&65535;
  $164 = $5;
  HEAP16[$164>>1] = $163;
  $3 = 1;
  $165 = $3;
  STACKTOP = sp;return ($165|0);
 }
 return (0)|0;
}
function __lou_extParseDots($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(8224|0);
 $5 = sp + 4114|0;
 $6 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $7 = 0;
 while(1) {
  $8 = $7;
  $9 = $3;
  $10 = (($9) + ($8)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)!=(0);
  $14 = $7;
  $15 = ($14|0)<(2047);
  $16 = $13 ? $15 : 0;
  $17 = $7;
  if (!($16)) {
   break;
  }
  $18 = $3;
  $19 = (($18) + ($17)|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20 << 24 >> 24;
  $22 = $7;
  $23 = ((($5)) + 2|0);
  $24 = (($23) + ($22<<1)|0);
  HEAP16[$24>>1] = $21;
  $25 = $7;
  $26 = (($25) + 1)|0;
  $7 = $26;
 }
 $27 = ((($5)) + 2|0);
 $28 = (($27) + ($17<<1)|0);
 HEAP16[$28>>1] = 0;
 $29 = $7;
 $30 = $29&65535;
 HEAP16[$5>>1] = $30;
 (_parseDots(0,$6,$5)|0);
 $31 = HEAP32[3278]|0;
 $32 = ($31|0)!=(0);
 if ($32) {
  HEAP32[3278] = 0;
  $2 = 0;
  $50 = $2;
  STACKTOP = sp;return ($50|0);
 }
 $7 = 0;
 while(1) {
  $33 = $7;
  $34 = HEAP16[$6>>1]|0;
  $35 = $34&65535;
  $36 = ($33|0)<($35|0);
  $37 = $7;
  if (!($36)) {
   break;
  }
  $38 = ((($6)) + 2|0);
  $39 = (($38) + ($37<<1)|0);
  $40 = HEAP16[$39>>1]|0;
  $41 = $7;
  $42 = $4;
  $43 = (($42) + ($41<<1)|0);
  HEAP16[$43>>1] = $40;
  $44 = $7;
  $45 = (($44) + 1)|0;
  $7 = $45;
 }
 $46 = $4;
 $47 = (($46) + ($37<<1)|0);
 HEAP16[$47>>1] = 0;
 $48 = HEAP16[$6>>1]|0;
 $49 = $48&65535;
 $2 = $49;
 $50 = $2;
 STACKTOP = sp;return ($50|0);
}
function _parseDots($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0;
 var $vararg_buffer4 = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $12 = sp + 64|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 $8 = 0;
 $10 = 0;
 $9 = 0;
 L1: while(1) {
  $14 = $9;
  $15 = $6;
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&65535;
  $18 = ($14|0)<($17|0);
  $19 = $9;
  $20 = $10;
  if (!($18)) {
   label = 29;
   break;
  }
  $21 = ($19|0)!=($20|0);
  $22 = $21&1;
  $11 = $22;
  $23 = $9;
  $24 = $6;
  $25 = ((($24)) + 2|0);
  $26 = (($25) + ($23<<1)|0);
  $27 = HEAP16[$26>>1]|0;
  HEAP16[$12>>1] = $27;
  $28 = HEAP16[$12>>1]|0;
  $29 = $28&65535;
  do {
   switch ($29|0) {
   case 49:  {
    $13 = 1;
    label = 19;
    break;
   }
   case 50:  {
    $13 = 2;
    label = 19;
    break;
   }
   case 51:  {
    $13 = 4;
    label = 19;
    break;
   }
   case 52:  {
    $13 = 8;
    label = 19;
    break;
   }
   case 53:  {
    $13 = 16;
    label = 19;
    break;
   }
   case 54:  {
    $13 = 32;
    label = 19;
    break;
   }
   case 55:  {
    $13 = 64;
    label = 19;
    break;
   }
   case 56:  {
    $13 = 128;
    label = 19;
    break;
   }
   case 57:  {
    $13 = 256;
    label = 19;
    break;
   }
   case 65: case 97:  {
    $13 = 512;
    label = 19;
    break;
   }
   case 66: case 98:  {
    $13 = 1024;
    label = 19;
    break;
   }
   case 67: case 99:  {
    $13 = 2048;
    label = 19;
    break;
   }
   case 68: case 100:  {
    $13 = 4096;
    label = 19;
    break;
   }
   case 69: case 101:  {
    $13 = 8192;
    label = 19;
    break;
   }
   case 70: case 102:  {
    $13 = 16384;
    label = 19;
    break;
   }
   case 48:  {
    $45 = $11;
    $46 = ($45|0)!=(0);
    if ($46) {
     label = 27;
     break L1;
    }
    break;
   }
   case 45:  {
    $47 = $11;
    $48 = ($47|0)!=(0);
    if (!($48)) {
     label = 25;
     break L1;
    }
    $50 = $7;
    $51 = $50&65535;
    $52 = $51 | 32768;
    $53 = $52&65535;
    $54 = $8;
    $55 = (($54) + 1)|0;
    $8 = $55;
    $56 = $5;
    $57 = ((($56)) + 2|0);
    $58 = (($57) + ($54<<1)|0);
    HEAP16[$58>>1] = $53;
    $7 = 0;
    $59 = $9;
    $60 = (($59) + 1)|0;
    $10 = $60;
    break;
   }
   default: {
    label = 27;
    break L1;
   }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   $30 = $11;
   $31 = ($30|0)==(0);
   $32 = $7;
   $33 = ($32<<16>>16)!=(0);
   $or$cond = $31 | $33;
   if (!($or$cond)) {
    label = 27;
    break;
   }
   $34 = $7;
   $35 = $34&65535;
   $36 = $13;
   $37 = $35 & $36;
   $38 = ($37|0)!=(0);
   if ($38) {
    label = 21;
    break;
   }
   $40 = $13;
   $41 = $7;
   $42 = $41&65535;
   $43 = $42 | $40;
   $44 = $43&65535;
   $7 = $44;
  }
  $63 = $9;
  $64 = (($63) + 1)|0;
  $9 = $64;
 }
 if ((label|0) == 21) {
  $39 = $4;
  _compileError($39,3698,$vararg_buffer);
  $3 = 0;
  $79 = $3;
  STACKTOP = sp;return ($79|0);
 }
 else if ((label|0) == 25) {
  $49 = $4;
  _compileError($49,3728,$vararg_buffer2);
  $3 = 0;
  $79 = $3;
  STACKTOP = sp;return ($79|0);
 }
 else if ((label|0) == 27) {
  $61 = $4;
  $62 = (__lou_showString($12,1,0)|0);
  HEAP32[$vararg_buffer4>>2] = $62;
  _compileError($61,3756,$vararg_buffer4);
  $3 = 0;
  $79 = $3;
  STACKTOP = sp;return ($79|0);
 }
 else if ((label|0) == 29) {
  $65 = ($19|0)==($20|0);
  if ($65) {
   $66 = $4;
   _compileError($66,3728,$vararg_buffer6);
   $3 = 0;
   $79 = $3;
   STACKTOP = sp;return ($79|0);
  } else {
   $67 = $7;
   $68 = $67&65535;
   $69 = $68 | 32768;
   $70 = $69&65535;
   $71 = $8;
   $72 = (($71) + 1)|0;
   $8 = $72;
   $73 = $5;
   $74 = ((($73)) + 2|0);
   $75 = (($74) + ($71<<1)|0);
   HEAP16[$75>>1] = $70;
   $76 = $8;
   $77 = $76&65535;
   $78 = $5;
   HEAP16[$78>>1] = $77;
   $3 = 1;
   $79 = $3;
   STACKTOP = sp;return ($79|0);
  }
 }
 return (0)|0;
}
function _lou_readCharFromFile($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $2 = 0;
  $27 = $2;
  STACKTOP = sp;return ($27|0);
 }
 $8 = $4;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(1);
 if ($10) {
  $11 = $4;
  HEAP32[$11>>2] = 0;
  $12 = $3;
  HEAP32[3279] = $12;
  HEAP32[(13132)>>2] = 0;
  HEAP32[(13136)>>2] = 0;
  HEAP32[(13128)>>2] = 0;
  $13 = HEAP32[3279]|0;
  $14 = (_fopen($13,1963)|0);
  HEAP32[(13124)>>2] = $14;
  $15 = ($14|0)!=(0|0);
  if (!($15)) {
   $16 = HEAP32[3279]|0;
   HEAP32[$vararg_buffer>>2] = $16;
   __lou_logMessage(40000,1965,$vararg_buffer);
   $17 = $4;
   HEAP32[$17>>2] = 1;
   $2 = -1;
   $27 = $2;
   STACKTOP = sp;return ($27|0);
  }
 }
 $18 = HEAP32[(13124)>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $20 = $4;
  HEAP32[$20>>2] = 1;
  $2 = -1;
  $27 = $2;
  STACKTOP = sp;return ($27|0);
 }
 $21 = (_getAChar(13116)|0);
 $5 = $21;
 $22 = $5;
 $23 = ($22|0)==(-1);
 if ($23) {
  $24 = HEAP32[(13124)>>2]|0;
  (_fclose($24)|0);
  HEAP32[(13124)>>2] = 0;
  $25 = $4;
  HEAP32[$25>>2] = 1;
 }
 $26 = $5;
 $2 = $26;
 $27 = $2;
 STACKTOP = sp;return ($27|0);
}
function __lou_getTablePath() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer8 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2112|0);
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 56|0;
 $4 = 0;
 $3 = $1;
 $5 = (_getenv((1987|0))|0);
 $2 = $5;
 $6 = $2;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $2;
  $9 = HEAP8[$8>>0]|0;
  $10 = $9 << 24 >> 24;
  $11 = ($10|0)!=(0);
  if ($11) {
   $4 = 1;
   $12 = $3;
   $13 = $2;
   HEAP32[$vararg_buffer>>2] = $13;
   $14 = (_sprintf($12,2003,$vararg_buffer)|0);
   $15 = $3;
   $16 = (($15) + ($14)|0);
   $3 = $16;
  }
 }
 $17 = HEAP32[3276]|0;
 $2 = $17;
 $18 = $2;
 $19 = ($18|0)!=(0|0);
 if ($19) {
  $20 = $2;
  $21 = HEAP8[$20>>0]|0;
  $22 = $21 << 24 >> 24;
  $23 = ($22|0)!=(0);
  if ($23) {
   $24 = $3;
   $25 = $2;
   HEAP32[$vararg_buffer1>>2] = $25;
   $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = 47;
   $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
   HEAP32[$vararg_ptr5>>2] = 2019;
   $vararg_ptr6 = ((($vararg_buffer1)) + 12|0);
   HEAP32[$vararg_ptr6>>2] = 47;
   $vararg_ptr7 = ((($vararg_buffer1)) + 16|0);
   HEAP32[$vararg_ptr7>>2] = 2028;
   $26 = (_sprintf($24,2007,$vararg_buffer1)|0);
   $27 = $3;
   $28 = (($27) + ($26)|0);
   $3 = $28;
  }
 }
 $29 = $4;
 $30 = ($29|0)!=(0);
 if (!($30)) {
  $31 = $3;
  HEAP32[$vararg_buffer8>>2] = 2035;
  $32 = (_sprintf($31,2003,$vararg_buffer8)|0);
  $33 = $3;
  $34 = (($33) + ($32)|0);
  $3 = $34;
 }
 $35 = HEAP8[$1>>0]|0;
 $36 = $35 << 24 >> 24;
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = ((($1)) + 1|0);
  $39 = (___strdup($38)|0);
  $0 = $39;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 } else {
  $40 = (___strdup(12782)|0);
  $0 = $40;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 return (0)|0;
}
function __lou_defaultTableResolver($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $13 = (__lou_getTablePath()|0);
 $5 = $13;
 $11 = 0;
 $14 = $3;
 $9 = $14;
 while(1) {
  $15 = $9;
  $16 = HEAP8[$15>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = ($17|0)!=(0);
  if (!($18)) {
   break;
  }
  $19 = $9;
  $20 = HEAP8[$19>>0]|0;
  $21 = $20 << 24 >> 24;
  $22 = ($21|0)==(44);
  if ($22) {
   $23 = $11;
   $24 = (($23) + 1)|0;
   $11 = $24;
  }
  $25 = $9;
  $26 = ((($25)) + 1|0);
  $9 = $26;
 }
 $27 = $11;
 $28 = (($27) + 2)|0;
 $29 = (_calloc($28,4)|0);
 $6 = $29;
 $30 = $6;
 $31 = ($30|0)!=(0|0);
 if (!($31)) {
  __lou_outOfMemory();
 }
 $11 = 0;
 $32 = $3;
 $33 = (___strdup($32)|0);
 $8 = $33;
 $34 = $8;
 $7 = $34;
 while(1) {
  $35 = $7;
  $9 = $35;
  while(1) {
   $36 = $9;
   $37 = HEAP8[$36>>0]|0;
   $38 = $37 << 24 >> 24;
   $39 = ($38|0)!=(0);
   if (!($39)) {
    break;
   }
   $40 = $9;
   $41 = HEAP8[$40>>0]|0;
   $42 = $41 << 24 >> 24;
   $43 = ($42|0)!=(44);
   if (!($43)) {
    break;
   }
   $44 = $9;
   $45 = ((($44)) + 1|0);
   $9 = $45;
  }
  $46 = $9;
  $47 = HEAP8[$46>>0]|0;
  $48 = $47 << 24 >> 24;
  $49 = ($48|0)==(0);
  $50 = $49&1;
  $10 = $50;
  $51 = $9;
  HEAP8[$51>>0] = 0;
  $52 = $7;
  $53 = $4;
  $54 = $5;
  $55 = (_resolveSubtable($52,$53,$54)|0);
  $56 = $11;
  $57 = (($56) + 1)|0;
  $11 = $57;
  $58 = $6;
  $59 = (($58) + ($56<<2)|0);
  HEAP32[$59>>2] = $55;
  $60 = ($55|0)!=(0|0);
  if (!($60)) {
   break;
  }
  $73 = $11;
  $74 = ($73|0)==(1);
  if ($74) {
   $75 = $7;
   $4 = $75;
  }
  $76 = $10;
  $77 = ($76|0)!=(0);
  if ($77) {
   label = 22;
   break;
  }
  $78 = $9;
  $79 = ((($78)) + 1|0);
  $7 = $79;
 }
 if ((label|0) == 22) {
  $80 = $5;
  _rpl_free($80);
  $81 = $8;
  _rpl_free($81);
  $82 = $11;
  $83 = $6;
  $84 = (($83) + ($82<<2)|0);
  HEAP32[$84>>2] = 0;
  $85 = $6;
  $2 = $85;
  $86 = $2;
  STACKTOP = sp;return ($86|0);
 }
 $61 = $7;
 HEAP32[$vararg_buffer>>2] = $61;
 __lou_logMessage(40000,9726,$vararg_buffer);
 $62 = (_getenv((1987|0))|0);
 $12 = $62;
 $63 = $12;
 $64 = ($63|0)!=(0|0);
 if ($64) {
  $65 = $12;
  $66 = HEAP8[$65>>0]|0;
  $67 = $66 << 24 >> 24;
  $68 = ($67|0)!=(0);
  if ($68) {
   $69 = $12;
   HEAP32[$vararg_buffer1>>2] = $69;
   __lou_logMessage(40000,2068,$vararg_buffer1);
  }
 }
 $70 = $5;
 _rpl_free($70);
 $71 = $8;
 _rpl_free($71);
 $72 = $6;
 _free_tablefiles($72);
 $2 = 0;
 $86 = $2;
 STACKTOP = sp;return ($86|0);
}
function _resolveSubtable($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer21 = 0, $vararg_buffer4 = 0, $vararg_buffer9 = 0, $vararg_ptr15 = 0;
 var $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr20 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer21 = sp + 72|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $13 = $4;
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  $15 = $4;
  $16 = HEAP8[$15>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = ($17|0)==(0);
  if (!($18)) {
   $19 = (_rpl_malloc(4096)|0);
   $7 = $19;
   $20 = $5;
   $21 = ($20|0)!=(0|0);
   if ($21) {
    $22 = $5;
    $23 = (_strlen($22)|0);
    $24 = ($23>>>0)>=(4096);
    if (!($24)) {
     $25 = $7;
     $26 = $5;
     (_strcpy($25,$26)|0);
     $27 = $7;
     $28 = (_strlen($27)|0);
     $8 = $28;
     while(1) {
      $29 = $8;
      $30 = ($29|0)>=(0);
      if ($30) {
       $31 = $8;
       $32 = $7;
       $33 = (($32) + ($31)|0);
       $34 = HEAP8[$33>>0]|0;
       $35 = $34 << 24 >> 24;
       $36 = ($35|0)!=(47);
       if ($36) {
        $37 = $8;
        $38 = $7;
        $39 = (($38) + ($37)|0);
        $40 = HEAP8[$39>>0]|0;
        $41 = $40 << 24 >> 24;
        $42 = ($41|0)!=(92);
        $155 = $42;
       } else {
        $155 = 0;
       }
      } else {
       $155 = 0;
      }
      $43 = $8;
      if (!($155)) {
       break;
      }
      $44 = (($43) + -1)|0;
      $8 = $44;
     }
     $45 = (($43) + 1)|0;
     $8 = $45;
     $46 = $7;
     $47 = (($46) + ($45)|0);
     HEAP8[$47>>0] = 0;
     $48 = $7;
     $49 = (_strlen($48)|0);
     $50 = $4;
     $51 = (_strlen($50)|0);
     $52 = (($49) + ($51))|0;
     $53 = ($52>>>0)>=(4096);
     if (!($53)) {
      $54 = $7;
      $55 = $4;
      (_strcat($54,$55)|0);
      $56 = $7;
      $57 = (_stat($56,17336)|0);
      $58 = ($57|0)==(0);
      if ($58) {
       $59 = HEAP32[(17348)>>2]|0;
       $60 = $59 & 16384;
       $61 = ($60|0)!=(0);
       if ($61) {
        label = 16;
       } else {
        $62 = $7;
        HEAP32[$vararg_buffer>>2] = $62;
        __lou_logMessage(10000,3779,$vararg_buffer);
        $63 = $7;
        $3 = $63;
        $154 = $3;
        STACKTOP = sp;return ($154|0);
       }
      } else {
       label = 16;
      }
     }
    }
   } else {
    label = 16;
   }
   do {
    if ((label|0) == 16) {
     $64 = $4;
     $65 = (_strlen($64)|0);
     $66 = ($65>>>0)>=(4096);
     if (!($66)) {
      $67 = $7;
      $68 = $4;
      (_strcpy($67,$68)|0);
      $69 = $7;
      $70 = (_stat($69,17336)|0);
      $71 = ($70|0)==(0);
      if ($71) {
       $72 = HEAP32[(17348)>>2]|0;
       $73 = $72 & 16384;
       $74 = ($73|0)!=(0);
       if (!($74)) {
        $75 = $7;
        HEAP32[$vararg_buffer1>>2] = $75;
        __lou_logMessage(10000,3779,$vararg_buffer1);
        $76 = $7;
        $3 = $76;
        $154 = $3;
        STACKTOP = sp;return ($154|0);
       }
      }
      $77 = $6;
      $78 = HEAP8[$77>>0]|0;
      $79 = $78 << 24 >> 24;
      $80 = ($79|0)!=(0);
      if ($80) {
       $81 = $6;
       $82 = (___strdup($81)|0);
       $12 = $82;
       $83 = $12;
       $9 = $83;
       while(1) {
        $84 = $9;
        $11 = $84;
        while(1) {
         $85 = $11;
         $86 = HEAP8[$85>>0]|0;
         $87 = $86 << 24 >> 24;
         $88 = ($87|0)!=(0);
         if (!($88)) {
          break;
         }
         $89 = $11;
         $90 = HEAP8[$89>>0]|0;
         $91 = $90 << 24 >> 24;
         $92 = ($91|0)!=(44);
         if (!($92)) {
          break;
         }
         $93 = $11;
         $94 = ((($93)) + 1|0);
         $11 = $94;
        }
        $95 = $11;
        $96 = HEAP8[$95>>0]|0;
        $97 = $96 << 24 >> 24;
        $98 = ($97|0)==(0);
        $99 = $98&1;
        $10 = $99;
        $100 = $11;
        HEAP8[$100>>0] = 0;
        $101 = $9;
        $102 = $11;
        $103 = ($101|0)==($102|0);
        if ($103) {
         $9 = 12782;
        }
        $104 = $9;
        $105 = (_strlen($104)|0);
        $106 = $4;
        $107 = (_strlen($106)|0);
        $108 = (($105) + ($107))|0;
        $109 = (($108) + 1)|0;
        $110 = ($109>>>0)>=(4096);
        if ($110) {
         label = 29;
         break;
        }
        $112 = $7;
        $113 = $9;
        $114 = $4;
        HEAP32[$vararg_buffer4>>2] = $113;
        $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
        HEAP32[$vararg_ptr7>>2] = 47;
        $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
        HEAP32[$vararg_ptr8>>2] = $114;
        (_sprintf($112,9697,$vararg_buffer4)|0);
        $115 = $7;
        $116 = (_stat($115,17336)|0);
        $117 = ($116|0)==(0);
        if ($117) {
         $118 = HEAP32[(17348)>>2]|0;
         $119 = $118 & 16384;
         $120 = ($119|0)!=(0);
         if (!($120)) {
          label = 32;
          break;
         }
        }
        $124 = $10;
        $125 = ($124|0)!=(0);
        if ($125) {
         label = 41;
         break;
        }
        $126 = $9;
        $127 = (_strlen($126)|0);
        $128 = (($127) + 8)|0;
        $129 = (($128) + 6)|0;
        $130 = $4;
        $131 = (_strlen($130)|0);
        $132 = (($129) + ($131))|0;
        $133 = (($132) + 3)|0;
        $134 = ($133>>>0)>=(4096);
        if ($134) {
         label = 35;
         break;
        }
        $136 = $7;
        $137 = $9;
        $138 = $4;
        HEAP32[$vararg_buffer12>>2] = $137;
        $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
        HEAP32[$vararg_ptr15>>2] = 47;
        $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
        HEAP32[$vararg_ptr16>>2] = 2019;
        $vararg_ptr17 = ((($vararg_buffer12)) + 12|0);
        HEAP32[$vararg_ptr17>>2] = 47;
        $vararg_ptr18 = ((($vararg_buffer12)) + 16|0);
        HEAP32[$vararg_ptr18>>2] = 2028;
        $vararg_ptr19 = ((($vararg_buffer12)) + 20|0);
        HEAP32[$vararg_ptr19>>2] = 47;
        $vararg_ptr20 = ((($vararg_buffer12)) + 24|0);
        HEAP32[$vararg_ptr20>>2] = $138;
        (_sprintf($136,3794,$vararg_buffer12)|0);
        $139 = $7;
        $140 = (_stat($139,17336)|0);
        $141 = ($140|0)==(0);
        if ($141) {
         $142 = HEAP32[(17348)>>2]|0;
         $143 = $142 & 16384;
         $144 = ($143|0)!=(0);
         if (!($144)) {
          label = 38;
          break;
         }
        }
        $148 = $10;
        $149 = ($148|0)!=(0);
        if ($149) {
         label = 41;
         break;
        }
        $150 = $11;
        $151 = ((($150)) + 1|0);
        $9 = $151;
       }
       if ((label|0) == 29) {
        $111 = $12;
        _rpl_free($111);
        break;
       }
       else if ((label|0) == 32) {
        $121 = $7;
        HEAP32[$vararg_buffer9>>2] = $121;
        __lou_logMessage(10000,3779,$vararg_buffer9);
        $122 = $12;
        _rpl_free($122);
        $123 = $7;
        $3 = $123;
        $154 = $3;
        STACKTOP = sp;return ($154|0);
       }
       else if ((label|0) == 35) {
        $135 = $12;
        _rpl_free($135);
        break;
       }
       else if ((label|0) == 38) {
        $145 = $7;
        HEAP32[$vararg_buffer21>>2] = $145;
        __lou_logMessage(10000,3779,$vararg_buffer21);
        $146 = $12;
        _rpl_free($146);
        $147 = $7;
        $3 = $147;
        $154 = $3;
        STACKTOP = sp;return ($154|0);
       }
       else if ((label|0) == 41) {
        $152 = $12;
        _rpl_free($152);
        break;
       }
      }
     }
    }
   } while(0);
   $153 = $7;
   _rpl_free($153);
   $3 = 0;
   $154 = $3;
   STACKTOP = sp;return ($154|0);
  }
 }
 $3 = 0;
 $154 = $3;
 STACKTOP = sp;return ($154|0);
}
function _free_tablefiles($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $1;
 $2 = $5;
 while(1) {
  $6 = $2;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   break;
  }
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  _rpl_free($10);
  $11 = $2;
  $12 = ((($11)) + 4|0);
  $2 = $12;
 }
 $13 = $1;
 _rpl_free($13);
 STACKTOP = sp;return;
}
function __lou_resolveTable($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = HEAP32[323]|0;
 $7 = $2;
 $8 = $3;
 $9 = (FUNCTION_TABLE_iii[$6 & 31]($7,$8)|0);
 $4 = $9;
 $10 = $4;
 $11 = (_copyStringArray($10)|0);
 $5 = $11;
 $12 = HEAP32[323]|0;
 $13 = ($12|0)==(4|0);
 if (!($13)) {
  $15 = $5;
  STACKTOP = sp;return ($15|0);
 }
 $14 = $4;
 _free_tablefiles($14);
 $15 = $5;
 STACKTOP = sp;return ($15|0);
}
function _copyStringArray($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $1 = 0;
  $32 = $1;
  STACKTOP = sp;return ($32|0);
 }
 $3 = 0;
 while(1) {
  $7 = $3;
  $8 = $2;
  $9 = (($8) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(0|0);
  $12 = $3;
  $13 = (($12) + 1)|0;
  if (!($11)) {
   break;
  }
  $3 = $13;
 }
 $14 = $13<<2;
 $15 = (_rpl_malloc($14)|0);
 $4 = $15;
 $16 = $3;
 $17 = $4;
 $18 = (($17) + ($16<<2)|0);
 HEAP32[$18>>2] = 0;
 while(1) {
  $19 = $3;
  $20 = ($19|0)!=(0);
  if (!($20)) {
   break;
  }
  $21 = $3;
  $22 = (($21) + -1)|0;
  $3 = $22;
  $23 = $3;
  $24 = $2;
  $25 = (($24) + ($23<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (___strdup($26)|0);
  $28 = $3;
  $29 = $4;
  $30 = (($29) + ($28<<2)|0);
  HEAP32[$30>>2] = $27;
 }
 $31 = $4;
 $1 = $31;
 $32 = $1;
 STACKTOP = sp;return ($32|0);
}
function _lou_registerTableResolver($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[323] = $2;
 STACKTOP = sp;return;
}
function _lou_getEmphClasses($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $3 = sp + 20|0;
 $2 = $0;
 $4 = 0;
 $9 = $2;
 $10 = (__lou_getTranslationTable($9)|0);
 $5 = $10;
 $11 = $5;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  $1 = 0;
  $38 = $1;
  STACKTOP = sp;return ($38|0);
 }
 while(1) {
  $13 = $4;
  $14 = ($13>>>0)<(10);
  if (!($14)) {
   break;
  }
  $15 = $4;
  $16 = $5;
  $17 = ((($16)) + 820|0);
  $18 = (($17) + ($15<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $6 = $19;
  $20 = $6;
  $21 = ($20|0)!=(0|0);
  if (!($21)) {
   break;
  }
  $22 = $6;
  $23 = $4;
  $24 = (($23) + 1)|0;
  $4 = $24;
  $25 = (($3) + ($23<<2)|0);
  HEAP32[$25>>2] = $22;
 }
 $26 = $4;
 $27 = (($26) + 1)|0;
 $4 = $27;
 $28 = (($3) + ($26<<2)|0);
 HEAP32[$28>>2] = 0;
 $29 = $4;
 $30 = $29<<2;
 $7 = $30;
 $31 = $7;
 $32 = (_rpl_malloc($31)|0);
 $8 = $32;
 $33 = $8;
 $34 = ($33|0)!=(0|0);
 if ($34) {
  $35 = $8;
  $36 = $7;
  _memcpy(($35|0),($3|0),($36|0))|0;
  $37 = $8;
  $1 = $37;
  $38 = $1;
  STACKTOP = sp;return ($38|0);
 } else {
  $1 = 0;
  $38 = $1;
  STACKTOP = sp;return ($38|0);
 }
 return (0)|0;
}
function __lou_getTranslationTable($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $1 = $0;
 $3 = $1;
 _getTable($3,0,$2,0);
 $4 = HEAP32[$2>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = HEAP32[$2>>2]|0;
  $7 = (_finalizeTable($6)|0);
  $8 = ($7|0)!=(0);
  if (!($8)) {
   HEAP32[$2>>2] = 0;
  }
 }
 $9 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($9|0);
}
function __lou_getTable($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = sp + 4|0;
 $9 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $4;
 $11 = $5;
 _getTable($10,$11,$8,$9);
 $12 = HEAP32[$8>>2]|0;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = HEAP32[$8>>2]|0;
  $15 = (_finalizeTable($14)|0);
  $16 = ($15|0)!=(0);
  if (!($16)) {
   HEAP32[$8>>2] = 0;
  }
 }
 $17 = HEAP32[$8>>2]|0;
 $18 = $6;
 HEAP32[$18>>2] = $17;
 $19 = HEAP32[$9>>2]|0;
 $20 = $7;
 HEAP32[$20>>2] = $19;
 STACKTOP = sp;return;
}
function _getTable($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp;
 $14 = sp + 24|0;
 $15 = sp + 20|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = 0;
 $20 = $4;
 $21 = ($20|0)==(0|0);
 if ($21) {
  label = 3;
 } else {
  $22 = $4;
  $23 = HEAP8[$22>>0]|0;
  $24 = $23 << 24 >> 24;
  $25 = ($24|0)==(0);
  if ($25) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = 0;
 }
 $26 = $5;
 $27 = ($26|0)==(0|0);
 if ($27) {
  label = 6;
 } else {
  $28 = $5;
  $29 = HEAP8[$28>>0]|0;
  $30 = $29 << 24 >> 24;
  $31 = ($30|0)==(0);
  if ($31) {
   label = 6;
  }
 }
 if ((label|0) == 6) {
  $7 = 0;
 }
 $32 = $6;
 $33 = ($32|0)!=(0|0);
 L11: do {
  if ($33) {
   $34 = $4;
   $35 = (_strlen($34)|0);
   $8 = $35;
   $36 = $6;
   HEAP32[$36>>2] = 0;
   $37 = HEAP32[4313]|0;
   $10 = $37;
   $11 = 0;
   while(1) {
    $38 = $10;
    $39 = ($38|0)!=(0|0);
    if (!($39)) {
     break L11;
    }
    $40 = $8;
    $41 = $10;
    $42 = ((($41)) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($40|0)==($43|0);
    if ($44) {
     $45 = $10;
     $46 = ((($45)) + 12|0);
     $47 = $4;
     $48 = $8;
     $49 = (_memcmp($46,$47,$48)|0);
     $50 = ($49|0)==(0);
     if ($50) {
      break;
     }
    }
    $63 = $10;
    $11 = $63;
    $64 = $10;
    $65 = HEAP32[$64>>2]|0;
    $10 = $65;
   }
   $51 = $11;
   $52 = ($51|0)!=(0|0);
   if ($52) {
    $53 = $10;
    $54 = HEAP32[$53>>2]|0;
    $55 = $11;
    HEAP32[$55>>2] = $54;
    $56 = HEAP32[4313]|0;
    $57 = $10;
    HEAP32[$57>>2] = $56;
    $58 = $10;
    HEAP32[4313] = $58;
   }
   $59 = $10;
   $60 = ((($59)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $6;
   HEAP32[$62>>2] = $61;
  }
 } while(0);
 $66 = $7;
 $67 = ($66|0)!=(0|0);
 L24: do {
  if ($67) {
   $68 = $5;
   $69 = (_strlen($68)|0);
   $9 = $69;
   $70 = $7;
   HEAP32[$70>>2] = 0;
   $71 = HEAP32[4314]|0;
   $12 = $71;
   $13 = 0;
   while(1) {
    $72 = $12;
    $73 = ($72|0)!=(0|0);
    if (!($73)) {
     break L24;
    }
    $74 = $9;
    $75 = $12;
    $76 = ((($75)) + 8|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = ($74|0)==($77|0);
    if ($78) {
     $79 = $12;
     $80 = ((($79)) + 12|0);
     $81 = $5;
     $82 = $9;
     $83 = (_memcmp($80,$81,$82)|0);
     $84 = ($83|0)==(0);
     if ($84) {
      break;
     }
    }
    $97 = $12;
    $13 = $97;
    $98 = $12;
    $99 = HEAP32[$98>>2]|0;
    $12 = $99;
   }
   $85 = $13;
   $86 = ($85|0)!=(0|0);
   if ($86) {
    $87 = $12;
    $88 = HEAP32[$87>>2]|0;
    $89 = $13;
    HEAP32[$89>>2] = $88;
    $90 = HEAP32[4314]|0;
    $91 = $12;
    HEAP32[$91>>2] = $90;
    $92 = $12;
    HEAP32[4314] = $92;
   }
   $93 = $12;
   $94 = ((($93)) + 4|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $7;
   HEAP32[$96>>2] = $95;
  }
 } while(0);
 $100 = $6;
 $101 = ($100|0)!=(0|0);
 if ($101) {
  $102 = $6;
  $103 = HEAP32[$102>>2]|0;
  $104 = ($103|0)==(0|0);
  if (!($104)) {
   label = 27;
  }
 } else {
  label = 27;
 }
 if ((label|0) == 27) {
  $105 = $7;
  $106 = ($105|0)!=(0|0);
  if (!($106)) {
   STACKTOP = sp;return;
  }
  $107 = $7;
  $108 = HEAP32[$107>>2]|0;
  $109 = ($108|0)==(0|0);
  if (!($109)) {
   STACKTOP = sp;return;
  }
 }
 HEAP32[$14>>2] = 0;
 HEAP32[$15>>2] = 0;
 $110 = $4;
 $111 = $5;
 $112 = $6;
 $113 = ($112|0)!=(0|0);
 if ($113) {
  $114 = $6;
  $115 = HEAP32[$114>>2]|0;
  $116 = ($115|0)==(0|0);
  if ($116) {
   $122 = $14;
  } else {
   label = 31;
  }
 } else {
  label = 31;
 }
 if ((label|0) == 31) {
  $122 = 0;
 }
 $117 = $7;
 $118 = ($117|0)!=(0|0);
 if ($118) {
  $119 = $7;
  $120 = HEAP32[$119>>2]|0;
  $121 = ($120|0)==(0|0);
  if ($121) {
   $123 = $15;
  } else {
   label = 34;
  }
 } else {
  label = 34;
 }
 if ((label|0) == 34) {
  $123 = 0;
 }
 $124 = (_compileTable($110,$111,$122,$123)|0);
 $125 = ($124|0)!=(0);
 if (!($125)) {
  $172 = $4;
  HEAP32[$vararg_buffer>>2] = $172;
  __lou_logMessage(40000,2087,$vararg_buffer);
  STACKTOP = sp;return;
 }
 $126 = HEAP32[$14>>2]|0;
 $127 = ($126|0)!=(0|0);
 if ($127) {
  $128 = $8;
  $129 = (16 + ($128))|0;
  $16 = $129;
  $130 = $16;
  $131 = (_rpl_malloc($130)|0);
  $17 = $131;
  $132 = $17;
  $133 = ($132|0)!=(0|0);
  if (!($133)) {
   __lou_outOfMemory();
  }
  $134 = HEAP32[4313]|0;
  $135 = $17;
  HEAP32[$135>>2] = $134;
  $136 = HEAP32[$14>>2]|0;
  $137 = $17;
  $138 = ((($137)) + 4|0);
  HEAP32[$138>>2] = $136;
  $139 = $8;
  $140 = $17;
  $141 = ((($140)) + 8|0);
  HEAP32[$141>>2] = $139;
  $142 = $17;
  $143 = ((($142)) + 12|0);
  $144 = $4;
  $145 = $8;
  _memcpy(($143|0),($144|0),($145|0))|0;
  $146 = $17;
  HEAP32[4313] = $146;
  $147 = HEAP32[$14>>2]|0;
  $148 = $6;
  HEAP32[$148>>2] = $147;
 }
 $149 = HEAP32[$15>>2]|0;
 $150 = ($149|0)!=(0|0);
 if (!($150)) {
  STACKTOP = sp;return;
 }
 $151 = $9;
 $152 = (16 + ($151))|0;
 $18 = $152;
 $153 = $18;
 $154 = (_rpl_malloc($153)|0);
 $19 = $154;
 $155 = $19;
 $156 = ($155|0)!=(0|0);
 if (!($156)) {
  __lou_outOfMemory();
 }
 $157 = HEAP32[4314]|0;
 $158 = $19;
 HEAP32[$158>>2] = $157;
 $159 = HEAP32[$15>>2]|0;
 $160 = $19;
 $161 = ((($160)) + 4|0);
 HEAP32[$161>>2] = $159;
 $162 = $9;
 $163 = $19;
 $164 = ((($163)) + 8|0);
 HEAP32[$164>>2] = $162;
 $165 = $19;
 $166 = ((($165)) + 12|0);
 $167 = $5;
 $168 = $9;
 _memcpy(($166|0),($167|0),($168|0))|0;
 $169 = $19;
 HEAP32[4314] = $169;
 $170 = HEAP32[$15>>2]|0;
 $171 = $7;
 HEAP32[$171>>2] = $170;
 STACKTOP = sp;return;
}
function _finalizeTable($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $8 = sp;
 $2 = $0;
 $19 = $2;
 $20 = ((($19)) + 512|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0);
 if ($22) {
  $1 = 1;
  $387 = $1;
  STACKTOP = sp;return ($387|0);
 }
 $3 = 0;
 L5: while(1) {
  $23 = $3;
  $24 = ($23|0)<(1123);
  if (!($24)) {
   label = 31;
   break;
  }
  $25 = $3;
  $26 = $2;
  $27 = ((($26)) + 13160|0);
  $28 = (($27) + ($25<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $4 = $29;
  while(1) {
   $30 = $4;
   $31 = ($30|0)!=(0);
   if (!($31)) {
    break;
   }
   $32 = $4;
   $33 = $2;
   $34 = ((($33)) + 31168|0);
   $35 = (($34) + ($32<<3)|0);
   $5 = $35;
   $36 = $5;
   $37 = ((($36)) + 48|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)!=(0);
   if ($39) {
    $6 = 0;
    $40 = $5;
    $7 = $40;
    $41 = $8;
    $42 = $41;
    HEAP32[$42>>2] = 0;
    $43 = (($41) + 4)|0;
    $44 = $43;
    HEAP32[$44>>2] = 0;
    $9 = 0;
    while(1) {
     $45 = $7;
     $46 = ((($45)) + 48|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($47|0)!=(0);
     if (!($48)) {
      break;
     }
     $49 = $7;
     $50 = ((($49)) + 48|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = $4;
     $53 = ($51|0)==($52|0);
     if ($53) {
      label = 12;
      break L5;
     }
     $54 = $9;
     $55 = (($54) + 1)|0;
     $9 = $55;
     $56 = ($54|0)>(6);
     if ($56) {
      label = 12;
      break L5;
     }
     $65 = $7;
     $66 = ((($65)) + 32|0);
     $67 = $66;
     $68 = $67;
     $69 = HEAP32[$68>>2]|0;
     $70 = (($67) + 4)|0;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $73 = $8;
     $74 = $73;
     $75 = HEAP32[$74>>2]|0;
     $76 = (($73) + 4)|0;
     $77 = $76;
     $78 = HEAP32[$77>>2]|0;
     $79 = $75 | $69;
     $80 = $78 | $72;
     $81 = $8;
     $82 = $81;
     HEAP32[$82>>2] = $79;
     $83 = (($81) + 4)|0;
     $84 = $83;
     HEAP32[$84>>2] = $80;
     $85 = $7;
     $86 = ((($85)) + 48|0);
     $87 = HEAP32[$86>>2]|0;
     $6 = $87;
     $88 = $6;
     $89 = $2;
     $90 = ((($89)) + 31168|0);
     $91 = (($90) + ($88<<3)|0);
     $7 = $91;
     $92 = $5;
     $93 = ((($92)) + 32|0);
     $94 = $93;
     $95 = $94;
     $96 = HEAP32[$95>>2]|0;
     $97 = (($94) + 4)|0;
     $98 = $97;
     $99 = HEAP32[$98>>2]|0;
     $100 = $7;
     $101 = ((($100)) + 24|0);
     $102 = $101;
     $103 = $102;
     $104 = HEAP32[$103>>2]|0;
     $105 = (($102) + 4)|0;
     $106 = $105;
     $107 = HEAP32[$106>>2]|0;
     $108 = $7;
     $109 = ((($108)) + 32|0);
     $110 = $109;
     $111 = $110;
     $112 = HEAP32[$111>>2]|0;
     $113 = (($110) + 4)|0;
     $114 = $113;
     $115 = HEAP32[$114>>2]|0;
     $116 = $104 | $112;
     $117 = $107 | $115;
     $118 = $96 & $116;
     $119 = $99 & $117;
     $120 = ($118|0)!=(0);
     $121 = ($119|0)!=(0);
     $122 = $120 | $121;
     if ($122) {
      label = 14;
      break L5;
     }
    }
    $172 = $8;
    $173 = $172;
    $174 = HEAP32[$173>>2]|0;
    $175 = (($172) + 4)|0;
    $176 = $175;
    $177 = HEAP32[$176>>2]|0;
    $178 = $5;
    $179 = ((($178)) + 32|0);
    $180 = $179;
    $181 = $180;
    HEAP32[$181>>2] = $174;
    $182 = (($180) + 4)|0;
    $183 = $182;
    HEAP32[$183>>2] = $177;
    $184 = $6;
    $185 = $5;
    $186 = ((($185)) + 48|0);
    HEAP32[$186>>2] = $184;
    $187 = $5;
    $188 = ((($187)) + 32|0);
    $189 = $188;
    $190 = $189;
    $191 = HEAP32[$190>>2]|0;
    $192 = (($189) + 4)|0;
    $193 = $192;
    $194 = HEAP32[$193>>2]|0;
    $195 = $5;
    $196 = ((($195)) + 24|0);
    $197 = $196;
    $198 = $197;
    $199 = HEAP32[$198>>2]|0;
    $200 = (($197) + 4)|0;
    $201 = $200;
    $202 = HEAP32[$201>>2]|0;
    $203 = $199 | $191;
    $204 = $202 | $194;
    $205 = $196;
    $206 = $205;
    HEAP32[$206>>2] = $203;
    $207 = (($205) + 4)|0;
    $208 = $207;
    HEAP32[$208>>2] = $204;
    $209 = $5;
    $210 = ((($209)) + 24|0);
    $211 = $210;
    $212 = $211;
    $213 = HEAP32[$212>>2]|0;
    $214 = (($211) + 4)|0;
    $215 = $214;
    $216 = HEAP32[$215>>2]|0;
    $217 = $213 & 48;
    $218 = ($217|0)!=(0);
    $219 = (0)!=(0);
    $220 = $218 | $219;
    if ($220) {
     $221 = $5;
     $222 = ((($221)) + 24|0);
     $223 = $222;
     $224 = $223;
     $225 = HEAP32[$224>>2]|0;
     $226 = (($223) + 4)|0;
     $227 = $226;
     $228 = HEAP32[$227>>2]|0;
     $229 = $225 | 2;
     $230 = $222;
     $231 = $230;
     HEAP32[$231>>2] = $229;
     $232 = (($230) + 4)|0;
     $233 = $232;
     HEAP32[$233>>2] = $228;
    }
    $234 = $7;
    $235 = ((($234)) + 12|0);
    $236 = HEAP32[$235>>2]|0;
    $237 = $2;
    $238 = ((($237)) + 31168|0);
    $239 = (($238) + ($236<<3)|0);
    $12 = $239;
    $240 = $12;
    $241 = ((($240)) + 44|0);
    $242 = HEAP16[$241>>1]|0;
    $243 = $242 << 16 >> 16;
    $244 = ($243|0)==(1);
    if ($244) {
     $245 = $12;
     $246 = ((($245)) + 42|0);
     $247 = HEAP16[$246>>1]|0;
     $248 = $247 << 16 >> 16;
     $249 = $12;
     $250 = ((($249)) + 46|0);
     $251 = (($250) + ($248<<1)|0);
     $252 = HEAP16[$251>>1]|0;
     $253 = $2;
     $254 = (_getDots($252,$253)|0);
     $13 = $254;
     $255 = $13;
     $256 = ($255|0)!=(0|0);
     if ($256) {
      $257 = $5;
      $258 = ((($257)) + 32|0);
      $259 = $258;
      $260 = $259;
      $261 = HEAP32[$260>>2]|0;
      $262 = (($259) + 4)|0;
      $263 = $262;
      $264 = HEAP32[$263>>2]|0;
      $265 = $13;
      $266 = ((($265)) + 24|0);
      $267 = $266;
      $268 = $267;
      $269 = HEAP32[$268>>2]|0;
      $270 = (($267) + 4)|0;
      $271 = $270;
      $272 = HEAP32[$271>>2]|0;
      $273 = $269 | $261;
      $274 = $272 | $264;
      $275 = $266;
      $276 = $275;
      HEAP32[$276>>2] = $273;
      $277 = (($275) + 4)|0;
      $278 = $277;
      HEAP32[$278>>2] = $274;
      $279 = $13;
      $280 = ((($279)) + 24|0);
      $281 = $280;
      $282 = $281;
      $283 = HEAP32[$282>>2]|0;
      $284 = (($281) + 4)|0;
      $285 = $284;
      $286 = HEAP32[$285>>2]|0;
      $287 = $283 & 48;
      $288 = ($287|0)!=(0);
      $289 = (0)!=(0);
      $290 = $288 | $289;
      if ($290) {
       $291 = $13;
       $292 = ((($291)) + 24|0);
       $293 = $292;
       $294 = $293;
       $295 = HEAP32[$294>>2]|0;
       $296 = (($293) + 4)|0;
       $297 = $296;
       $298 = HEAP32[$297>>2]|0;
       $299 = $295 | 2;
       $300 = $292;
       $301 = $300;
       HEAP32[$301>>2] = $299;
       $302 = (($300) + 4)|0;
       $303 = $302;
       HEAP32[$303>>2] = $298;
      }
     }
    }
    $304 = $7;
    $305 = ((($304)) + 52|0);
    $306 = HEAP32[$305>>2]|0;
    $307 = ($306|0)!=(0);
    if ($307) {
     $308 = $7;
     $309 = ((($308)) + 52|0);
     $310 = HEAP32[$309>>2]|0;
     $311 = $5;
     $312 = ((($311)) + 52|0);
     HEAP32[$312>>2] = $310;
    }
    $313 = $4;
    $314 = $7;
    $315 = ((($314)) + 52|0);
    HEAP32[$315>>2] = $313;
   }
   $316 = $5;
   $317 = ((($316)) + 8|0);
   $318 = HEAP32[$317>>2]|0;
   $4 = $318;
  }
  $319 = $3;
  $320 = (($319) + 1)|0;
  $3 = $320;
 }
 if ((label|0) == 12) {
  $57 = $5;
  $58 = HEAP32[$57>>2]|0;
  $59 = $5;
  $60 = ((($59)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (_printSource(0,$58,$61)|0);
  HEAP32[$vararg_buffer>>2] = $62;
  __lou_logMessage(40000,3809,$vararg_buffer);
  $63 = HEAP32[3278]|0;
  $64 = (($63) + 1)|0;
  HEAP32[3278] = $64;
  $1 = 0;
  $387 = $1;
  STACKTOP = sp;return ($387|0);
 }
 else if ((label|0) == 14) {
  $10 = 0;
  $123 = $2;
  $124 = ((($123)) + 8|0);
  $125 = HEAP32[$124>>2]|0;
  $11 = $125;
  while(1) {
   $126 = $11;
   $127 = ($126|0)!=(0|0);
   if (!($127)) {
    break;
   }
   $128 = $11;
   $129 = ((($128)) + 8|0);
   $130 = $129;
   $131 = $130;
   $132 = HEAP32[$131>>2]|0;
   $133 = (($130) + 4)|0;
   $134 = $133;
   $135 = HEAP32[$134>>2]|0;
   $136 = $5;
   $137 = ((($136)) + 32|0);
   $138 = $137;
   $139 = $138;
   $140 = HEAP32[$139>>2]|0;
   $141 = (($138) + 4)|0;
   $142 = $141;
   $143 = HEAP32[$142>>2]|0;
   $144 = ($132|0)==($140|0);
   $145 = ($135|0)==($143|0);
   $146 = $144 & $145;
   $147 = $11;
   if ($146) {
    label = 17;
    break;
   }
   $155 = HEAP32[$147>>2]|0;
   $11 = $155;
  }
  if ((label|0) == 17) {
   $148 = ((($147)) + 18|0);
   $149 = $11;
   $150 = ((($149)) + 16|0);
   $151 = HEAP16[$150>>1]|0;
   $152 = $151&65535;
   $153 = (__lou_showString($148,$152,0)|0);
   $154 = (___strdup($153)|0);
   $10 = $154;
  }
  $156 = $5;
  $157 = HEAP32[$156>>2]|0;
  $158 = $5;
  $159 = ((($158)) + 4|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = (_printSource(0,$157,$160)|0);
  $162 = $7;
  $163 = ((($162)) + 44|0);
  $164 = (__lou_showString($163,1,0)|0);
  $165 = $10;
  $166 = ($165|0)!=(0|0);
  $167 = $10;
  $168 = $166 ? $167 : 3931;
  HEAP32[$vararg_buffer1>>2] = $161;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $164;
  $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $168;
  __lou_logMessage(40000,3871,$vararg_buffer1);
  $169 = HEAP32[3278]|0;
  $170 = (($169) + 1)|0;
  HEAP32[3278] = $170;
  $171 = $10;
  _rpl_free($171);
  $1 = 0;
  $387 = $1;
  STACKTOP = sp;return ($387|0);
 }
 else if ((label|0) == 31) {
  $14 = 0;
  while(1) {
   $321 = $14;
   $322 = ($321|0)<(1123);
   if (!($322)) {
    break;
   }
   $323 = $14;
   $324 = $2;
   $325 = ((($324)) + 13160|0);
   $326 = (($325) + ($323<<2)|0);
   $327 = HEAP32[$326>>2]|0;
   $15 = $327;
   while(1) {
    $328 = $15;
    $329 = ($328|0)!=(0);
    if (!($329)) {
     break;
    }
    $330 = $15;
    $331 = $2;
    $332 = ((($331)) + 31168|0);
    $333 = (($332) + ($330<<3)|0);
    $16 = $333;
    $334 = $16;
    $335 = ((($334)) + 24|0);
    $336 = $335;
    $337 = $336;
    $338 = HEAP32[$337>>2]|0;
    $339 = (($336) + 4)|0;
    $340 = $339;
    $341 = HEAP32[$340>>2]|0;
    $342 = $338 & 2;
    $343 = ($342|0)!=(0);
    $344 = (0)!=(0);
    $345 = $343 | $344;
    L40: do {
     if ($345) {
      $346 = $16;
      $347 = ((($346)) + 16|0);
      $17 = $347;
      while(1) {
       $348 = $17;
       $349 = HEAP32[$348>>2]|0;
       $350 = ($349|0)!=(0);
       if (!($350)) {
        break L40;
       }
       $351 = $17;
       $352 = HEAP32[$351>>2]|0;
       $353 = $2;
       $354 = ((($353)) + 31168|0);
       $355 = (($354) + ($352<<3)|0);
       $18 = $355;
       $356 = $18;
       $357 = ((($356)) + 36|0);
       $358 = HEAP32[$357>>2]|0;
       $359 = ($358|0)==(91);
       if ($359) {
        label = 40;
       } else {
        $360 = $18;
        $361 = ((($360)) + 36|0);
        $362 = HEAP32[$361>>2]|0;
        $363 = ($362|0)==(90);
        if ($363) {
         label = 40;
        }
       }
       if ((label|0) == 40) {
        label = 0;
        $364 = $2;
        $365 = ((($364)) + 2744|0);
        $366 = HEAP32[$365>>2]|0;
        $367 = ($366|0)<(256);
        if ($367) {
         $368 = $18;
         $369 = ((($368)) + 46|0);
         $370 = HEAP16[$369>>1]|0;
         $371 = $2;
         $372 = ((($371)) + 2744|0);
         $373 = HEAP32[$372>>2]|0;
         $374 = (($373) + 1)|0;
         HEAP32[$372>>2] = $374;
         $375 = $2;
         $376 = ((($375)) + 2232|0);
         $377 = (($376) + ($373<<1)|0);
         HEAP16[$377>>1] = $370;
        }
       }
       $378 = $18;
       $379 = ((($378)) + 8|0);
       $17 = $379;
      }
     }
    } while(0);
    $380 = $16;
    $381 = ((($380)) + 8|0);
    $382 = HEAP32[$381>>2]|0;
    $15 = $382;
   }
   $383 = $14;
   $384 = (($383) + 1)|0;
   $14 = $384;
  }
  $385 = $2;
  $386 = ((($385)) + 512|0);
  HEAP32[$386>>2] = 1;
  $1 = 1;
  $387 = $1;
  STACKTOP = sp;return ($387|0);
 }
 return (0)|0;
}
function _lou_getTable($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 4|0;
 $4 = sp;
 $2 = $0;
 $5 = $2;
 $6 = $2;
 __lou_getTable($5,$6,$3,$4);
 $7 = HEAP32[$3>>2]|0;
 $8 = ($7|0)!=(0|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = ($9|0)!=(0|0);
 $or$cond = $8 & $10;
 if ($or$cond) {
  $11 = HEAP32[$3>>2]|0;
  $1 = $11;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 } else {
  $1 = 0;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function __lou_getDisplayTable($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $1 = $0;
 $3 = $1;
 _getTable(0,$3,0,$2);
 $4 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _compileTable($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $vararg_buffer = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer8 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = $7;
 $13 = ($12|0)==(0|0);
 $14 = $5;
 $15 = ($14|0)!=(0|0);
 $or$cond = $13 | $15;
 if (!($or$cond)) {
  $4 = 0;
  $151 = $4;
  STACKTOP = sp;return ($151|0);
 }
 $16 = $8;
 $17 = ($16|0)==(0|0);
 $18 = $6;
 $19 = ($18|0)!=(0|0);
 $or$cond3 = $17 | $19;
 if (!($or$cond3)) {
  $4 = 0;
  $151 = $4;
  STACKTOP = sp;return ($151|0);
 }
 $20 = $7;
 $21 = ($20|0)!=(0|0);
 $22 = $8;
 $23 = ($22|0)!=(0|0);
 $or$cond5 = $21 | $23;
 if (!($or$cond5)) {
  $4 = 0;
  $151 = $4;
  STACKTOP = sp;return ($151|0);
 }
 $24 = $7;
 $25 = ($24|0)!=(0|0);
 if ($25) {
  $26 = $7;
  HEAP32[$26>>2] = 0;
 }
 $27 = $8;
 $28 = ($27|0)!=(0|0);
 if ($28) {
  $29 = $8;
  HEAP32[$29>>2] = 0;
 }
 HEAP32[4353] = 0;
 HEAP32[4333] = 0;
 HEAP32[3278] = 0;
 $30 = HEAP16[9136]|0;
 $31 = ($30<<16>>16)!=(0);
 L19: do {
  if (!($31)) {
   $11 = 0;
   while(1) {
    $32 = $11;
    $33 = ($32>>>0)<(117);
    if (!($33)) {
     break L19;
    }
    $34 = $11;
    $35 = (824 + ($34<<2)|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (_strlen($36)|0);
    $38 = $37&65535;
    $39 = $11;
    $40 = (18272 + ($39<<1)|0);
    HEAP16[$40>>1] = $38;
    $41 = $11;
    $42 = (($41) + 1)|0;
    $11 = $42;
   }
  }
 } while(0);
 $43 = $7;
 $44 = ($43|0)!=(0|0);
 if ($44) {
  $45 = $7;
  (_allocateTranslationTable(0,$45)|0);
 }
 $46 = $8;
 $47 = ($46|0)!=(0|0);
 if ($47) {
  $48 = $8;
  (_allocateDisplayTable(0,$48)|0);
 }
 $49 = $7;
 $50 = ($49|0)!=(0|0);
 if ($50) {
  $51 = $7;
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + 820|0);
  HEAP32[$53>>2] = 0;
  $54 = $7;
  $55 = HEAP32[$54>>2]|0;
  $56 = ((($55)) + 8|0);
  HEAP32[$56>>2] = 0;
  $57 = $7;
  $58 = HEAP32[$57>>2]|0;
  $59 = ((($58)) + 32|0);
  HEAP32[$59>>2] = 0;
 }
 $60 = $7;
 $61 = $8;
 (_compileString(3962,$60,$61)|0);
 $62 = $8;
 $63 = ($62|0)!=(0|0);
 $64 = $7;
 $65 = ($64|0)!=(0|0);
 $or$cond7 = $63 & $65;
 L34: do {
  if ($or$cond7) {
   $66 = $5;
   $67 = $6;
   $68 = (_strcmp($66,$67)|0);
   $69 = ($68|0)==(0);
   if ($69) {
    $70 = $5;
    $71 = (__lou_resolveTable($70,0)|0);
    $9 = $71;
    $72 = ($71|0)!=(0|0);
    if (!($72)) {
     $73 = HEAP32[3278]|0;
     $74 = (($73) + 1)|0;
     HEAP32[3278] = $74;
     break;
    }
    $75 = $9;
    $10 = $75;
    while(1) {
     $76 = $10;
     $77 = HEAP32[$76>>2]|0;
     $78 = ($77|0)!=(0|0);
     if (!($78)) {
      break L34;
     }
     $79 = $10;
     $80 = HEAP32[$79>>2]|0;
     $81 = $7;
     $82 = $8;
     $83 = (_compileFile($80,$81,$82)|0);
     $84 = ($83|0)!=(0);
     if (!($84)) {
      break L34;
     }
     $85 = $10;
     $86 = ((($85)) + 4|0);
     $10 = $86;
    }
   } else {
    label = 29;
   }
  } else {
   label = 29;
  }
 } while(0);
 L44: do {
  if ((label|0) == 29) {
   $87 = $8;
   $88 = ($87|0)!=(0|0);
   if ($88) {
    $89 = $6;
    $90 = (__lou_resolveTable($89,0)|0);
    $9 = $90;
    $91 = ($90|0)!=(0|0);
    if (!($91)) {
     $92 = HEAP32[3278]|0;
     $93 = (($92) + 1)|0;
     HEAP32[3278] = $93;
     break;
    }
    $94 = $9;
    $10 = $94;
    while(1) {
     $95 = $10;
     $96 = HEAP32[$95>>2]|0;
     $97 = ($96|0)!=(0|0);
     if (!($97)) {
      break;
     }
     $98 = $10;
     $99 = HEAP32[$98>>2]|0;
     $100 = $8;
     $101 = (_compileFile($99,0,$100)|0);
     $102 = ($101|0)!=(0);
     if (!($102)) {
      break L44;
     }
     $103 = $10;
     $104 = ((($103)) + 4|0);
     $10 = $104;
    }
    $105 = $9;
    _free_tablefiles($105);
    $9 = 0;
   }
   $106 = $7;
   $107 = ($106|0)!=(0|0);
   if ($107) {
    $108 = $5;
    $109 = (__lou_resolveTable($108,0)|0);
    $9 = $109;
    $110 = ($109|0)!=(0|0);
    if (!($110)) {
     $111 = HEAP32[3278]|0;
     $112 = (($111) + 1)|0;
     HEAP32[3278] = $112;
     break;
    }
    $113 = $9;
    $10 = $113;
    while(1) {
     $114 = $10;
     $115 = HEAP32[$114>>2]|0;
     $116 = ($115|0)!=(0|0);
     if (!($116)) {
      break L44;
     }
     $117 = $10;
     $118 = HEAP32[$117>>2]|0;
     $119 = $7;
     $120 = (_compileFile($118,$119,0)|0);
     $121 = ($120|0)!=(0);
     if (!($121)) {
      break L44;
     }
     $122 = $10;
     $123 = ((($122)) + 4|0);
     $10 = $123;
    }
   }
  }
 } while(0);
 $124 = $9;
 _free_tablefiles($124);
 $125 = HEAP32[4333]|0;
 $126 = ($125|0)!=(0);
 if ($126) {
  $127 = HEAP32[4333]|0;
  HEAP32[$vararg_buffer>>2] = $127;
  __lou_logMessage(30000,4006,$vararg_buffer);
 }
 $128 = HEAP32[3278]|0;
 $129 = ($128|0)!=(0);
 if (!($129)) {
  $130 = $7;
  $131 = ($130|0)!=(0|0);
  if ($131) {
   $132 = $7;
   $133 = HEAP32[$132>>2]|0;
   (_setDefaults($133)|0);
  }
  $4 = 1;
  $151 = $4;
  STACKTOP = sp;return ($151|0);
 }
 $134 = HEAP32[3278]|0;
 HEAP32[$vararg_buffer8>>2] = $134;
 __lou_logMessage(40000,4025,$vararg_buffer8);
 $135 = $7;
 $136 = ($135|0)!=(0|0);
 if ($136) {
  $137 = $7;
  $138 = HEAP32[$137>>2]|0;
  $139 = ($138|0)!=(0|0);
  if ($139) {
   $140 = $7;
   $141 = HEAP32[$140>>2]|0;
   _freeTranslationTable($141);
  }
  $142 = $7;
  HEAP32[$142>>2] = 0;
 }
 $143 = $8;
 $144 = ($143|0)!=(0|0);
 if ($144) {
  $145 = $8;
  $146 = HEAP32[$145>>2]|0;
  $147 = ($146|0)!=(0|0);
  if ($147) {
   $148 = $8;
   $149 = HEAP32[$148>>2]|0;
   _freeDisplayTable($149);
  }
  $150 = $8;
  HEAP32[$150>>2] = 0;
 }
 $4 = 0;
 $151 = $4;
 STACKTOP = sp;return ($151|0);
}
function _lou_checkTable($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (_lou_getTable($3)|0);
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $1 = 1;
 } else {
  $1 = 0;
 }
 $6 = $1;
 STACKTOP = sp;return ($6|0);
}
function _lou_getTypeformForEmphClass($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = (__lou_getTranslationTable($7)|0);
 $5 = $8;
 $9 = $5;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  $2 = 0;
  $31 = $2;
  STACKTOP = sp;return ($31|0);
 }
 $6 = 0;
 while(1) {
  $11 = $6;
  $12 = ($11|0)<(10);
  if (!($12)) {
   label = 9;
   break;
  }
  $13 = $6;
  $14 = $5;
  $15 = ((($14)) + 820|0);
  $16 = (($15) + ($13<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if (!($18)) {
   label = 9;
   break;
  }
  $19 = $4;
  $20 = $6;
  $21 = $5;
  $22 = ((($21)) + 820|0);
  $23 = (($22) + ($20<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (_strcmp($19,$24)|0);
  $26 = ($25|0)==(0);
  $27 = $6;
  if ($26) {
   label = 7;
   break;
  }
  $30 = (($27) + 1)|0;
  $6 = $30;
 }
 if ((label|0) == 7) {
  $28 = 1 << $27;
  $29 = $28&65535;
  $2 = $29;
  $31 = $2;
  STACKTOP = sp;return ($31|0);
 }
 else if ((label|0) == 9) {
  $2 = 0;
  $31 = $2;
  STACKTOP = sp;return ($31|0);
 }
 return (0)|0;
}
function __lou_allocMem($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = $7;
 $13 = ($12|0)<(1024);
 if ($13) {
  $7 = 1024;
 }
 $14 = $8;
 $15 = ($14|0)<(1024);
 if ($15) {
  $8 = 1024;
 }
 $16 = $5;
 switch ($16|0) {
 case 0:  {
  $17 = $8;
  $18 = HEAP32[4315]|0;
  $19 = ($17|0)>($18|0);
  if ($19) {
   $20 = HEAP32[4316]|0;
   $21 = ($20|0)!=(0|0);
   if ($21) {
    $22 = HEAP32[4316]|0;
    _rpl_free($22);
   }
   $23 = $8;
   $24 = (($23) + 4)|0;
   $25 = $24<<1;
   $26 = (_rpl_malloc($25)|0);
   HEAP32[4316] = $26;
   $27 = HEAP32[4316]|0;
   $28 = ($27|0)!=(0|0);
   if (!($28)) {
    __lou_outOfMemory();
   }
   $29 = $8;
   HEAP32[4315] = $29;
  }
  $30 = HEAP32[4316]|0;
  $4 = $30;
  $152 = $4;
  STACKTOP = sp;return ($152|0);
  break;
 }
 case 1:  {
  $31 = HEAP32[4317]|0;
  $32 = ($31|0)!=(0|0);
  if ($32) {
   $33 = HEAP32[4317]|0;
   _rpl_free($33);
  }
  $34 = $7;
  $35 = (($34) + 4)|0;
  $36 = (_calloc($35,4)|0);
  HEAP32[4317] = $36;
  $37 = HEAP32[4317]|0;
  $38 = ($37|0)==(0|0);
  if ($38) {
   __lou_outOfMemory();
  }
  $39 = HEAP32[4317]|0;
  $4 = $39;
  $152 = $4;
  STACKTOP = sp;return ($152|0);
  break;
 }
 case 2:  {
  $40 = HEAP32[4318]|0;
  $41 = ($40|0)!=(0|0);
  if ($41) {
   $42 = HEAP32[4318]|0;
   _rpl_free($42);
  }
  $43 = $7;
  $44 = (($43) + 4)|0;
  $45 = (_calloc($44,8)|0);
  HEAP32[4318] = $45;
  $46 = HEAP32[4318]|0;
  $47 = ($46|0)==(0|0);
  if ($47) {
   __lou_outOfMemory();
  }
  $48 = HEAP32[4318]|0;
  $4 = $48;
  $152 = $4;
  STACKTOP = sp;return ($152|0);
  break;
 }
 case 3:  {
  $49 = $8;
  $50 = HEAP32[4319]|0;
  $51 = ($49|0)>($50|0);
  if ($51) {
   $52 = HEAP32[4320]|0;
   $53 = ($52|0)!=(0|0);
   if ($53) {
    $54 = HEAP32[4320]|0;
    _rpl_free($54);
   }
   $55 = $8;
   $56 = (($55) + 4)|0;
   $57 = (_rpl_malloc($56)|0);
   HEAP32[4320] = $57;
   $58 = HEAP32[4320]|0;
   $59 = ($58|0)!=(0|0);
   if (!($59)) {
    __lou_outOfMemory();
   }
   $60 = $8;
   HEAP32[4319] = $60;
  }
  $61 = HEAP32[4320]|0;
  $4 = $61;
  $152 = $4;
  STACKTOP = sp;return ($152|0);
  break;
 }
 case 4:  {
  $62 = $6;
  $63 = ($62|0)<(0);
  $64 = $6;
  $65 = ($64|0)>=(3);
  $or$cond = $63 | $65;
  if ($or$cond) {
   $66 = $6;
   HEAP32[$vararg_buffer>>2] = $66;
   __lou_logMessage(50000,2112,$vararg_buffer);
   _exit(3);
   // unreachable;
  }
  $67 = $8;
  $68 = $6;
  $69 = (17284 + ($68<<2)|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ($67|0)>($70|0);
  if ($71) {
   $72 = $6;
   $73 = (17296 + ($72<<2)|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($74|0)!=(0|0);
   if ($75) {
    $76 = $6;
    $77 = (17296 + ($76<<2)|0);
    $78 = HEAP32[$77>>2]|0;
    _rpl_free($78);
   }
   $79 = $8;
   $80 = (($79) + 4)|0;
   $81 = $80<<1;
   $82 = (_rpl_malloc($81)|0);
   $83 = $6;
   $84 = (17296 + ($83<<2)|0);
   HEAP32[$84>>2] = $82;
   $85 = $6;
   $86 = (17296 + ($85<<2)|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)!=(0|0);
   if (!($88)) {
    __lou_outOfMemory();
   }
   $89 = $8;
   $90 = $6;
   $91 = (17284 + ($90<<2)|0);
   HEAP32[$91>>2] = $89;
  }
  $92 = $6;
  $93 = (17296 + ($92<<2)|0);
  $94 = HEAP32[$93>>2]|0;
  $4 = $94;
  $152 = $4;
  STACKTOP = sp;return ($152|0);
  break;
 }
 case 5:  {
  $95 = $7;
  $96 = $8;
  $97 = ($95|0)>=($96|0);
  if ($97) {
   $98 = $7;
   $9 = $98;
  } else {
   $99 = $8;
   $9 = $99;
  }
  $100 = $9;
  $101 = HEAP32[4327]|0;
  $102 = ($100|0)>($101|0);
  if ($102) {
   $103 = HEAP32[4328]|0;
   $104 = ($103|0)!=(0|0);
   if ($104) {
    $105 = HEAP32[4328]|0;
    _rpl_free($105);
   }
   $106 = $9;
   $107 = (($106) + 4)|0;
   $108 = $107<<2;
   $109 = (_rpl_malloc($108)|0);
   HEAP32[4328] = $109;
   $110 = HEAP32[4328]|0;
   $111 = ($110|0)!=(0|0);
   if (!($111)) {
    __lou_outOfMemory();
   }
   $112 = $9;
   HEAP32[4327] = $112;
  }
  $113 = HEAP32[4328]|0;
  $4 = $113;
  $152 = $4;
  STACKTOP = sp;return ($152|0);
  break;
 }
 case 6:  {
  $114 = $7;
  $115 = $8;
  $116 = ($114|0)>=($115|0);
  if ($116) {
   $117 = $7;
   $10 = $117;
  } else {
   $118 = $8;
   $10 = $118;
  }
  $119 = $10;
  $120 = HEAP32[4329]|0;
  $121 = ($119|0)>($120|0);
  if ($121) {
   $122 = HEAP32[4330]|0;
   $123 = ($122|0)!=(0|0);
   if ($123) {
    $124 = HEAP32[4330]|0;
    _rpl_free($124);
   }
   $125 = $10;
   $126 = (($125) + 4)|0;
   $127 = $126<<2;
   $128 = (_rpl_malloc($127)|0);
   HEAP32[4330] = $128;
   $129 = HEAP32[4330]|0;
   $130 = ($129|0)!=(0|0);
   if (!($130)) {
    __lou_outOfMemory();
   }
   $131 = $10;
   HEAP32[4329] = $131;
  }
  $132 = HEAP32[4330]|0;
  $4 = $132;
  $152 = $4;
  STACKTOP = sp;return ($152|0);
  break;
 }
 case 7:  {
  $133 = $7;
  $134 = $8;
  $135 = ($133|0)>=($134|0);
  if ($135) {
   $136 = $7;
   $11 = $136;
  } else {
   $137 = $8;
   $11 = $137;
  }
  $138 = $11;
  $139 = HEAP32[4331]|0;
  $140 = ($138|0)>($139|0);
  if ($140) {
   $141 = HEAP32[4332]|0;
   $142 = ($141|0)!=(0|0);
   if ($142) {
    $143 = HEAP32[4332]|0;
    _rpl_free($143);
   }
   $144 = $11;
   $145 = (($144) + 4)|0;
   $146 = $145<<2;
   $147 = (_rpl_malloc($146)|0);
   HEAP32[4332] = $147;
   $148 = HEAP32[4332]|0;
   $149 = ($148|0)!=(0|0);
   if (!($149)) {
    __lou_outOfMemory();
   }
   $150 = $11;
   HEAP32[4331] = $150;
  }
  $151 = HEAP32[4332]|0;
  $4 = $151;
  $152 = $4;
  STACKTOP = sp;return ($152|0);
  break;
 }
 default: {
  $4 = 0;
  $152 = $4;
  STACKTOP = sp;return ($152|0);
 }
 }
 return (0)|0;
}
function _lou_free() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 _lou_logEnd();
 $5 = HEAP32[4313]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = HEAP32[4313]|0;
  $0 = $7;
  while(1) {
   $8 = $0;
   $9 = ($8|0)!=(0|0);
   if (!($9)) {
    break;
   }
   $10 = $0;
   $11 = ((($10)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   _freeTranslationTable($12);
   $13 = $0;
   $1 = $13;
   $14 = $0;
   $15 = HEAP32[$14>>2]|0;
   $0 = $15;
   $16 = $1;
   _rpl_free($16);
  }
  HEAP32[4313] = 0;
 }
 $17 = HEAP32[4314]|0;
 $18 = ($17|0)!=(0|0);
 if ($18) {
  $19 = HEAP32[4314]|0;
  $2 = $19;
  while(1) {
   $20 = $2;
   $21 = ($20|0)!=(0|0);
   if (!($21)) {
    break;
   }
   $22 = $2;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   _freeDisplayTable($24);
   $25 = $2;
   $3 = $25;
   $26 = $2;
   $27 = HEAP32[$26>>2]|0;
   $2 = $27;
   $28 = $3;
   _rpl_free($28);
  }
  HEAP32[4314] = 0;
 }
 $29 = HEAP32[4316]|0;
 $30 = ($29|0)!=(0|0);
 if ($30) {
  $31 = HEAP32[4316]|0;
  _rpl_free($31);
 }
 HEAP32[4316] = 0;
 $32 = HEAP32[4317]|0;
 $33 = ($32|0)!=(0|0);
 if ($33) {
  $34 = HEAP32[4317]|0;
  _rpl_free($34);
 }
 HEAP32[4317] = 0;
 $35 = HEAP32[4318]|0;
 $36 = ($35|0)!=(0|0);
 if ($36) {
  $37 = HEAP32[4318]|0;
  _rpl_free($37);
 }
 HEAP32[4318] = 0;
 HEAP32[4315] = 0;
 $38 = HEAP32[4320]|0;
 $39 = ($38|0)!=(0|0);
 if ($39) {
  $40 = HEAP32[4320]|0;
  _rpl_free($40);
 }
 HEAP32[4320] = 0;
 HEAP32[4319] = 0;
 $4 = 0;
 while(1) {
  $41 = $4;
  $42 = ($41|0)<(3);
  if (!($42)) {
   break;
  }
  $43 = $4;
  $44 = (17296 + ($43<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)!=(0|0);
  if ($46) {
   $47 = $4;
   $48 = (17296 + ($47<<2)|0);
   $49 = HEAP32[$48>>2]|0;
   _rpl_free($49);
  }
  $50 = $4;
  $51 = (17296 + ($50<<2)|0);
  HEAP32[$51>>2] = 0;
  $52 = $4;
  $53 = (17284 + ($52<<2)|0);
  HEAP32[$53>>2] = 0;
  $54 = $4;
  $55 = (($54) + 1)|0;
  $4 = $55;
 }
 $56 = HEAP32[4328]|0;
 $57 = ($56|0)!=(0|0);
 if ($57) {
  $58 = HEAP32[4328]|0;
  _rpl_free($58);
 }
 HEAP32[4328] = 0;
 HEAP32[4327] = 0;
 $59 = HEAP32[4330]|0;
 $60 = ($59|0)!=(0|0);
 if ($60) {
  $61 = HEAP32[4330]|0;
  _rpl_free($61);
 }
 HEAP32[4330] = 0;
 HEAP32[4329] = 0;
 $62 = HEAP32[4332]|0;
 $63 = ($62|0)!=(0|0);
 if (!($63)) {
  HEAP32[4332] = 0;
  HEAP32[4331] = 0;
  HEAP16[9136] = 0;
  STACKTOP = sp;return;
 }
 $64 = HEAP32[4332]|0;
 _rpl_free($64);
 HEAP32[4332] = 0;
 HEAP32[4331] = 0;
 HEAP16[9136] = 0;
 STACKTOP = sp;return;
}
function _freeTranslationTable($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $4 = $2;
  $5 = ($4|0)<(10);
  if (!($5)) {
   break;
  }
  $6 = $2;
  $7 = $1;
  $8 = ((($7)) + 820|0);
  $9 = (($8) + ($6<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(0|0);
  if (!($11)) {
   break;
  }
  $12 = $2;
  $13 = $1;
  $14 = ((($13)) + 820|0);
  $15 = (($14) + ($12<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  _rpl_free($16);
  $17 = $2;
  $18 = (($17) + 1)|0;
  $2 = $18;
 }
 $3 = 0;
 while(1) {
  $19 = $3;
  $20 = $1;
  $21 = ((($20)) + 108|0);
  $22 = (($21) + ($19<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)!=(0|0);
  if (!($24)) {
   break;
  }
  $25 = $3;
  $26 = $1;
  $27 = ((($26)) + 108|0);
  $28 = (($27) + ($25<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  _rpl_free($29);
  $30 = $3;
  $31 = (($30) + 1)|0;
  $3 = $31;
 }
 $32 = $1;
 $33 = ((($32)) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)!=(0|0);
 if ($35) {
  $36 = $1;
  _deallocateCharacterClasses($36);
 }
 $37 = $1;
 $38 = ((($37)) + 32|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)!=(0|0);
 if (!($40)) {
  $42 = $1;
  _rpl_free($42);
  STACKTOP = sp;return;
 }
 $41 = $1;
 _deallocateRuleNames($41);
 $42 = $1;
 _rpl_free($42);
 STACKTOP = sp;return;
}
function _freeDisplayTable($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _rpl_free($2);
 STACKTOP = sp;return;
}
function _lou_version() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[324]|0;
 return ($0|0);
}
function _lou_charSize() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function _lou_compileString($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 4|0;
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = $3;
 _getTable($7,$8,$5,$6);
 $9 = HEAP32[$5>>2]|0;
 $10 = ($9|0)!=(0|0);
 do {
  if ($10) {
   $11 = $4;
   $12 = (_compileString($11,$5,$6)|0);
   $13 = ($12|0)!=(0);
   if ($13) {
    $2 = 1;
    break;
   } else {
    $2 = 0;
    break;
   }
  } else {
   $2 = 0;
  }
 } while(0);
 $14 = $2;
 STACKTOP = sp;return ($14|0);
}
function _compileString($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4176|0);
 $vararg_buffer = sp;
 $8 = sp + 8|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $3 = 0;
  $48 = $3;
  STACKTOP = sp;return ($48|0);
 }
 _memset(($8|0),0,4136)|0;
 $11 = $4;
 HEAP32[$8>>2] = $11;
 $12 = ((($8)) + 16|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($8)) + 12|0);
 HEAP32[$13>>2] = 1;
 $14 = ((($8)) + 20|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($8)) + 28|0);
 HEAP32[$15>>2] = 0;
 $7 = 0;
 while(1) {
  $16 = $7;
  $17 = $4;
  $18 = (($17) + ($16)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = ($19<<24>>24)!=(0);
  $21 = $7;
  if (!($20)) {
   break;
  }
  $22 = $4;
  $23 = (($22) + ($21)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24 << 24 >> 24;
  $26 = $7;
  $27 = ((($8)) + 40|0);
  $28 = (($27) + ($26<<1)|0);
  HEAP16[$28>>1] = $25;
  $29 = $7;
  $30 = (($29) + 1)|0;
  $7 = $30;
 }
 $31 = ((($8)) + 40|0);
 $32 = (($31) + ($21<<1)|0);
 HEAP16[$32>>1] = 0;
 $33 = $7;
 $34 = ((($8)) + 24|0);
 HEAP32[$34>>2] = $33;
 $35 = $5;
 $36 = ($35|0)!=(0|0);
 if ($36) {
  $37 = $5;
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)!=(0|0);
  if ($39) {
   $40 = $5;
   $41 = HEAP32[$40>>2]|0;
   $42 = ((($41)) + 512|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($43|0)!=(0);
   if ($44) {
    _compileError($8,9446,$vararg_buffer);
    $3 = 0;
    $48 = $3;
    STACKTOP = sp;return ($48|0);
   }
  }
 }
 $45 = $5;
 $46 = $6;
 $47 = (_compileRule($8,$45,$46,0)|0);
 $3 = $47;
 $48 = $3;
 STACKTOP = sp;return ($48|0);
}
function __lou_compileTranslationRule($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 _getTable($5,0,$4,0);
 $6 = $3;
 $7 = (_compileString($6,$4,0)|0);
 STACKTOP = sp;return ($7|0);
}
function __lou_compileDisplayRule($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 _getTable(0,$5,0,$4);
 $6 = $3;
 $7 = (_compileString($6,0,$4)|0);
 STACKTOP = sp;return ($7|0);
}
function _compileError($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2096|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2096|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $4 = sp + 48|0;
 $5 = sp + 24|0;
 $2 = $0;
 $3 = $1;
 HEAP32[$5>>2] = $varargs;
 $6 = $3;
 (_vsnprintf($4,2048,$6,$5)|0);
 $7 = $2;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  $12 = ((($11)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $10;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $13;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $4;
  __lou_logMessage(40000,2203,$vararg_buffer);
  $14 = HEAP32[3278]|0;
  $15 = (($14) + 1)|0;
  HEAP32[3278] = $15;
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer3>>2] = $4;
  __lou_logMessage(40000,2220,$vararg_buffer3);
  $14 = HEAP32[3278]|0;
  $15 = (($14) + 1)|0;
  HEAP32[3278] = $15;
  STACKTOP = sp;return;
 }
}
function _compileWarning($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2096|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2096|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $4 = sp + 48|0;
 $5 = sp + 24|0;
 $2 = $0;
 $3 = $1;
 HEAP32[$5>>2] = $varargs;
 $6 = $3;
 (_vsnprintf($4,2048,$6,$5)|0);
 $7 = $2;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  $12 = ((($11)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $10;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $13;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $4;
  __lou_logMessage(30000,3631,$vararg_buffer);
  $14 = HEAP32[4333]|0;
  $15 = (($14) + 1)|0;
  HEAP32[4333] = $15;
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer3>>2] = $4;
  __lou_logMessage(30000,3650,$vararg_buffer3);
  $14 = HEAP32[4333]|0;
  $15 = (($14) + 1)|0;
  HEAP32[4333] = $15;
  STACKTOP = sp;return;
 }
}
function _hexValue($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = 0;
 $7 = 0;
 L1: while(1) {
  $10 = $7;
  $11 = $6;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   label = 14;
   break;
  }
  $9 = 0;
  $13 = $7;
  $14 = $5;
  $15 = (($14) + ($13<<1)|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&65535;
  $18 = ($17|0)>=(48);
  if ($18) {
   $19 = $7;
   $20 = $5;
   $21 = (($20) + ($19<<1)|0);
   $22 = HEAP16[$21>>1]|0;
   $23 = $22&65535;
   $24 = ($23|0)<=(57);
   if ($24) {
    $25 = $7;
    $26 = $5;
    $27 = (($26) + ($25<<1)|0);
    $28 = HEAP16[$27>>1]|0;
    $29 = $28&65535;
    $30 = (($29) - 48)|0;
    $9 = $30;
   } else {
    label = 6;
   }
  } else {
   label = 6;
  }
  do {
   if ((label|0) == 6) {
    label = 0;
    $31 = $7;
    $32 = $5;
    $33 = (($32) + ($31<<1)|0);
    $34 = HEAP16[$33>>1]|0;
    $35 = $34&65535;
    $36 = ($35|0)>=(97);
    if ($36) {
     $37 = $7;
     $38 = $5;
     $39 = (($38) + ($37<<1)|0);
     $40 = HEAP16[$39>>1]|0;
     $41 = $40&65535;
     $42 = ($41|0)<=(102);
     if ($42) {
      $43 = $7;
      $44 = $5;
      $45 = (($44) + ($43<<1)|0);
      $46 = HEAP16[$45>>1]|0;
      $47 = $46&65535;
      $48 = (($47) - 97)|0;
      $49 = (($48) + 10)|0;
      $9 = $49;
      break;
     }
    }
    $50 = $7;
    $51 = $5;
    $52 = (($51) + ($50<<1)|0);
    $53 = HEAP16[$52>>1]|0;
    $54 = $53&65535;
    $55 = ($54|0)>=(65);
    if (!($55)) {
     label = 12;
     break L1;
    }
    $56 = $7;
    $57 = $5;
    $58 = (($57) + ($56<<1)|0);
    $59 = HEAP16[$58>>1]|0;
    $60 = $59&65535;
    $61 = ($60|0)<=(70);
    if (!($61)) {
     label = 12;
     break L1;
    }
    $62 = $7;
    $63 = $5;
    $64 = (($63) + ($62<<1)|0);
    $65 = HEAP16[$64>>1]|0;
    $66 = $65&65535;
    $67 = (($66) - 65)|0;
    $68 = (($67) + 10)|0;
    $9 = $68;
   }
  } while(0);
  $71 = $9;
  $72 = $6;
  $73 = (($72) - 1)|0;
  $74 = $7;
  $75 = (($73) - ($74))|0;
  $76 = $75<<2;
  $77 = $71 << $76;
  $78 = $8;
  $79 = $78 | $77;
  $8 = $79;
  $80 = $7;
  $81 = (($80) + 1)|0;
  $7 = $81;
 }
 if ((label|0) == 12) {
  $69 = $4;
  $70 = $6;
  HEAP32[$vararg_buffer>>2] = $70;
  _compileError($69,3662,$vararg_buffer);
  $3 = -1;
  $84 = $3;
  STACKTOP = sp;return ($84|0);
 }
 else if ((label|0) == 14) {
  $82 = $8;
  $83 = $82&65535;
  $3 = $83;
  $84 = $3;
  STACKTOP = sp;return ($84|0);
 }
 return (0)|0;
}
function _printSource($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  (_snprintf(30800,2048,3947,$vararg_buffer5)|0);
  STACKTOP = sp;return (30800|0);
 }
 $8 = $3;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $3;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)!=(0|0);
  if ($13) {
   $14 = $3;
   $15 = ((($14)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $4;
   $18 = (_strcmp($16,$17)|0);
   $19 = ($18|0)==(0);
   if ($19) {
    $20 = $5;
    HEAP32[$vararg_buffer>>2] = $20;
    (_snprintf(30800,2048,3933,$vararg_buffer)|0);
    STACKTOP = sp;return (30800|0);
   }
  }
 }
 $21 = $4;
 $22 = $5;
 HEAP32[$vararg_buffer1>>2] = $21;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $22;
 (_snprintf(30800,2048,3941,$vararg_buffer1)|0);
 STACKTOP = sp;return (30800|0);
}
function _getDots($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = (__lou_charHash($8)|0);
 $10 = $4;
 $11 = ((($10)) + 17652|0);
 $12 = (($11) + ($9<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $5 = $13;
 $14 = $5;
 $6 = $14;
 while(1) {
  $15 = $6;
  $16 = ($15|0)!=(0);
  if (!($16)) {
   label = 6;
   break;
  }
  $17 = $6;
  $18 = $4;
  $19 = ((($18)) + 31168|0);
  $20 = (($19) + ($17<<3)|0);
  $7 = $20;
  $21 = $7;
  $22 = ((($21)) + 44|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23&65535;
  $25 = $3;
  $26 = $25&65535;
  $27 = ($24|0)==($26|0);
  $28 = $7;
  if ($27) {
   label = 4;
   break;
  }
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $6 = $30;
 }
 if ((label|0) == 4) {
  $2 = $28;
  $31 = $2;
  STACKTOP = sp;return ($31|0);
 }
 else if ((label|0) == 6) {
  $2 = 0;
  $31 = $2;
  STACKTOP = sp;return ($31|0);
 }
 return (0)|0;
}
function _allocateTranslationTable($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = 62352;
 $7 = $4;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $2 = 1;
  $28 = $2;
  STACKTOP = sp;return ($28|0);
 }
 $6 = 31184;
 $10 = (_rpl_malloc(62352)|0);
 $11 = $4;
 HEAP32[$11>>2] = $10;
 $12 = ($10|0)!=(0|0);
 if (!($12)) {
  $13 = $3;
  _compileError($13,4042,$vararg_buffer);
  $14 = $4;
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0|0);
  if ($16) {
   $17 = $4;
   $18 = HEAP32[$17>>2]|0;
   _rpl_free($18);
  }
  $19 = $4;
  HEAP32[$19>>2] = 0;
  __lou_outOfMemory();
 }
 $20 = $4;
 $21 = HEAP32[$20>>2]|0;
 _memset(($21|0),0,62352)|0;
 $22 = $4;
 $23 = HEAP32[$22>>2]|0;
 HEAP32[$23>>2] = 62352;
 $24 = $6;
 $25 = $4;
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($26)) + 4|0);
 HEAP32[$27>>2] = $24;
 $2 = 1;
 $28 = $2;
 STACKTOP = sp;return ($28|0);
}
function _allocateDisplayTable($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = 18000;
 $7 = $4;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $2 = 1;
  $28 = $2;
  STACKTOP = sp;return ($28|0);
 }
 $6 = 9008;
 $10 = (_rpl_malloc(18000)|0);
 $11 = $4;
 HEAP32[$11>>2] = $10;
 $12 = ($10|0)!=(0|0);
 if (!($12)) {
  $13 = $3;
  _compileError($13,4042,$vararg_buffer);
  $14 = $4;
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0|0);
  if ($16) {
   $17 = $4;
   $18 = HEAP32[$17>>2]|0;
   _rpl_free($18);
  }
  $19 = $4;
  HEAP32[$19>>2] = 0;
  __lou_outOfMemory();
 }
 $20 = $4;
 $21 = HEAP32[$20>>2]|0;
 _memset(($21|0),0,18000)|0;
 $22 = $4;
 $23 = HEAP32[$22>>2]|0;
 HEAP32[$23>>2] = 18000;
 $24 = $6;
 $25 = $4;
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($26)) + 4|0);
 HEAP32[$27>>2] = $24;
 $2 = 1;
 $28 = $2;
 STACKTOP = sp;return ($28|0);
}
function _compileFile($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4192|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $6 = sp + 32|0;
 $8 = sp + 20|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = HEAP32[4353]|0;
 $10 = (($9) + 1)|0;
 HEAP32[4353] = $10;
 $11 = $3;
 HEAP32[$6>>2] = $11;
 $12 = $4;
 $13 = ($12|0)!=(0|0);
 do {
  if ($13) {
   $7 = 0;
   while(1) {
    $14 = $7;
    $15 = $4;
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 108|0);
    $18 = (($17) + ($14<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)!=(0|0);
    $21 = $7;
    if (!($20)) {
     break;
    }
    $22 = (($21) + 1)|0;
    $7 = $22;
   }
   $23 = ($21|0)>=(100);
   if ($23) {
    HEAP32[$vararg_buffer>>2] = 100;
    __lou_logMessage(30000,4060,$vararg_buffer);
    $24 = ((($6)) + 4|0);
    HEAP32[$24>>2] = 0;
    break;
   } else {
    $25 = $3;
    $26 = (___strdup($25)|0);
    $27 = $7;
    $28 = $4;
    $29 = HEAP32[$28>>2]|0;
    $30 = ((($29)) + 108|0);
    $31 = (($30) + ($27<<2)|0);
    HEAP32[$31>>2] = $26;
    $32 = ((($6)) + 4|0);
    HEAP32[$32>>2] = $26;
    break;
   }
  }
 } while(0);
 $33 = ((($6)) + 16|0);
 HEAP32[$33>>2] = 0;
 $34 = ((($6)) + 20|0);
 HEAP32[$34>>2] = 0;
 $35 = ((($6)) + 12|0);
 HEAP32[$35>>2] = 0;
 $36 = HEAP32[$6>>2]|0;
 $37 = (_fopen($36,9794)|0);
 $38 = ((($6)) + 8|0);
 HEAP32[$38>>2] = $37;
 $39 = ($37|0)!=(0|0);
 if (!($39)) {
  $51 = HEAP32[$6>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $51;
  __lou_logMessage(40000,9846,$vararg_buffer3);
  $52 = HEAP32[3278]|0;
  $53 = (($52) + 1)|0;
  HEAP32[3278] = $53;
  $54 = HEAP32[3278]|0;
  $55 = ($54|0)!=(0);
  $56 = $55 ^ 1;
  $57 = $56&1;
  STACKTOP = sp;return ($57|0);
 }
 HEAP32[$8>>2] = 0;
 while(1) {
  $40 = (__lou_getALine($6)|0);
  $41 = ($40|0)!=(0);
  if (!($41)) {
   break;
  }
  $42 = $4;
  $43 = $5;
  $44 = (_compileRule($6,$42,$43,$8)|0);
  $45 = ($44|0)!=(0);
  if (!($45)) {
   label = 12;
   break;
  }
 }
 if ((label|0) == 12) {
  $46 = HEAP32[3278]|0;
  $47 = ($46|0)!=(0);
  if (!($47)) {
   _compileError($6,4100,$vararg_buffer1);
  }
 }
 $48 = ((($6)) + 8|0);
 $49 = HEAP32[$48>>2]|0;
 (_fclose($49)|0);
 $50 = HEAP32[$8>>2]|0;
 _free_macro_list($50);
 $54 = HEAP32[3278]|0;
 $55 = ($54|0)!=(0);
 $56 = $55 ^ 1;
 $57 = $56&1;
 STACKTOP = sp;return ($57|0);
}
function _setDefaults($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $3 = $2;
  $4 = ($3|0)<(3);
  if (!($4)) {
   break;
  }
  $5 = $2;
  $6 = $1;
  $7 = ((($6)) + 1512|0);
  $8 = (($7) + (($5*36)|0)|0);
  $9 = ((($8)) + 32|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(0);
  if (!($11)) {
   $12 = $2;
   $13 = $1;
   $14 = ((($13)) + 1512|0);
   $15 = (($14) + (($12*36)|0)|0);
   $16 = ((($15)) + 32|0);
   HEAP32[$16>>2] = 4;
  }
  $17 = $2;
  $18 = (($17) + 1)|0;
  $2 = $18;
 }
 $19 = $1;
 $20 = ((($19)) + 520|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0);
 if (!($22)) {
  STACKTOP = sp;return 1;
 }
 $23 = $1;
 $24 = ((($23)) + 520|0);
 HEAP32[$24>>2] = 1;
 STACKTOP = sp;return 1;
}
function _compileRule($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$off = 0, $$off18 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0;
 var $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0;
 var $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0;
 var $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0;
 var $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0;
 var $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0;
 var $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0;
 var $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0;
 var $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0;
 var $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0;
 var $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0;
 var $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0;
 var $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0;
 var $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0;
 var $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0;
 var $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0;
 var $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0;
 var $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0;
 var $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0;
 var $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0;
 var $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0;
 var $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0;
 var $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0;
 var $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0;
 var $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0;
 var $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0;
 var $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0;
 var $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0;
 var $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0;
 var $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0;
 var $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0;
 var $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0;
 var $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0;
 var $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0;
 var $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0;
 var $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0;
 var $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0;
 var $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0;
 var $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0;
 var $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0;
 var $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0, $2492 = 0;
 var $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0;
 var $2510 = 0, $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0;
 var $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0, $2546 = 0;
 var $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0, $2564 = 0;
 var $2565 = 0, $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0, $2582 = 0;
 var $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0, $260 = 0;
 var $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0, $2618 = 0;
 var $2619 = 0, $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0, $2636 = 0;
 var $2637 = 0, $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0, $2654 = 0;
 var $2655 = 0, $2656 = 0, $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0, $2672 = 0;
 var $2673 = 0, $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0, $2690 = 0;
 var $2691 = 0, $2692 = 0, $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0, $2708 = 0;
 var $2709 = 0, $271 = 0, $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0, $2726 = 0;
 var $2727 = 0, $2728 = 0, $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0, $2744 = 0;
 var $2745 = 0, $2746 = 0, $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0, $2762 = 0;
 var $2763 = 0, $2764 = 0, $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0, $2780 = 0;
 var $2781 = 0, $2782 = 0, $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0, $2799 = 0;
 var $28 = 0, $280 = 0, $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0, $2816 = 0;
 var $2817 = 0, $2818 = 0, $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0, $2833 = 0, $2834 = 0;
 var $2835 = 0, $2836 = 0, $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0, $2851 = 0, $2852 = 0;
 var $2853 = 0, $2854 = 0, $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0, $287 = 0, $2870 = 0;
 var $2871 = 0, $2872 = 0, $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0, $2888 = 0, $2889 = 0;
 var $289 = 0, $2890 = 0, $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0, $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0, $2905 = 0, $2906 = 0;
 var $2907 = 0, $2908 = 0, $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0, $2922 = 0, $2923 = 0, $2924 = 0;
 var $2925 = 0, $2926 = 0, $2927 = 0, $2928 = 0, $2929 = 0, $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0, $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0, $2940 = 0, $2941 = 0, $2942 = 0;
 var $2943 = 0, $2944 = 0, $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0, $296 = 0, $2960 = 0;
 var $2961 = 0, $2962 = 0, $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0, $2967 = 0, $2968 = 0, $2969 = 0, $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0, $2974 = 0, $2975 = 0, $2976 = 0, $2977 = 0, $2978 = 0, $2979 = 0;
 var $298 = 0, $2980 = 0, $2981 = 0, $2982 = 0, $2983 = 0, $2984 = 0, $2985 = 0, $2986 = 0, $2987 = 0, $2988 = 0, $2989 = 0, $299 = 0, $2990 = 0, $2991 = 0, $2992 = 0, $2993 = 0, $2994 = 0, $2995 = 0, $2996 = 0, $2997 = 0;
 var $2998 = 0, $2999 = 0, $30 = 0, $300 = 0, $3000 = 0, $3001 = 0, $3002 = 0, $3003 = 0, $3004 = 0, $3005 = 0, $3006 = 0, $3007 = 0, $3008 = 0, $3009 = 0, $301 = 0, $3010 = 0, $3011 = 0, $3012 = 0, $3013 = 0, $3014 = 0;
 var $3015 = 0, $3016 = 0, $3017 = 0, $3018 = 0, $3019 = 0, $302 = 0, $3020 = 0, $3021 = 0, $3022 = 0, $3023 = 0, $3024 = 0, $3025 = 0, $3026 = 0, $3027 = 0, $3028 = 0, $3029 = 0, $303 = 0, $3030 = 0, $3031 = 0, $3032 = 0;
 var $3033 = 0, $3034 = 0, $3035 = 0, $3036 = 0, $3037 = 0, $3038 = 0, $3039 = 0, $304 = 0, $3040 = 0, $3041 = 0, $3042 = 0, $3043 = 0, $3044 = 0, $3045 = 0, $3046 = 0, $3047 = 0, $3048 = 0, $3049 = 0, $305 = 0, $3050 = 0;
 var $3051 = 0, $3052 = 0, $3053 = 0, $3054 = 0, $3055 = 0, $3056 = 0, $3057 = 0, $3058 = 0, $3059 = 0, $306 = 0, $3060 = 0, $3061 = 0, $3062 = 0, $3063 = 0, $3064 = 0, $3065 = 0, $3066 = 0, $3067 = 0, $3068 = 0, $3069 = 0;
 var $307 = 0, $3070 = 0, $3071 = 0, $3072 = 0, $3073 = 0, $3074 = 0, $3075 = 0, $3076 = 0, $3077 = 0, $3078 = 0, $3079 = 0, $308 = 0, $3080 = 0, $3081 = 0, $3082 = 0, $3083 = 0, $3084 = 0, $3085 = 0, $3086 = 0, $3087 = 0;
 var $3088 = 0, $3089 = 0, $309 = 0, $3090 = 0, $3091 = 0, $3092 = 0, $3093 = 0, $3094 = 0, $3095 = 0, $3096 = 0, $3097 = 0, $3098 = 0, $3099 = 0, $31 = 0, $310 = 0, $3100 = 0, $3101 = 0, $3102 = 0, $3103 = 0, $3104 = 0;
 var $3105 = 0, $3106 = 0, $3107 = 0, $3108 = 0, $3109 = 0, $311 = 0, $3110 = 0, $3111 = 0, $3112 = 0, $3113 = 0, $3114 = 0, $3115 = 0, $3116 = 0, $3117 = 0, $3118 = 0, $3119 = 0, $312 = 0, $3120 = 0, $3121 = 0, $3122 = 0;
 var $3123 = 0, $3124 = 0, $3125 = 0, $3126 = 0, $3127 = 0, $3128 = 0, $3129 = 0, $313 = 0, $3130 = 0, $3131 = 0, $3132 = 0, $3133 = 0, $3134 = 0, $3135 = 0, $3136 = 0, $3137 = 0, $3138 = 0, $3139 = 0, $314 = 0, $3140 = 0;
 var $3141 = 0, $3142 = 0, $3143 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
 var $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0;
 var $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0;
 var $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0;
 var $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0;
 var $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0;
 var $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0;
 var $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0;
 var $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0;
 var $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0;
 var $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0;
 var $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0;
 var $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0;
 var $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0;
 var $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0;
 var $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0;
 var $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0;
 var $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0;
 var $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0;
 var $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0;
 var $998 = 0, $999 = 0, $or$cond = 0, $or$cond$not = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond21 = 0, $or$cond23 = 0, $or$cond25 = 0, $or$cond3 = 0, $or$cond5 = 0, $switch = 0, $switch19 = 0, $vararg_buffer = 0, $vararg_buffer100 = 0, $vararg_buffer103 = 0, $vararg_buffer105 = 0, $vararg_buffer108 = 0;
 var $vararg_buffer111 = 0, $vararg_buffer114 = 0, $vararg_buffer117 = 0, $vararg_buffer119 = 0, $vararg_buffer121 = 0, $vararg_buffer123 = 0, $vararg_buffer125 = 0, $vararg_buffer127 = 0, $vararg_buffer130 = 0, $vararg_buffer133 = 0, $vararg_buffer135 = 0, $vararg_buffer138 = 0, $vararg_buffer141 = 0, $vararg_buffer144 = 0, $vararg_buffer146 = 0, $vararg_buffer148 = 0, $vararg_buffer150 = 0, $vararg_buffer154 = 0, $vararg_buffer157 = 0, $vararg_buffer160 = 0;
 var $vararg_buffer162 = 0, $vararg_buffer164 = 0, $vararg_buffer166 = 0, $vararg_buffer168 = 0, $vararg_buffer171 = 0, $vararg_buffer173 = 0, $vararg_buffer175 = 0, $vararg_buffer177 = 0, $vararg_buffer179 = 0, $vararg_buffer181 = 0, $vararg_buffer183 = 0, $vararg_buffer185 = 0, $vararg_buffer187 = 0, $vararg_buffer192 = 0, $vararg_buffer196 = 0, $vararg_buffer201 = 0, $vararg_buffer203 = 0, $vararg_buffer26 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0;
 var $vararg_buffer33 = 0, $vararg_buffer35 = 0, $vararg_buffer38 = 0, $vararg_buffer41 = 0, $vararg_buffer44 = 0, $vararg_buffer47 = 0, $vararg_buffer49 = 0, $vararg_buffer52 = 0, $vararg_buffer54 = 0, $vararg_buffer56 = 0, $vararg_buffer59 = 0, $vararg_buffer61 = 0, $vararg_buffer63 = 0, $vararg_buffer65 = 0, $vararg_buffer67 = 0, $vararg_buffer70 = 0, $vararg_buffer73 = 0, $vararg_buffer76 = 0, $vararg_buffer79 = 0, $vararg_buffer82 = 0;
 var $vararg_buffer85 = 0, $vararg_buffer87 = 0, $vararg_buffer89 = 0, $vararg_buffer91 = 0, $vararg_buffer93 = 0, $vararg_buffer95 = 0, $vararg_buffer98 = 0, $vararg_ptr153 = 0, $vararg_ptr190 = 0, $vararg_ptr191 = 0, $vararg_ptr195 = 0, $vararg_ptr199 = 0, $vararg_ptr200 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 70848|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(70848|0);
 $vararg_buffer203 = sp + 664|0;
 $vararg_buffer201 = sp + 656|0;
 $vararg_buffer196 = sp + 640|0;
 $vararg_buffer192 = sp + 632|0;
 $vararg_buffer187 = sp + 616|0;
 $vararg_buffer185 = sp + 608|0;
 $vararg_buffer183 = sp + 600|0;
 $vararg_buffer181 = sp + 592|0;
 $vararg_buffer179 = sp + 584|0;
 $vararg_buffer177 = sp + 576|0;
 $vararg_buffer175 = sp + 568|0;
 $vararg_buffer173 = sp + 560|0;
 $vararg_buffer171 = sp + 552|0;
 $vararg_buffer168 = sp + 544|0;
 $vararg_buffer166 = sp + 536|0;
 $vararg_buffer164 = sp + 528|0;
 $vararg_buffer162 = sp + 520|0;
 $vararg_buffer160 = sp + 512|0;
 $vararg_buffer157 = sp + 504|0;
 $vararg_buffer154 = sp + 496|0;
 $vararg_buffer150 = sp + 488|0;
 $vararg_buffer148 = sp + 480|0;
 $vararg_buffer146 = sp + 472|0;
 $vararg_buffer144 = sp + 464|0;
 $vararg_buffer141 = sp + 456|0;
 $vararg_buffer138 = sp + 448|0;
 $vararg_buffer135 = sp + 440|0;
 $vararg_buffer133 = sp + 432|0;
 $vararg_buffer130 = sp + 424|0;
 $vararg_buffer127 = sp + 416|0;
 $vararg_buffer125 = sp + 408|0;
 $vararg_buffer123 = sp + 400|0;
 $vararg_buffer121 = sp + 392|0;
 $vararg_buffer119 = sp + 384|0;
 $vararg_buffer117 = sp + 376|0;
 $vararg_buffer114 = sp + 368|0;
 $vararg_buffer111 = sp + 360|0;
 $vararg_buffer108 = sp + 352|0;
 $vararg_buffer105 = sp + 344|0;
 $vararg_buffer103 = sp + 336|0;
 $vararg_buffer100 = sp + 328|0;
 $vararg_buffer98 = sp + 320|0;
 $vararg_buffer95 = sp + 312|0;
 $vararg_buffer93 = sp + 304|0;
 $vararg_buffer91 = sp + 296|0;
 $vararg_buffer89 = sp + 288|0;
 $vararg_buffer87 = sp + 280|0;
 $vararg_buffer85 = sp + 272|0;
 $vararg_buffer82 = sp + 264|0;
 $vararg_buffer79 = sp + 256|0;
 $vararg_buffer76 = sp + 248|0;
 $vararg_buffer73 = sp + 240|0;
 $vararg_buffer70 = sp + 232|0;
 $vararg_buffer67 = sp + 224|0;
 $vararg_buffer65 = sp + 216|0;
 $vararg_buffer63 = sp + 208|0;
 $vararg_buffer61 = sp + 200|0;
 $vararg_buffer59 = sp + 192|0;
 $vararg_buffer56 = sp + 184|0;
 $vararg_buffer54 = sp + 176|0;
 $vararg_buffer52 = sp + 168|0;
 $vararg_buffer49 = sp + 160|0;
 $vararg_buffer47 = sp + 152|0;
 $vararg_buffer44 = sp + 144|0;
 $vararg_buffer41 = sp + 136|0;
 $vararg_buffer38 = sp + 128|0;
 $vararg_buffer35 = sp + 120|0;
 $vararg_buffer33 = sp + 112|0;
 $vararg_buffer31 = sp + 104|0;
 $vararg_buffer28 = sp + 96|0;
 $vararg_buffer26 = sp + 88|0;
 $vararg_buffer = sp + 80|0;
 $9 = sp + 66748|0;
 $11 = sp + 62650|0;
 $12 = sp + 58552|0;
 $13 = sp + 54454|0;
 $14 = sp + 50356|0;
 $15 = sp + 46258|0;
 $16 = sp + 72|0;
 $17 = sp + 64|0;
 $21 = sp + 42160|0;
 $24 = sp + 1096|0;
 $31 = sp + 38060|0;
 $33 = sp + 1064|0;
 $36 = sp + 1052|0;
 $37 = sp + 1048|0;
 $38 = sp + 33962|0;
 $39 = sp + 29864|0;
 $40 = sp + 1044|0;
 $46 = sp + 1020|0;
 $47 = sp + 1016|0;
 $48 = sp + 25766|0;
 $49 = sp + 21668|0;
 $50 = sp + 1012|0;
 $54 = sp + 56|0;
 $57 = sp + 32|0;
 $58 = sp + 988|0;
 $59 = sp + 984|0;
 $60 = sp + 980|0;
 $61 = sp + 976|0;
 $62 = sp + 972|0;
 $63 = sp + 968|0;
 $64 = sp + 964|0;
 $68 = sp + 8|0;
 $73 = sp + 932|0;
 $74 = sp + 928|0;
 $75 = sp + 924|0;
 $76 = sp + 920|0;
 $77 = sp + 916|0;
 $78 = sp + 912|0;
 $79 = sp + 908|0;
 $80 = sp + 904|0;
 $87 = sp + 876|0;
 $91 = sp + 860|0;
 $92 = sp + 856|0;
 $99 = sp + 828|0;
 $110 = sp + 784|0;
 $111 = sp + 780|0;
 $114 = sp + 768|0;
 $115 = sp + 17570|0;
 $120 = sp + 13472|0;
 $121 = sp + 9374|0;
 $123 = sp + 744|0;
 $125 = sp + 736|0;
 $130 = sp;
 $133 = sp + 5276|0;
 $141 = sp + 680|0;
 $144 = sp + 668|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $145 = $16;
 $146 = $145;
 HEAP32[$146>>2] = 0;
 $147 = (($145) + 4)|0;
 $148 = $147;
 HEAP32[$148>>2] = 0;
 $149 = $17;
 $150 = $149;
 HEAP32[$150>>2] = 0;
 $151 = (($149) + 4)|0;
 $152 = $151;
 HEAP32[$152>>2] = 0;
 $20 = 0;
 $19 = 0;
 $18 = 0;
 L1: while(1) {
  $153 = $5;
  $154 = (_getToken($153,$9,0)|0);
  $155 = ($154|0)!=(0);
  if (!($155)) {
   label = 3;
   break;
  }
  $156 = ((($9)) + 2|0);
  $157 = HEAP16[$156>>1]|0;
  $158 = $157&65535;
  $159 = ($158|0)==(35);
  if ($159) {
   label = 6;
   break;
  }
  $160 = ((($9)) + 2|0);
  $161 = HEAP16[$160>>1]|0;
  $162 = $161&65535;
  $163 = ($162|0)==(60);
  if ($163) {
   label = 6;
   break;
  }
  $164 = $5;
  $165 = ((($164)) + 12|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = ($166|0)==(1);
  if ($167) {
   $168 = ((($9)) + 2|0);
   $169 = (_eqasc2uni(4127,$168,3)|0);
   $170 = ($169|0)!=(0);
   if ($170) {
    label = 10;
    break;
   }
   $171 = ((($9)) + 2|0);
   $172 = (_eqasc2uni(4131,$171,5)|0);
   $173 = ($172|0)!=(0);
   if ($173) {
    label = 10;
    break;
   }
  }
  $181 = $5;
  $182 = (_getOpcode($181,$9)|0);
  $10 = $182;
  $183 = $10;
  switch ($183|0) {
  case 116:  {
   label = 15;
   break L1;
   break;
  }
  case 0:  {
   label = 16;
   break L1;
   break;
  }
  case 61:  {
   label = 27;
   break L1;
   break;
  }
  case 62:  {
   label = 28;
   break L1;
   break;
  }
  case 71:  {
   label = 29;
   break L1;
   break;
  }
  case 63:  {
   label = 30;
   break L1;
   break;
  }
  case 64:  {
   label = 31;
   break L1;
   break;
  }
  case 65:  {
   label = 32;
   break L1;
   break;
  }
  case 66:  {
   label = 33;
   break L1;
   break;
  }
  case 67:  {
   label = 34;
   break L1;
   break;
  }
  case 68:  {
   label = 35;
   break L1;
   break;
  }
  case 69:  {
   label = 36;
   break L1;
   break;
  }
  case 72:  {
   label = 37;
   break L1;
   break;
  }
  case 117: case 70:  {
   label = 47;
   break L1;
   break;
  }
  case 54:  {
   $195 = $19;
   $196 = ($195|0)!=(0);
   if ($196) {
    label = 22;
    break L1;
   }
   $18 = 1;
   continue L1;
   break;
  }
  case 55:  {
   $199 = $18;
   $200 = ($199|0)!=(0);
   if ($200) {
    label = 25;
    break L1;
   }
   $19 = 1;
   continue L1;
   break;
  }
  default: {
   $476 = $6;
   $477 = ($476|0)!=(0|0);
   if (!($477)) {
    label = 89;
    break L1;
   }
   $478 = $10;
   switch ($478|0) {
   case 1:  {
    label = 91;
    break L1;
    break;
   }
   case 2:  {
    label = 92;
    break L1;
    break;
   }
   case 112:  {
    label = 95;
    break L1;
    break;
   }
   case 113:  {
    label = 111;
    break L1;
    break;
   }
   case 18: case 17: case 16: case 15: case 14: case 13: case 12: case 11: case 10: case 9: case 8: case 7: case 6: case 5: case 4: case 3:  {
    label = 127;
    break L1;
    break;
   }
   case 33:  {
    label = 182;
    break L1;
    break;
   }
   case 44: case 43: case 41: case 40: case 39: case 38: case 37: case 36: case 35: case 34:  {
    label = 203;
    break L1;
    break;
   }
   case 19:  {
    label = 275;
    break L1;
    break;
   }
   case 20:  {
    label = 278;
    break L1;
    break;
   }
   case 21:  {
    label = 286;
    break L1;
    break;
   }
   case 22:  {
    label = 294;
    break L1;
    break;
   }
   case 23:  {
    label = 302;
    break L1;
    break;
   }
   case 24:  {
    label = 305;
    break L1;
    break;
   }
   case 25:  {
    label = 308;
    break L1;
    break;
   }
   case 26:  {
    label = 316;
    break L1;
    break;
   }
   case 27:  {
    label = 324;
    break L1;
    break;
   }
   case 47:  {
    label = 332;
    break L1;
    break;
   }
   case 28:  {
    label = 335;
    break L1;
    break;
   }
   case 29:  {
    label = 343;
    break L1;
    break;
   }
   case 30:  {
    label = 351;
    break L1;
    break;
   }
   case 31:  {
    label = 359;
    break L1;
    break;
   }
   case 32:  {
    label = 367;
    break L1;
    break;
   }
   case 42:  {
    label = 375;
    break L1;
    break;
   }
   case 45:  {
    label = 383;
    break L1;
    break;
   }
   case 46:  {
    label = 386;
    break L1;
    break;
   }
   case 86:  {
    label = 392;
    break L1;
    break;
   }
   case 80: case 79: case 108: case 107: case 106: case 105: case 104: case 103: case 102: case 101: case 100: case 99: case 98: case 97: case 95: case 94: case 93: case 92: case 91: case 90: case 83:  {
    label = 393;
    break L1;
    break;
   }
   case 81:  {
    label = 410;
    break L1;
    break;
   }
   case 50: case 49:  {
    label = 438;
    break L1;
    break;
   }
   case 84:  {
    label = 449;
    break L1;
    break;
   }
   case 82:  {
    label = 459;
    break L1;
    break;
   }
   case 73:  {
    label = 462;
    break L1;
    break;
   }
   case 75:  {
    label = 477;
    break L1;
    break;
   }
   case 76:  {
    label = 478;
    break L1;
    break;
   }
   case 77:  {
    label = 480;
    break L1;
    break;
   }
   case 78:  {
    label = 482;
    break L1;
    break;
   }
   case 74:  {
    label = 484;
    break L1;
    break;
   }
   case 89: case 88: case 87: case 96:  {
    label = 487;
    break L1;
    break;
   }
   case 48:  {
    label = 497;
    break L1;
    break;
   }
   case 51:  {
    label = 507;
    break L1;
    break;
   }
   case 114:  {
    label = 508;
    break L1;
    break;
   }
   case 115:  {
    label = 560;
    break L1;
    break;
   }
   case 60: case 59: case 58:  {
    label = 593;
    break L1;
    break;
   }
   case 109: case 110:  {
    label = 594;
    break L1;
    break;
   }
   case 85:  {
    $2090 = $20;
    $2091 = ($2090|0)!=(0);
    if ($2091) {
     label = 390;
     break L1;
    }
    $20 = 1;
    continue L1;
    break;
   }
   case 52:  {
    $138 = $16;
    break;
   }
   case 53:  {
    $138 = $17;
    break;
   }
   case 56:  {
    $3083 = $17;
    $3084 = $3083;
    $3085 = HEAP32[$3084>>2]|0;
    $3086 = (($3083) + 4)|0;
    $3087 = $3086;
    $3088 = HEAP32[$3087>>2]|0;
    $3089 = $3085 | 33554432;
    $3090 = $17;
    $3091 = $3090;
    HEAP32[$3091>>2] = $3089;
    $3092 = (($3090) + 4)|0;
    $3093 = $3092;
    HEAP32[$3093>>2] = $3088;
    continue L1;
    break;
   }
   case 57:  {
    $3094 = $16;
    $3095 = $3094;
    $3096 = HEAP32[$3095>>2]|0;
    $3097 = (($3094) + 4)|0;
    $3098 = $3097;
    $3099 = HEAP32[$3098>>2]|0;
    $3100 = $3096 | 33554432;
    $3101 = $16;
    $3102 = $3101;
    HEAP32[$3102>>2] = $3100;
    $3103 = (($3101) + 4)|0;
    $3104 = $3103;
    HEAP32[$3104>>2] = $3099;
    continue L1;
    break;
   }
   default: {
    label = 602;
    break L1;
   }
   }
   $2841 = $6;
   $2842 = HEAP32[$2841>>2]|0;
   $2843 = ((($2842)) + 8|0);
   $2844 = HEAP32[$2843>>2]|0;
   $2845 = ($2844|0)!=(0|0);
   if (!($2845)) {
    $2846 = $6;
    $2847 = HEAP32[$2846>>2]|0;
    $2848 = (_allocateCharacterClasses($2847)|0);
    $2849 = ($2848|0)!=(0);
    if (!($2849)) {
     label = 554;
     break L1;
    }
   }
   $2850 = $5;
   $2851 = (_getToken($2850,$9,4572)|0);
   $2852 = ($2851|0)!=(0);
   if (!($2852)) {
    label = 556;
    break L1;
   }
   $2853 = $6;
   $2854 = HEAP32[$2853>>2]|0;
   $2855 = (_findCharacterClass($9,$2854)|0);
   $139 = $2855;
   $2856 = ($2855|0)!=(0|0);
   if (!($2856)) {
    label = 558;
    break L1;
   }
   $2858 = $139;
   $2859 = ((($2858)) + 8|0);
   $2860 = $2859;
   $2861 = $2860;
   $2862 = HEAP32[$2861>>2]|0;
   $2863 = (($2860) + 4)|0;
   $2864 = $2863;
   $2865 = HEAP32[$2864>>2]|0;
   $2866 = $138;
   $2867 = $2866;
   $2868 = $2867;
   $2869 = HEAP32[$2868>>2]|0;
   $2870 = (($2867) + 4)|0;
   $2871 = $2870;
   $2872 = HEAP32[$2871>>2]|0;
   $2873 = $2869 | $2862;
   $2874 = $2872 | $2865;
   $2875 = $2866;
   $2876 = $2875;
   HEAP32[$2876>>2] = $2873;
   $2877 = (($2875) + 4)|0;
   $2878 = $2877;
   HEAP32[$2878>>2] = $2874;
   continue L1;
  }
  }
 }
 switch (label|0) {
  case 3: {
   $4 = 1;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
   break;
  }
  case 6: {
   $4 = 1;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
   break;
  }
  case 10: {
   $174 = $6;
   $175 = ($174|0)!=(0|0);
   if ($175) {
    $176 = $5;
    $177 = $6;
    (_compileHyphenation($176,$9,$177)|0);
   } else {
    while(1) {
     $178 = $5;
     $179 = (__lou_getALine($178)|0);
     $180 = ($179|0)!=(0);
     if (!($180)) {
      break;
     }
    }
   }
   $4 = 1;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
   break;
  }
  case 15: {
   $184 = $5;
   _compileError($184,4137,$vararg_buffer);
   $4 = 0;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
   break;
  }
  case 16: {
   $185 = $5;
   $186 = (_getToken($185,$9,4164)|0);
   $187 = ($186|0)!=(0);
   if (!($187)) {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $188 = $5;
   $189 = (_parseChars($188,$21,$9)|0);
   $190 = ($189|0)!=(0);
   if ($190) {
    $191 = $5;
    $192 = $6;
    $193 = $7;
    $194 = (_includeFile($191,$21,$192,$193)|0);
    $4 = $194;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   } else {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   break;
  }
  case 22: {
   $197 = $5;
   $198 = (__lou_findOpcodeName(55)|0);
   HEAP32[$vararg_buffer26>>2] = $198;
   _compileError($197,4182,$vararg_buffer26);
   $4 = 0;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
   break;
  }
  case 25: {
   $201 = $5;
   $202 = (__lou_findOpcodeName(54)|0);
   HEAP32[$vararg_buffer28>>2] = $202;
   _compileError($201,4182,$vararg_buffer28);
   $4 = 0;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
   break;
  }
  case 27: {
   $203 = $5;
   $204 = $10;
   $205 = $18;
   $206 = $19;
   $207 = $6;
   $208 = $7;
   $209 = (_compileCharDef($203,$204,1,0,$205,$206,$207,$208)|0);
   $4 = $209;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
   break;
  }
  case 28: {
   $210 = $5;
   $211 = $10;
   $212 = $18;
   $213 = $19;
   $214 = $6;
   $215 = $7;
   $216 = (_compileCharDef($210,$211,4,0,$212,$213,$214,$215)|0);
   $4 = $216;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
   break;
  }
  case 29: {
   $217 = $5;
   $218 = $10;
   $219 = $18;
   $220 = $19;
   $221 = $6;
   $222 = $7;
   $223 = (_compileCharDef($217,$218,256,0,$219,$220,$221,$222)|0);
   $4 = $223;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
   break;
  }
  case 30: {
   $224 = $5;
   $225 = $10;
   $226 = $18;
   $227 = $19;
   $228 = $6;
   $229 = $7;
   $230 = (_compileCharDef($224,$225,8,0,$226,$227,$228,$229)|0);
   $4 = $230;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
   break;
  }
  case 31: {
   $231 = $5;
   $232 = $10;
   $233 = $18;
   $234 = $19;
   $235 = $6;
   $236 = $7;
   $237 = (_compileCharDef($231,$232,64,0,$233,$234,$235,$236)|0);
   $4 = $237;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
   break;
  }
  case 32: {
   $238 = $5;
   $239 = $10;
   $240 = $18;
   $241 = $19;
   $242 = $6;
   $243 = $7;
   $244 = (_compileCharDef($238,$239,128,0,$240,$241,$242,$243)|0);
   $4 = $244;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
   break;
  }
  case 33: {
   $245 = $5;
   $246 = $10;
   $247 = $18;
   $248 = $19;
   $249 = $6;
   $250 = $7;
   $251 = (_compileCharDef($245,$246,2,0,$247,$248,$249,$250)|0);
   $4 = $251;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
   break;
  }
  case 34: {
   $252 = $5;
   $253 = $10;
   $254 = $18;
   $255 = $19;
   $256 = $6;
   $257 = $7;
   $258 = (_compileCharDef($252,$253,16,0,$254,$255,$256,$257)|0);
   $4 = $258;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
   break;
  }
  case 35: {
   $259 = $5;
   $260 = $10;
   $261 = $18;
   $262 = $19;
   $263 = $6;
   $264 = $7;
   $265 = (_compileCharDef($259,$260,32,0,$261,$262,$263,$264)|0);
   $4 = $265;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
   break;
  }
  case 36: {
   $266 = $5;
   $267 = $18;
   $268 = $19;
   $269 = $6;
   $270 = $7;
   $271 = (_compileGrouping($266,$267,$268,$269,$270)|0);
   $4 = $271;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
   break;
  }
  case 37: {
   $272 = $7;
   $273 = ($272|0)!=(0|0);
   if (!($273)) {
    $4 = 1;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $274 = $5;
   $275 = (_getRuleCharsText($274,$11)|0);
   $276 = ($275|0)!=(0);
   if (!($276)) {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $277 = $5;
   $278 = (_getRuleDotsPattern($277,$12)|0);
   $279 = ($278|0)!=(0);
   if (!($279)) {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $280 = HEAP16[$11>>1]|0;
   $281 = $280&65535;
   $282 = ($281|0)!=(1);
   if (!($282)) {
    $283 = HEAP16[$12>>1]|0;
    $284 = $283&65535;
    $285 = ($284|0)!=(1);
    if (!($285)) {
     $287 = $5;
     $288 = ((($11)) + 2|0);
     $289 = HEAP16[$288>>1]|0;
     $290 = ((($12)) + 2|0);
     $291 = HEAP16[$290>>1]|0;
     $292 = $7;
     $293 = (_putCharDotsMapping($287,$289,$291,$292)|0);
     $4 = $293;
     $3143 = $4;
     STACKTOP = sp;return ($3143|0);
    }
   }
   $286 = $5;
   _compileError($286,4204,$vararg_buffer31);
   $4 = 0;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
   break;
  }
  case 47: {
   $294 = $8;
   $295 = ($294|0)!=(0|0);
   L805: do {
    if ($295) {
     $296 = $8;
     $297 = HEAP32[$296>>2]|0;
     $22 = $297;
     while(1) {
      $298 = $22;
      $299 = ($298|0)!=(0|0);
      if (!($299)) {
       break L805;
      }
      $300 = $22;
      $301 = HEAP32[$300>>2]|0;
      $23 = $301;
      $302 = HEAP16[$9>>1]|0;
      $303 = $302&65535;
      $304 = $23;
      $305 = HEAP32[$304>>2]|0;
      $306 = (_strlen($305)|0);
      $307 = ($303|0)==($306|0);
      if ($307) {
       $308 = $23;
       $309 = HEAP32[$308>>2]|0;
       $310 = ((($9)) + 2|0);
       $311 = HEAP16[$9>>1]|0;
       $312 = $311&65535;
       $313 = (_eqasc2uni($309,$310,$312)|0);
       $314 = ($313|0)!=(0);
       if ($314) {
        break;
       }
      }
      $466 = $22;
      $467 = ((($466)) + 4|0);
      $468 = HEAP32[$467>>2]|0;
      $22 = $468;
     }
     $315 = $8;
     $316 = ($315|0)!=(0|0);
     if (!($316)) {
      $317 = $5;
      _compileError($317,4253,$vararg_buffer33);
      $4 = 0;
      $3143 = $4;
      STACKTOP = sp;return ($3143|0);
     }
     _memset(($24|0),0,4136)|0;
     $318 = $5;
     $319 = HEAP32[$318>>2]|0;
     HEAP32[$24>>2] = $319;
     $320 = $5;
     $321 = ((($320)) + 4|0);
     $322 = HEAP32[$321>>2]|0;
     $323 = ((($24)) + 4|0);
     HEAP32[$323>>2] = $322;
     $324 = $5;
     $325 = ((($324)) + 12|0);
     $326 = HEAP32[$325>>2]|0;
     $327 = ((($24)) + 12|0);
     HEAP32[$327>>2] = $326;
     $328 = ((($24)) + 16|0);
     HEAP32[$328>>2] = 0;
     $329 = ((($24)) + 20|0);
     HEAP32[$329>>2] = 0;
     $330 = ((($24)) + 28|0);
     HEAP32[$330>>2] = 0;
     $331 = ((($24)) + 24|0);
     HEAP32[$331>>2] = 0;
     $25 = 0;
     $332 = $23;
     $333 = ((($332)) + 20|0);
     $334 = HEAP32[$333>>2]|0;
     $335 = ($334*4098)|0;
     $336 = (_rpl_malloc($335)|0);
     $26 = $336;
     while(1) {
      $337 = $25;
      $338 = $23;
      $339 = ((($338)) + 20|0);
      $340 = HEAP32[$339>>2]|0;
      $341 = ($337|0)<($340|0);
      if (!($341)) {
       break;
      }
      $342 = $5;
      $343 = (_getToken($342,$9,4297)|0);
      $344 = ($343|0)!=(0);
      if (!($344)) {
       break;
      }
      $345 = $25;
      $346 = (($345) + 1)|0;
      $25 = $346;
      $347 = $26;
      $348 = (($347) + (($345*4098)|0)|0);
      _memcpy(($348|0),($9|0),4098)|0;
     }
     $349 = $25;
     $350 = $23;
     $351 = ((($350)) + 20|0);
     $352 = HEAP32[$351>>2]|0;
     $353 = ($349|0)<($352|0);
     if ($353) {
      $354 = $5;
      $355 = $23;
      $356 = ((($355)) + 20|0);
      $357 = HEAP32[$356>>2]|0;
      HEAP32[$vararg_buffer35>>2] = $357;
      _compileError($354,4312,$vararg_buffer35);
      $4 = 0;
      $3143 = $4;
      STACKTOP = sp;return ($3143|0);
     }
     $27 = 0;
     $28 = 0;
     $358 = $28;
     $359 = $23;
     $360 = ((($359)) + 16|0);
     $361 = HEAP32[$360>>2]|0;
     $362 = ($358|0)<($361|0);
     if ($362) {
      $363 = $28;
      $364 = $363<<1;
      $365 = $23;
      $366 = ((($365)) + 12|0);
      $367 = HEAP32[$366>>2]|0;
      $368 = (($367) + ($364<<2)|0);
      $369 = HEAP32[$368>>2]|0;
      $373 = $369;
     } else {
      $370 = $23;
      $371 = ((($370)) + 8|0);
      $372 = HEAP32[$371>>2]|0;
      $373 = $372;
     }
     $29 = $373;
     L831: while(1) {
      while(1) {
       $374 = $27;
       $375 = $29;
       $376 = ($374|0)<($375|0);
       if (!($376)) {
        break;
       }
       $377 = $27;
       $378 = (($377) + 1)|0;
       $27 = $378;
       $379 = $23;
       $380 = ((($379)) + 4|0);
       $381 = HEAP32[$380>>2]|0;
       $382 = (($381) + ($377<<1)|0);
       $383 = HEAP16[$382>>1]|0;
       $30 = $383;
       $384 = $30;
       $385 = $384&65535;
       $386 = ($385|0)==(10);
       if ($386) {
        $387 = $6;
        $388 = $7;
        $389 = $8;
        $390 = (_compileRule($24,$387,$388,$389)|0);
        $391 = ($390|0)!=(0);
        if (!($391)) {
         label = 68;
         break L831;
        }
        $396 = ((($24)) + 28|0);
        HEAP32[$396>>2] = 0;
        $397 = ((($24)) + 24|0);
        HEAP32[$397>>2] = 0;
        continue;
       } else {
        $398 = ((($24)) + 24|0);
        $399 = HEAP32[$398>>2]|0;
        $400 = ($399|0)>=(2048);
        if ($400) {
         label = 71;
         break L831;
        }
        $402 = $30;
        $403 = ((($24)) + 24|0);
        $404 = HEAP32[$403>>2]|0;
        $405 = (($404) + 1)|0;
        HEAP32[$403>>2] = $405;
        $406 = ((($24)) + 40|0);
        $407 = (($406) + ($404<<1)|0);
        HEAP16[$407>>1] = $402;
        continue;
       }
      }
      $408 = $28;
      $409 = $23;
      $410 = ((($409)) + 16|0);
      $411 = HEAP32[$410>>2]|0;
      $412 = ($408|0)<($411|0);
      if (!($412)) {
       label = 81;
       break;
      }
      $413 = $28;
      $414 = $413<<1;
      $415 = (($414) + 1)|0;
      $416 = $23;
      $417 = ((($416)) + 12|0);
      $418 = HEAP32[$417>>2]|0;
      $419 = (($418) + ($415<<2)|0);
      $420 = HEAP32[$419>>2]|0;
      $421 = (($420) - 1)|0;
      $422 = $26;
      $423 = (($422) + (($421*4098)|0)|0);
      _memcpy(($31|0),($423|0),4098)|0;
      $32 = 0;
      while(1) {
       $424 = $32;
       $425 = HEAP16[$31>>1]|0;
       $426 = $425&65535;
       $427 = ($424|0)<($426|0);
       if (!($427)) {
        break;
       }
       $428 = $32;
       $429 = ((($31)) + 2|0);
       $430 = (($429) + ($428<<1)|0);
       $431 = HEAP16[$430>>1]|0;
       $432 = ((($24)) + 24|0);
       $433 = HEAP32[$432>>2]|0;
       $434 = (($433) + 1)|0;
       HEAP32[$432>>2] = $434;
       $435 = ((($24)) + 40|0);
       $436 = (($435) + ($433<<1)|0);
       HEAP16[$436>>1] = $431;
       $437 = $32;
       $438 = (($437) + 1)|0;
       $32 = $438;
      }
      $439 = $28;
      $440 = (($439) + 1)|0;
      $28 = $440;
      $441 = $28;
      $442 = $23;
      $443 = ((($442)) + 16|0);
      $444 = HEAP32[$443>>2]|0;
      $445 = ($441|0)<($444|0);
      if ($445) {
       $446 = $28;
       $447 = $446<<1;
       $448 = $23;
       $449 = ((($448)) + 12|0);
       $450 = HEAP32[$449>>2]|0;
       $451 = (($450) + ($447<<2)|0);
       $452 = HEAP32[$451>>2]|0;
       $456 = $452;
      } else {
       $453 = $23;
       $454 = ((($453)) + 8|0);
       $455 = HEAP32[$454>>2]|0;
       $456 = $455;
      }
      $29 = $456;
     }
     if ((label|0) == 68) {
      $392 = ((($24)) + 40|0);
      $393 = ((($24)) + 24|0);
      $394 = HEAP32[$393>>2]|0;
      $395 = (__lou_showString($392,$394,0)|0);
      HEAP32[$vararg_buffer38>>2] = $395;
      __lou_logMessage(40000,4334,$vararg_buffer38);
      $4 = 0;
      $3143 = $4;
      STACKTOP = sp;return ($3143|0);
     }
     else if ((label|0) == 71) {
      $401 = $5;
      HEAP32[$vararg_buffer41>>2] = 2048;
      _compileError($401,4368,$vararg_buffer41);
      $4 = 0;
      $3143 = $4;
      STACKTOP = sp;return ($3143|0);
     }
     else if ((label|0) == 81) {
      $457 = $6;
      $458 = $7;
      $459 = $8;
      $460 = (_compileRule($24,$457,$458,$459)|0);
      $461 = ($460|0)!=(0);
      if ($461) {
       $4 = 1;
       $3143 = $4;
       STACKTOP = sp;return ($3143|0);
      } else {
       $462 = ((($24)) + 40|0);
       $463 = ((($24)) + 24|0);
       $464 = HEAP32[$463>>2]|0;
       $465 = (__lou_showString($462,$464,0)|0);
       HEAP32[$vararg_buffer44>>2] = $465;
       __lou_logMessage(40000,4334,$vararg_buffer44);
       $4 = 0;
       $3143 = $4;
       STACKTOP = sp;return ($3143|0);
      }
     }
    }
   } while(0);
   $469 = $10;
   $470 = ($469|0)==(70);
   $471 = $5;
   if ($470) {
    _compileError($471,4418,$vararg_buffer47);
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   } else {
    $472 = ((($9)) + 2|0);
    $473 = HEAP16[$9>>1]|0;
    $474 = $473&65535;
    $475 = (__lou_showString($472,$474,0)|0);
    HEAP32[$vararg_buffer49>>2] = $475;
    _compileError($471,4450,$vararg_buffer49);
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   break;
  }
  case 89: {
   $4 = 1;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
   break;
  }
  case 91: {
   $479 = $5;
   _compileWarning($479,4473,$vararg_buffer52);
   $4 = 1;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
   break;
  }
  case 92: {
   $480 = $6;
   $481 = HEAP32[$480>>2]|0;
   $482 = ((($481)) + 544|0);
   $483 = HEAP32[$482>>2]|0;
   HEAP32[$33>>2] = $483;
   $484 = $5;
   $485 = $18;
   $486 = $19;
   $487 = $6;
   $488 = (_compileBrailleIndicator($484,4545,2,$33,$485,$486,$487)|0);
   $489 = ($488|0)!=(0);
   if ($489) {
    $490 = HEAP32[$33>>2]|0;
    $491 = $6;
    $492 = HEAP32[$491>>2]|0;
    $493 = ((($492)) + 544|0);
    HEAP32[$493>>2] = $490;
    $4 = 1;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   } else {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   break;
  }
  case 95: {
   $34 = 0;
   $35 = 0;
   $43 = 55440;
   $494 = $43;
   $495 = (_rpl_malloc($494)|0);
   $35 = $495;
   $496 = $35;
   $497 = ($496|0)!=(0|0);
   if (!($497)) {
    __lou_outOfMemory();
   }
   $498 = $35;
   $499 = $43;
   _memset(($498|0),-1,($499|0))|0;
   $18 = 1;
   $500 = $5;
   (_getCharacters($500,$38)|0);
   $501 = $5;
   (_getRuleCharsText($501,$11)|0);
   $502 = $5;
   (_getCharacters($502,$39)|0);
   $503 = $5;
   (_getRuleDotsPattern($503,$12)|0);
   $504 = $5;
   $505 = $10;
   $506 = $16;
   $507 = $506;
   $508 = HEAP32[$507>>2]|0;
   $509 = (($506) + 4)|0;
   $510 = $509;
   $511 = HEAP32[$510>>2]|0;
   $512 = $17;
   $513 = $512;
   $514 = HEAP32[$513>>2]|0;
   $515 = (($512) + 4)|0;
   $516 = $515;
   $517 = HEAP32[$516>>2]|0;
   $518 = $18;
   $519 = $19;
   $520 = $6;
   $521 = (_addRule($504,$505,$11,$12,$508,$511,$514,$517,$37,$36,$518,$519,$520)|0);
   $522 = ($521|0)!=(0);
   if ($522) {
    $523 = ((($38)) + 2|0);
    $524 = HEAP16[$523>>1]|0;
    $525 = $524&65535;
    $526 = ($525|0)==(45);
    if ($526) {
     $527 = HEAP16[$38>>1]|0;
     $528 = $527&65535;
     $529 = ($528|0)==(1);
     if ($529) {
      $530 = ((($38)) + 2|0);
      $531 = $35;
      $532 = ((($531)) + 2|0);
      $533 = $6;
      $534 = HEAP32[$533>>2]|0;
      $535 = $5;
      $536 = (__lou_pattern_compile($530,0,$532,13841,$534,$535)|0);
      $41 = $536;
     } else {
      label = 101;
     }
    } else {
     label = 101;
    }
    if ((label|0) == 101) {
     $537 = ((($38)) + 2|0);
     $538 = HEAP16[$38>>1]|0;
     $539 = $538&65535;
     $540 = $35;
     $541 = ((($540)) + 2|0);
     $542 = $6;
     $543 = HEAP32[$542>>2]|0;
     $544 = $5;
     $545 = (__lou_pattern_compile($537,$539,$541,13841,$543,$544)|0);
     $41 = $545;
    }
    $546 = $41;
    $547 = ($546|0)!=(0);
    if ($547) {
     $548 = $41;
     $549 = (($548) + 1)|0;
     $550 = $549&65535;
     $551 = $35;
     HEAP16[$551>>1] = $550;
     $552 = $550&65535;
     $42 = $552;
     $553 = $35;
     $554 = ((($553)) + 2|0);
     __lou_pattern_reverse($554);
     $555 = ((($39)) + 2|0);
     $556 = HEAP16[$555>>1]|0;
     $557 = $556&65535;
     $558 = ($557|0)==(45);
     if ($558) {
      $559 = HEAP16[$39>>1]|0;
      $560 = $559&65535;
      $561 = ($560|0)==(1);
      if ($561) {
       $562 = ((($39)) + 2|0);
       $563 = $42;
       $564 = $35;
       $565 = (($564) + ($563<<1)|0);
       $566 = $6;
       $567 = HEAP32[$566>>2]|0;
       $568 = $5;
       $569 = (__lou_pattern_compile($562,0,$565,13841,$567,$568)|0);
       $41 = $569;
      } else {
       label = 106;
      }
     } else {
      label = 106;
     }
     if ((label|0) == 106) {
      $570 = ((($39)) + 2|0);
      $571 = HEAP16[$39>>1]|0;
      $572 = $571&65535;
      $573 = $42;
      $574 = $35;
      $575 = (($574) + ($573<<1)|0);
      $576 = $6;
      $577 = HEAP32[$576>>2]|0;
      $578 = $5;
      $579 = (__lou_pattern_compile($570,$572,$575,13841,$577,$578)|0);
      $41 = $579;
     }
     $580 = $41;
     $581 = ($580|0)!=(0);
     if ($581) {
      $582 = $42;
      $583 = $41;
      $584 = (($583) + ($582))|0;
      $41 = $584;
      $585 = $5;
      $586 = $41;
      $587 = $586<<1;
      $588 = $6;
      $589 = (_allocateSpaceInTranslationTable($585,$40,$587,$588)|0);
      $590 = ($589|0)!=(0);
      if ($590) {
       $591 = HEAP32[$37>>2]|0;
       $592 = $6;
       $593 = HEAP32[$592>>2]|0;
       $594 = ((($593)) + 31168|0);
       $595 = (($594) + ($591<<3)|0);
       HEAP32[$36>>2] = $595;
       $596 = HEAP32[$40>>2]|0;
       $597 = $6;
       $598 = HEAP32[$597>>2]|0;
       $599 = ((($598)) + 31168|0);
       $600 = (($599) + ($596<<3)|0);
       $601 = $35;
       $602 = $41;
       $603 = $602<<1;
       _memcpy(($600|0),($601|0),($603|0))|0;
       $604 = HEAP32[$40>>2]|0;
       $605 = HEAP32[$36>>2]|0;
       $606 = ((($605)) + 32|0);
       HEAP32[$606>>2] = $604;
       $34 = 1;
      }
     }
    }
   }
   $607 = $35;
   _rpl_free($607);
   $608 = $34;
   $4 = $608;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
   break;
  }
  case 111: {
   $44 = 0;
   $45 = 0;
   $53 = 55440;
   $609 = $53;
   $610 = (_rpl_malloc($609)|0);
   $45 = $610;
   $611 = $45;
   $612 = ($611|0)!=(0|0);
   if (!($612)) {
    __lou_outOfMemory();
   }
   $613 = $45;
   $614 = $53;
   _memset(($613|0),-1,($614|0))|0;
   $19 = 1;
   $615 = $5;
   (_getCharacters($615,$48)|0);
   $616 = $5;
   (_getRuleCharsText($616,$11)|0);
   $617 = $5;
   (_getCharacters($617,$49)|0);
   $618 = $5;
   (_getRuleDotsPattern($618,$12)|0);
   $619 = $5;
   $620 = $10;
   $621 = $18;
   $622 = $19;
   $623 = $6;
   $624 = (_addRule($619,$620,$11,$12,0,0,0,0,$47,$46,$621,$622,$623)|0);
   $625 = ($624|0)!=(0);
   if ($625) {
    $626 = ((($48)) + 2|0);
    $627 = HEAP16[$626>>1]|0;
    $628 = $627&65535;
    $629 = ($628|0)==(45);
    if ($629) {
     $630 = HEAP16[$48>>1]|0;
     $631 = $630&65535;
     $632 = ($631|0)==(1);
     if ($632) {
      $633 = ((($48)) + 2|0);
      $634 = $45;
      $635 = ((($634)) + 2|0);
      $636 = $6;
      $637 = HEAP32[$636>>2]|0;
      $638 = $5;
      $639 = (__lou_pattern_compile($633,0,$635,13841,$637,$638)|0);
      $51 = $639;
     } else {
      label = 117;
     }
    } else {
     label = 117;
    }
    if ((label|0) == 117) {
     $640 = ((($48)) + 2|0);
     $641 = HEAP16[$48>>1]|0;
     $642 = $641&65535;
     $643 = $45;
     $644 = ((($643)) + 2|0);
     $645 = $6;
     $646 = HEAP32[$645>>2]|0;
     $647 = $5;
     $648 = (__lou_pattern_compile($640,$642,$644,13841,$646,$647)|0);
     $51 = $648;
    }
    $649 = $51;
    $650 = ($649|0)!=(0);
    if ($650) {
     $651 = $51;
     $652 = (($651) + 1)|0;
     $653 = $652&65535;
     $654 = $45;
     HEAP16[$654>>1] = $653;
     $655 = $653&65535;
     $52 = $655;
     $656 = $45;
     $657 = ((($656)) + 2|0);
     __lou_pattern_reverse($657);
     $658 = ((($49)) + 2|0);
     $659 = HEAP16[$658>>1]|0;
     $660 = $659&65535;
     $661 = ($660|0)==(45);
     if ($661) {
      $662 = HEAP16[$49>>1]|0;
      $663 = $662&65535;
      $664 = ($663|0)==(1);
      if ($664) {
       $665 = ((($49)) + 2|0);
       $666 = $52;
       $667 = $45;
       $668 = (($667) + ($666<<1)|0);
       $669 = $6;
       $670 = HEAP32[$669>>2]|0;
       $671 = $5;
       $672 = (__lou_pattern_compile($665,0,$668,13841,$670,$671)|0);
       $51 = $672;
      } else {
       label = 122;
      }
     } else {
      label = 122;
     }
     if ((label|0) == 122) {
      $673 = ((($49)) + 2|0);
      $674 = HEAP16[$49>>1]|0;
      $675 = $674&65535;
      $676 = $52;
      $677 = $45;
      $678 = (($677) + ($676<<1)|0);
      $679 = $6;
      $680 = HEAP32[$679>>2]|0;
      $681 = $5;
      $682 = (__lou_pattern_compile($673,$675,$678,13841,$680,$681)|0);
      $51 = $682;
     }
     $683 = $51;
     $684 = ($683|0)!=(0);
     if ($684) {
      $685 = $52;
      $686 = $51;
      $687 = (($686) + ($685))|0;
      $51 = $687;
      $688 = $5;
      $689 = $51;
      $690 = $689<<1;
      $691 = $6;
      $692 = (_allocateSpaceInTranslationTable($688,$50,$690,$691)|0);
      $693 = ($692|0)!=(0);
      if ($693) {
       $694 = HEAP32[$47>>2]|0;
       $695 = $6;
       $696 = HEAP32[$695>>2]|0;
       $697 = ((($696)) + 31168|0);
       $698 = (($697) + ($694<<3)|0);
       HEAP32[$46>>2] = $698;
       $699 = HEAP32[$50>>2]|0;
       $700 = $6;
       $701 = HEAP32[$700>>2]|0;
       $702 = ((($701)) + 31168|0);
       $703 = (($702) + ($699<<3)|0);
       $704 = $45;
       $705 = $51;
       $706 = $705<<1;
       _memcpy(($703|0),($704|0),($706|0))|0;
       $707 = HEAP32[$50>>2]|0;
       $708 = HEAP32[$46>>2]|0;
       $709 = ((($708)) + 32|0);
       HEAP32[$709>>2] = $707;
       $44 = 1;
      }
     }
    }
   }
   $710 = $45;
   _rpl_free($710);
   $711 = $44;
   $4 = $711;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
   break;
  }
  case 127: {
   $712 = $10;
   $$off = (($712) + -3)|0;
   $switch = ($$off>>>0)<(8);
   do {
    if ($switch) {
     $713 = $54;
     $714 = $713;
     HEAP32[$714>>2] = 16;
     $715 = (($713) + 4)|0;
     $716 = $715;
     HEAP32[$716>>2] = 0;
     $55 = 0;
     $717 = $10;
     $718 = (($717) + 8)|0;
     $10 = $718;
    } else {
     $719 = $5;
     $720 = (_getToken($719,$9,4572)|0);
     $721 = ($720|0)!=(0);
     if (!($721)) {
      $4 = 0;
      $3143 = $4;
      STACKTOP = sp;return ($3143|0);
     }
     $722 = $6;
     $723 = HEAP32[$722>>2]|0;
     $724 = ((($723)) + 8|0);
     $725 = HEAP32[$724>>2]|0;
     $726 = ($725|0)!=(0|0);
     if (!($726)) {
      $727 = $6;
      $728 = HEAP32[$727>>2]|0;
      $729 = (_allocateCharacterClasses($728)|0);
      $730 = ($729|0)!=(0);
      if (!($730)) {
       $4 = 0;
       $3143 = $4;
       STACKTOP = sp;return ($3143|0);
      }
     }
     $731 = $6;
     $732 = HEAP32[$731>>2]|0;
     $733 = (_findCharacterClass($9,$732)|0);
     $56 = $733;
     $734 = $56;
     $735 = ($734|0)!=(0|0);
     if (!($735)) {
      $736 = $5;
      $737 = ((($9)) + 2|0);
      $738 = HEAP16[$9>>1]|0;
      $739 = $738&65535;
      $740 = $6;
      $741 = HEAP32[$740>>2]|0;
      $742 = (_addCharacterClass($736,$737,$739,$741,1)|0);
      $56 = $742;
      $743 = $56;
      $744 = ($743|0)!=(0|0);
      if (!($744)) {
       $4 = 0;
       $3143 = $4;
       STACKTOP = sp;return ($3143|0);
      }
     }
     $745 = $56;
     $746 = ((($745)) + 8|0);
     $747 = $746;
     $748 = $747;
     $749 = HEAP32[$748>>2]|0;
     $750 = (($747) + 4)|0;
     $751 = $750;
     $752 = HEAP32[$751>>2]|0;
     $753 = $54;
     $754 = $753;
     HEAP32[$754>>2] = $749;
     $755 = (($753) + 4)|0;
     $756 = $755;
     HEAP32[$756>>2] = $752;
     $757 = $54;
     $758 = $757;
     $759 = HEAP32[$758>>2]|0;
     $760 = (($757) + 4)|0;
     $761 = $760;
     $762 = HEAP32[$761>>2]|0;
     $763 = ($759|0)==(16);
     $764 = ($762|0)==(0);
     $765 = $763 & $764;
     $766 = $54;
     $767 = $766;
     $768 = HEAP32[$767>>2]|0;
     $769 = (($766) + 4)|0;
     $770 = $769;
     $771 = HEAP32[$770>>2]|0;
     $772 = ($768|0)==(4);
     $773 = ($771|0)==(0);
     $774 = $772 & $773;
     $or$cond = $765 | $774;
     $or$cond$not = $or$cond ^ 1;
     $775 = $54;
     $776 = $775;
     $777 = HEAP32[$776>>2]|0;
     $778 = (($775) + 4)|0;
     $779 = $778;
     $780 = HEAP32[$779>>2]|0;
     $781 = ($780>>>0)>(0);
     $782 = ($777>>>0)>=(1);
     $783 = ($780|0)==(0);
     $784 = $783 & $782;
     $785 = $781 | $784;
     $or$cond3 = $or$cond$not & $785;
     $786 = $54;
     $787 = $786;
     $788 = HEAP32[$787>>2]|0;
     $789 = (($786) + 4)|0;
     $790 = $789;
     $791 = HEAP32[$790>>2]|0;
     $792 = ($791>>>0)<(0);
     $793 = ($788>>>0)<=(256);
     $794 = ($791|0)==(0);
     $795 = $794 & $793;
     $796 = $792 | $795;
     $or$cond5 = $or$cond3 & $796;
     if ($or$cond5) {
      $797 = $5;
      _compileError($797,4587,$vararg_buffer54);
      $4 = 0;
      $3143 = $4;
      STACKTOP = sp;return ($3143|0);
     }
     $798 = $54;
     $799 = $798;
     $800 = HEAP32[$799>>2]|0;
     $801 = (($798) + 4)|0;
     $802 = $801;
     $803 = HEAP32[$802>>2]|0;
     $804 = ($800|0)==(16);
     $805 = ($803|0)==(0);
     $806 = $804 & $805;
     if ($806) {
      $55 = 0;
      break;
     }
     $55 = 1;
     while(1) {
      $807 = $55;
      $808 = ($807|0)<(6);
      if (!($808)) {
       break;
      }
      $809 = $55;
      $810 = $6;
      $811 = HEAP32[$810>>2]|0;
      $812 = ((($811)) + 1104|0);
      $813 = (($812) + (($809*24)|0)|0);
      $814 = ((($813)) + 16|0);
      $815 = HEAP32[$814>>2]|0;
      $816 = ($815|0)!=(0);
      if (!($816)) {
       break;
      }
      $817 = $55;
      $818 = $6;
      $819 = HEAP32[$818>>2]|0;
      $820 = ((($819)) + 1104|0);
      $821 = (($820) + (($817*24)|0)|0);
      $822 = ((($821)) + 8|0);
      $823 = $822;
      $824 = $823;
      $825 = HEAP32[$824>>2]|0;
      $826 = (($823) + 4)|0;
      $827 = $826;
      $828 = HEAP32[$827>>2]|0;
      $829 = $54;
      $830 = $829;
      $831 = HEAP32[$830>>2]|0;
      $832 = (($829) + 4)|0;
      $833 = $832;
      $834 = HEAP32[$833>>2]|0;
      $835 = ($825|0)==($831|0);
      $836 = ($828|0)==($834|0);
      $837 = $835 & $836;
      if ($837) {
       break;
      }
      $838 = $55;
      $839 = (($838) + 1)|0;
      $55 = $839;
     }
     $840 = $55;
     $841 = ($840|0)==(6);
     if ($841) {
      $842 = $5;
      HEAP32[$vararg_buffer56>>2] = 6;
      _compileError($842,4650,$vararg_buffer56);
      $4 = 0;
      $3143 = $4;
      STACKTOP = sp;return ($3143|0);
     }
    }
   } while(0);
   $843 = $55;
   $844 = $6;
   $845 = HEAP32[$844>>2]|0;
   $846 = ((($845)) + 1104|0);
   $847 = (($846) + (($843*24)|0)|0);
   $848 = ((($847)) + 16|0);
   $849 = HEAP32[$848>>2]|0;
   $850 = ($849|0)!=(0);
   if (!($850)) {
    $851 = $55;
    $852 = $6;
    $853 = HEAP32[$852>>2]|0;
    $854 = ((($853)) + 1104|0);
    $855 = (($854) + (($851*24)|0)|0);
    HEAP16[$57>>1] = 0;
    $856 = ((($57)) + 8|0);
    $857 = $54;
    $858 = $857;
    $859 = HEAP32[$858>>2]|0;
    $860 = (($857) + 4)|0;
    $861 = $860;
    $862 = HEAP32[$861>>2]|0;
    $863 = $856;
    $864 = $863;
    HEAP32[$864>>2] = $859;
    $865 = (($863) + 4)|0;
    $866 = $865;
    HEAP32[$866>>2] = $862;
    $867 = ((($57)) + 16|0);
    $868 = $55;
    $869 = (10 + ($868))|0;
    $870 = 1 << $869;
    HEAP32[$867>>2] = $870;
    $871 = ((($57)) + 20|0);
    $872 = $55;
    $873 = (10 + ($872))|0;
    $874 = $873&65535;
    HEAP16[$871>>1] = $874;
    ;HEAP32[$855>>2]=HEAP32[$57>>2]|0;HEAP32[$855+4>>2]=HEAP32[$57+4>>2]|0;HEAP32[$855+8>>2]=HEAP32[$57+8>>2]|0;HEAP32[$855+12>>2]=HEAP32[$57+12>>2]|0;HEAP32[$855+16>>2]=HEAP32[$57+16>>2]|0;HEAP32[$855+20>>2]=HEAP32[$57+20>>2]|0;
   }
   $875 = $10;
   switch ($875|0) {
   case 16:  {
    $876 = $55;
    $877 = (10 + ($876))|0;
    $878 = $6;
    $879 = HEAP32[$878>>2]|0;
    $880 = ((($879)) + 1512|0);
    $881 = (($880) + (($877*36)|0)|0);
    $882 = HEAP32[$881>>2]|0;
    HEAP32[$58>>2] = $882;
    $883 = $5;
    $884 = $55;
    $885 = ($884|0)==(0);
    $886 = $885 ? 8 : 16;
    $887 = $18;
    $888 = $19;
    $889 = $6;
    $890 = (_compileBrailleIndicator($883,4683,$886,$58,$887,$888,$889)|0);
    $891 = ($890|0)!=(0);
    if ($891) {
     $892 = HEAP32[$58>>2]|0;
     $893 = $55;
     $894 = (10 + ($893))|0;
     $895 = $6;
     $896 = HEAP32[$895>>2]|0;
     $897 = ((($896)) + 1512|0);
     $898 = (($897) + (($894*36)|0)|0);
     HEAP32[$898>>2] = $892;
     $4 = 1;
     $3143 = $4;
     STACKTOP = sp;return ($3143|0);
    } else {
     $4 = 0;
     $3143 = $4;
     STACKTOP = sp;return ($3143|0);
    }
    break;
   }
   case 17:  {
    $899 = $5;
    $900 = (_compileBeforeAfter($899)|0);
    switch ($900|0) {
    case 1:  {
     $901 = $55;
     $902 = (10 + ($901))|0;
     $903 = $6;
     $904 = HEAP32[$903>>2]|0;
     $905 = ((($904)) + 1512|0);
     $906 = (($905) + (($902*36)|0)|0);
     $907 = ((($906)) + 8|0);
     $908 = HEAP32[$907>>2]|0;
     $909 = ($908|0)!=(0);
     if ($909) {
      $910 = $5;
      _compileError($910,4707,$vararg_buffer59);
      $4 = 0;
      $3143 = $4;
      STACKTOP = sp;return ($3143|0);
     }
     $911 = $55;
     $912 = (10 + ($911))|0;
     $913 = $6;
     $914 = HEAP32[$913>>2]|0;
     $915 = ((($914)) + 1512|0);
     $916 = (($915) + (($912*36)|0)|0);
     $917 = ((($916)) + 4|0);
     $918 = HEAP32[$917>>2]|0;
     HEAP32[$59>>2] = $918;
     $919 = $5;
     $920 = $55;
     $921 = ($920|0)==(0);
     $922 = $921 ? 118 : 17;
     $923 = $18;
     $924 = $19;
     $925 = $6;
     $926 = (_compileBrailleIndicator($919,4753,$922,$59,$923,$924,$925)|0);
     $927 = ($926|0)!=(0);
     if ($927) {
      $928 = HEAP32[$59>>2]|0;
      $929 = $55;
      $930 = (10 + ($929))|0;
      $931 = $6;
      $932 = HEAP32[$931>>2]|0;
      $933 = ((($932)) + 1512|0);
      $934 = (($933) + (($930*36)|0)|0);
      $935 = ((($934)) + 4|0);
      HEAP32[$935>>2] = $928;
      $4 = 1;
      $3143 = $4;
      STACKTOP = sp;return ($3143|0);
     } else {
      $4 = 0;
      $3143 = $4;
      STACKTOP = sp;return ($3143|0);
     }
     break;
    }
    case 2:  {
     $936 = $55;
     $937 = (10 + ($936))|0;
     $938 = $6;
     $939 = HEAP32[$938>>2]|0;
     $940 = ((($939)) + 1512|0);
     $941 = (($940) + (($937*36)|0)|0);
     $942 = ((($941)) + 4|0);
     $943 = HEAP32[$942>>2]|0;
     $944 = ($943|0)!=(0);
     if ($944) {
      $945 = $5;
      _compileError($945,4783,$vararg_buffer61);
      $4 = 0;
      $3143 = $4;
      STACKTOP = sp;return ($3143|0);
     }
     $946 = $55;
     $947 = (10 + ($946))|0;
     $948 = $6;
     $949 = HEAP32[$948>>2]|0;
     $950 = ((($949)) + 1512|0);
     $951 = (($950) + (($947*36)|0)|0);
     $952 = ((($951)) + 8|0);
     $953 = HEAP32[$952>>2]|0;
     HEAP32[$59>>2] = $953;
     $954 = $5;
     $955 = $55;
     $956 = ($955|0)==(0);
     $957 = $956 ? 119 : 17;
     $958 = $18;
     $959 = $19;
     $960 = $6;
     $961 = (_compileBrailleIndicator($954,4830,$957,$59,$958,$959,$960)|0);
     $962 = ($961|0)!=(0);
     if ($962) {
      $963 = HEAP32[$59>>2]|0;
      $964 = $55;
      $965 = (10 + ($964))|0;
      $966 = $6;
      $967 = HEAP32[$966>>2]|0;
      $968 = ((($967)) + 1512|0);
      $969 = (($968) + (($965*36)|0)|0);
      $970 = ((($969)) + 8|0);
      HEAP32[$970>>2] = $963;
      $4 = 1;
      $3143 = $4;
      STACKTOP = sp;return ($3143|0);
     } else {
      $4 = 0;
      $3143 = $4;
      STACKTOP = sp;return ($3143|0);
     }
     break;
    }
    default: {
     $971 = $5;
     _compileError($971,4859,$vararg_buffer63);
     $4 = 0;
     $3143 = $4;
     STACKTOP = sp;return ($3143|0);
    }
    }
    break;
   }
   case 14:  {
    $972 = $55;
    $973 = (10 + ($972))|0;
    $974 = $6;
    $975 = HEAP32[$974>>2]|0;
    $976 = ((($975)) + 1512|0);
    $977 = (($976) + (($973*36)|0)|0);
    $978 = ((($977)) + 12|0);
    $979 = HEAP32[$978>>2]|0;
    HEAP32[$60>>2] = $979;
    $980 = $5;
    $981 = $55;
    $982 = ($981|0)==(0);
    $983 = $982 ? 6 : 14;
    $984 = $18;
    $985 = $19;
    $986 = $6;
    $987 = (_compileBrailleIndicator($980,4896,$983,$60,$984,$985,$986)|0);
    $988 = ($987|0)!=(0);
    if ($988) {
     $989 = HEAP32[$60>>2]|0;
     $990 = $55;
     $991 = (10 + ($990))|0;
     $992 = $6;
     $993 = HEAP32[$992>>2]|0;
     $994 = ((($993)) + 1512|0);
     $995 = (($994) + (($991*36)|0)|0);
     $996 = ((($995)) + 12|0);
     HEAP32[$996>>2] = $989;
     $4 = 1;
     $3143 = $4;
     STACKTOP = sp;return ($3143|0);
    } else {
     $4 = 0;
     $3143 = $4;
     STACKTOP = sp;return ($3143|0);
    }
    break;
   }
   case 15:  {
    $997 = $55;
    $998 = (10 + ($997))|0;
    $999 = $6;
    $1000 = HEAP32[$999>>2]|0;
    $1001 = ((($1000)) + 1512|0);
    $1002 = (($1001) + (($998*36)|0)|0);
    $1003 = ((($1002)) + 16|0);
    $1004 = HEAP32[$1003>>2]|0;
    HEAP32[$61>>2] = $1004;
    $1005 = $5;
    $1006 = $55;
    $1007 = ($1006|0)==(0);
    $1008 = $1007 ? 7 : 15;
    $1009 = $18;
    $1010 = $19;
    $1011 = $6;
    $1012 = (_compileBrailleIndicator($1005,4922,$1008,$61,$1009,$1010,$1011)|0);
    $1013 = ($1012|0)!=(0);
    if ($1013) {
     $1014 = HEAP32[$61>>2]|0;
     $1015 = $55;
     $1016 = (10 + ($1015))|0;
     $1017 = $6;
     $1018 = HEAP32[$1017>>2]|0;
     $1019 = ((($1018)) + 1512|0);
     $1020 = (($1019) + (($1016*36)|0)|0);
     $1021 = ((($1020)) + 16|0);
     HEAP32[$1021>>2] = $1014;
     $4 = 1;
     $3143 = $4;
     STACKTOP = sp;return ($3143|0);
    } else {
     $4 = 0;
     $3143 = $4;
     STACKTOP = sp;return ($3143|0);
    }
    break;
   }
   case 11:  {
    $1022 = $55;
    $1023 = (10 + ($1022))|0;
    $1024 = $6;
    $1025 = HEAP32[$1024>>2]|0;
    $1026 = ((($1025)) + 1512|0);
    $1027 = (($1026) + (($1023*36)|0)|0);
    $1028 = ((($1027)) + 20|0);
    $1029 = HEAP32[$1028>>2]|0;
    HEAP32[$62>>2] = $1029;
    $1030 = $5;
    $1031 = $55;
    $1032 = ($1031|0)==(0);
    $1033 = $1032 ? 3 : 11;
    $1034 = $18;
    $1035 = $19;
    $1036 = $6;
    $1037 = (_compileBrailleIndicator($1030,4947,$1033,$62,$1034,$1035,$1036)|0);
    $1038 = ($1037|0)!=(0);
    if ($1038) {
     $1039 = HEAP32[$62>>2]|0;
     $1040 = $55;
     $1041 = (10 + ($1040))|0;
     $1042 = $6;
     $1043 = HEAP32[$1042>>2]|0;
     $1044 = ((($1043)) + 1512|0);
     $1045 = (($1044) + (($1041*36)|0)|0);
     $1046 = ((($1045)) + 20|0);
     HEAP32[$1046>>2] = $1039;
     $4 = 1;
     $3143 = $4;
     STACKTOP = sp;return ($3143|0);
    } else {
     $4 = 0;
     $3143 = $4;
     STACKTOP = sp;return ($3143|0);
    }
    break;
   }
   case 12:  {
    $1047 = $55;
    $1048 = (10 + ($1047))|0;
    $1049 = $6;
    $1050 = HEAP32[$1049>>2]|0;
    $1051 = ((($1050)) + 1512|0);
    $1052 = (($1051) + (($1048*36)|0)|0);
    $1053 = ((($1052)) + 24|0);
    $1054 = HEAP32[$1053>>2]|0;
    HEAP32[$63>>2] = $1054;
    $1055 = $5;
    $1056 = $55;
    $1057 = ($1056|0)==(0);
    $1058 = $1057 ? 4 : 12;
    $1059 = $18;
    $1060 = $19;
    $1061 = $6;
    $1062 = (_compileBrailleIndicator($1055,4974,$1058,$63,$1059,$1060,$1061)|0);
    $1063 = ($1062|0)!=(0);
    if ($1063) {
     $1064 = HEAP32[$63>>2]|0;
     $1065 = $55;
     $1066 = (10 + ($1065))|0;
     $1067 = $6;
     $1068 = HEAP32[$1067>>2]|0;
     $1069 = ((($1068)) + 1512|0);
     $1070 = (($1069) + (($1066*36)|0)|0);
     $1071 = ((($1070)) + 24|0);
     HEAP32[$1071>>2] = $1064;
     $4 = 1;
     $3143 = $4;
     STACKTOP = sp;return ($3143|0);
    } else {
     $4 = 0;
     $3143 = $4;
     STACKTOP = sp;return ($3143|0);
    }
    break;
   }
   case 13:  {
    $1072 = $55;
    $1073 = (10 + ($1072))|0;
    $1074 = $6;
    $1075 = HEAP32[$1074>>2]|0;
    $1076 = ((($1075)) + 1512|0);
    $1077 = (($1076) + (($1073*36)|0)|0);
    $1078 = ((($1077)) + 28|0);
    $1079 = HEAP32[$1078>>2]|0;
    HEAP32[$64>>2] = $1079;
    $1080 = $5;
    $1081 = $55;
    $1082 = ($1081|0)==(0);
    $1083 = $1082 ? 5 : 13;
    $1084 = $18;
    $1085 = $19;
    $1086 = $6;
    $1087 = (_compileBrailleIndicator($1080,4987,$1083,$64,$1084,$1085,$1086)|0);
    $1088 = ($1087|0)!=(0);
    if ($1088) {
     $1089 = HEAP32[$64>>2]|0;
     $1090 = $55;
     $1091 = (10 + ($1090))|0;
     $1092 = $6;
     $1093 = HEAP32[$1092>>2]|0;
     $1094 = ((($1093)) + 1512|0);
     $1095 = (($1094) + (($1091*36)|0)|0);
     $1096 = ((($1095)) + 28|0);
     HEAP32[$1096>>2] = $1089;
     $4 = 1;
     $3143 = $4;
     STACKTOP = sp;return ($3143|0);
    } else {
     $4 = 0;
     $3143 = $4;
     STACKTOP = sp;return ($3143|0);
    }
    break;
   }
   case 18:  {
    $1097 = $5;
    $1098 = (_compileNumber($1097)|0);
    $1099 = $55;
    $1100 = (10 + ($1099))|0;
    $1101 = $6;
    $1102 = HEAP32[$1101>>2]|0;
    $1103 = ((($1102)) + 1512|0);
    $1104 = (($1103) + (($1100*36)|0)|0);
    $1105 = ((($1104)) + 32|0);
    HEAP32[$1105>>2] = $1098;
    $4 = $1098;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
    break;
   }
   default: {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   }
   break;
  }
  case 182: {
   $1106 = $5;
   $1107 = (_getToken($1106,$15,5005)|0);
   $1108 = ($1107|0)!=(0);
   if (!($1108)) {
    $1109 = $5;
    _compileError($1109,5020,$vararg_buffer65);
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $1110 = HEAP16[$15>>1]|0;
   $1111 = $1110&65535;
   $1112 = (($1111) + 1)|0;
   $1113 = $1112;
   $1114 = (_rpl_malloc($1113)|0);
   $67 = $1114;
   $65 = 0;
   while(1) {
    $1115 = $65;
    $1116 = HEAP16[$15>>1]|0;
    $1117 = $1116&65535;
    $1118 = ($1115|0)<($1117|0);
    $1119 = $65;
    if (!($1118)) {
     break;
    }
    $1120 = ((($15)) + 2|0);
    $1121 = (($1120) + ($1119<<1)|0);
    $1122 = HEAP16[$1121>>1]|0;
    $1123 = $1122&255;
    $1124 = $65;
    $1125 = $67;
    $1126 = (($1125) + ($1124)|0);
    HEAP8[$1126>>0] = $1123;
    $1127 = $65;
    $1128 = (($1127) + 1)|0;
    $65 = $1128;
   }
   $1129 = (($1119) + 1)|0;
   $65 = $1129;
   $1130 = $67;
   $1131 = (($1130) + ($1119)|0);
   HEAP8[$1131>>0] = 0;
   $66 = 0;
   while(1) {
    $1132 = $66;
    $1133 = ($1132|0)<(10);
    if (!($1133)) {
     break;
    }
    $1134 = $66;
    $1135 = $6;
    $1136 = HEAP32[$1135>>2]|0;
    $1137 = ((($1136)) + 820|0);
    $1138 = (($1137) + ($1134<<2)|0);
    $1139 = HEAP32[$1138>>2]|0;
    $1140 = ($1139|0)!=(0|0);
    if (!($1140)) {
     break;
    }
    $1141 = $67;
    $1142 = $66;
    $1143 = $6;
    $1144 = HEAP32[$1143>>2]|0;
    $1145 = ((($1144)) + 820|0);
    $1146 = (($1145) + ($1142<<2)|0);
    $1147 = HEAP32[$1146>>2]|0;
    $1148 = (_strcmp($1141,$1147)|0);
    $1149 = ($1148|0)==(0);
    if ($1149) {
     label = 191;
     break;
    }
    $1154 = $66;
    $1155 = (($1154) + 1)|0;
    $66 = $1155;
   }
   if ((label|0) == 191) {
    $1150 = $67;
    HEAP32[$vararg_buffer67>>2] = $1150;
    __lou_logMessage(30000,5070,$vararg_buffer67);
    $1151 = HEAP32[4333]|0;
    $1152 = (($1151) + 1)|0;
    HEAP32[4333] = $1152;
    $1153 = $67;
    _rpl_free($1153);
    $4 = 1;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $1156 = $66;
   $1157 = ($1156|0)==(10);
   if ($1157) {
    HEAP32[$vararg_buffer70>>2] = 10;
    __lou_logMessage(40000,5099,$vararg_buffer70);
    $1158 = HEAP32[3278]|0;
    $1159 = (($1158) + 1)|0;
    HEAP32[3278] = $1159;
    $1160 = $67;
    _rpl_free($1160);
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $1161 = $66;
   switch ($1161|0) {
   case 0:  {
    $1162 = $67;
    $1163 = (_strcmp($1162,5143)|0);
    $1164 = ($1163|0)!=(0);
    if ($1164) {
     $1165 = $67;
     HEAP32[$vararg_buffer73>>2] = $1165;
     __lou_logMessage(40000,5150,$vararg_buffer73);
     $1166 = HEAP32[3278]|0;
     $1167 = (($1166) + 1)|0;
     HEAP32[3278] = $1167;
     $1168 = $67;
     _rpl_free($1168);
     $4 = 0;
     $3143 = $4;
     STACKTOP = sp;return ($3143|0);
    }
    break;
   }
   case 1:  {
    $1169 = $67;
    $1170 = (_strcmp($1169,5199)|0);
    $1171 = ($1170|0)!=(0);
    if ($1171) {
     $1172 = $67;
     HEAP32[$vararg_buffer76>>2] = $1172;
     __lou_logMessage(40000,5209,$vararg_buffer76);
     $1173 = HEAP32[3278]|0;
     $1174 = (($1173) + 1)|0;
     HEAP32[3278] = $1174;
     $1175 = $67;
     _rpl_free($1175);
     $4 = 0;
     $3143 = $4;
     STACKTOP = sp;return ($3143|0);
    }
    break;
   }
   case 2:  {
    $1176 = $67;
    $1177 = (_strcmp($1176,5262)|0);
    $1178 = ($1177|0)!=(0);
    if ($1178) {
     $1179 = $67;
     HEAP32[$vararg_buffer79>>2] = $1179;
     __lou_logMessage(40000,5267,$vararg_buffer79);
     $1180 = HEAP32[3278]|0;
     $1181 = (($1180) + 1)|0;
     HEAP32[3278] = $1181;
     $1182 = $67;
     _rpl_free($1182);
     $4 = 0;
     $3143 = $4;
     STACKTOP = sp;return ($3143|0);
    }
    break;
   }
   default: {
   }
   }
   $1183 = $67;
   $1184 = $66;
   $1185 = $6;
   $1186 = HEAP32[$1185>>2]|0;
   $1187 = ((($1186)) + 820|0);
   $1188 = (($1187) + ($1184<<2)|0);
   HEAP32[$1188>>2] = $1183;
   $1189 = $66;
   $1190 = $6;
   $1191 = HEAP32[$1190>>2]|0;
   $1192 = ((($1191)) + 864|0);
   $1193 = (($1192) + (($1189*24)|0)|0);
   $1194 = $66;
   $1195 = 1 << $1194;
   $1196 = $1195&65535;
   HEAP16[$68>>1] = $1196;
   $1197 = ((($68)) + 8|0);
   $1198 = $1197;
   $1199 = $1198;
   HEAP32[$1199>>2] = 0;
   $1200 = (($1198) + 4)|0;
   $1201 = $1200;
   HEAP32[$1201>>2] = 0;
   $1202 = ((($68)) + 16|0);
   $1203 = $66;
   $1204 = 1 << $1203;
   HEAP32[$1202>>2] = $1204;
   $1205 = ((($68)) + 20|0);
   $1206 = $66;
   $1207 = $1206&65535;
   HEAP16[$1205>>1] = $1207;
   ;HEAP32[$1193>>2]=HEAP32[$68>>2]|0;HEAP32[$1193+4>>2]=HEAP32[$68+4>>2]|0;HEAP32[$1193+8>>2]=HEAP32[$68+8>>2]|0;HEAP32[$1193+12>>2]=HEAP32[$68+12>>2]|0;HEAP32[$1193+16>>2]=HEAP32[$68+16>>2]|0;HEAP32[$1193+20>>2]=HEAP32[$68+20>>2]|0;
   $4 = 1;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
   break;
  }
  case 203: {
   $1208 = $5;
   $1209 = (_getToken($1208,$9,5005)|0);
   $1210 = ($1209|0)!=(0);
   if (!($1210)) {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $1211 = $5;
   $1212 = (_parseChars($1211,$15,$9)|0);
   $1213 = ($1212|0)!=(0);
   if (!($1213)) {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $1214 = HEAP16[$15>>1]|0;
   $1215 = $1214&65535;
   $1216 = (($1215) + 1)|0;
   $1217 = $1216;
   $1218 = (_rpl_malloc($1217)|0);
   $69 = $1218;
   $70 = 0;
   while(1) {
    $1219 = $70;
    $1220 = HEAP16[$15>>1]|0;
    $1221 = $1220&65535;
    $1222 = ($1219|0)<($1221|0);
    $1223 = $70;
    if (!($1222)) {
     break;
    }
    $1224 = ((($15)) + 2|0);
    $1225 = (($1224) + ($1223<<1)|0);
    $1226 = HEAP16[$1225>>1]|0;
    $1227 = $1226&255;
    $1228 = $70;
    $1229 = $69;
    $1230 = (($1229) + ($1228)|0);
    HEAP8[$1230>>0] = $1227;
    $1231 = $70;
    $1232 = (($1231) + 1)|0;
    $70 = $1232;
   }
   $1233 = (($1223) + 1)|0;
   $70 = $1233;
   $1234 = $69;
   $1235 = (($1234) + ($1223)|0);
   HEAP8[$1235>>0] = 0;
   $71 = 0;
   while(1) {
    $1236 = $71;
    $1237 = ($1236|0)<(10);
    if (!($1237)) {
     break;
    }
    $1238 = $71;
    $1239 = $6;
    $1240 = HEAP32[$1239>>2]|0;
    $1241 = ((($1240)) + 820|0);
    $1242 = (($1241) + ($1238<<2)|0);
    $1243 = HEAP32[$1242>>2]|0;
    $1244 = ($1243|0)!=(0|0);
    if (!($1244)) {
     break;
    }
    $1245 = $69;
    $1246 = $71;
    $1247 = $6;
    $1248 = HEAP32[$1247>>2]|0;
    $1249 = ((($1248)) + 820|0);
    $1250 = (($1249) + ($1246<<2)|0);
    $1251 = HEAP32[$1250>>2]|0;
    $1252 = (_strcmp($1245,$1251)|0);
    $1253 = ($1252|0)==(0);
    if ($1253) {
     break;
    }
    $1254 = $71;
    $1255 = (($1254) + 1)|0;
    $71 = $1255;
   }
   $1256 = $71;
   $1257 = ($1256|0)==(10);
   if (!($1257)) {
    $1258 = $71;
    $1259 = $6;
    $1260 = HEAP32[$1259>>2]|0;
    $1261 = ((($1260)) + 820|0);
    $1262 = (($1261) + ($1258<<2)|0);
    $1263 = HEAP32[$1262>>2]|0;
    $1264 = ($1263|0)!=(0|0);
    if ($1264) {
     $72 = 0;
     $1269 = $10;
     L255: do {
      switch ($1269|0) {
      case 34:  {
       $1270 = $71;
       $1271 = $6;
       $1272 = HEAP32[$1271>>2]|0;
       $1273 = ((($1272)) + 1512|0);
       $1274 = (($1273) + (($1270*36)|0)|0);
       $1275 = ((($1274)) + 20|0);
       $1276 = HEAP32[$1275>>2]|0;
       HEAP32[$73>>2] = $1276;
       $1277 = $5;
       $1278 = $18;
       $1279 = $19;
       $1280 = $6;
       $1281 = (_compileBrailleIndicator($1277,5345,34,$73,$1278,$1279,$1280)|0);
       $1282 = ($1281|0)!=(0);
       if ($1282) {
        $1283 = HEAP32[$73>>2]|0;
        $1284 = $71;
        $1285 = $6;
        $1286 = HEAP32[$1285>>2]|0;
        $1287 = ((($1286)) + 1512|0);
        $1288 = (($1287) + (($1284*36)|0)|0);
        $1289 = ((($1288)) + 20|0);
        HEAP32[$1289>>2] = $1283;
        $72 = 1;
       }
       break;
      }
      case 35:  {
       $1290 = $71;
       $1291 = $6;
       $1292 = HEAP32[$1291>>2]|0;
       $1293 = ((($1292)) + 1512|0);
       $1294 = (($1293) + (($1290*36)|0)|0);
       $1295 = ((($1294)) + 24|0);
       $1296 = HEAP32[$1295>>2]|0;
       HEAP32[$74>>2] = $1296;
       $1297 = $5;
       $1298 = $18;
       $1299 = $19;
       $1300 = $6;
       $1301 = (_compileBrailleIndicator($1297,3157,35,$74,$1298,$1299,$1300)|0);
       $1302 = ($1301|0)!=(0);
       if ($1302) {
        $1303 = HEAP32[$74>>2]|0;
        $1304 = $71;
        $1305 = $6;
        $1306 = HEAP32[$1305>>2]|0;
        $1307 = ((($1306)) + 1512|0);
        $1308 = (($1307) + (($1304*36)|0)|0);
        $1309 = ((($1308)) + 24|0);
        HEAP32[$1309>>2] = $1303;
        $72 = 1;
       }
       break;
      }
      case 36:  {
       $1310 = $71;
       $1311 = $6;
       $1312 = HEAP32[$1311>>2]|0;
       $1313 = ((($1312)) + 1512|0);
       $1314 = (($1313) + (($1310*36)|0)|0);
       $1315 = ((($1314)) + 28|0);
       $1316 = HEAP32[$1315>>2]|0;
       HEAP32[$75>>2] = $1316;
       $1317 = $5;
       $1318 = $18;
       $1319 = $19;
       $1320 = $6;
       $1321 = (_compileBrailleIndicator($1317,5359,36,$75,$1318,$1319,$1320)|0);
       $1322 = ($1321|0)!=(0);
       if ($1322) {
        $1323 = HEAP32[$75>>2]|0;
        $1324 = $71;
        $1325 = $6;
        $1326 = HEAP32[$1325>>2]|0;
        $1327 = ((($1326)) + 1512|0);
        $1328 = (($1327) + (($1324*36)|0)|0);
        $1329 = ((($1328)) + 28|0);
        HEAP32[$1329>>2] = $1323;
        $72 = 1;
       }
       break;
      }
      case 37:  {
       $1330 = $71;
       $1331 = $6;
       $1332 = HEAP32[$1331>>2]|0;
       $1333 = ((($1332)) + 1512|0);
       $1334 = (($1333) + (($1330*36)|0)|0);
       $1335 = ((($1334)) + 24|0);
       $1336 = HEAP32[$1335>>2]|0;
       $1337 = ($1336|0)!=(0);
       if (!($1337)) {
        $1338 = $71;
        $1339 = $6;
        $1340 = HEAP32[$1339>>2]|0;
        $1341 = ((($1340)) + 1512|0);
        $1342 = (($1341) + (($1338*36)|0)|0);
        $1343 = HEAP32[$1342>>2]|0;
        $1344 = ($1343|0)!=(0);
        if (!($1344)) {
         $1346 = $71;
         $1347 = $6;
         $1348 = HEAP32[$1347>>2]|0;
         $1349 = ((($1348)) + 1512|0);
         $1350 = (($1349) + (($1346*36)|0)|0);
         $1351 = ((($1350)) + 12|0);
         $1352 = HEAP32[$1351>>2]|0;
         HEAP32[$76>>2] = $1352;
         $1353 = $5;
         $1354 = $18;
         $1355 = $19;
         $1356 = $6;
         $1357 = (_compileBrailleIndicator($1353,5504,37,$76,$1354,$1355,$1356)|0);
         $1358 = ($1357|0)!=(0);
         if (!($1358)) {
          break L255;
         }
         $1359 = HEAP32[$76>>2]|0;
         $1360 = $71;
         $1361 = $6;
         $1362 = HEAP32[$1361>>2]|0;
         $1363 = ((($1362)) + 1512|0);
         $1364 = (($1363) + (($1360*36)|0)|0);
         $1365 = ((($1364)) + 12|0);
         HEAP32[$1365>>2] = $1359;
         $72 = 1;
         break L255;
        }
       }
       $1345 = $5;
       _compileError($1345,5369,$vararg_buffer85);
       break;
      }
      case 38:  {
       $1366 = $71;
       $1367 = $6;
       $1368 = HEAP32[$1367>>2]|0;
       $1369 = ((($1368)) + 1512|0);
       $1370 = (($1369) + (($1366*36)|0)|0);
       $1371 = ((($1370)) + 28|0);
       $1372 = HEAP32[$1371>>2]|0;
       $1373 = ($1372|0)!=(0);
       if (!($1373)) {
        $1374 = $71;
        $1375 = $6;
        $1376 = HEAP32[$1375>>2]|0;
        $1377 = ((($1376)) + 1512|0);
        $1378 = (($1377) + (($1374*36)|0)|0);
        $1379 = ((($1378)) + 4|0);
        $1380 = HEAP32[$1379>>2]|0;
        $1381 = ($1380|0)!=(0);
        if (!($1381)) {
         $1382 = $71;
         $1383 = $6;
         $1384 = HEAP32[$1383>>2]|0;
         $1385 = ((($1384)) + 1512|0);
         $1386 = (($1385) + (($1382*36)|0)|0);
         $1387 = ((($1386)) + 8|0);
         $1388 = HEAP32[$1387>>2]|0;
         $1389 = ($1388|0)!=(0);
         if (!($1389)) {
          $1391 = $71;
          $1392 = $6;
          $1393 = HEAP32[$1392>>2]|0;
          $1394 = ((($1393)) + 1512|0);
          $1395 = (($1394) + (($1391*36)|0)|0);
          $1396 = ((($1395)) + 16|0);
          $1397 = HEAP32[$1396>>2]|0;
          HEAP32[$77>>2] = $1397;
          $1398 = $5;
          $1399 = $18;
          $1400 = $19;
          $1401 = $6;
          $1402 = (_compileBrailleIndicator($1398,5652,38,$77,$1399,$1400,$1401)|0);
          $1403 = ($1402|0)!=(0);
          if (!($1403)) {
           break L255;
          }
          $1404 = HEAP32[$77>>2]|0;
          $1405 = $71;
          $1406 = $6;
          $1407 = HEAP32[$1406>>2]|0;
          $1408 = ((($1407)) + 1512|0);
          $1409 = (($1408) + (($1405*36)|0)|0);
          $1410 = ((($1409)) + 16|0);
          HEAP32[$1410>>2] = $1404;
          $72 = 1;
          break L255;
         }
        }
       }
       $1390 = $5;
       _compileError($1390,5517,$vararg_buffer87);
       break;
      }
      case 39:  {
       $1411 = $71;
       $1412 = $6;
       $1413 = HEAP32[$1412>>2]|0;
       $1414 = ((($1413)) + 1512|0);
       $1415 = (($1414) + (($1411*36)|0)|0);
       $1416 = HEAP32[$1415>>2]|0;
       HEAP32[$78>>2] = $1416;
       $1417 = $5;
       $1418 = $18;
       $1419 = $19;
       $1420 = $6;
       $1421 = (_compileBrailleIndicator($1417,5664,39,$78,$1418,$1419,$1420)|0);
       $1422 = ($1421|0)!=(0);
       if ($1422) {
        $1423 = HEAP32[$78>>2]|0;
        $1424 = $71;
        $1425 = $6;
        $1426 = HEAP32[$1425>>2]|0;
        $1427 = ((($1426)) + 1512|0);
        $1428 = (($1427) + (($1424*36)|0)|0);
        HEAP32[$1428>>2] = $1423;
        $72 = 1;
       }
       break;
      }
      case 40:  {
       $1429 = $5;
       $1430 = (_compileBeforeAfter($1429)|0);
       switch ($1430|0) {
       case 1:  {
        $1431 = $71;
        $1432 = $6;
        $1433 = HEAP32[$1432>>2]|0;
        $1434 = ((($1433)) + 1512|0);
        $1435 = (($1434) + (($1431*36)|0)|0);
        $1436 = ((($1435)) + 8|0);
        $1437 = HEAP32[$1436>>2]|0;
        $1438 = ($1437|0)!=(0);
        if ($1438) {
         $1439 = $5;
         _compileError($1439,5675,$vararg_buffer89);
         break L255;
        }
        $1440 = $71;
        $1441 = $6;
        $1442 = HEAP32[$1441>>2]|0;
        $1443 = ((($1442)) + 1512|0);
        $1444 = (($1443) + (($1440*36)|0)|0);
        $1445 = ((($1444)) + 4|0);
        $1446 = HEAP32[$1445>>2]|0;
        HEAP32[$79>>2] = $1446;
        $1447 = $5;
        $1448 = $18;
        $1449 = $19;
        $1450 = $6;
        $1451 = (_compileBrailleIndicator($1447,5708,40,$79,$1448,$1449,$1450)|0);
        $1452 = ($1451|0)!=(0);
        if (!($1452)) {
         break L255;
        }
        $1453 = HEAP32[$79>>2]|0;
        $1454 = $71;
        $1455 = $6;
        $1456 = HEAP32[$1455>>2]|0;
        $1457 = ((($1456)) + 1512|0);
        $1458 = (($1457) + (($1454*36)|0)|0);
        $1459 = ((($1458)) + 4|0);
        HEAP32[$1459>>2] = $1453;
        $72 = 1;
        break L255;
        break;
       }
       case 2:  {
        $1460 = $71;
        $1461 = $6;
        $1462 = HEAP32[$1461>>2]|0;
        $1463 = ((($1462)) + 1512|0);
        $1464 = (($1463) + (($1460*36)|0)|0);
        $1465 = ((($1464)) + 4|0);
        $1466 = HEAP32[$1465>>2]|0;
        $1467 = ($1466|0)!=(0);
        if ($1467) {
         $1468 = $5;
         _compileError($1468,5725,$vararg_buffer91);
         break L255;
        }
        $1469 = $71;
        $1470 = $6;
        $1471 = HEAP32[$1470>>2]|0;
        $1472 = ((($1471)) + 1512|0);
        $1473 = (($1472) + (($1469*36)|0)|0);
        $1474 = ((($1473)) + 8|0);
        $1475 = HEAP32[$1474>>2]|0;
        HEAP32[$80>>2] = $1475;
        $1476 = $5;
        $1477 = $18;
        $1478 = $19;
        $1479 = $6;
        $1480 = (_compileBrailleIndicator($1476,5759,40,$80,$1477,$1478,$1479)|0);
        $1481 = ($1480|0)!=(0);
        if (!($1481)) {
         break L255;
        }
        $1482 = HEAP32[$80>>2]|0;
        $1483 = $71;
        $1484 = $6;
        $1485 = HEAP32[$1484>>2]|0;
        $1486 = ((($1485)) + 1512|0);
        $1487 = (($1486) + (($1483*36)|0)|0);
        $1488 = ((($1487)) + 8|0);
        HEAP32[$1488>>2] = $1482;
        $72 = 1;
        break L255;
        break;
       }
       default: {
        $1489 = $5;
        _compileError($1489,4859,$vararg_buffer93);
        break L255;
       }
       }
       break;
      }
      case 41:  {
       $1490 = $5;
       $1491 = (_compileNumber($1490)|0);
       $1492 = $71;
       $1493 = $6;
       $1494 = HEAP32[$1493>>2]|0;
       $1495 = ((($1494)) + 1512|0);
       $1496 = (($1495) + (($1492*36)|0)|0);
       $1497 = ((($1496)) + 32|0);
       HEAP32[$1497>>2] = $1491;
       $1498 = ($1491|0)!=(0);
       if ($1498) {
        $72 = 1;
       }
       break;
      }
      case 43:  {
       $1499 = $5;
       $1500 = (_getRuleCharsText($1499,$11)|0);
       $1501 = ($1500|0)!=(0);
       if ($1501) {
        $1502 = $71;
        $1503 = $6;
        $1504 = HEAP32[$1503>>2]|0;
        $1505 = ((($1504)) + 2880|0);
        $1506 = (($1505) + (($1502*514)|0)|0);
        $81 = $1506;
        $82 = 0;
        while(1) {
         $1507 = $82;
         $1508 = ($1507|0)<(256);
         if (!($1508)) {
          break;
         }
         $1509 = $82;
         $1510 = $81;
         $1511 = (($1510) + ($1509<<1)|0);
         $1512 = HEAP16[$1511>>1]|0;
         $1513 = $1512&65535;
         $1514 = ($1513|0)!=(0);
         if (!($1514)) {
          break;
         }
         $1515 = $82;
         $1516 = (($1515) + 1)|0;
         $82 = $1516;
        }
        $1517 = $82;
        $1518 = HEAP16[$11>>1]|0;
        $1519 = $1518&65535;
        $1520 = (($1517) + ($1519))|0;
        $1521 = ($1520|0)>(256);
        if ($1521) {
         $1522 = $5;
         HEAP32[$vararg_buffer95>>2] = 256;
         _compileError($1522,5775,$vararg_buffer95);
         break L255;
        }
        $72 = 1;
        $83 = 0;
        while(1) {
         $1523 = $83;
         $1524 = HEAP16[$11>>1]|0;
         $1525 = $1524&65535;
         $1526 = ($1523|0)<($1525|0);
         if (!($1526)) {
          break L255;
         }
         $1527 = $83;
         $1528 = ((($11)) + 2|0);
         $1529 = (($1528) + ($1527<<1)|0);
         $1530 = HEAP16[$1529>>1]|0;
         $1531 = $6;
         $1532 = HEAP32[$1531>>2]|0;
         $1533 = (_getChar($1530,$1532,0)|0);
         $1534 = ($1533|0)!=(0|0);
         if (!($1534)) {
          break;
         }
         $1536 = $83;
         $1537 = ((($11)) + 2|0);
         $1538 = (($1537) + ($1536<<1)|0);
         $1539 = HEAP16[$1538>>1]|0;
         $1540 = $82;
         $1541 = (($1540) + 1)|0;
         $82 = $1541;
         $1542 = $81;
         $1543 = (($1542) + ($1540<<1)|0);
         HEAP16[$1543>>1] = $1539;
         $1544 = $83;
         $1545 = (($1544) + 1)|0;
         $83 = $1545;
        }
        $1535 = $5;
        _compileError($1535,5799,$vararg_buffer98);
        $72 = 0;
       }
       break;
      }
      case 44:  {
       $1546 = $5;
       $1547 = (_getRuleCharsText($1546,$11)|0);
       $1548 = ($1547|0)!=(0);
       if ($1548) {
        $1549 = $71;
        $1550 = $6;
        $1551 = HEAP32[$1550>>2]|0;
        $1552 = ((($1551)) + 8020|0);
        $1553 = (($1552) + (($1549*514)|0)|0);
        $84 = $1553;
        $85 = 0;
        while(1) {
         $1554 = $85;
         $1555 = ($1554|0)<(256);
         if (!($1555)) {
          break;
         }
         $1556 = $85;
         $1557 = $84;
         $1558 = (($1557) + ($1556<<1)|0);
         $1559 = HEAP16[$1558>>1]|0;
         $1560 = $1559&65535;
         $1561 = ($1560|0)!=(0);
         if (!($1561)) {
          break;
         }
         $1562 = $85;
         $1563 = (($1562) + 1)|0;
         $85 = $1563;
        }
        $1564 = $85;
        $1565 = HEAP16[$11>>1]|0;
        $1566 = $1565&65535;
        $1567 = (($1564) + ($1566))|0;
        $1568 = ($1567|0)>(256);
        if ($1568) {
         $1569 = $5;
         HEAP32[$vararg_buffer100>>2] = 256;
         _compileError($1569,5775,$vararg_buffer100);
         break L255;
        }
        $72 = 1;
        $86 = 0;
        while(1) {
         $1570 = $86;
         $1571 = HEAP16[$11>>1]|0;
         $1572 = $1571&65535;
         $1573 = ($1570|0)<($1572|0);
         if (!($1573)) {
          break L255;
         }
         $1574 = $86;
         $1575 = ((($11)) + 2|0);
         $1576 = (($1575) + ($1574<<1)|0);
         $1577 = HEAP16[$1576>>1]|0;
         $1578 = $6;
         $1579 = HEAP32[$1578>>2]|0;
         $1580 = (_getChar($1577,$1579,0)|0);
         $1581 = ($1580|0)!=(0|0);
         if (!($1581)) {
          break;
         }
         $1583 = $86;
         $1584 = ((($11)) + 2|0);
         $1585 = (($1584) + ($1583<<1)|0);
         $1586 = HEAP16[$1585>>1]|0;
         $1587 = $85;
         $1588 = (($1587) + 1)|0;
         $85 = $1588;
         $1589 = $84;
         $1590 = (($1589) + ($1587<<1)|0);
         HEAP16[$1590>>1] = $1586;
         $1591 = $86;
         $1592 = (($1591) + 1)|0;
         $86 = $1592;
        }
        $1582 = $5;
        _compileError($1582,5833,$vararg_buffer103);
        $72 = 0;
       }
       break;
      }
      default: {
      }
      }
     } while(0);
     $1593 = $69;
     _rpl_free($1593);
     $1594 = $72;
     $4 = $1594;
     $3143 = $4;
     STACKTOP = sp;return ($3143|0);
    }
   }
   $1265 = $69;
   HEAP32[$vararg_buffer82>>2] = $1265;
   __lou_logMessage(40000,5314,$vararg_buffer82);
   $1266 = HEAP32[3278]|0;
   $1267 = (($1266) + 1)|0;
   HEAP32[3278] = $1267;
   $1268 = $69;
   _rpl_free($1268);
   $4 = 0;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
   break;
  }
  case 275: {
   $1595 = $6;
   $1596 = HEAP32[$1595>>2]|0;
   $1597 = ((($1596)) + 548|0);
   $1598 = HEAP32[$1597>>2]|0;
   HEAP32[$87>>2] = $1598;
   $1599 = $5;
   $1600 = $18;
   $1601 = $19;
   $1602 = $6;
   $1603 = (_compileBrailleIndicator($1599,5853,19,$87,$1600,$1601,$1602)|0);
   $1604 = ($1603|0)!=(0);
   if ($1604) {
    $1605 = HEAP32[$87>>2]|0;
    $1606 = $6;
    $1607 = HEAP32[$1606>>2]|0;
    $1608 = ((($1607)) + 548|0);
    HEAP32[$1608>>2] = $1605;
    $4 = 1;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   } else {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   break;
  }
  case 278: {
   $1609 = $5;
   $1610 = (_getRuleCharsText($1609,$11)|0);
   $1611 = ($1610|0)!=(0);
   if (!($1611)) {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $1612 = $6;
   $1613 = HEAP32[$1612>>2]|0;
   $1614 = ((($1613)) + 2228|0);
   $1615 = HEAP32[$1614>>2]|0;
   $1616 = HEAP16[$11>>1]|0;
   $1617 = $1616&65535;
   $1618 = (($1615) + ($1617))|0;
   $1619 = ($1618|0)>(64);
   if ($1619) {
    $1620 = $5;
    HEAP32[$vararg_buffer105>>2] = 64;
    _compileError($1620,5775,$vararg_buffer105);
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $88 = 0;
   while(1) {
    $1621 = $88;
    $1622 = HEAP16[$11>>1]|0;
    $1623 = $1622&65535;
    $1624 = ($1621|0)<($1623|0);
    if (!($1624)) {
     break;
    }
    $1625 = $88;
    $1626 = ((($11)) + 2|0);
    $1627 = (($1626) + ($1625<<1)|0);
    $1628 = HEAP16[$1627>>1]|0;
    $1629 = $6;
    $1630 = HEAP32[$1629>>2]|0;
    $1631 = ((($1630)) + 2228|0);
    $1632 = HEAP32[$1631>>2]|0;
    $1633 = (($1632) + 1)|0;
    HEAP32[$1631>>2] = $1633;
    $1634 = $6;
    $1635 = HEAP32[$1634>>2]|0;
    $1636 = ((($1635)) + 2100|0);
    $1637 = (($1636) + ($1632<<1)|0);
    HEAP16[$1637>>1] = $1628;
    $1638 = $88;
    $1639 = (($1638) + 1)|0;
    $88 = $1639;
   }
   $4 = 1;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
   break;
  }
  case 286: {
   $1640 = $5;
   $1641 = (_getRuleCharsText($1640,$11)|0);
   $1642 = ($1641|0)!=(0);
   if (!($1642)) {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $1643 = $6;
   $1644 = HEAP32[$1643>>2]|0;
   $1645 = ((($1644)) + 2744|0);
   $1646 = HEAP32[$1645>>2]|0;
   $1647 = HEAP16[$11>>1]|0;
   $1648 = $1647&65535;
   $1649 = (($1646) + ($1648))|0;
   $1650 = ($1649|0)>(256);
   if ($1650) {
    $1651 = $5;
    HEAP32[$vararg_buffer108>>2] = 256;
    _compileError($1651,5775,$vararg_buffer108);
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $89 = 0;
   while(1) {
    $1652 = $89;
    $1653 = HEAP16[$11>>1]|0;
    $1654 = $1653&65535;
    $1655 = ($1652|0)<($1654|0);
    if (!($1655)) {
     break;
    }
    $1656 = $89;
    $1657 = ((($11)) + 2|0);
    $1658 = (($1657) + ($1656<<1)|0);
    $1659 = HEAP16[$1658>>1]|0;
    $1660 = $6;
    $1661 = HEAP32[$1660>>2]|0;
    $1662 = ((($1661)) + 2744|0);
    $1663 = HEAP32[$1662>>2]|0;
    $1664 = (($1663) + 1)|0;
    HEAP32[$1662>>2] = $1664;
    $1665 = $6;
    $1666 = HEAP32[$1665>>2]|0;
    $1667 = ((($1666)) + 2232|0);
    $1668 = (($1667) + ($1663<<1)|0);
    HEAP16[$1668>>1] = $1659;
    $1669 = $89;
    $1670 = (($1669) + 1)|0;
    $89 = $1670;
   }
   $4 = 1;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
   break;
  }
  case 294: {
   $1671 = $5;
   $1672 = (_getRuleCharsText($1671,$11)|0);
   $1673 = ($1672|0)!=(0);
   if (!($1673)) {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $1674 = $6;
   $1675 = HEAP32[$1674>>2]|0;
   $1676 = ((($1675)) + 2876|0);
   $1677 = HEAP32[$1676>>2]|0;
   $1678 = HEAP16[$11>>1]|0;
   $1679 = $1678&65535;
   $1680 = (($1677) + ($1679))|0;
   $1681 = ($1680|0)>(64);
   if ($1681) {
    $1682 = $5;
    HEAP32[$vararg_buffer111>>2] = 64;
    _compileError($1682,5775,$vararg_buffer111);
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $90 = 0;
   while(1) {
    $1683 = $90;
    $1684 = HEAP16[$11>>1]|0;
    $1685 = $1684&65535;
    $1686 = ($1683|0)<($1685|0);
    if (!($1686)) {
     break;
    }
    $1687 = $90;
    $1688 = ((($11)) + 2|0);
    $1689 = (($1688) + ($1687<<1)|0);
    $1690 = HEAP16[$1689>>1]|0;
    $1691 = $6;
    $1692 = HEAP32[$1691>>2]|0;
    $1693 = ((($1692)) + 2876|0);
    $1694 = HEAP32[$1693>>2]|0;
    $1695 = (($1694) + 1)|0;
    HEAP32[$1693>>2] = $1695;
    $1696 = $6;
    $1697 = HEAP32[$1696>>2]|0;
    $1698 = ((($1697)) + 2748|0);
    $1699 = (($1698) + ($1694<<1)|0);
    HEAP16[$1699>>1] = $1690;
    $1700 = $90;
    $1701 = (($1700) + 1)|0;
    $90 = $1701;
   }
   $4 = 1;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
   break;
  }
  case 302: {
   $1702 = $6;
   $1703 = HEAP32[$1702>>2]|0;
   $1704 = ((($1703)) + 552|0);
   $1705 = HEAP32[$1704>>2]|0;
   HEAP32[$91>>2] = $1705;
   $1706 = $5;
   $1707 = $18;
   $1708 = $19;
   $1709 = $6;
   $1710 = (_compileBrailleIndicator($1706,5865,23,$91,$1707,$1708,$1709)|0);
   $1711 = ($1710|0)!=(0);
   if ($1711) {
    $1712 = HEAP32[$91>>2]|0;
    $1713 = $6;
    $1714 = HEAP32[$1713>>2]|0;
    $1715 = ((($1714)) + 552|0);
    HEAP32[$1715>>2] = $1712;
    $4 = 1;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   } else {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   break;
  }
  case 305: {
   $1716 = $6;
   $1717 = HEAP32[$1716>>2]|0;
   $1718 = ((($1717)) + 560|0);
   $1719 = HEAP32[$1718>>2]|0;
   HEAP32[$92>>2] = $1719;
   $1720 = $5;
   $1721 = $18;
   $1722 = $19;
   $1723 = $6;
   $1724 = (_compileBrailleIndicator($1720,5877,24,$92,$1721,$1722,$1723)|0);
   $1725 = ($1724|0)!=(0);
   if ($1725) {
    $1726 = HEAP32[$92>>2]|0;
    $1727 = $6;
    $1728 = HEAP32[$1727>>2]|0;
    $1729 = ((($1728)) + 560|0);
    HEAP32[$1729>>2] = $1726;
    $4 = 1;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   } else {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   break;
  }
  case 308: {
   $1730 = $5;
   $1731 = (_getRuleCharsText($1730,$11)|0);
   $1732 = ($1731|0)!=(0);
   if (!($1732)) {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $93 = 0;
   while(1) {
    $1733 = $93;
    $1734 = HEAP16[$11>>1]|0;
    $1735 = $1734&65535;
    $1736 = ($1733|0)<($1735|0);
    if (!($1736)) {
     label = 315;
     break;
    }
    $1737 = $93;
    $1738 = ((($11)) + 2|0);
    $1739 = (($1738) + ($1737<<1)|0);
    $1740 = HEAP16[$1739>>1]|0;
    $1741 = $6;
    $1742 = HEAP32[$1741>>2]|0;
    $1743 = (_getChar($1740,$1742,0)|0);
    $94 = $1743;
    $1744 = $94;
    $1745 = ($1744|0)!=(0|0);
    if (!($1745)) {
     label = 313;
     break;
    }
    $1751 = $94;
    $1752 = ((($1751)) + 24|0);
    $1753 = $1752;
    $1754 = $1753;
    $1755 = HEAP32[$1754>>2]|0;
    $1756 = (($1753) + 4)|0;
    $1757 = $1756;
    $1758 = HEAP32[$1757>>2]|0;
    $1759 = $1755 | 2048;
    $1760 = $1752;
    $1761 = $1760;
    HEAP32[$1761>>2] = $1759;
    $1762 = (($1760) + 4)|0;
    $1763 = $1762;
    HEAP32[$1763>>2] = $1758;
    $1764 = $6;
    $1765 = HEAP32[$1764>>2]|0;
    $1766 = ((($1765)) + 536|0);
    HEAP32[$1766>>2] = 1;
    $1767 = $93;
    $1768 = (($1767) + 1)|0;
    $93 = $1768;
   }
   if ((label|0) == 313) {
    $1746 = $5;
    $1747 = $93;
    $1748 = ((($11)) + 2|0);
    $1749 = (($1748) + ($1747<<1)|0);
    $1750 = (__lou_showString($1749,1,0)|0);
    HEAP32[$vararg_buffer114>>2] = $1750;
    _compileError($1746,5892,$vararg_buffer114);
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   else if ((label|0) == 315) {
    $4 = 1;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   break;
  }
  case 316: {
   $1769 = $5;
   $1770 = (_getRuleCharsText($1769,$11)|0);
   $1771 = ($1770|0)!=(0);
   if (!($1771)) {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $95 = 0;
   while(1) {
    $1772 = $95;
    $1773 = HEAP16[$11>>1]|0;
    $1774 = $1773&65535;
    $1775 = ($1772|0)<($1774|0);
    if (!($1775)) {
     label = 323;
     break;
    }
    $1776 = $95;
    $1777 = ((($11)) + 2|0);
    $1778 = (($1777) + ($1776<<1)|0);
    $1779 = HEAP16[$1778>>1]|0;
    $1780 = $6;
    $1781 = HEAP32[$1780>>2]|0;
    $1782 = (_getChar($1779,$1781,0)|0);
    $96 = $1782;
    $1783 = $96;
    $1784 = ($1783|0)!=(0|0);
    if (!($1784)) {
     label = 321;
     break;
    }
    $1786 = $96;
    $1787 = ((($1786)) + 24|0);
    $1788 = $1787;
    $1789 = $1788;
    $1790 = HEAP32[$1789>>2]|0;
    $1791 = (($1788) + 4)|0;
    $1792 = $1791;
    $1793 = HEAP32[$1792>>2]|0;
    $1794 = $1790 | 67108864;
    $1795 = $1787;
    $1796 = $1795;
    HEAP32[$1796>>2] = $1794;
    $1797 = (($1795) + 4)|0;
    $1798 = $1797;
    HEAP32[$1798>>2] = $1793;
    $1799 = $6;
    $1800 = HEAP32[$1799>>2]|0;
    $1801 = ((($1800)) + 536|0);
    HEAP32[$1801>>2] = 1;
    $1802 = $95;
    $1803 = (($1802) + 1)|0;
    $95 = $1803;
   }
   if ((label|0) == 321) {
    $1785 = $5;
    _compileError($1785,5929,$vararg_buffer117);
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   else if ((label|0) == 323) {
    $4 = 1;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   break;
  }
  case 324: {
   $1804 = $5;
   $1805 = (_getRuleCharsText($1804,$11)|0);
   $1806 = ($1805|0)!=(0);
   if (!($1806)) {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $97 = 0;
   while(1) {
    $1807 = $97;
    $1808 = HEAP16[$11>>1]|0;
    $1809 = $1808&65535;
    $1810 = ($1807|0)<($1809|0);
    if (!($1810)) {
     label = 331;
     break;
    }
    $1811 = $97;
    $1812 = ((($11)) + 2|0);
    $1813 = (($1812) + ($1811<<1)|0);
    $1814 = HEAP16[$1813>>1]|0;
    $1815 = $6;
    $1816 = HEAP32[$1815>>2]|0;
    $1817 = (_getChar($1814,$1816,0)|0);
    $98 = $1817;
    $1818 = $98;
    $1819 = ($1818|0)!=(0|0);
    if (!($1819)) {
     label = 329;
     break;
    }
    $1821 = $98;
    $1822 = ((($1821)) + 24|0);
    $1823 = $1822;
    $1824 = $1823;
    $1825 = HEAP32[$1824>>2]|0;
    $1826 = (($1823) + 4)|0;
    $1827 = $1826;
    $1828 = HEAP32[$1827>>2]|0;
    $1829 = $1825 | 4096;
    $1830 = $1822;
    $1831 = $1830;
    HEAP32[$1831>>2] = $1829;
    $1832 = (($1830) + 4)|0;
    $1833 = $1832;
    HEAP32[$1833>>2] = $1828;
    $1834 = $6;
    $1835 = HEAP32[$1834>>2]|0;
    $1836 = ((($1835)) + 536|0);
    HEAP32[$1836>>2] = 1;
    $1837 = $97;
    $1838 = (($1837) + 1)|0;
    $97 = $1838;
   }
   if ((label|0) == 329) {
    $1820 = $5;
    _compileError($1820,5968,$vararg_buffer119);
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   else if ((label|0) == 331) {
    $4 = 1;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   break;
  }
  case 332: {
   $1839 = $6;
   $1840 = HEAP32[$1839>>2]|0;
   $1841 = ((($1840)) + 556|0);
   $1842 = HEAP32[$1841>>2]|0;
   HEAP32[$99>>2] = $1842;
   $1843 = $5;
   $1844 = $18;
   $1845 = $19;
   $1846 = $6;
   $1847 = (_compileBrailleIndicator($1843,6011,47,$99,$1844,$1845,$1846)|0);
   $1848 = ($1847|0)!=(0);
   if ($1848) {
    $1849 = HEAP32[$99>>2]|0;
    $1850 = $6;
    $1851 = HEAP32[$1850>>2]|0;
    $1852 = ((($1851)) + 556|0);
    HEAP32[$1852>>2] = $1849;
    $4 = 1;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   } else {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   break;
  }
  case 335: {
   $1853 = $5;
   $1854 = (_getRuleCharsText($1853,$11)|0);
   $1855 = ($1854|0)!=(0);
   if (!($1855)) {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $100 = 0;
   while(1) {
    $1856 = $100;
    $1857 = HEAP16[$11>>1]|0;
    $1858 = $1857&65535;
    $1859 = ($1856|0)<($1858|0);
    if (!($1859)) {
     label = 342;
     break;
    }
    $1860 = $100;
    $1861 = ((($11)) + 2|0);
    $1862 = (($1861) + ($1860<<1)|0);
    $1863 = HEAP16[$1862>>1]|0;
    $1864 = $6;
    $1865 = HEAP32[$1864>>2]|0;
    $1866 = (_getChar($1863,$1865,0)|0);
    $101 = $1866;
    $1867 = $101;
    $1868 = ($1867|0)!=(0|0);
    if (!($1868)) {
     label = 340;
     break;
    }
    $1870 = $101;
    $1871 = ((($1870)) + 24|0);
    $1872 = $1871;
    $1873 = $1872;
    $1874 = HEAP32[$1873>>2]|0;
    $1875 = (($1872) + 4)|0;
    $1876 = $1875;
    $1877 = HEAP32[$1876>>2]|0;
    $1878 = $1874 | 8192;
    $1879 = $1871;
    $1880 = $1879;
    HEAP32[$1880>>2] = $1878;
    $1881 = (($1879) + 4)|0;
    $1882 = $1881;
    HEAP32[$1882>>2] = $1877;
    $1883 = $6;
    $1884 = HEAP32[$1883>>2]|0;
    $1885 = ((($1884)) + 532|0);
    HEAP32[$1885>>2] = 1;
    $1886 = $100;
    $1887 = (($1886) + 1)|0;
    $100 = $1887;
   }
   if ((label|0) == 340) {
    $1869 = $5;
    _compileError($1869,6032,$vararg_buffer121);
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   else if ((label|0) == 342) {
    $4 = 1;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   break;
  }
  case 343: {
   $1888 = $5;
   $1889 = (_getRuleCharsText($1888,$11)|0);
   $1890 = ($1889|0)!=(0);
   if (!($1890)) {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $102 = 0;
   while(1) {
    $1891 = $102;
    $1892 = HEAP16[$11>>1]|0;
    $1893 = $1892&65535;
    $1894 = ($1891|0)<($1893|0);
    if (!($1894)) {
     label = 350;
     break;
    }
    $1895 = $102;
    $1896 = ((($11)) + 2|0);
    $1897 = (($1896) + ($1895<<1)|0);
    $1898 = HEAP16[$1897>>1]|0;
    $1899 = $6;
    $1900 = HEAP32[$1899>>2]|0;
    $1901 = (_getChar($1898,$1900,0)|0);
    $103 = $1901;
    $1902 = $103;
    $1903 = ($1902|0)!=(0|0);
    if (!($1903)) {
     label = 348;
     break;
    }
    $1905 = $103;
    $1906 = ((($1905)) + 24|0);
    $1907 = $1906;
    $1908 = $1907;
    $1909 = HEAP32[$1908>>2]|0;
    $1910 = (($1907) + 4)|0;
    $1911 = $1910;
    $1912 = HEAP32[$1911>>2]|0;
    $1913 = $1909 | 16384;
    $1914 = $1906;
    $1915 = $1914;
    HEAP32[$1915>>2] = $1913;
    $1916 = (($1914) + 4)|0;
    $1917 = $1916;
    HEAP32[$1917>>2] = $1912;
    $1918 = $102;
    $1919 = (($1918) + 1)|0;
    $102 = $1919;
   }
   if ((label|0) == 348) {
    $1904 = $5;
    _compileError($1904,6071,$vararg_buffer123);
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   else if ((label|0) == 350) {
    $4 = 1;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   break;
  }
  case 351: {
   $1920 = $5;
   $1921 = (_getRuleCharsText($1920,$11)|0);
   $1922 = ($1921|0)!=(0);
   if (!($1922)) {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $104 = 0;
   while(1) {
    $1923 = $104;
    $1924 = HEAP16[$11>>1]|0;
    $1925 = $1924&65535;
    $1926 = ($1923|0)<($1925|0);
    if (!($1926)) {
     label = 358;
     break;
    }
    $1927 = $104;
    $1928 = ((($11)) + 2|0);
    $1929 = (($1928) + ($1927<<1)|0);
    $1930 = HEAP16[$1929>>1]|0;
    $1931 = $6;
    $1932 = HEAP32[$1931>>2]|0;
    $1933 = (_getChar($1930,$1932,0)|0);
    $105 = $1933;
    $1934 = $105;
    $1935 = ($1934|0)!=(0|0);
    if (!($1935)) {
     label = 356;
     break;
    }
    $1937 = $105;
    $1938 = ((($1937)) + 24|0);
    $1939 = $1938;
    $1940 = $1939;
    $1941 = HEAP32[$1940>>2]|0;
    $1942 = (($1939) + 4)|0;
    $1943 = $1942;
    $1944 = HEAP32[$1943>>2]|0;
    $1945 = $1941 | 32768;
    $1946 = $1938;
    $1947 = $1946;
    HEAP32[$1947>>2] = $1945;
    $1948 = (($1946) + 4)|0;
    $1949 = $1948;
    HEAP32[$1949>>2] = $1944;
    $1950 = $104;
    $1951 = (($1950) + 1)|0;
    $104 = $1951;
   }
   if ((label|0) == 356) {
    $1936 = $5;
    _compileError($1936,6107,$vararg_buffer125);
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   else if ((label|0) == 358) {
    $4 = 1;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   break;
  }
  case 359: {
   $1952 = $5;
   $1953 = (_getRuleCharsText($1952,$11)|0);
   $1954 = ($1953|0)!=(0);
   if (!($1954)) {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $1955 = $6;
   $1956 = HEAP32[$1955>>2]|0;
   $1957 = ((($1956)) + 1248|0);
   $1958 = HEAP32[$1957>>2]|0;
   $1959 = HEAP16[$11>>1]|0;
   $1960 = $1959&65535;
   $1961 = (($1958) + ($1960))|0;
   $1962 = (($1961) + 1)|0;
   $1963 = ($1962|0)>(128);
   if ($1963) {
    $1964 = $5;
    HEAP32[$vararg_buffer127>>2] = 128;
    _compileError($1964,5775,$vararg_buffer127);
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $106 = 0;
   while(1) {
    $1965 = $106;
    $1966 = HEAP16[$11>>1]|0;
    $1967 = $1966&65535;
    $1968 = ($1965|0)<($1967|0);
    if (!($1968)) {
     break;
    }
    $1969 = $106;
    $1970 = ((($11)) + 2|0);
    $1971 = (($1970) + ($1969<<1)|0);
    $1972 = HEAP16[$1971>>1]|0;
    $1973 = $6;
    $1974 = HEAP32[$1973>>2]|0;
    $1975 = ((($1974)) + 1248|0);
    $1976 = HEAP32[$1975>>2]|0;
    $1977 = (($1976) + 1)|0;
    HEAP32[$1975>>2] = $1977;
    $1978 = $6;
    $1979 = HEAP32[$1978>>2]|0;
    $1980 = ((($1979)) + 564|0);
    $1981 = (($1980) + ($1976<<1)|0);
    HEAP16[$1981>>1] = $1972;
    $1982 = $106;
    $1983 = (($1982) + 1)|0;
    $106 = $1983;
   }
   $1984 = $6;
   $1985 = HEAP32[$1984>>2]|0;
   $1986 = ((($1985)) + 1248|0);
   $1987 = HEAP32[$1986>>2]|0;
   $1988 = (($1987) + 1)|0;
   HEAP32[$1986>>2] = $1988;
   $1989 = $6;
   $1990 = HEAP32[$1989>>2]|0;
   $1991 = ((($1990)) + 564|0);
   $1992 = (($1991) + ($1987<<1)|0);
   HEAP16[$1992>>1] = 0;
   $4 = 1;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
   break;
  }
  case 367: {
   $1993 = $5;
   $1994 = (_getRuleCharsText($1993,$11)|0);
   $1995 = ($1994|0)!=(0);
   if (!($1995)) {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $1996 = HEAP16[$11>>1]|0;
   $1997 = $1996&65535;
   $1998 = (($1997) + 1)|0;
   $1999 = ($1998|0)>(128);
   if ($1999) {
    $2000 = $5;
    HEAP32[$vararg_buffer130>>2] = 128;
    _compileError($2000,5775,$vararg_buffer130);
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $107 = 0;
   while(1) {
    $2001 = $107;
    $2002 = HEAP16[$11>>1]|0;
    $2003 = $2002&65535;
    $2004 = ($2001|0)<($2003|0);
    if (!($2004)) {
     break;
    }
    $2005 = $107;
    $2006 = ((($11)) + 2|0);
    $2007 = (($2006) + ($2005<<1)|0);
    $2008 = HEAP16[$2007>>1]|0;
    $2009 = $107;
    $2010 = $6;
    $2011 = HEAP32[$2010>>2]|0;
    $2012 = ((($2011)) + 1252|0);
    $2013 = (($2012) + ($2009<<1)|0);
    HEAP16[$2013>>1] = $2008;
    $2014 = $107;
    $2015 = (($2014) + 1)|0;
    $107 = $2015;
   }
   $2016 = HEAP16[$11>>1]|0;
   $2017 = $2016&65535;
   $2018 = $6;
   $2019 = HEAP32[$2018>>2]|0;
   $2020 = ((($2019)) + 1252|0);
   $2021 = (($2020) + ($2017<<1)|0);
   HEAP16[$2021>>1] = 0;
   $2022 = HEAP16[$11>>1]|0;
   $2023 = $2022&65535;
   $2024 = $6;
   $2025 = HEAP32[$2024>>2]|0;
   $2026 = ((($2025)) + 1508|0);
   HEAP32[$2026>>2] = $2023;
   $4 = 1;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
   break;
  }
  case 375: {
   $2027 = $5;
   $2028 = (_getRuleCharsText($2027,$11)|0);
   $2029 = ($2028|0)!=(0);
   if (!($2029)) {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $108 = 0;
   while(1) {
    $2030 = $108;
    $2031 = HEAP16[$11>>1]|0;
    $2032 = $2031&65535;
    $2033 = ($2030|0)<($2032|0);
    if (!($2033)) {
     label = 382;
     break;
    }
    $2034 = $108;
    $2035 = ((($11)) + 2|0);
    $2036 = (($2035) + ($2034<<1)|0);
    $2037 = HEAP16[$2036>>1]|0;
    $2038 = $6;
    $2039 = HEAP32[$2038>>2]|0;
    $2040 = (_getChar($2037,$2039,0)|0);
    $109 = $2040;
    $2041 = $109;
    $2042 = ($2041|0)!=(0|0);
    if (!($2042)) {
     label = 380;
     break;
    }
    $2044 = $109;
    $2045 = ((($2044)) + 24|0);
    $2046 = $2045;
    $2047 = $2046;
    $2048 = HEAP32[$2047>>2]|0;
    $2049 = (($2046) + 4)|0;
    $2050 = $2049;
    $2051 = HEAP32[$2050>>2]|0;
    $2052 = $2048 | 512;
    $2053 = $2045;
    $2054 = $2053;
    HEAP32[$2054>>2] = $2052;
    $2055 = (($2053) + 4)|0;
    $2056 = $2055;
    HEAP32[$2056>>2] = $2051;
    $2057 = $6;
    $2058 = HEAP32[$2057>>2]|0;
    $2059 = ((($2058)) + 540|0);
    HEAP32[$2059>>2] = 1;
    $2060 = $108;
    $2061 = (($2060) + 1)|0;
    $108 = $2061;
   }
   if ((label|0) == 380) {
    $2043 = $5;
    _compileError($2043,6142,$vararg_buffer133);
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   else if ((label|0) == 382) {
    $4 = 1;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   break;
  }
  case 383: {
   $2062 = $6;
   $2063 = HEAP32[$2062>>2]|0;
   $2064 = ((($2063)) + 2088|0);
   $2065 = HEAP32[$2064>>2]|0;
   HEAP32[$110>>2] = $2065;
   $2066 = $5;
   $2067 = $18;
   $2068 = $19;
   $2069 = $6;
   $2070 = (_compileBrailleIndicator($2066,6175,45,$110,$2067,$2068,$2069)|0);
   $2071 = ($2070|0)!=(0);
   if ($2071) {
    $2072 = HEAP32[$110>>2]|0;
    $2073 = $6;
    $2074 = HEAP32[$2073>>2]|0;
    $2075 = ((($2074)) + 2088|0);
    HEAP32[$2075>>2] = $2072;
    $4 = 1;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   } else {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   break;
  }
  case 386: {
   $2076 = $6;
   $2077 = HEAP32[$2076>>2]|0;
   $2078 = ((($2077)) + 2092|0);
   $2079 = HEAP32[$2078>>2]|0;
   HEAP32[$111>>2] = $2079;
   $2080 = $5;
   $2081 = $18;
   $2082 = $19;
   $2083 = $6;
   $2084 = (_compileBrailleIndicator($2080,6198,46,$111,$2081,$2082,$2083)|0);
   $2085 = ($2084|0)!=(0);
   if ($2085) {
    $2086 = HEAP32[$111>>2]|0;
    $2087 = $6;
    $2088 = HEAP32[$2087>>2]|0;
    $2089 = ((($2088)) + 2092|0);
    HEAP32[$2089>>2] = $2086;
    $4 = 1;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   } else {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   break;
  }
  case 390: {
   $2092 = $5;
   $2093 = (__lou_findOpcodeName(85)|0);
   HEAP32[$vararg_buffer135>>2] = $2093;
   _compileError($2092,4182,$vararg_buffer135);
   $4 = 0;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
   break;
  }
  case 392: {
   $2094 = $6;
   $2095 = HEAP32[$2094>>2]|0;
   $2096 = ((($2095)) + 528|0);
   HEAP32[$2096>>2] = 1;
   label = 393;
   break;
  }
  case 410: {
   $2157 = $5;
   $2158 = (_getRuleCharsText($2157,$11)|0);
   $2159 = ($2158|0)!=(0);
   if (!($2159)) {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $2160 = $5;
   $2161 = (_getToken($2160,$115,6247)|0);
   $2162 = ($2161|0)!=(0);
   if (!($2162)) {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $2163 = HEAP16[$115>>1]|0;
   $2164 = $2163&65535;
   $116 = $2164;
   $117 = 0;
   while(1) {
    $2165 = $117;
    $2166 = $116;
    $2167 = (($2166) - 1)|0;
    $2168 = ($2165|0)<($2167|0);
    if (!($2168)) {
     label = 437;
     break;
    }
    $2169 = $117;
    $2170 = ((($115)) + 2|0);
    $2171 = (($2170) + ($2169<<1)|0);
    $2172 = HEAP16[$2171>>1]|0;
    $2173 = $2172&65535;
    $2174 = ($2173|0)==(44);
    $2175 = $117;
    if ($2174) {
     break;
    }
    $2274 = (($2175) + 1)|0;
    $117 = $2274;
   }
   if ((label|0) == 437) {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $2176 = $2175&65535;
   HEAP16[$115>>1] = $2176;
   $2177 = $5;
   $2178 = (_parseDots($2177,$12,$115)|0);
   $2179 = ($2178|0)!=(0);
   if (!($2179)) {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $2180 = HEAP16[$12>>1]|0;
   $2181 = (($2180) + 1)<<16>>16;
   HEAP16[$12>>1] = $2181;
   $2182 = $2180&65535;
   $2183 = ((($12)) + 2|0);
   $2184 = (($2183) + ($2182<<1)|0);
   HEAP16[$2184>>1] = 44;
   $2185 = $117;
   $2186 = (($2185) + 1)|0;
   $117 = $2186;
   $2187 = $117;
   $2188 = $116;
   $2189 = (($2188) - 1)|0;
   $2190 = ($2187|0)==($2189|0);
   L552: do {
    if ($2190) {
     $2191 = $117;
     $2192 = ((($115)) + 2|0);
     $2193 = (($2192) + ($2191<<1)|0);
     $2194 = HEAP16[$2193>>1]|0;
     $2195 = $2194&65535;
     $2196 = ($2195|0)==(61);
     if ($2196) {
      $118 = 0;
      while(1) {
       $2197 = $118;
       $2198 = HEAP16[$11>>1]|0;
       $2199 = $2198&65535;
       $2200 = ($2197|0)<($2199|0);
       if (!($2200)) {
        break L552;
       }
       $2201 = $118;
       $2202 = ((($11)) + 2|0);
       $2203 = (($2202) + ($2201<<1)|0);
       $2204 = HEAP16[$2203>>1]|0;
       $2205 = $6;
       $2206 = HEAP32[$2205>>2]|0;
       $2207 = (_getChar($2204,$2206,0)|0);
       $119 = $2207;
       $2208 = $119;
       $2209 = ($2208|0)!=(0|0);
       if (!($2209)) {
        break;
       }
       $2210 = $119;
       $2211 = ((($2210)) + 12|0);
       $2212 = HEAP32[$2211>>2]|0;
       $2213 = ($2212|0)!=(0);
       if (!($2213)) {
        $2214 = $119;
        $2215 = ((($2214)) + 48|0);
        $2216 = HEAP32[$2215>>2]|0;
        $2217 = ($2216|0)!=(0);
        if (!($2217)) {
         break;
        }
       }
       $2223 = $118;
       $2224 = (($2223) + 1)|0;
       $118 = $2224;
      }
      $2218 = $5;
      $2219 = $118;
      $2220 = ((($11)) + 2|0);
      $2221 = (($2220) + ($2219<<1)|0);
      $2222 = (__lou_showString($2221,1,0)|0);
      HEAP32[$vararg_buffer141>>2] = $2222;
      _compileError($2218,6219,$vararg_buffer141);
      $4 = 0;
      $3143 = $4;
      STACKTOP = sp;return ($3143|0);
     } else {
      label = 428;
     }
    } else {
     label = 428;
    }
   } while(0);
   L564: do {
    if ((label|0) == 428) {
     HEAP16[$120>>1] = 0;
     while(1) {
      $2225 = $117;
      $2226 = $116;
      $2227 = ($2225|0)<($2226|0);
      if (!($2227)) {
       break;
      }
      $2228 = $117;
      $2229 = (($2228) + 1)|0;
      $117 = $2229;
      $2230 = ((($115)) + 2|0);
      $2231 = (($2230) + ($2228<<1)|0);
      $2232 = HEAP16[$2231>>1]|0;
      $2233 = HEAP16[$120>>1]|0;
      $2234 = (($2233) + 1)<<16>>16;
      HEAP16[$120>>1] = $2234;
      $2235 = $2233&65535;
      $2236 = ((($120)) + 2|0);
      $2237 = (($2236) + ($2235<<1)|0);
      HEAP16[$2237>>1] = $2232;
     }
     $2238 = $5;
     $2239 = (_parseDots($2238,$121,$120)|0);
     $2240 = ($2239|0)!=(0);
     if ($2240) {
      $122 = 0;
      while(1) {
       $2241 = $122;
       $2242 = HEAP16[$121>>1]|0;
       $2243 = $2242&65535;
       $2244 = ($2241|0)<($2243|0);
       if (!($2244)) {
        break L564;
       }
       $2245 = $122;
       $2246 = ((($121)) + 2|0);
       $2247 = (($2246) + ($2245<<1)|0);
       $2248 = HEAP16[$2247>>1]|0;
       $2249 = HEAP16[$12>>1]|0;
       $2250 = (($2249) + 1)<<16>>16;
       HEAP16[$12>>1] = $2250;
       $2251 = $2249&65535;
       $2252 = ((($12)) + 2|0);
       $2253 = (($2252) + ($2251<<1)|0);
       HEAP16[$2253>>1] = $2248;
       $2254 = $122;
       $2255 = (($2254) + 1)|0;
       $122 = $2255;
      }
     }
    }
   } while(0);
   $2256 = $5;
   $2257 = $10;
   $2258 = $16;
   $2259 = $2258;
   $2260 = HEAP32[$2259>>2]|0;
   $2261 = (($2258) + 4)|0;
   $2262 = $2261;
   $2263 = HEAP32[$2262>>2]|0;
   $2264 = $17;
   $2265 = $2264;
   $2266 = HEAP32[$2265>>2]|0;
   $2267 = (($2264) + 4)|0;
   $2268 = $2267;
   $2269 = HEAP32[$2268>>2]|0;
   $2270 = $18;
   $2271 = $19;
   $2272 = $6;
   $2273 = (_addRule($2256,$2257,$11,$12,$2260,$2263,$2266,$2269,0,0,$2270,$2271,$2272)|0);
   $4 = $2273;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
   break;
  }
  case 438: {
   $2275 = $5;
   $2276 = (_getRuleCharsText($2275,$11)|0);
   $2277 = ($2276|0)!=(0);
   if (!($2277)) {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $2278 = HEAP16[$11>>1]|0;
   $2279 = $2278&65535;
   $2280 = ($2279|0)!=(1);
   if ($2280) {
    $2281 = $5;
    _compileError($2281,6265,$vararg_buffer144);
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $2282 = $19;
   $2283 = ($2282|0)!=(0);
   $2284 = $18;
   $2285 = ($2284|0)!=(0);
   $or$cond11 = $2283 | $2285;
   if ($or$cond11) {
    $2286 = $5;
    _compileWarning($2286,6299,$vararg_buffer146);
   }
   $2287 = $5;
   $2288 = (_getRuleDotsPattern($2287,$12)|0);
   $2289 = ($2288|0)!=(0);
   if (!($2289)) {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $2290 = $5;
   $2291 = $10;
   $2292 = $16;
   $2293 = $2292;
   $2294 = HEAP32[$2293>>2]|0;
   $2295 = (($2292) + 4)|0;
   $2296 = $2295;
   $2297 = HEAP32[$2296>>2]|0;
   $2298 = $17;
   $2299 = $2298;
   $2300 = HEAP32[$2299>>2]|0;
   $2301 = (($2298) + 4)|0;
   $2302 = $2301;
   $2303 = HEAP32[$2302>>2]|0;
   $2304 = $18;
   $2305 = $19;
   $2306 = $6;
   $2307 = (_addRule($2290,$2291,$11,$12,$2294,$2297,$2300,$2303,$123,0,$2304,$2305,$2306)|0);
   $2308 = ($2307|0)!=(0);
   if ($2308) {
    $4 = 1;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   } else {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   break;
  }
  case 449: {
   $2309 = $5;
   $2310 = (_getRuleCharsText($2309,$11)|0);
   $2311 = ($2310|0)!=(0);
   if (!($2311)) {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $2312 = ((($11)) + 2|0);
   $2313 = HEAP16[$2312>>1]|0;
   $2314 = $2313&65535;
   $2315 = ($2314|0)!=(64);
   if ($2315) {
    $2316 = $5;
    _compileError($2316,6343,$vararg_buffer148);
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $124 = 1;
   while(1) {
    $2317 = $124;
    $2318 = HEAP16[$11>>1]|0;
    $2319 = $2318&65535;
    $2320 = ($2317|0)<($2319|0);
    if (!($2320)) {
     break;
    }
    $2321 = $124;
    $2322 = ((($11)) + 2|0);
    $2323 = (($2322) + ($2321<<1)|0);
    $2324 = HEAP16[$2323>>1]|0;
    $2325 = $124;
    $2326 = (($2325) - 1)|0;
    $2327 = ((($14)) + 2|0);
    $2328 = (($2327) + ($2326<<1)|0);
    HEAP16[$2328>>1] = $2324;
    $2329 = $124;
    $2330 = (($2329) + 1)|0;
    $124 = $2330;
   }
   $2331 = HEAP16[$11>>1]|0;
   $2332 = $2331&65535;
   $2333 = (($2332) - 1)|0;
   $2334 = $2333&65535;
   HEAP16[$14>>1] = $2334;
   $2335 = $5;
   $2336 = (_parseDots($2335,$12,$14)|0);
   $2337 = ($2336|0)!=(0);
   if ($2337) {
    $2338 = $5;
    $2339 = $10;
    $2340 = $17;
    $2341 = $2340;
    $2342 = HEAP32[$2341>>2]|0;
    $2343 = (($2340) + 4)|0;
    $2344 = $2343;
    $2345 = HEAP32[$2344>>2]|0;
    $2346 = $16;
    $2347 = $2346;
    $2348 = HEAP32[$2347>>2]|0;
    $2349 = (($2346) + 4)|0;
    $2350 = $2349;
    $2351 = HEAP32[$2350>>2]|0;
    $2352 = $18;
    $2353 = $19;
    $2354 = $6;
    $2355 = (_addRule($2338,$2339,$11,$12,$2342,$2345,$2348,$2351,0,0,$2352,$2353,$2354)|0);
    $4 = $2355;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   } else {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   break;
  }
  case 459: {
   HEAP16[$11>>1] = 1;
   $2356 = ((($11)) + 2|0);
   HEAP16[$2356>>1] = 97;
   $2357 = $5;
   $2358 = $10;
   $2359 = $16;
   $2360 = $2359;
   $2361 = HEAP32[$2360>>2]|0;
   $2362 = (($2359) + 4)|0;
   $2363 = $2362;
   $2364 = HEAP32[$2363>>2]|0;
   $2365 = $17;
   $2366 = $2365;
   $2367 = HEAP32[$2366>>2]|0;
   $2368 = (($2365) + 4)|0;
   $2369 = $2368;
   $2370 = HEAP32[$2369>>2]|0;
   $2371 = $18;
   $2372 = $19;
   $2373 = $6;
   $2374 = (_addRule($2357,$2358,$11,0,$2361,$2364,$2367,$2370,$125,0,$2371,$2372,$2373)|0);
   $2375 = ($2374|0)!=(0);
   if ($2375) {
    $2376 = HEAP32[$125>>2]|0;
    $2377 = $6;
    $2378 = HEAP32[$2377>>2]|0;
    $2379 = ((($2378)) + 516|0);
    HEAP32[$2379>>2] = $2376;
    $4 = 1;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   } else {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   break;
  }
  case 462: {
   $2380 = $5;
   $2381 = (_getRuleCharsText($2380,$11)|0);
   $2382 = ($2381|0)!=(0);
   do {
    if ($2382) {
     $2383 = $5;
     $2384 = (_atEndOfLine($2383)|0);
     $2385 = ($2384|0)!=(0);
     if ($2385) {
      $2386 = ((($12)) + 2|0);
      HEAP16[$2386>>1] = 0;
      HEAP16[$12>>1] = 0;
      break;
     }
     $2387 = $5;
     (_getRuleDotsText($2387,$12)|0);
     $2388 = ((($12)) + 2|0);
     $2389 = HEAP16[$2388>>1]|0;
     $2390 = $2389&65535;
     $2391 = ($2390|0)==(35);
     $2392 = ((($12)) + 2|0);
     if ($2391) {
      HEAP16[$2392>>1] = 0;
      HEAP16[$12>>1] = 0;
      break;
     }
     $2393 = HEAP16[$2392>>1]|0;
     $2394 = $2393&65535;
     $2395 = ($2394|0)==(92);
     if ($2395) {
      $2396 = ((($12)) + 2|0);
      $2397 = ((($2396)) + 2|0);
      $2398 = HEAP16[$2397>>1]|0;
      $2399 = $2398&65535;
      $2400 = ($2399|0)==(35);
      if ($2400) {
       $2401 = ((($12)) + 2|0);
       $2402 = ((($12)) + 2|0);
       $2403 = ((($2402)) + 2|0);
       $2404 = HEAP16[$12>>1]|0;
       $2405 = (($2404) + -1)<<16>>16;
       HEAP16[$12>>1] = $2405;
       $2406 = $2404&65535;
       $2407 = $2406<<1;
       _memmove(($2401|0),($2403|0),($2407|0))|0;
      }
     }
    }
   } while(0);
   $126 = 0;
   while(1) {
    $2408 = $126;
    $2409 = HEAP16[$11>>1]|0;
    $2410 = $2409&65535;
    $2411 = ($2408|0)<($2410|0);
    if (!($2411)) {
     break;
    }
    $2412 = $5;
    $2413 = $126;
    $2414 = ((($11)) + 2|0);
    $2415 = (($2414) + ($2413<<1)|0);
    $2416 = HEAP16[$2415>>1]|0;
    $2417 = $6;
    (_putChar($2412,$2416,$2417,0)|0);
    $2418 = $126;
    $2419 = (($2418) + 1)|0;
    $126 = $2419;
   }
   $127 = 0;
   while(1) {
    $2420 = $127;
    $2421 = HEAP16[$12>>1]|0;
    $2422 = $2421&65535;
    $2423 = ($2420|0)<($2422|0);
    $2424 = $5;
    if (!($2423)) {
     break;
    }
    $2425 = $127;
    $2426 = ((($12)) + 2|0);
    $2427 = (($2426) + ($2425<<1)|0);
    $2428 = HEAP16[$2427>>1]|0;
    $2429 = $6;
    (_putChar($2424,$2428,$2429,0)|0);
    $2430 = $127;
    $2431 = (($2430) + 1)|0;
    $127 = $2431;
   }
   $2432 = $10;
   $2433 = $16;
   $2434 = $2433;
   $2435 = HEAP32[$2434>>2]|0;
   $2436 = (($2433) + 4)|0;
   $2437 = $2436;
   $2438 = HEAP32[$2437>>2]|0;
   $2439 = $17;
   $2440 = $2439;
   $2441 = HEAP32[$2440>>2]|0;
   $2442 = (($2439) + 4)|0;
   $2443 = $2442;
   $2444 = HEAP32[$2443>>2]|0;
   $2445 = $18;
   $2446 = $19;
   $2447 = $6;
   $2448 = (_addRule($2424,$2432,$11,$12,$2435,$2438,$2441,$2444,0,0,$2445,$2446,$2447)|0);
   $4 = $2448;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
   break;
  }
  case 477: {
   $2449 = $6;
   $2450 = HEAP32[$2449>>2]|0;
   $2451 = ((($2450)) + 524|0);
   HEAP32[$2451>>2] = 1;
   label = 484;
   break;
  }
  case 478: {
   $2452 = $6;
   $2453 = HEAP32[$2452>>2]|0;
   $2454 = ((($2453)) + 520|0);
   $2455 = HEAP32[$2454>>2]|0;
   $2456 = ($2455|0)<(2);
   if ($2456) {
    $2457 = $6;
    $2458 = HEAP32[$2457>>2]|0;
    $2459 = ((($2458)) + 520|0);
    HEAP32[$2459>>2] = 2;
    label = 484;
   } else {
    label = 484;
   }
   break;
  }
  case 480: {
   $2460 = $6;
   $2461 = HEAP32[$2460>>2]|0;
   $2462 = ((($2461)) + 520|0);
   $2463 = HEAP32[$2462>>2]|0;
   $2464 = ($2463|0)<(3);
   if ($2464) {
    $2465 = $6;
    $2466 = HEAP32[$2465>>2]|0;
    $2467 = ((($2466)) + 520|0);
    HEAP32[$2467>>2] = 3;
    label = 484;
   } else {
    label = 484;
   }
   break;
  }
  case 482: {
   $2468 = $6;
   $2469 = HEAP32[$2468>>2]|0;
   $2470 = ((($2469)) + 520|0);
   $2471 = HEAP32[$2470>>2]|0;
   $2472 = ($2471|0)<(4);
   if ($2472) {
    $2473 = $6;
    $2474 = HEAP32[$2473>>2]|0;
    $2475 = ((($2474)) + 520|0);
    HEAP32[$2475>>2] = 4;
    label = 484;
   } else {
    label = 484;
   }
   break;
  }
  case 487: {
   $2488 = $5;
   $2489 = (_getRuleCharsText($2488,$11)|0);
   $2490 = ($2489|0)!=(0);
   if (!($2490)) {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $128 = 0;
   while(1) {
    $2491 = $128;
    $2492 = HEAP16[$11>>1]|0;
    $2493 = $2492&65535;
    $2494 = ($2491|0)<($2493|0);
    if (!($2494)) {
     label = 496;
     break;
    }
    $2495 = $128;
    $2496 = ((($11)) + 2|0);
    $2497 = (($2496) + ($2495<<1)|0);
    $2498 = HEAP16[$2497>>1]|0;
    $2499 = $6;
    $2500 = HEAP32[$2499>>2]|0;
    $2501 = (_getChar($2498,$2500,0)|0);
    $129 = $2501;
    $2502 = $129;
    $2503 = ($2502|0)!=(0|0);
    if (!($2503)) {
     label = 494;
     break;
    }
    $2504 = $129;
    $2505 = ((($2504)) + 12|0);
    $2506 = HEAP32[$2505>>2]|0;
    $2507 = ($2506|0)!=(0);
    if (!($2507)) {
     $2508 = $129;
     $2509 = ((($2508)) + 48|0);
     $2510 = HEAP32[$2509>>2]|0;
     $2511 = ($2510|0)!=(0);
     if (!($2511)) {
      label = 494;
      break;
     }
    }
    $2517 = $128;
    $2518 = (($2517) + 1)|0;
    $128 = $2518;
   }
   if ((label|0) == 494) {
    $2512 = $5;
    $2513 = $128;
    $2514 = ((($11)) + 2|0);
    $2515 = (($2514) + ($2513<<1)|0);
    $2516 = (__lou_showString($2515,1,0)|0);
    HEAP32[$vararg_buffer154>>2] = $2516;
    _compileError($2512,6219,$vararg_buffer154);
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   else if ((label|0) == 496) {
    $2519 = $5;
    $2520 = $10;
    $2521 = $16;
    $2522 = $2521;
    $2523 = HEAP32[$2522>>2]|0;
    $2524 = (($2521) + 4)|0;
    $2525 = $2524;
    $2526 = HEAP32[$2525>>2]|0;
    $2527 = $17;
    $2528 = $2527;
    $2529 = HEAP32[$2528>>2]|0;
    $2530 = (($2527) + 4)|0;
    $2531 = $2530;
    $2532 = HEAP32[$2531>>2]|0;
    $2533 = $18;
    $2534 = $19;
    $2535 = $6;
    $2536 = (_addRule($2519,$2520,$11,0,$2523,$2526,$2529,$2532,0,0,$2533,$2534,$2535)|0);
    $4 = $2536;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   break;
  }
  case 497: {
   HEAP16[$11>>1] = 0;
   $2537 = $5;
   $2538 = (_getToken($2537,$9,6414)|0);
   $2539 = ($2538|0)!=(0);
   if ($2539) {
    $2540 = $5;
    $2541 = (_parseDots($2540,$13,$9)|0);
    $2542 = ($2541|0)!=(0);
    if ($2542) {
     while(1) {
      $2543 = $5;
      $2544 = (_getToken($2543,$9,6442)|0);
      $2545 = ($2544|0)!=(0);
      if (!($2545)) {
       label = 506;
       break;
      }
      $2546 = $5;
      $2547 = (_getOpcode($2546,$9)|0);
      $10 = $2547;
      $2548 = $10;
      $2549 = ($2548|0)==(117);
      if ($2549) {
       label = 502;
       break;
      }
      $2555 = $10;
      $2556 = ($2555>>>0)>=(3);
      $2557 = $10;
      $2558 = ($2557>>>0)<(48);
      $or$cond15 = $2556 & $2558;
      if (!($or$cond15)) {
       label = 504;
       break;
      }
      $2560 = $10;
      $2561 = $2560&65535;
      $2562 = HEAP16[$11>>1]|0;
      $2563 = (($2562) + 1)<<16>>16;
      HEAP16[$11>>1] = $2563;
      $2564 = $2562&65535;
      $2565 = ((($11)) + 2|0);
      $2566 = (($2565) + ($2564<<1)|0);
      HEAP16[$2566>>1] = $2561;
      $2567 = $5;
      $2568 = (_atEndOfLine($2567)|0);
      $2569 = ($2568|0)!=(0);
      if ($2569) {
       label = 506;
       break;
      }
     }
     if ((label|0) == 502) {
      $2550 = $5;
      $2551 = ((($9)) + 2|0);
      $2552 = HEAP16[$9>>1]|0;
      $2553 = $2552&65535;
      $2554 = (__lou_showString($2551,$2553,0)|0);
      HEAP32[$vararg_buffer157>>2] = $2554;
      _compileError($2550,4450,$vararg_buffer157);
      $4 = 0;
      $3143 = $4;
      STACKTOP = sp;return ($3143|0);
     }
     else if ((label|0) == 504) {
      $2559 = $5;
      _compileError($2559,6458,$vararg_buffer160);
      $4 = 0;
      $3143 = $4;
      STACKTOP = sp;return ($3143|0);
     }
     else if ((label|0) == 506) {
      $2570 = $5;
      $2571 = $16;
      $2572 = $2571;
      $2573 = HEAP32[$2572>>2]|0;
      $2574 = (($2571) + 4)|0;
      $2575 = $2574;
      $2576 = HEAP32[$2575>>2]|0;
      $2577 = $17;
      $2578 = $2577;
      $2579 = HEAP32[$2578>>2]|0;
      $2580 = (($2577) + 4)|0;
      $2581 = $2580;
      $2582 = HEAP32[$2581>>2]|0;
      $2583 = $18;
      $2584 = $19;
      $2585 = $6;
      $2586 = (_addRule($2570,48,$11,$13,$2573,$2576,$2579,$2582,0,0,$2583,$2584,$2585)|0);
      $4 = $2586;
      $3143 = $4;
      STACKTOP = sp;return ($3143|0);
     }
    }
   }
   $4 = 0;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
   break;
  }
  case 507: {
   $2587 = $5;
   _compileWarning($2587,6490,$vararg_buffer162);
   label = 508;
   break;
  }
  case 554: {
   $4 = 0;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
   break;
  }
  case 556: {
   $4 = 0;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
   break;
  }
  case 558: {
   $2857 = $5;
   _compileError($2857,6824,$vararg_buffer175);
   $4 = 0;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
   break;
  }
  case 560: {
   $2879 = $19;
   $2880 = ($2879|0)!=(0);
   $2881 = $18;
   $2882 = ($2881|0)!=(0);
   $or$cond25 = $2880 | $2882;
   if ($or$cond25) {
    $2883 = $5;
    _compileWarning($2883,6846,$vararg_buffer177);
   }
   $2884 = $5;
   $2885 = (_getToken($2884,$9,4572)|0);
   $2886 = ($2885|0)!=(0);
   if (!($2886)) {
    $2887 = $5;
    _compileError($2887,6887,$vararg_buffer179);
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $2888 = $6;
   $2889 = HEAP32[$2888>>2]|0;
   $2890 = ((($2889)) + 8|0);
   $2891 = HEAP32[$2890>>2]|0;
   $2892 = ($2891|0)!=(0|0);
   if (!($2892)) {
    $2893 = $6;
    $2894 = HEAP32[$2893>>2]|0;
    $2895 = (_allocateCharacterClasses($2894)|0);
    $2896 = ($2895|0)!=(0);
    if (!($2896)) {
     $4 = 0;
     $3143 = $4;
     STACKTOP = sp;return ($3143|0);
    }
   }
   $2897 = $6;
   $2898 = HEAP32[$2897>>2]|0;
   $2899 = (_findCharacterClass($9,$2898)|0);
   $140 = $2899;
   $2900 = $140;
   $2901 = ($2900|0)!=(0|0);
   if (!($2901)) {
    $2902 = $5;
    $2903 = ((($9)) + 2|0);
    $2904 = HEAP16[$9>>1]|0;
    $2905 = $2904&65535;
    $2906 = $6;
    $2907 = HEAP32[$2906>>2]|0;
    $2908 = (_addCharacterClass($2902,$2903,$2905,$2907,1)|0);
    $140 = $2908;
    $2909 = $140;
    $2910 = ($2909|0)!=(0|0);
    if (!($2910)) {
     $4 = 0;
     $3143 = $4;
     STACKTOP = sp;return ($3143|0);
    }
   }
   $2911 = $140;
   $2912 = ((($2911)) + 8|0);
   $2913 = $2912;
   $2914 = $2913;
   $2915 = HEAP32[$2914>>2]|0;
   $2916 = (($2913) + 4)|0;
   $2917 = $2916;
   $2918 = HEAP32[$2917>>2]|0;
   $2919 = ($2915|0)==(16);
   $2920 = ($2918|0)==(0);
   $2921 = $2919 & $2920;
   if (!($2921)) {
    $2922 = $140;
    $2923 = ((($2922)) + 8|0);
    $2924 = $2923;
    $2925 = $2924;
    $2926 = HEAP32[$2925>>2]|0;
    $2927 = (($2924) + 4)|0;
    $2928 = $2927;
    $2929 = HEAP32[$2928>>2]|0;
    $2930 = ($2926|0)==(4);
    $2931 = ($2929|0)==(0);
    $2932 = $2930 & $2931;
    if (!($2932)) {
     $2933 = $140;
     $2934 = ((($2933)) + 8|0);
     $2935 = $2934;
     $2936 = $2935;
     $2937 = HEAP32[$2936>>2]|0;
     $2938 = (($2935) + 4)|0;
     $2939 = $2938;
     $2940 = HEAP32[$2939>>2]|0;
     $2941 = ($2940>>>0)>(0);
     $2942 = ($2937>>>0)>=(1);
     $2943 = ($2940|0)==(0);
     $2944 = $2943 & $2942;
     $2945 = $2941 | $2944;
     if ($2945) {
      $2946 = $140;
      $2947 = ((($2946)) + 8|0);
      $2948 = $2947;
      $2949 = $2948;
      $2950 = HEAP32[$2949>>2]|0;
      $2951 = (($2948) + 4)|0;
      $2952 = $2951;
      $2953 = HEAP32[$2952>>2]|0;
      $2954 = ($2953>>>0)<(0);
      $2955 = ($2950>>>0)<=(256);
      $2956 = ($2953|0)==(0);
      $2957 = $2956 & $2955;
      $2958 = $2954 | $2957;
      if ($2958) {
       $2959 = $5;
       _compileError($2959,6943,$vararg_buffer181);
       $4 = 0;
       $3143 = $4;
       STACKTOP = sp;return ($3143|0);
      }
     }
    }
   }
   $2960 = $5;
   $2961 = (_getRuleCharsText($2960,$9)|0);
   $2962 = ($2961|0)!=(0);
   if (!($2962)) {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $2963 = HEAP16[$9>>1]|0;
   $2964 = $2963&65535;
   $2965 = ($2964|0)!=(1);
   $2966 = $5;
   if ($2965) {
    _compileError($2966,7025,$vararg_buffer183);
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $2967 = ((($9)) + 2|0);
   $2968 = HEAP16[$2967>>1]|0;
   $2969 = $6;
   $2970 = (_putChar($2966,$2968,$2969,$141)|0);
   $142 = $2970;
   $2971 = $5;
   $2972 = (_getRuleCharsText($2971,$9)|0);
   $2973 = ($2972|0)!=(0);
   if (!($2973)) {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $2974 = HEAP16[$9>>1]|0;
   $2975 = $2974&65535;
   $2976 = ($2975|0)!=(1);
   if ($2976) {
    $2977 = $5;
    _compileError($2977,7091,$vararg_buffer185);
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $2978 = $142;
   $2979 = ((($2978)) + 12|0);
   $2980 = HEAP32[$2979>>2]|0;
   $2981 = ($2980|0)!=(0);
   if ($2981) {
    $2982 = $142;
    $2983 = ((($2982)) + 12|0);
    $2984 = HEAP32[$2983>>2]|0;
    $2985 = $6;
    $2986 = HEAP32[$2985>>2]|0;
    $2987 = ((($2986)) + 31168|0);
    $2988 = (($2987) + ($2984<<3)|0);
    $143 = $2988;
    $2989 = $5;
    $2990 = HEAP32[$2989>>2]|0;
    $2991 = $5;
    $2992 = ((($2991)) + 12|0);
    $2993 = HEAP32[$2992>>2]|0;
    $2994 = $5;
    $2995 = $143;
    $2996 = HEAP32[$2995>>2]|0;
    $2997 = $143;
    $2998 = ((($2997)) + 4|0);
    $2999 = HEAP32[$2998>>2]|0;
    $3000 = (_printSource($2994,$2996,$2999)|0);
    HEAP32[$vararg_buffer187>>2] = $2990;
    $vararg_ptr190 = ((($vararg_buffer187)) + 4|0);
    HEAP32[$vararg_ptr190>>2] = $2993;
    $vararg_ptr191 = ((($vararg_buffer187)) + 8|0);
    HEAP32[$vararg_ptr191>>2] = $3000;
    __lou_logMessage(10000,7131,$vararg_buffer187);
    $3001 = $142;
    $3002 = ((($3001)) + 12|0);
    HEAP32[$3002>>2] = 0;
   }
   $3003 = $5;
   $3004 = ((($9)) + 2|0);
   $3005 = HEAP16[$3004>>1]|0;
   $3006 = $6;
   (_putChar($3003,$3005,$3006,$144)|0);
   $3007 = HEAP32[$141>>2]|0;
   $3008 = $6;
   $3009 = HEAP32[$3008>>2]|0;
   $3010 = ((($3009)) + 31168|0);
   $3011 = (($3010) + ($3007<<3)|0);
   $142 = $3011;
   $3012 = $142;
   $3013 = ((($3012)) + 48|0);
   $3014 = HEAP32[$3013>>2]|0;
   $3015 = ($3014|0)!=(0);
   do {
    if ($3015) {
     $3016 = $142;
     $3017 = ((($3016)) + 48|0);
     $3018 = HEAP32[$3017>>2]|0;
     $3019 = HEAP32[$144>>2]|0;
     $3020 = ($3018|0)==($3019|0);
     if ($3020) {
      $3021 = $142;
      $3022 = ((($3021)) + 32|0);
      $3023 = $3022;
      $3024 = $3023;
      $3025 = HEAP32[$3024>>2]|0;
      $3026 = (($3023) + 4)|0;
      $3027 = $3026;
      $3028 = HEAP32[$3027>>2]|0;
      $3029 = $140;
      $3030 = ((($3029)) + 8|0);
      $3031 = $3030;
      $3032 = $3031;
      $3033 = HEAP32[$3032>>2]|0;
      $3034 = (($3031) + 4)|0;
      $3035 = $3034;
      $3036 = HEAP32[$3035>>2]|0;
      $3037 = ($3025|0)==($3033|0);
      $3038 = ($3028|0)==($3036|0);
      $3039 = $3037 & $3038;
      if ($3039) {
       $3040 = $5;
       $3041 = HEAP32[$3040>>2]|0;
       $3042 = $5;
       $3043 = ((($3042)) + 12|0);
       $3044 = HEAP32[$3043>>2]|0;
       HEAP32[$vararg_buffer192>>2] = $3041;
       $vararg_ptr195 = ((($vararg_buffer192)) + 4|0);
       HEAP32[$vararg_ptr195>>2] = $3044;
       __lou_logMessage(10000,7206,$vararg_buffer192);
       break;
      }
     }
     $3045 = $5;
     $3046 = HEAP32[$3045>>2]|0;
     $3047 = $5;
     $3048 = ((($3047)) + 12|0);
     $3049 = HEAP32[$3048>>2]|0;
     $3050 = $5;
     $3051 = $142;
     $3052 = HEAP32[$3051>>2]|0;
     $3053 = $142;
     $3054 = ((($3053)) + 4|0);
     $3055 = HEAP32[$3054>>2]|0;
     $3056 = (_printSource($3050,$3052,$3055)|0);
     HEAP32[$vararg_buffer196>>2] = $3046;
     $vararg_ptr199 = ((($vararg_buffer196)) + 4|0);
     HEAP32[$vararg_ptr199>>2] = $3049;
     $vararg_ptr200 = ((($vararg_buffer196)) + 8|0);
     HEAP32[$vararg_ptr200>>2] = $3056;
     __lou_logMessage(10000,7234,$vararg_buffer196);
    }
   } while(0);
   $3057 = HEAP32[$144>>2]|0;
   $3058 = $142;
   $3059 = ((($3058)) + 48|0);
   HEAP32[$3059>>2] = $3057;
   $3060 = $140;
   $3061 = ((($3060)) + 8|0);
   $3062 = $3061;
   $3063 = $3062;
   $3064 = HEAP32[$3063>>2]|0;
   $3065 = (($3062) + 4)|0;
   $3066 = $3065;
   $3067 = HEAP32[$3066>>2]|0;
   $3068 = $142;
   $3069 = ((($3068)) + 32|0);
   $3070 = $3069;
   $3071 = $3070;
   HEAP32[$3071>>2] = $3064;
   $3072 = (($3070) + 4)|0;
   $3073 = $3072;
   HEAP32[$3073>>2] = $3067;
   $3074 = $5;
   $3075 = ((($3074)) + 4|0);
   $3076 = HEAP32[$3075>>2]|0;
   $3077 = $142;
   HEAP32[$3077>>2] = $3076;
   $3078 = $5;
   $3079 = ((($3078)) + 12|0);
   $3080 = HEAP32[$3079>>2]|0;
   $3081 = $142;
   $3082 = ((($3081)) + 4|0);
   HEAP32[$3082>>2] = $3080;
   $4 = 1;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
   break;
  }
  case 593: {
   $3105 = $5;
   $3106 = $10;
   $3107 = $18;
   $3108 = $19;
   $3109 = $6;
   $3110 = (_compileSwap($3105,$3106,$3107,$3108,$3109)|0);
   $4 = $3110;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
   break;
  }
  case 594: {
   $3111 = $5;
   $3112 = (_getRuleCharsText($3111,$11)|0);
   $3113 = ($3112|0)!=(0);
   if (!($3113)) {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $3114 = $5;
   $3115 = (_getRuleDotsPattern($3114,$12)|0);
   $3116 = ($3115|0)!=(0);
   if (!($3116)) {
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
   $3117 = HEAP16[$11>>1]|0;
   $3118 = $3117&65535;
   $3119 = ($3118|0)!=(1);
   if (!($3119)) {
    $3120 = HEAP16[$12>>1]|0;
    $3121 = $3120&65535;
    $3122 = ($3121|0)<(1);
    if (!($3122)) {
     $3124 = $5;
     $3125 = $10;
     $3126 = $16;
     $3127 = $3126;
     $3128 = HEAP32[$3127>>2]|0;
     $3129 = (($3126) + 4)|0;
     $3130 = $3129;
     $3131 = HEAP32[$3130>>2]|0;
     $3132 = $17;
     $3133 = $3132;
     $3134 = HEAP32[$3133>>2]|0;
     $3135 = (($3132) + 4)|0;
     $3136 = $3135;
     $3137 = HEAP32[$3136>>2]|0;
     $3138 = $18;
     $3139 = $19;
     $3140 = $6;
     $3141 = (_addRule($3124,$3125,$11,$12,$3128,$3131,$3134,$3137,0,0,$3138,$3139,$3140)|0);
     $4 = $3141;
     $3143 = $4;
     STACKTOP = sp;return ($3143|0);
    }
   }
   $3123 = $5;
   _compileError($3123,7338,$vararg_buffer201);
   $4 = 0;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
   break;
  }
  case 602: {
   $3142 = $5;
   _compileError($3142,7396,$vararg_buffer203);
   $4 = 0;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
   break;
  }
 }
 if ((label|0) == 393) {
  $2097 = $5;
  $2098 = (_getRuleCharsText($2097,$11)|0);
  $2099 = ($2098|0)!=(0);
  if (!($2099)) {
   $4 = 0;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
  }
  $2100 = $5;
  $2101 = (_getRuleDotsPattern($2100,$12)|0);
  $2102 = ($2101|0)!=(0);
  if (!($2102)) {
   $4 = 0;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
  }
  $2103 = HEAP16[$12>>1]|0;
  $2104 = $2103&65535;
  $2105 = ($2104|0)==(0);
  L893: do {
   if ($2105) {
    $112 = 0;
    while(1) {
     $2106 = $112;
     $2107 = HEAP16[$11>>1]|0;
     $2108 = $2107&65535;
     $2109 = ($2106|0)<($2108|0);
     if (!($2109)) {
      break L893;
     }
     $2110 = $112;
     $2111 = ((($11)) + 2|0);
     $2112 = (($2111) + ($2110<<1)|0);
     $2113 = HEAP16[$2112>>1]|0;
     $2114 = $6;
     $2115 = HEAP32[$2114>>2]|0;
     $2116 = (_getChar($2113,$2115,0)|0);
     $113 = $2116;
     $2117 = $113;
     $2118 = ($2117|0)!=(0|0);
     if (!($2118)) {
      break;
     }
     $2119 = $113;
     $2120 = ((($2119)) + 12|0);
     $2121 = HEAP32[$2120>>2]|0;
     $2122 = ($2121|0)!=(0);
     if (!($2122)) {
      $2123 = $113;
      $2124 = ((($2123)) + 48|0);
      $2125 = HEAP32[$2124>>2]|0;
      $2126 = ($2125|0)!=(0);
      if (!($2126)) {
       break;
      }
     }
     $2132 = $112;
     $2133 = (($2132) + 1)|0;
     $112 = $2133;
    }
    $2127 = $5;
    $2128 = $112;
    $2129 = ((($11)) + 2|0);
    $2130 = (($2129) + ($2128<<1)|0);
    $2131 = (__lou_showString($2130,1,0)|0);
    HEAP32[$vararg_buffer138>>2] = $2131;
    _compileError($2127,6219,$vararg_buffer138);
    $4 = 0;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
  } while(0);
  $2134 = $5;
  $2135 = $10;
  $2136 = $16;
  $2137 = $2136;
  $2138 = HEAP32[$2137>>2]|0;
  $2139 = (($2136) + 4)|0;
  $2140 = $2139;
  $2141 = HEAP32[$2140>>2]|0;
  $2142 = $17;
  $2143 = $2142;
  $2144 = HEAP32[$2143>>2]|0;
  $2145 = (($2142) + 4)|0;
  $2146 = $2145;
  $2147 = HEAP32[$2146>>2]|0;
  $2148 = $18;
  $2149 = $19;
  $2150 = $6;
  $2151 = (_addRule($2134,$2135,$11,$12,$2138,$2141,$2144,$2147,0,$114,$2148,$2149,$2150)|0);
  $2152 = ($2151|0)!=(0);
  if (!($2152)) {
   $4 = 0;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
  }
  $2153 = $20;
  $2154 = ($2153|0)!=(0);
  if ($2154) {
   $2155 = HEAP32[$114>>2]|0;
   $2156 = ((($2155)) + 40|0);
   HEAP8[$2156>>0] = 1;
  }
  $4 = 1;
  $3143 = $4;
  STACKTOP = sp;return ($3143|0);
 }
 else if ((label|0) == 484) {
  $2476 = $19;
  $2477 = ($2476|0)!=(0);
  $2478 = $18;
  $2479 = ($2478|0)!=(0);
  $or$cond13 = $2477 | $2479;
  $2480 = $5;
  if ($or$cond13) {
   $2483 = $10;
   $2484 = $18;
   $2485 = $19;
   $2486 = $6;
   $2487 = (_compilePassOpcode($2480,$2483,$2484,$2485,$2486)|0);
   $4 = $2487;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
  } else {
   $2481 = (__lou_findOpcodeName(55)|0);
   $2482 = (__lou_findOpcodeName(54)|0);
   HEAP32[$vararg_buffer150>>2] = $2481;
   $vararg_ptr153 = ((($vararg_buffer150)) + 4|0);
   HEAP32[$vararg_ptr153>>2] = $2482;
   _compileError($2480,6386,$vararg_buffer150);
   $4 = 0;
   $3143 = $4;
   STACKTOP = sp;return ($3143|0);
  }
 }
 else if ((label|0) == 508) {
  $2588 = $19;
  $2589 = ($2588|0)!=(0);
  $2590 = $18;
  $2591 = ($2590|0)!=(0);
  $or$cond17 = $2589 | $2591;
  if ($or$cond17) {
   $2592 = $5;
   _compileWarning($2592,6533,$vararg_buffer164);
  }
  $2593 = $10;
  $2594 = ($2593|0)==(51);
  if ($2594) {
   $2595 = $6;
   $2596 = HEAP32[$2595>>2]|0;
   $2597 = ((($2596)) + 104|0);
   $2598 = HEAP32[$2597>>2]|0;
   $2599 = ($2598|0)==(1);
   if (!($2599)) {
    label = 512;
   }
  } else {
   label = 512;
  }
  do {
   if ((label|0) == 512) {
    $2600 = $10;
    $2601 = ($2600|0)==(114);
    if ($2601) {
     $2602 = $6;
     $2603 = HEAP32[$2602>>2]|0;
     $2604 = ((($2603)) + 104|0);
     $2605 = HEAP32[$2604>>2]|0;
     $2606 = ($2605|0)==(2);
     if ($2606) {
      break;
     }
    }
    $2608 = $10;
    $2609 = ($2608|0)==(51);
    $2610 = $6;
    $2611 = HEAP32[$2610>>2]|0;
    $2612 = ((($2611)) + 104|0);
    if ($2609) {
     HEAP32[$2612>>2] = 2;
    } else {
     HEAP32[$2612>>2] = 1;
    }
    $2613 = $5;
    $2614 = (_getToken($2613,$9,4572)|0);
    $2615 = ($2614|0)!=(0);
    if (!($2615)) {
     $2616 = $5;
     HEAP32[$vararg_buffer168>>2] = 4572;
     _compileError($2616,6647,$vararg_buffer168);
     $4 = 0;
     $3143 = $4;
     STACKTOP = sp;return ($3143|0);
    }
    $2617 = $6;
    $2618 = HEAP32[$2617>>2]|0;
    $2619 = ((($2618)) + 8|0);
    $2620 = HEAP32[$2619>>2]|0;
    $2621 = ($2620|0)!=(0|0);
    if (!($2621)) {
     $2622 = $6;
     $2623 = HEAP32[$2622>>2]|0;
     $2624 = (_allocateCharacterClasses($2623)|0);
     $2625 = ($2624|0)!=(0);
     if (!($2625)) {
      $4 = 0;
      $3143 = $4;
      STACKTOP = sp;return ($3143|0);
     }
    }
    $2626 = $130;
    $2627 = $2626;
    HEAP32[$2627>>2] = 0;
    $2628 = (($2626) + 4)|0;
    $2629 = $2628;
    HEAP32[$2629>>2] = 0;
    $131 = -1;
    $2630 = ((($9)) + 2|0);
    $2631 = HEAP16[$2630>>1]|0;
    $2632 = $2631&65535;
    $$off18 = (($2632) + -48)|0;
    $switch19 = ($$off18>>>0)<(10);
    if ($switch19) {
     $2633 = ((($9)) + 2|0);
     $2634 = HEAP16[$2633>>1]|0;
     $2635 = $2634&65535;
     $2636 = (($2635) - 48)|0;
     $131 = $2636;
    }
    $2637 = $131;
    $2638 = ($2637|0)>=(0);
    if ($2638) {
     $2639 = $10;
     $2640 = ($2639|0)==(51);
     if ($2640) {
      $2641 = $5;
      _compileError($2641,6659,$vararg_buffer171);
      $4 = 0;
      $3143 = $4;
      STACKTOP = sp;return ($3143|0);
     }
     $2642 = HEAP16[$9>>1]|0;
     $2643 = $2642&65535;
     $2644 = ($2643|0)>(1);
     $2645 = $131;
     $2646 = ($2645|0)>(7);
     $or$cond21 = $2644 | $2646;
     if ($or$cond21) {
      $2647 = $5;
      _compileError($2647,6734,$vararg_buffer173);
      $4 = 0;
      $3143 = $4;
      STACKTOP = sp;return ($3143|0);
     }
     $2648 = $131;
     $2649 = $6;
     $2650 = HEAP32[$2649>>2]|0;
     $2651 = ((($2650)) + 40|0);
     $2652 = (($2651) + ($2648<<3)|0);
     $2653 = $2652;
     $2654 = $2653;
     $2655 = HEAP32[$2654>>2]|0;
     $2656 = (($2653) + 4)|0;
     $2657 = $2656;
     $2658 = HEAP32[$2657>>2]|0;
     $2659 = ($2655|0)!=(0);
     $2660 = ($2658|0)!=(0);
     $2661 = $2659 | $2660;
     if (!($2661)) {
      $2662 = $6;
      $2663 = HEAP32[$2662>>2]|0;
      $2664 = (_getNextNumberedAttribute($2663)|0);
      $2665 = tempRet0;
      $2666 = $131;
      $2667 = $6;
      $2668 = HEAP32[$2667>>2]|0;
      $2669 = ((($2668)) + 40|0);
      $2670 = (($2669) + ($2666<<3)|0);
      $2671 = $2670;
      $2672 = $2671;
      HEAP32[$2672>>2] = $2664;
      $2673 = (($2671) + 4)|0;
      $2674 = $2673;
      HEAP32[$2674>>2] = $2665;
     }
     $2675 = $131;
     $2676 = $6;
     $2677 = HEAP32[$2676>>2]|0;
     $2678 = ((($2677)) + 40|0);
     $2679 = (($2678) + ($2675<<3)|0);
     $2680 = $2679;
     $2681 = $2680;
     $2682 = HEAP32[$2681>>2]|0;
     $2683 = (($2680) + 4)|0;
     $2684 = $2683;
     $2685 = HEAP32[$2684>>2]|0;
     $2686 = $130;
     $2687 = $2686;
     HEAP32[$2687>>2] = $2682;
     $2688 = (($2686) + 4)|0;
     $2689 = $2688;
     HEAP32[$2689>>2] = $2685;
    } else {
     $2690 = $6;
     $2691 = HEAP32[$2690>>2]|0;
     $2692 = (_findCharacterClass($9,$2691)|0);
     $132 = $2692;
     $2693 = $132;
     $2694 = ($2693|0)!=(0|0);
     if (!($2694)) {
      $2695 = $5;
      $2696 = ((($9)) + 2|0);
      $2697 = HEAP16[$9>>1]|0;
      $2698 = $2697&65535;
      $2699 = $6;
      $2700 = HEAP32[$2699>>2]|0;
      $2701 = (_addCharacterClass($2695,$2696,$2698,$2700,1)|0);
      $132 = $2701;
      $2702 = $132;
      $2703 = ($2702|0)!=(0|0);
      if (!($2703)) {
       $4 = 0;
       $3143 = $4;
       STACKTOP = sp;return ($3143|0);
      }
     }
     $2704 = $132;
     $2705 = ((($2704)) + 8|0);
     $2706 = $2705;
     $2707 = $2706;
     $2708 = HEAP32[$2707>>2]|0;
     $2709 = (($2706) + 4)|0;
     $2710 = $2709;
     $2711 = HEAP32[$2710>>2]|0;
     $2712 = $130;
     $2713 = $2712;
     HEAP32[$2713>>2] = $2708;
     $2714 = (($2712) + 4)|0;
     $2715 = $2714;
     HEAP32[$2715>>2] = $2711;
     $2716 = $130;
     $2717 = $2716;
     $2718 = HEAP32[$2717>>2]|0;
     $2719 = (($2716) + 4)|0;
     $2720 = $2719;
     $2721 = HEAP32[$2720>>2]|0;
     $2722 = ($2718|0)==(16);
     $2723 = ($2721|0)==(0);
     $2724 = $2722 & $2723;
     $2725 = $130;
     $2726 = $2725;
     $2727 = HEAP32[$2726>>2]|0;
     $2728 = (($2725) + 4)|0;
     $2729 = $2728;
     $2730 = HEAP32[$2729>>2]|0;
     $2731 = ($2727|0)==(32);
     $2732 = ($2730|0)==(0);
     $2733 = $2731 & $2732;
     $or$cond23 = $2724 | $2733;
     if ($or$cond23) {
      $2734 = $130;
      $2735 = $2734;
      $2736 = HEAP32[$2735>>2]|0;
      $2737 = (($2734) + 4)|0;
      $2738 = $2737;
      $2739 = HEAP32[$2738>>2]|0;
      $2740 = $2736 | 2;
      $2741 = $130;
      $2742 = $2741;
      HEAP32[$2742>>2] = $2740;
      $2743 = (($2741) + 4)|0;
      $2744 = $2743;
      HEAP32[$2744>>2] = $2739;
     }
    }
    $2745 = $5;
    $2746 = (_getCharacters($2745,$133)|0);
    $2747 = ($2746|0)!=(0);
    if (!($2747)) {
     $4 = 0;
     $3143 = $4;
     STACKTOP = sp;return ($3143|0);
    }
    $134 = 0;
    while(1) {
     $2748 = $134;
     $2749 = HEAP16[$133>>1]|0;
     $2750 = $2749&65535;
     $2751 = ($2748|0)<($2750|0);
     if (!($2751)) {
      break;
     }
     $2752 = $5;
     $2753 = $134;
     $2754 = ((($133)) + 2|0);
     $2755 = (($2754) + ($2753<<1)|0);
     $2756 = HEAP16[$2755>>1]|0;
     $2757 = $6;
     $2758 = (_putChar($2752,$2756,$2757,0)|0);
     $135 = $2758;
     $2759 = $130;
     $2760 = $2759;
     $2761 = HEAP32[$2760>>2]|0;
     $2762 = (($2759) + 4)|0;
     $2763 = $2762;
     $2764 = HEAP32[$2763>>2]|0;
     $2765 = $135;
     $2766 = ((($2765)) + 24|0);
     $2767 = $2766;
     $2768 = $2767;
     $2769 = HEAP32[$2768>>2]|0;
     $2770 = (($2767) + 4)|0;
     $2771 = $2770;
     $2772 = HEAP32[$2771>>2]|0;
     $2773 = $2769 | $2761;
     $2774 = $2772 | $2764;
     $2775 = $2766;
     $2776 = $2775;
     HEAP32[$2776>>2] = $2773;
     $2777 = (($2775) + 4)|0;
     $2778 = $2777;
     HEAP32[$2778>>2] = $2774;
     $2779 = $135;
     $2780 = ((($2779)) + 48|0);
     $2781 = HEAP32[$2780>>2]|0;
     $2782 = ($2781|0)!=(0);
     if ($2782) {
      $2783 = $135;
      $2784 = ((($2783)) + 48|0);
      $2785 = HEAP32[$2784>>2]|0;
      $2786 = $6;
      $2787 = HEAP32[$2786>>2]|0;
      $2788 = ((($2787)) + 31168|0);
      $2789 = (($2788) + ($2785<<3)|0);
      $135 = $2789;
     }
     $2790 = $135;
     $2791 = ((($2790)) + 12|0);
     $2792 = HEAP32[$2791>>2]|0;
     $2793 = ($2792|0)!=(0);
     if ($2793) {
      $2794 = $135;
      $2795 = ((($2794)) + 12|0);
      $2796 = HEAP32[$2795>>2]|0;
      $2797 = $6;
      $2798 = HEAP32[$2797>>2]|0;
      $2799 = ((($2798)) + 31168|0);
      $2800 = (($2799) + ($2796<<3)|0);
      $136 = $2800;
      $2801 = $136;
      $2802 = ((($2801)) + 44|0);
      $2803 = HEAP16[$2802>>1]|0;
      $2804 = $2803 << 16 >> 16;
      $2805 = ($2804|0)==(1);
      if ($2805) {
       $2806 = $136;
       $2807 = ((($2806)) + 42|0);
       $2808 = HEAP16[$2807>>1]|0;
       $2809 = $2808 << 16 >> 16;
       $2810 = $136;
       $2811 = ((($2810)) + 46|0);
       $2812 = (($2811) + ($2809<<1)|0);
       $2813 = HEAP16[$2812>>1]|0;
       $2814 = $6;
       $2815 = HEAP32[$2814>>2]|0;
       $2816 = (_getDots($2813,$2815)|0);
       $137 = $2816;
       $2817 = $137;
       $2818 = ($2817|0)!=(0|0);
       if ($2818) {
        $2819 = $130;
        $2820 = $2819;
        $2821 = HEAP32[$2820>>2]|0;
        $2822 = (($2819) + 4)|0;
        $2823 = $2822;
        $2824 = HEAP32[$2823>>2]|0;
        $2825 = $137;
        $2826 = ((($2825)) + 24|0);
        $2827 = $2826;
        $2828 = $2827;
        $2829 = HEAP32[$2828>>2]|0;
        $2830 = (($2827) + 4)|0;
        $2831 = $2830;
        $2832 = HEAP32[$2831>>2]|0;
        $2833 = $2829 | $2821;
        $2834 = $2832 | $2824;
        $2835 = $2826;
        $2836 = $2835;
        HEAP32[$2836>>2] = $2833;
        $2837 = (($2835) + 4)|0;
        $2838 = $2837;
        HEAP32[$2838>>2] = $2834;
       }
      }
     }
     $2839 = $134;
     $2840 = (($2839) + 1)|0;
     $134 = $2840;
    }
    $4 = 1;
    $3143 = $4;
    STACKTOP = sp;return ($3143|0);
   }
  } while(0);
  $2607 = $5;
  _compileError($2607,6585,$vararg_buffer166);
  $4 = 0;
  $3143 = $4;
  STACKTOP = sp;return ($3143|0);
 }
 return (0)|0;
}
function _free_macro_list($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 _free_macro($5);
 $6 = $1;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 _free_macro_list($8);
 $9 = $1;
 _rpl_free($9);
 STACKTOP = sp;return;
}
function _getToken($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 while(1) {
  $8 = $4;
  $9 = (_atEndOfLine($8)|0);
  $10 = ($9|0)!=(0);
  if ($10) {
   break;
  }
  $11 = $4;
  $12 = (_atTokenDelimiter($11)|0);
  $13 = ($12|0)!=(0);
  if (!($13)) {
   break;
  }
  $14 = $4;
  $15 = ((($14)) + 28|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + 1)|0;
  HEAP32[$15>>2] = $17;
 }
 $18 = $5;
 HEAP16[$18>>1] = 0;
 while(1) {
  $19 = $4;
  $20 = (_atEndOfLine($19)|0);
  $21 = ($20|0)!=(0);
  if ($21) {
   break;
  }
  $22 = $4;
  $23 = (_atTokenDelimiter($22)|0);
  $24 = ($23|0)!=(0);
  $25 = $24 ^ 1;
  if (!($25)) {
   break;
  }
  $7 = 2048;
  $26 = $5;
  $27 = HEAP16[$26>>1]|0;
  $28 = $27&65535;
  $29 = $7;
  $30 = ($28|0)>=($29|0);
  $31 = $4;
  if ($30) {
   label = 9;
   break;
  }
  $33 = ((($31)) + 28|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + 1)|0;
  HEAP32[$33>>2] = $35;
  $36 = $4;
  $37 = ((($36)) + 40|0);
  $38 = (($37) + ($34<<1)|0);
  $39 = HEAP16[$38>>1]|0;
  $40 = $5;
  $41 = HEAP16[$40>>1]|0;
  $42 = (($41) + 1)<<16>>16;
  HEAP16[$40>>1] = $42;
  $43 = $41&65535;
  $44 = $5;
  $45 = ((($44)) + 2|0);
  $46 = (($45) + ($43<<1)|0);
  HEAP16[$46>>1] = $39;
 }
 if ((label|0) == 9) {
  $32 = $7;
  HEAP32[$vararg_buffer>>2] = $32;
  _compileError($31,7418,$vararg_buffer);
  $3 = 0;
  $70 = $3;
  STACKTOP = sp;return ($70|0);
 }
 $47 = $5;
 $48 = HEAP16[$47>>1]|0;
 $49 = ($48<<16>>16)!=(0);
 if (!($49)) {
  $50 = $6;
  $51 = ($50|0)!=(0|0);
  if ($51) {
   $52 = $4;
   $53 = $6;
   HEAP32[$vararg_buffer3>>2] = $53;
   _compileError($52,7450,$vararg_buffer3);
  }
  $3 = 0;
  $70 = $3;
  STACKTOP = sp;return ($70|0);
 }
 $54 = $5;
 $55 = HEAP16[$54>>1]|0;
 $56 = $55&65535;
 $57 = $5;
 $58 = ((($57)) + 2|0);
 $59 = (($58) + ($56<<1)|0);
 HEAP16[$59>>1] = 0;
 while(1) {
  $60 = $4;
  $61 = (_atEndOfLine($60)|0);
  $62 = ($61|0)!=(0);
  if ($62) {
   break;
  }
  $63 = $4;
  $64 = (_atTokenDelimiter($63)|0);
  $65 = ($64|0)!=(0);
  if (!($65)) {
   break;
  }
  $66 = $4;
  $67 = ((($66)) + 28|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($68) + 1)|0;
  HEAP32[$67>>2] = $69;
 }
 $3 = 1;
 $70 = $3;
 STACKTOP = sp;return ($70|0);
}
function _eqasc2uni($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 while(1) {
  $8 = $7;
  $9 = $6;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   label = 6;
   break;
  }
  $11 = $7;
  $12 = $4;
  $13 = (($12) + ($11)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = $15&65535;
  $17 = $7;
  $18 = $5;
  $19 = (($18) + ($17<<1)|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = $20&65535;
  $22 = ($16|0)!=($21|0);
  if ($22) {
   label = 4;
   break;
  }
  $23 = $7;
  $24 = (($23) + 1)|0;
  $7 = $24;
 }
 if ((label|0) == 4) {
  $3 = 0;
  $25 = $3;
  STACKTOP = sp;return ($25|0);
 }
 else if ((label|0) == 6) {
  $3 = 1;
  $25 = $3;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function _compileHyphenation($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 10320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(10320|0);
 $6 = sp + 4164|0;
 $9 = sp + 66|0;
 $10 = sp + 8262|0;
 $19 = sp + 8|0;
 $20 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $11 = 0;
 $12 = 0;
 $21 = $4;
 $22 = HEAP16[$21>>1]|0;
 $23 = $22&65535;
 $15 = $23;
 $24 = $3;
 $25 = $5;
 (_allocateSpaceInTranslationTable($24,0,250000,$25)|0);
 $26 = (_hyphenHashNew()|0);
 $8 = $26;
 HEAP32[$19>>2] = 1;
 $27 = (_rpl_malloc(12)|0);
 $28 = ((($19)) + 4|0);
 HEAP32[$28>>2] = $27;
 $29 = ((($19)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)!=(0|0);
 if (!($31)) {
  __lou_outOfMemory();
 }
 $32 = ((($19)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($33)) + 4|0);
 HEAP32[$34>>2] = 0;
 $35 = ((($19)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($36)) + 8|0);
 HEAP16[$37>>1] = -1;
 $38 = ((($19)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($39)) + 10|0);
 HEAP16[$40>>1] = 0;
 $41 = ((($19)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 HEAP32[$42>>2] = 0;
 while(1) {
  $43 = $4;
  $44 = ((($43)) + 2|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = $45&65535;
  $47 = ($46|0)==(73);
  $48 = $3;
  if ($47) {
   $49 = (_getToken($48,$6,0)|0);
   $50 = ($49|0)!=(0);
   if ($50) {
    label = 8;
   }
  } else {
   $51 = (_getToken($48,$9,0)|0);
   $52 = ($51|0)!=(0);
   if ($52) {
    $53 = $3;
    (_parseChars($53,$6,$9)|0);
    label = 8;
   }
  }
  L10: do {
   if ((label|0) == 8) {
    label = 0;
    $54 = HEAP16[$6>>1]|0;
    $55 = $54&65535;
    $56 = ($55|0)==(0);
    if (!($56)) {
     $57 = ((($6)) + 2|0);
     $58 = HEAP16[$57>>1]|0;
     $59 = $58&65535;
     $60 = ($59|0)==(35);
     if (!($60)) {
      $61 = ((($6)) + 2|0);
      $62 = HEAP16[$61>>1]|0;
      $63 = $62&65535;
      $64 = ($63|0)==(37);
      if (!($64)) {
       $65 = ((($6)) + 2|0);
       $66 = HEAP16[$65>>1]|0;
       $67 = $66&65535;
       $68 = ($67|0)==(60);
       if (!($68)) {
        $14 = 0;
        $69 = $14;
        $70 = (($10) + ($69)|0);
        HEAP8[$70>>0] = 48;
        $13 = 0;
        while(1) {
         $71 = $13;
         $72 = HEAP16[$6>>1]|0;
         $73 = $72&65535;
         $74 = ($71|0)<($73|0);
         if (!($74)) {
          break;
         }
         $75 = $13;
         $76 = ((($6)) + 2|0);
         $77 = (($76) + ($75<<1)|0);
         $78 = HEAP16[$77>>1]|0;
         $79 = $78&65535;
         $80 = ($79|0)>=(48);
         if ($80) {
          $81 = $13;
          $82 = ((($6)) + 2|0);
          $83 = (($82) + ($81<<1)|0);
          $84 = HEAP16[$83>>1]|0;
          $85 = $84&65535;
          $86 = ($85|0)<=(57);
          if ($86) {
           $87 = $13;
           $88 = ((($6)) + 2|0);
           $89 = (($88) + ($87<<1)|0);
           $90 = HEAP16[$89>>1]|0;
           $91 = $90&255;
           $92 = $14;
           $93 = (($10) + ($92)|0);
           HEAP8[$93>>0] = $91;
          } else {
           label = 17;
          }
         } else {
          label = 17;
         }
         if ((label|0) == 17) {
          label = 0;
          $94 = $13;
          $95 = ((($6)) + 2|0);
          $96 = (($95) + ($94<<1)|0);
          $97 = HEAP16[$96>>1]|0;
          $98 = $14;
          $99 = ((($9)) + 2|0);
          $100 = (($99) + ($98<<1)|0);
          HEAP16[$100>>1] = $97;
          $101 = $14;
          $102 = (($101) + 1)|0;
          $14 = $102;
          $103 = (($10) + ($102)|0);
          HEAP8[$103>>0] = 48;
         }
         $104 = $13;
         $105 = (($104) + 1)|0;
         $13 = $105;
        }
        $106 = $14;
        $107 = ((($9)) + 2|0);
        $108 = (($107) + ($106<<1)|0);
        HEAP16[$108>>1] = 0;
        $109 = $14;
        $110 = $109&65535;
        HEAP16[$9>>1] = $110;
        $111 = $14;
        $112 = (($111) + 1)|0;
        $113 = (($10) + ($112)|0);
        HEAP8[$113>>0] = 0;
        $13 = 0;
        while(1) {
         $114 = $13;
         $115 = (($10) + ($114)|0);
         $116 = HEAP8[$115>>0]|0;
         $117 = $116 << 24 >> 24;
         $118 = ($117|0)==(48);
         if (!($118)) {
          break;
         }
         $119 = $13;
         $120 = (($119) + 1)|0;
         $13 = $120;
        }
        $121 = $8;
        $122 = (_hyphenHashLookup($121,$9)|0);
        $17 = $122;
        $123 = $17;
        $124 = ($123|0)!=(65535);
        if ($124) {
         $125 = $17;
         $11 = $125;
        } else {
         $126 = $8;
         $127 = (_hyphenGetNewState($19,$126,$9)|0);
         $11 = $127;
        }
        $128 = $14;
        $129 = (($128) + 2)|0;
        $130 = $13;
        $131 = (($129) - ($130))|0;
        $15 = $131;
        $132 = $15;
        $133 = ($132|0)>(0);
        if ($133) {
         $134 = $3;
         $135 = $11;
         $136 = ((($19)) + 4|0);
         $137 = HEAP32[$136>>2]|0;
         $138 = (($137) + (($135*12)|0)|0);
         $139 = ((($138)) + 4|0);
         $140 = $15;
         $141 = $5;
         (_allocateSpaceInTranslationTable($134,$139,$140,$141)|0);
         $142 = $11;
         $143 = ((($19)) + 4|0);
         $144 = HEAP32[$143>>2]|0;
         $145 = (($144) + (($142*12)|0)|0);
         $146 = ((($145)) + 4|0);
         $147 = HEAP32[$146>>2]|0;
         $148 = $5;
         $149 = HEAP32[$148>>2]|0;
         $150 = ((($149)) + 31168|0);
         $151 = (($150) + ($147<<3)|0);
         $152 = $13;
         $153 = (($10) + ($152)|0);
         $154 = $15;
         _memcpy(($151|0),($153|0),($154|0))|0;
        }
        while(1) {
         $155 = $17;
         $156 = ($155|0)==(65535);
         if (!($156)) {
          break L10;
         }
         $157 = $11;
         $12 = $157;
         $158 = HEAP16[$9>>1]|0;
         $159 = (($158) + -1)<<16>>16;
         HEAP16[$9>>1] = $159;
         $160 = $158&65535;
         $161 = (($160) - 1)|0;
         $162 = ((($9)) + 2|0);
         $163 = (($162) + ($161<<1)|0);
         $164 = HEAP16[$163>>1]|0;
         $16 = $164;
         $165 = $8;
         $166 = (_hyphenHashLookup($165,$9)|0);
         $17 = $166;
         $167 = $17;
         $168 = ($167|0)!=(65535);
         if ($168) {
          $169 = $17;
          $11 = $169;
         } else {
          $170 = $8;
          $171 = (_hyphenGetNewState($19,$170,$9)|0);
          $11 = $171;
         }
         $172 = $11;
         $173 = $12;
         $174 = $16;
         _hyphenAddTrans($19,$172,$173,$174);
        }
       }
      }
     }
    }
   }
  } while(0);
  $175 = $3;
  $176 = (__lou_getALine($175)|0);
  $177 = ($176|0)!=(0);
  if (!($177)) {
   break;
  }
 }
 $13 = 0;
 while(1) {
  $178 = $13;
  $179 = ($178|0)<(8191);
  if (!($179)) {
   break;
  }
  $180 = $13;
  $181 = $8;
  $182 = (($181) + ($180<<2)|0);
  $183 = HEAP32[$182>>2]|0;
  $18 = $183;
  while(1) {
   $184 = $18;
   $185 = ($184|0)!=(0|0);
   if (!($185)) {
    break;
   }
   $14 = 1;
   while(1) {
    $186 = $14;
    $187 = $18;
    $188 = ((($187)) + 4|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = HEAP16[$189>>1]|0;
    $191 = $190&65535;
    $192 = ($186|0)<=($191|0);
    if (!($192)) {
     break;
    }
    HEAP16[$9>>1] = 0;
    $193 = $14;
    $15 = $193;
    while(1) {
     $194 = $15;
     $195 = $18;
     $196 = ((($195)) + 4|0);
     $197 = HEAP32[$196>>2]|0;
     $198 = HEAP16[$197>>1]|0;
     $199 = $198&65535;
     $200 = ($194|0)<($199|0);
     if (!($200)) {
      break;
     }
     $201 = $15;
     $202 = $18;
     $203 = ((($202)) + 4|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = ((($204)) + 2|0);
     $206 = (($205) + ($201<<1)|0);
     $207 = HEAP16[$206>>1]|0;
     $208 = HEAP16[$9>>1]|0;
     $209 = (($208) + 1)<<16>>16;
     HEAP16[$9>>1] = $209;
     $210 = $208&65535;
     $211 = ((($9)) + 2|0);
     $212 = (($211) + ($210<<1)|0);
     HEAP16[$212>>1] = $207;
     $213 = $15;
     $214 = (($213) + 1)|0;
     $15 = $214;
    }
    $215 = $8;
    $216 = (_hyphenHashLookup($215,$9)|0);
    $11 = $216;
    $217 = $11;
    $218 = ($217|0)!=(65535);
    if ($218) {
     break;
    }
    $219 = $14;
    $220 = (($219) + 1)|0;
    $14 = $220;
   }
   $221 = $18;
   $222 = ((($221)) + 8|0);
   $223 = HEAP32[$222>>2]|0;
   $224 = ($223|0)!=(0);
   if ($224) {
    $225 = $11;
    $226 = $225&65535;
    $227 = $18;
    $228 = ((($227)) + 8|0);
    $229 = HEAP32[$228>>2]|0;
    $230 = ((($19)) + 4|0);
    $231 = HEAP32[$230>>2]|0;
    $232 = (($231) + (($229*12)|0)|0);
    $233 = ((($232)) + 8|0);
    HEAP16[$233>>1] = $226;
   }
   $234 = $18;
   $235 = HEAP32[$234>>2]|0;
   $18 = $235;
  }
  $236 = $13;
  $237 = (($236) + 1)|0;
  $13 = $237;
 }
 $238 = $8;
 _hyphenHashFree($238);
 $13 = 0;
 while(1) {
  $239 = $13;
  $240 = HEAP32[$19>>2]|0;
  $241 = ($239|0)<($240|0);
  if (!($241)) {
   break;
  }
  $242 = $13;
  $243 = ((($19)) + 4|0);
  $244 = HEAP32[$243>>2]|0;
  $245 = (($244) + (($242*12)|0)|0);
  $246 = ((($245)) + 10|0);
  $247 = HEAP16[$246>>1]|0;
  $248 = $247&65535;
  $249 = ($248|0)==(0);
  $250 = $13;
  $251 = ((($19)) + 4|0);
  $252 = HEAP32[$251>>2]|0;
  $253 = (($252) + (($250*12)|0)|0);
  if ($249) {
   HEAP32[$253>>2] = 0;
  } else {
   $254 = HEAP32[$253>>2]|0;
   $7 = $254;
   $255 = $3;
   $256 = $13;
   $257 = ((($19)) + 4|0);
   $258 = HEAP32[$257>>2]|0;
   $259 = (($258) + (($256*12)|0)|0);
   $260 = $13;
   $261 = ((($19)) + 4|0);
   $262 = HEAP32[$261>>2]|0;
   $263 = (($262) + (($260*12)|0)|0);
   $264 = ((($263)) + 10|0);
   $265 = HEAP16[$264>>1]|0;
   $266 = $265&65535;
   $267 = $266<<2;
   $268 = $5;
   (_allocateSpaceInTranslationTable($255,$259,$267,$268)|0);
   $269 = $13;
   $270 = ((($19)) + 4|0);
   $271 = HEAP32[$270>>2]|0;
   $272 = (($271) + (($269*12)|0)|0);
   $273 = HEAP32[$272>>2]|0;
   $274 = $5;
   $275 = HEAP32[$274>>2]|0;
   $276 = ((($275)) + 31168|0);
   $277 = (($276) + ($273<<3)|0);
   $278 = $7;
   $279 = $13;
   $280 = ((($19)) + 4|0);
   $281 = HEAP32[$280>>2]|0;
   $282 = (($281) + (($279*12)|0)|0);
   $283 = ((($282)) + 10|0);
   $284 = HEAP16[$283>>1]|0;
   $285 = $284&65535;
   $286 = $285<<2;
   _memcpy(($277|0),($278|0),($286|0))|0;
   $287 = $7;
   _rpl_free($287);
  }
  $288 = $13;
  $289 = (($288) + 1)|0;
  $13 = $289;
 }
 $290 = $3;
 $291 = HEAP32[$19>>2]|0;
 $292 = ($291*12)|0;
 $293 = $5;
 (_allocateSpaceInTranslationTable($290,$20,$292,$293)|0);
 $294 = HEAP32[$20>>2]|0;
 $295 = $5;
 $296 = HEAP32[$295>>2]|0;
 $297 = ((($296)) + 2096|0);
 HEAP32[$297>>2] = $294;
 $298 = $5;
 $299 = HEAP32[$298>>2]|0;
 $300 = ((($299)) + 2096|0);
 $301 = HEAP32[$300>>2]|0;
 $302 = $5;
 $303 = HEAP32[$302>>2]|0;
 $304 = ((($303)) + 31168|0);
 $305 = (($304) + ($301<<3)|0);
 $306 = ((($19)) + 4|0);
 $307 = HEAP32[$306>>2]|0;
 $308 = HEAP32[$19>>2]|0;
 $309 = ($308*12)|0;
 _memcpy(($305|0),($307|0),($309|0))|0;
 $310 = ((($19)) + 4|0);
 $311 = HEAP32[$310>>2]|0;
 _rpl_free($311);
 STACKTOP = sp;return 1;
}
function _getOpcode($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = HEAP32[4354]|0;
 $5 = $6;
 while(1) {
  $7 = $4;
  $8 = HEAP16[$7>>1]|0;
  $9 = $8&65535;
  $10 = $5;
  $11 = (18272 + ($10<<1)|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12 << 16 >> 16;
  $14 = ($9|0)==($13|0);
  if ($14) {
   $15 = $5;
   $16 = (824 + ($15<<2)|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $4;
   $19 = ((($18)) + 2|0);
   $20 = $4;
   $21 = HEAP16[$20>>1]|0;
   $22 = $21&65535;
   $23 = (_eqasc2uni($17,$19,$22)|0);
   $24 = ($23|0)!=(0);
   if ($24) {
    label = 4;
    break;
   }
  }
  $27 = $5;
  $28 = (($27) + 1)|0;
  $5 = $28;
  $29 = $5;
  $30 = ($29>>>0)>=(117);
  $$ = $30 ? 0 : $28;
  $5 = $$;
  $31 = $5;
  $32 = HEAP32[4354]|0;
  $33 = ($31|0)!=($32|0);
  if (!($33)) {
   label = 6;
   break;
  }
 }
 if ((label|0) == 4) {
  $25 = $5;
  HEAP32[4354] = $25;
  $26 = $5;
  $2 = $26;
  $34 = $2;
  STACKTOP = sp;return ($34|0);
 }
 else if ((label|0) == 6) {
  $2 = 117;
  $34 = $2;
  STACKTOP = sp;return ($34|0);
 }
 return (0)|0;
}
function _includeFile($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_ptr7 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2112|0);
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $10 = sp + 56|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = 0;
 while(1) {
  $13 = $9;
  $14 = $6;
  $15 = HEAP16[$14>>1]|0;
  $16 = $15&65535;
  $17 = ($13|0)<($16|0);
  $18 = $9;
  if (!($17)) {
   break;
  }
  $19 = $6;
  $20 = ((($19)) + 2|0);
  $21 = (($20) + ($18<<1)|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22&255;
  $24 = $9;
  $25 = (($10) + ($24)|0);
  HEAP8[$25>>0] = $23;
  $26 = $9;
  $27 = (($26) + 1)|0;
  $9 = $27;
 }
 $28 = ($18|0)>=(2048);
 if ($28) {
  $29 = $5;
  HEAP32[$vararg_buffer>>2] = $10;
  _compileError($29,7468,$vararg_buffer);
  $4 = 0;
  $58 = $4;
  STACKTOP = sp;return ($58|0);
 }
 $30 = $9;
 $31 = (($10) + ($30)|0);
 HEAP8[$31>>0] = 0;
 $32 = $5;
 $33 = HEAP32[$32>>2]|0;
 $34 = (__lou_resolveTable($10,$33)|0);
 $11 = $34;
 $35 = $11;
 $36 = ($35|0)==(0|0);
 if ($36) {
  $37 = HEAP32[3278]|0;
  $38 = (($37) + 1)|0;
  HEAP32[3278] = $38;
  $4 = 0;
  $58 = $4;
  STACKTOP = sp;return ($58|0);
 }
 $39 = $11;
 $40 = ((($39)) + 4|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)!=(0|0);
 $43 = $11;
 if ($42) {
  _free_tablefiles($43);
  $44 = $5;
  HEAP32[$vararg_buffer1>>2] = $10;
  _compileError($44,7509,$vararg_buffer1);
  $4 = 0;
  $58 = $4;
  STACKTOP = sp;return ($58|0);
 }
 $45 = HEAP32[$43>>2]|0;
 $46 = $7;
 $47 = $8;
 $48 = (_compileFile($45,$46,$47)|0);
 $12 = $48;
 $49 = $11;
 _free_tablefiles($49);
 $50 = $12;
 $51 = ($50|0)!=(0);
 if (!($51)) {
  $52 = $5;
  $53 = HEAP32[$52>>2]|0;
  $54 = $5;
  $55 = ((($54)) + 12|0);
  $56 = HEAP32[$55>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $53;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $56;
  __lou_logMessage(40000,7569,$vararg_buffer4);
 }
 $57 = $12;
 $4 = $57;
 $58 = $4;
 STACKTOP = sp;return ($58|0);
}
function _compileCharDef($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(8256|0);
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $11 = sp;
 $16 = sp + 4158|0;
 $17 = sp + 60|0;
 $9 = $0;
 $10 = $1;
 $21 = $11;
 $22 = $21;
 HEAP32[$22>>2] = $2;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $25 = $9;
 $26 = (_getRuleCharsText($25,$16)|0);
 $27 = ($26|0)!=(0);
 if (!($27)) {
  $8 = 0;
  $153 = $8;
  STACKTOP = sp;return ($153|0);
 }
 $28 = $9;
 $29 = (_getRuleDotsPattern($28,$17)|0);
 $30 = ($29|0)!=(0);
 if (!($30)) {
  $8 = 0;
  $153 = $8;
  STACKTOP = sp;return ($153|0);
 }
 $31 = HEAP16[$16>>1]|0;
 $32 = $31&65535;
 $33 = ($32|0)!=(1);
 if ($33) {
  $34 = $9;
  _compileError($34,7599,$vararg_buffer);
  $8 = 0;
  $153 = $8;
  STACKTOP = sp;return ($153|0);
 }
 $35 = HEAP16[$17>>1]|0;
 $36 = $35&65535;
 $37 = ($36|0)<(1);
 if ($37) {
  $38 = $9;
  _compileError($38,7634,$vararg_buffer1);
  $8 = 0;
  $153 = $8;
  STACKTOP = sp;return ($153|0);
 }
 $39 = $14;
 $40 = ($39|0)!=(0|0);
 if ($40) {
  $19 = 0;
  $41 = $11;
  $42 = $41;
  $43 = HEAP32[$42>>2]|0;
  $44 = (($41) + 4)|0;
  $45 = $44;
  $46 = HEAP32[$45>>2]|0;
  $47 = $43 & 48;
  $48 = ($47|0)!=(0);
  $49 = (0)!=(0);
  $50 = $48 | $49;
  if ($50) {
   $51 = $11;
   $52 = $51;
   $53 = HEAP32[$52>>2]|0;
   $54 = (($51) + 4)|0;
   $55 = $54;
   $56 = HEAP32[$55>>2]|0;
   $57 = $53 | 2;
   $58 = $11;
   $59 = $58;
   HEAP32[$59>>2] = $57;
   $60 = (($58) + 4)|0;
   $61 = $60;
   HEAP32[$61>>2] = $56;
  }
  $62 = $9;
  $63 = ((($16)) + 2|0);
  $64 = HEAP16[$63>>1]|0;
  $65 = $14;
  $66 = (_putChar($62,$64,$65,0)|0);
  $18 = $66;
  $67 = $11;
  $68 = $67;
  $69 = HEAP32[$68>>2]|0;
  $70 = (($67) + 4)|0;
  $71 = $70;
  $72 = HEAP32[$71>>2]|0;
  $73 = $18;
  $74 = ((($73)) + 24|0);
  $75 = $74;
  $76 = $75;
  $77 = HEAP32[$76>>2]|0;
  $78 = (($75) + 4)|0;
  $79 = $78;
  $80 = HEAP32[$79>>2]|0;
  $81 = $77 | $69;
  $82 = $80 | $72;
  $83 = $74;
  $84 = $83;
  HEAP32[$84>>2] = $81;
  $85 = (($83) + 4)|0;
  $86 = $85;
  HEAP32[$86>>2] = $82;
  $87 = HEAP16[$17>>1]|0;
  $88 = $87&65535;
  $89 = (($88) - 1)|0;
  $20 = $89;
  while(1) {
   $90 = $20;
   $91 = ($90|0)>=(0);
   if (!($91)) {
    break;
   }
   $92 = $20;
   $93 = ((($17)) + 2|0);
   $94 = (($93) + ($92<<1)|0);
   $95 = HEAP16[$94>>1]|0;
   $96 = $14;
   $97 = HEAP32[$96>>2]|0;
   $98 = (_getDots($95,$97)|0);
   $19 = $98;
   $99 = $19;
   $100 = ($99|0)!=(0|0);
   if (!($100)) {
    $101 = $9;
    $102 = $20;
    $103 = ((($17)) + 2|0);
    $104 = (($103) + ($102<<1)|0);
    $105 = HEAP16[$104>>1]|0;
    $106 = $14;
    $107 = (_putDots($101,$105,$106)|0);
    $19 = $107;
   }
   $108 = $20;
   $109 = (($108) - 1)|0;
   $20 = $109;
  }
  $110 = HEAP16[$17>>1]|0;
  $111 = $110&65535;
  $112 = ($111|0)==(1);
  if ($112) {
   $113 = $11;
   $114 = $113;
   $115 = HEAP32[$114>>2]|0;
   $116 = (($113) + 4)|0;
   $117 = $116;
   $118 = HEAP32[$117>>2]|0;
   $119 = $19;
   $120 = ((($119)) + 24|0);
   $121 = $120;
   $122 = $121;
   $123 = HEAP32[$122>>2]|0;
   $124 = (($121) + 4)|0;
   $125 = $124;
   $126 = HEAP32[$125>>2]|0;
   $127 = $123 | $115;
   $128 = $126 | $118;
   $129 = $120;
   $130 = $129;
   HEAP32[$130>>2] = $127;
   $131 = (($129) + 4)|0;
   $132 = $131;
   HEAP32[$132>>2] = $128;
  }
 }
 $133 = $15;
 $134 = ($133|0)!=(0|0);
 if ($134) {
  $135 = HEAP16[$17>>1]|0;
  $136 = $135&65535;
  $137 = ($136|0)==(1);
  if ($137) {
   $138 = $9;
   $139 = ((($16)) + 2|0);
   $140 = HEAP16[$139>>1]|0;
   $141 = ((($17)) + 2|0);
   $142 = HEAP16[$141>>1]|0;
   $143 = $15;
   (_putCharDotsMapping($138,$140,$142,$143)|0);
  }
 }
 $144 = $14;
 $145 = ($144|0)!=(0|0);
 if ($145) {
  $146 = $9;
  $147 = $10;
  $148 = $12;
  $149 = $13;
  $150 = $14;
  $151 = (_addRule($146,$147,$16,$17,0,0,0,0,0,0,$148,$149,$150)|0);
  $152 = ($151|0)!=(0);
  if (!($152)) {
   $8 = 0;
   $153 = $8;
   STACKTOP = sp;return ($153|0);
  }
 }
 $8 = 1;
 $153 = $8;
 STACKTOP = sp;return ($153|0);
}
function _compileGrouping($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16448|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $12 = sp + 12346|0;
 $13 = sp + 8248|0;
 $14 = sp + 4150|0;
 $15 = sp + 52|0;
 $16 = sp + 16|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $20 = $6;
 $21 = (_getToken($20,$12,7665)|0);
 $22 = ($21|0)!=(0);
 if (!($22)) {
  $5 = 0;
  $187 = $5;
  STACKTOP = sp;return ($187|0);
 }
 $23 = $6;
 $24 = (_getRuleCharsText($23,$13)|0);
 $25 = ($24|0)!=(0);
 if (!($25)) {
  $5 = 0;
  $187 = $5;
  STACKTOP = sp;return ($187|0);
 }
 $26 = $6;
 $27 = (_getToken($26,$14,7678)|0);
 $28 = ($27|0)!=(0);
 if (!($28)) {
  $5 = 0;
  $187 = $5;
  STACKTOP = sp;return ($187|0);
 }
 $11 = 0;
 while(1) {
  $29 = $11;
  $30 = HEAP16[$14>>1]|0;
  $31 = $30&65535;
  $32 = ($29|0)<($31|0);
  if (!($32)) {
   break;
  }
  $33 = $11;
  $34 = ((($14)) + 2|0);
  $35 = (($34) + ($33<<1)|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = $36&65535;
  $38 = ($37|0)!=(44);
  if (!($38)) {
   break;
  }
  $39 = $11;
  $40 = (($39) + 1)|0;
  $11 = $40;
 }
 $41 = $11;
 $42 = HEAP16[$14>>1]|0;
 $43 = $42&65535;
 $44 = ($41|0)==($43|0);
 if ($44) {
  $45 = $6;
  _compileError($45,7691,$vararg_buffer);
  $5 = 0;
  $187 = $5;
  STACKTOP = sp;return ($187|0);
 }
 $46 = $11;
 $47 = ((($14)) + 2|0);
 $48 = (($47) + ($46<<1)|0);
 HEAP16[$48>>1] = 45;
 $49 = $6;
 $50 = (_parseDots($49,$15,$14)|0);
 $51 = ($50|0)!=(0);
 if (!($51)) {
  $5 = 0;
  $187 = $5;
  STACKTOP = sp;return ($187|0);
 }
 $52 = HEAP16[$13>>1]|0;
 $53 = $52&65535;
 $54 = ($53|0)!=(2);
 if (!($54)) {
  $55 = HEAP16[$15>>1]|0;
  $56 = $55&65535;
  $57 = ($56|0)!=(2);
  if (!($57)) {
   $59 = $9;
   $60 = ($59|0)!=(0|0);
   if ($60) {
    $61 = $6;
    $62 = ((($13)) + 2|0);
    $63 = HEAP16[$62>>1]|0;
    $64 = $9;
    $65 = (_putChar($61,$63,$64,0)|0);
    $17 = $65;
    $66 = $17;
    $67 = ((($66)) + 24|0);
    $68 = $67;
    $69 = $68;
    $70 = HEAP32[$69>>2]|0;
    $71 = (($68) + 4)|0;
    $72 = $71;
    $73 = HEAP32[$72>>2]|0;
    $74 = $70 | 64;
    $75 = $67;
    $76 = $75;
    HEAP32[$76>>2] = $74;
    $77 = (($75) + 4)|0;
    $78 = $77;
    HEAP32[$78>>2] = $73;
    $79 = $6;
    $80 = ((($13)) + 2|0);
    $81 = ((($80)) + 2|0);
    $82 = HEAP16[$81>>1]|0;
    $83 = $9;
    $84 = (_putChar($79,$82,$83,0)|0);
    $17 = $84;
    $85 = $17;
    $86 = ((($85)) + 24|0);
    $87 = $86;
    $88 = $87;
    $89 = HEAP32[$88>>2]|0;
    $90 = (($87) + 4)|0;
    $91 = $90;
    $92 = HEAP32[$91>>2]|0;
    $93 = $89 | 64;
    $94 = $86;
    $95 = $94;
    HEAP32[$95>>2] = $93;
    $96 = (($94) + 4)|0;
    $97 = $96;
    HEAP32[$97>>2] = $92;
    $98 = $6;
    $99 = ((($15)) + 2|0);
    $100 = HEAP16[$99>>1]|0;
    $101 = $9;
    $102 = (_putDots($98,$100,$101)|0);
    $17 = $102;
    $103 = $17;
    $104 = ((($103)) + 24|0);
    $105 = $104;
    $106 = $105;
    $107 = HEAP32[$106>>2]|0;
    $108 = (($105) + 4)|0;
    $109 = $108;
    $110 = HEAP32[$109>>2]|0;
    $111 = $107 | 64;
    $112 = $104;
    $113 = $112;
    HEAP32[$113>>2] = $111;
    $114 = (($112) + 4)|0;
    $115 = $114;
    HEAP32[$115>>2] = $110;
    $116 = $6;
    $117 = ((($15)) + 2|0);
    $118 = ((($117)) + 2|0);
    $119 = HEAP16[$118>>1]|0;
    $120 = $9;
    $121 = (_putDots($116,$119,$120)|0);
    $17 = $121;
    $122 = $17;
    $123 = ((($122)) + 24|0);
    $124 = $123;
    $125 = $124;
    $126 = HEAP32[$125>>2]|0;
    $127 = (($124) + 4)|0;
    $128 = $127;
    $129 = HEAP32[$128>>2]|0;
    $130 = $126 | 64;
    $131 = $123;
    $132 = $131;
    HEAP32[$132>>2] = $130;
    $133 = (($131) + 4)|0;
    $134 = $133;
    HEAP32[$134>>2] = $129;
    $135 = $6;
    $136 = $7;
    $137 = $8;
    $138 = $9;
    $139 = (_addRule($135,69,$13,$15,0,0,0,0,$16,0,$136,$137,$138)|0);
    $140 = ($139|0)!=(0);
    if (!($140)) {
     $5 = 0;
     $187 = $5;
     STACKTOP = sp;return ($187|0);
    }
    $141 = $6;
    $142 = HEAP32[$16>>2]|0;
    $143 = $9;
    $144 = HEAP32[$143>>2]|0;
    $145 = (_addRuleName($141,$12,$142,$144)|0);
    $146 = ($145|0)!=(0);
    if (!($146)) {
     $5 = 0;
     $187 = $5;
     STACKTOP = sp;return ($187|0);
    }
   }
   $147 = $10;
   $148 = ($147|0)!=(0|0);
   if ($148) {
    $149 = $6;
    $150 = ((($13)) + 2|0);
    $151 = HEAP16[$150>>1]|0;
    $152 = ((($15)) + 2|0);
    $153 = HEAP16[$152>>1]|0;
    $154 = $10;
    (_putCharDotsMapping($149,$151,$153,$154)|0);
    $155 = $6;
    $156 = ((($13)) + 2|0);
    $157 = ((($156)) + 2|0);
    $158 = HEAP16[$157>>1]|0;
    $159 = ((($15)) + 2|0);
    $160 = ((($159)) + 2|0);
    $161 = HEAP16[$160>>1]|0;
    $162 = $10;
    (_putCharDotsMapping($155,$158,$161,$162)|0);
   }
   $163 = $9;
   $164 = ($163|0)!=(0|0);
   if ($164) {
    $165 = ((($13)) + 2|0);
    $166 = ((($165)) + 2|0);
    $167 = HEAP16[$166>>1]|0;
    $18 = $167;
    $168 = ((($15)) + 2|0);
    $169 = ((($168)) + 2|0);
    $170 = HEAP16[$169>>1]|0;
    $19 = $170;
    HEAP16[$15>>1] = 1;
    HEAP16[$13>>1] = 1;
    $171 = $6;
    $172 = $7;
    $173 = $8;
    $174 = $9;
    $175 = (_addRule($171,64,$13,$15,0,0,0,0,0,0,$172,$173,$174)|0);
    $176 = ($175|0)!=(0);
    if (!($176)) {
     $5 = 0;
     $187 = $5;
     STACKTOP = sp;return ($187|0);
    }
    $177 = $18;
    $178 = ((($13)) + 2|0);
    HEAP16[$178>>1] = $177;
    $179 = $19;
    $180 = ((($15)) + 2|0);
    HEAP16[$180>>1] = $179;
    $181 = $6;
    $182 = $7;
    $183 = $8;
    $184 = $9;
    $185 = (_addRule($181,64,$13,$15,0,0,0,0,0,0,$182,$183,$184)|0);
    $186 = ($185|0)!=(0);
    if (!($186)) {
     $5 = 0;
     $187 = $5;
     STACKTOP = sp;return ($187|0);
    }
   }
   $5 = 1;
   $187 = $5;
   STACKTOP = sp;return ($187|0);
  }
 }
 $58 = $6;
 _compileError($58,7751,$vararg_buffer1);
 $5 = 0;
 $187 = $5;
 STACKTOP = sp;return ($187|0);
}
function _getRuleCharsText($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4112|0);
 $5 = sp + 12|0;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = (_getToken($6,$5,7871)|0);
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $3;
  $10 = $4;
  $11 = (_parseChars($9,$10,$5)|0);
  $2 = $11;
  $12 = $2;
  STACKTOP = sp;return ($12|0);
 } else {
  $2 = 0;
  $12 = $2;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _getRuleDotsPattern($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4112|0);
 $5 = sp + 12|0;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = (_getToken($6,$5,7890)|0);
 $8 = ($7|0)!=(0);
 do {
  if ($8) {
   $9 = HEAP16[$5>>1]|0;
   $10 = $9&65535;
   $11 = ($10|0)==(1);
   if ($11) {
    $12 = ((($5)) + 2|0);
    $13 = HEAP16[$12>>1]|0;
    $14 = $13&65535;
    $15 = ($14|0)==(61);
    if ($15) {
     $16 = $4;
     HEAP16[$16>>1] = 0;
     $2 = 1;
     break;
    }
   }
   $17 = $3;
   $18 = $4;
   $19 = (_parseDots($17,$18,$5)|0);
   $2 = $19;
  } else {
   $2 = 0;
  }
 } while(0);
 $20 = $2;
 STACKTOP = sp;return ($20|0);
}
function _putCharDotsMapping($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $10 = sp + 32|0;
 $15 = sp + 12|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $19 = $6;
 $20 = $8;
 $21 = HEAP32[$20>>2]|0;
 $22 = (_getDotsForChar($19,$21)|0);
 $23 = ($22|0)!=(0|0);
 do {
  if (!($23)) {
   $24 = $5;
   $25 = $8;
   $26 = (_allocateSpaceInDisplayTable($24,$10,8,$25)|0);
   $27 = ($26|0)!=(0);
   if (!($27)) {
    $4 = 0;
    $125 = $4;
    STACKTOP = sp;return ($125|0);
   }
   $28 = HEAP32[$10>>2]|0;
   $29 = $8;
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($30)) + 8992|0);
   $32 = (($31) + ($28<<3)|0);
   $9 = $32;
   $33 = $9;
   HEAP32[$33>>2] = 0;
   $34 = $6;
   $35 = $9;
   $36 = ((($35)) + 4|0);
   HEAP16[$36>>1] = $34;
   $37 = $7;
   $38 = $9;
   $39 = ((($38)) + 6|0);
   HEAP16[$39>>1] = $37;
   $40 = $6;
   $41 = (__lou_charHash($40)|0);
   $11 = $41;
   $42 = $11;
   $43 = $8;
   $44 = HEAP32[$43>>2]|0;
   $45 = ((($44)) + 8|0);
   $46 = (($45) + ($42<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   $12 = $47;
   $48 = $12;
   $49 = ($48|0)!=(0);
   if (!($49)) {
    $50 = HEAP32[$10>>2]|0;
    $51 = $11;
    $52 = $8;
    $53 = HEAP32[$52>>2]|0;
    $54 = ((($53)) + 8|0);
    $55 = (($54) + ($51<<2)|0);
    HEAP32[$55>>2] = $50;
    break;
   }
   $56 = $12;
   $57 = $8;
   $58 = HEAP32[$57>>2]|0;
   $59 = ((($58)) + 8992|0);
   $60 = (($59) + ($56<<3)|0);
   $13 = $60;
   while(1) {
    $61 = $13;
    $62 = HEAP32[$61>>2]|0;
    $63 = ($62|0)!=(0);
    if (!($63)) {
     break;
    }
    $64 = $13;
    $65 = HEAP32[$64>>2]|0;
    $66 = $8;
    $67 = HEAP32[$66>>2]|0;
    $68 = ((($67)) + 8992|0);
    $69 = (($68) + ($65<<3)|0);
    $13 = $69;
   }
   $70 = HEAP32[$10>>2]|0;
   $71 = $13;
   HEAP32[$71>>2] = $70;
  }
 } while(0);
 $72 = $7;
 $73 = $8;
 $74 = HEAP32[$73>>2]|0;
 $75 = (_getCharForDots($72,$74)|0);
 $76 = ($75|0)!=(0|0);
 do {
  if (!($76)) {
   $77 = $5;
   $78 = $8;
   $79 = (_allocateSpaceInDisplayTable($77,$15,8,$78)|0);
   $80 = ($79|0)!=(0);
   if (!($80)) {
    $4 = 0;
    $125 = $4;
    STACKTOP = sp;return ($125|0);
   }
   $81 = HEAP32[$15>>2]|0;
   $82 = $8;
   $83 = HEAP32[$82>>2]|0;
   $84 = ((($83)) + 8992|0);
   $85 = (($84) + ($81<<3)|0);
   $14 = $85;
   $86 = $14;
   HEAP32[$86>>2] = 0;
   $87 = $7;
   $88 = $14;
   $89 = ((($88)) + 4|0);
   HEAP16[$89>>1] = $87;
   $90 = $6;
   $91 = $14;
   $92 = ((($91)) + 6|0);
   HEAP16[$92>>1] = $90;
   $93 = $7;
   $94 = (__lou_charHash($93)|0);
   $16 = $94;
   $95 = $16;
   $96 = $8;
   $97 = HEAP32[$96>>2]|0;
   $98 = ((($97)) + 4500|0);
   $99 = (($98) + ($95<<2)|0);
   $100 = HEAP32[$99>>2]|0;
   $17 = $100;
   $101 = $17;
   $102 = ($101|0)!=(0);
   if (!($102)) {
    $103 = HEAP32[$15>>2]|0;
    $104 = $16;
    $105 = $8;
    $106 = HEAP32[$105>>2]|0;
    $107 = ((($106)) + 4500|0);
    $108 = (($107) + ($104<<2)|0);
    HEAP32[$108>>2] = $103;
    break;
   }
   $109 = $17;
   $110 = $8;
   $111 = HEAP32[$110>>2]|0;
   $112 = ((($111)) + 8992|0);
   $113 = (($112) + ($109<<3)|0);
   $18 = $113;
   while(1) {
    $114 = $18;
    $115 = HEAP32[$114>>2]|0;
    $116 = ($115|0)!=(0);
    if (!($116)) {
     break;
    }
    $117 = $18;
    $118 = HEAP32[$117>>2]|0;
    $119 = $8;
    $120 = HEAP32[$119>>2]|0;
    $121 = ((($120)) + 8992|0);
    $122 = (($121) + ($118<<3)|0);
    $18 = $122;
   }
   $123 = HEAP32[$15>>2]|0;
   $124 = $18;
   HEAP32[$124>>2] = $123;
  }
 } while(0);
 $4 = 1;
 $125 = $4;
 STACKTOP = sp;return ($125|0);
}
function _compileBrailleIndicator($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(8240|0);
 $15 = sp + 4130|0;
 $16 = sp + 32|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $17 = $8;
 $18 = $9;
 $19 = (_getToken($17,$15,$18)|0);
 $20 = ($19|0)!=(0);
 if (!($20)) {
  $7 = 0;
  $31 = $7;
  STACKTOP = sp;return ($31|0);
 }
 $21 = $8;
 $22 = (_parseDots($21,$16,$15)|0);
 $23 = ($22|0)!=(0);
 if ($23) {
  $24 = $8;
  $25 = $10;
  $26 = $11;
  $27 = $12;
  $28 = $13;
  $29 = $14;
  $30 = (_addRule($24,$25,0,$16,0,0,0,0,$26,0,$27,$28,$29)|0);
  $7 = $30;
  $31 = $7;
  STACKTOP = sp;return ($31|0);
 } else {
  $7 = 0;
  $31 = $7;
  STACKTOP = sp;return ($31|0);
 }
 return (0)|0;
}
function _getCharacters($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4112|0);
 $5 = sp + 12|0;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = (_getToken($6,$5,7940)|0);
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $3;
  $10 = $4;
  $11 = (_parseChars($9,$10,$5)|0);
  $2 = $11;
  $12 = $2;
  STACKTOP = sp;return ($12|0);
 } else {
  $2 = 0;
  $12 = $2;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _addRule($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0;
 var $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $18 = sp + 8|0;
 $19 = sp;
 $25 = sp + 32|0;
 $14 = $0;
 $15 = $1;
 $16 = $2;
 $17 = $3;
 $30 = $18;
 $31 = $30;
 HEAP32[$31>>2] = $4;
 $32 = (($30) + 4)|0;
 $33 = $32;
 HEAP32[$33>>2] = $5;
 $34 = $19;
 $35 = $34;
 HEAP32[$35>>2] = $6;
 $36 = (($34) + 4)|0;
 $37 = $36;
 HEAP32[$37>>2] = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $23 = $11;
 $24 = $12;
 $26 = 52;
 $38 = $16;
 $39 = ($38|0)!=(0|0);
 if ($39) {
  $40 = $16;
  $41 = HEAP16[$40>>1]|0;
  $42 = $41&65535;
  $43 = $42<<1;
  $44 = $26;
  $45 = (($44) + ($43))|0;
  $26 = $45;
 }
 $46 = $17;
 $47 = ($46|0)!=(0|0);
 if ($47) {
  $48 = $17;
  $49 = HEAP16[$48>>1]|0;
  $50 = $49&65535;
  $51 = $50<<1;
  $52 = $26;
  $53 = (($52) + ($51))|0;
  $26 = $53;
 }
 $54 = $14;
 $55 = $26;
 $56 = $24;
 $57 = (_allocateSpaceInTranslationTable($54,$25,$55,$56)|0);
 $58 = ($57|0)!=(0);
 if (!($58)) {
  $13 = 0;
  $250 = $13;
  STACKTOP = sp;return ($250|0);
 }
 $59 = HEAP32[$25>>2]|0;
 $60 = $24;
 $61 = HEAP32[$60>>2]|0;
 $62 = ((($61)) + 31168|0);
 $63 = (($62) + ($59<<3)|0);
 $27 = $63;
 $64 = $21;
 $65 = ($64|0)!=(0|0);
 if ($65) {
  $66 = $27;
  $67 = $21;
  HEAP32[$67>>2] = $66;
 }
 $68 = $20;
 $69 = ($68|0)!=(0|0);
 if ($69) {
  $70 = HEAP32[$25>>2]|0;
  $71 = $20;
  HEAP32[$71>>2] = $70;
 }
 $72 = $14;
 $73 = ((($72)) + 4|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = $27;
 HEAP32[$75>>2] = $74;
 $76 = $14;
 $77 = ((($76)) + 12|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = $27;
 $80 = ((($79)) + 4|0);
 HEAP32[$80>>2] = $78;
 $81 = $15;
 $82 = $27;
 $83 = ((($82)) + 36|0);
 HEAP32[$83>>2] = $81;
 $84 = $18;
 $85 = $84;
 $86 = HEAP32[$85>>2]|0;
 $87 = (($84) + 4)|0;
 $88 = $87;
 $89 = HEAP32[$88>>2]|0;
 $90 = $27;
 $91 = ((($90)) + 16|0);
 $92 = $91;
 $93 = $92;
 HEAP32[$93>>2] = $86;
 $94 = (($92) + 4)|0;
 $95 = $94;
 HEAP32[$95>>2] = $89;
 $96 = $19;
 $97 = $96;
 $98 = HEAP32[$97>>2]|0;
 $99 = (($96) + 4)|0;
 $100 = $99;
 $101 = HEAP32[$100>>2]|0;
 $102 = $27;
 $103 = ((($102)) + 24|0);
 $104 = $103;
 $105 = $104;
 HEAP32[$105>>2] = $98;
 $106 = (($104) + 4)|0;
 $107 = $106;
 HEAP32[$107>>2] = $101;
 $108 = $27;
 $109 = ((($108)) + 40|0);
 HEAP8[$109>>0] = 0;
 $110 = $16;
 $111 = ($110|0)!=(0|0);
 $112 = $27;
 if ($111) {
  $113 = ((($112)) + 46|0);
  $114 = $16;
  $115 = ((($114)) + 2|0);
  $116 = $16;
  $117 = HEAP16[$116>>1]|0;
  $118 = $27;
  $119 = ((($118)) + 42|0);
  HEAP16[$119>>1] = $117;
  $120 = $117 << 16 >> 16;
  $121 = $120<<1;
  _memcpy(($113|0),($115|0),($121|0))|0;
 } else {
  $122 = ((($112)) + 42|0);
  HEAP16[$122>>1] = 0;
 }
 $123 = $17;
 $124 = ($123|0)!=(0|0);
 $125 = $27;
 if ($124) {
  $126 = ((($125)) + 42|0);
  $127 = HEAP16[$126>>1]|0;
  $128 = $127 << 16 >> 16;
  $129 = $27;
  $130 = ((($129)) + 46|0);
  $131 = (($130) + ($128<<1)|0);
  $132 = $17;
  $133 = ((($132)) + 2|0);
  $134 = $17;
  $135 = HEAP16[$134>>1]|0;
  $136 = $27;
  $137 = ((($136)) + 44|0);
  HEAP16[$137>>1] = $135;
  $138 = $135 << 16 >> 16;
  $139 = $138<<1;
  _memcpy(($131|0),($133|0),($139|0))|0;
 } else {
  $140 = ((($125)) + 44|0);
  HEAP16[$140>>1] = 0;
 }
 $141 = $15;
 $142 = ($141|0)==(58);
 $143 = $15;
 $144 = ($143|0)==(59);
 $or$cond = $142 | $144;
 $145 = $15;
 $146 = ($145|0)==(60);
 $or$cond3 = $or$cond | $146;
 if ($or$cond3) {
  $13 = 1;
  $250 = $13;
  STACKTOP = sp;return ($250|0);
 }
 $147 = $15;
 $148 = ($147>>>0)>=(74);
 $149 = $15;
 $150 = ($149>>>0)<=(78);
 $or$cond5 = $148 & $150;
 do {
  if ($or$cond5) {
   $151 = $15;
   $152 = ($151|0)==(74);
   if ($152) {
    $153 = $27;
    $154 = ((($153)) + 42|0);
    $155 = HEAP16[$154>>1]|0;
    $156 = $155 << 16 >> 16;
    $157 = ($156|0)>(0);
    if ($157) {
     break;
    }
   }
   $158 = $23;
   $159 = ($158|0)!=(0);
   if (!($159)) {
    $160 = HEAP32[$25>>2]|0;
    $161 = $27;
    $162 = $24;
    $163 = HEAP32[$162>>2]|0;
    $164 = (_addForwardPassRule($160,$161,$163)|0);
    $165 = ($164|0)!=(0);
    if (!($165)) {
     $13 = 0;
     $250 = $13;
     STACKTOP = sp;return ($250|0);
    }
   }
   $166 = $22;
   $167 = ($166|0)!=(0);
   if (!($167)) {
    $168 = HEAP32[$25>>2]|0;
    $169 = $27;
    $170 = $24;
    $171 = HEAP32[$170>>2]|0;
    $172 = (_addBackwardPassRule($168,$169,$171)|0);
    $173 = ($172|0)!=(0);
    if (!($173)) {
     $13 = 0;
     $250 = $13;
     STACKTOP = sp;return ($250|0);
    }
   }
   $13 = 1;
   $250 = $13;
   STACKTOP = sp;return ($250|0);
  }
 } while(0);
 $174 = $23;
 $175 = ($174|0)!=(0);
 do {
  if (!($175)) {
   $176 = $27;
   $177 = ((($176)) + 42|0);
   $178 = HEAP16[$177>>1]|0;
   $179 = $178 << 16 >> 16;
   $180 = ($179|0)==(1);
   if ($180) {
    $181 = $14;
    $182 = HEAP32[$25>>2]|0;
    $183 = $27;
    $184 = $24;
    _addForwardRuleWithSingleChar($181,$182,$183,$184);
    $185 = HEAP32[$25>>2]|0;
    $186 = $24;
    $187 = HEAP32[$186>>2]|0;
    $188 = ((($187)) + 31168|0);
    $189 = (($188) + ($185<<3)|0);
    $27 = $189;
    $190 = $21;
    $191 = ($190|0)!=(0|0);
    if (!($191)) {
     break;
    }
    $192 = $27;
    $193 = $21;
    HEAP32[$193>>2] = $192;
    break;
   } else {
    $194 = $27;
    $195 = ((($194)) + 42|0);
    $196 = HEAP16[$195>>1]|0;
    $197 = $196 << 16 >> 16;
    $198 = ($197|0)>(1);
    if (!($198)) {
     break;
    }
    $199 = HEAP32[$25>>2]|0;
    $200 = $27;
    $201 = $24;
    $202 = HEAP32[$201>>2]|0;
    _addForwardRuleWithMultipleChars($199,$200,$202);
    break;
   }
  }
 } while(0);
 $203 = $22;
 $204 = ($203|0)!=(0);
 do {
  if (!($204)) {
   $205 = $27;
   $206 = ((($205)) + 36|0);
   $207 = HEAP32[$206>>2]|0;
   $208 = ($207|0)==(74);
   $209 = $27;
   if ($208) {
    $210 = ((($209)) + 46|0);
    $28 = $210;
    $211 = $27;
    $212 = ((($211)) + 42|0);
    $213 = HEAP16[$212>>1]|0;
    $214 = $213 << 16 >> 16;
    $29 = $214;
   } else {
    $215 = ((($209)) + 42|0);
    $216 = HEAP16[$215>>1]|0;
    $217 = $216 << 16 >> 16;
    $218 = $27;
    $219 = ((($218)) + 46|0);
    $220 = (($219) + ($217<<1)|0);
    $28 = $220;
    $221 = $27;
    $222 = ((($221)) + 44|0);
    $223 = HEAP16[$222>>1]|0;
    $224 = $223 << 16 >> 16;
    $29 = $224;
   }
   $225 = $29;
   $226 = ($225|0)==(1);
   if ($226) {
    $227 = $14;
    $228 = $28;
    $229 = HEAP16[$228>>1]|0;
    $230 = HEAP32[$25>>2]|0;
    $231 = $27;
    $232 = $24;
    _addBackwardRuleWithSingleCell($227,$229,$230,$231,$232);
    $233 = HEAP32[$25>>2]|0;
    $234 = $24;
    $235 = HEAP32[$234>>2]|0;
    $236 = ((($235)) + 31168|0);
    $237 = (($236) + ($233<<3)|0);
    $27 = $237;
    $238 = $21;
    $239 = ($238|0)!=(0|0);
    if (!($239)) {
     break;
    }
    $240 = $27;
    $241 = $21;
    HEAP32[$241>>2] = $240;
    break;
   } else {
    $242 = $29;
    $243 = ($242|0)>(1);
    if (!($243)) {
     break;
    }
    $244 = $28;
    $245 = $29;
    $246 = HEAP32[$25>>2]|0;
    $247 = $27;
    $248 = $24;
    $249 = HEAP32[$248>>2]|0;
    _addBackwardRuleWithMultipleCells($244,$245,$246,$247,$249);
    break;
   }
  }
 } while(0);
 $13 = 1;
 $250 = $13;
 STACKTOP = sp;return ($250|0);
}
function _allocateSpaceInTranslationTable($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $13 = $6;
 $14 = (($13) + 8)|0;
 $15 = (($14) - 1)|0;
 $16 = (($15>>>0) / 8)&-1;
 $17 = $16<<3;
 $8 = $17;
 $18 = $7;
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $8;
 $23 = (($21) + ($22))|0;
 $9 = $23;
 $24 = $7;
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[$25>>2]|0;
 $10 = $26;
 $27 = $9;
 $28 = $10;
 $29 = ($27>>>0)>($28>>>0);
 if ($29) {
  $30 = $9;
  $31 = (($30>>>0) / 8)&-1;
  $32 = $9;
  $33 = (($32) + ($31))|0;
  $9 = $33;
  $34 = $7;
  $35 = HEAP32[$34>>2]|0;
  $36 = $9;
  $37 = (_rpl_realloc($35,$36)|0);
  $11 = $37;
  $38 = $11;
  $39 = ($38|0)!=(0|0);
  if (!($39)) {
   $40 = $4;
   _compileError($40,8124,$vararg_buffer);
   __lou_outOfMemory();
  }
  $41 = $11;
  $42 = $10;
  $43 = (($41) + ($42)|0);
  $44 = $9;
  $45 = $10;
  $46 = (($44) - ($45))|0;
  _memset(($43|0),0,($46|0))|0;
  $47 = HEAP32[4313]|0;
  $12 = $47;
  while(1) {
   $48 = $12;
   $49 = ($48|0)!=(0|0);
   if (!($49)) {
    break;
   }
   $50 = $12;
   $51 = ((($50)) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $7;
   $54 = HEAP32[$53>>2]|0;
   $55 = ($52|0)==($54|0);
   if ($55) {
    $56 = $11;
    $57 = $12;
    $58 = ((($57)) + 4|0);
    HEAP32[$58>>2] = $56;
   }
   $59 = $12;
   $60 = HEAP32[$59>>2]|0;
   $12 = $60;
  }
  $61 = $9;
  $62 = $11;
  HEAP32[$62>>2] = $61;
  $63 = $11;
  $64 = $7;
  HEAP32[$64>>2] = $63;
 }
 $65 = $5;
 $66 = ($65|0)!=(0|0);
 if (!($66)) {
  STACKTOP = sp;return 1;
 }
 $67 = $7;
 $68 = HEAP32[$67>>2]|0;
 $69 = ((($68)) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = (($70) - 31176)|0;
 $72 = (($71>>>0) / 8)&-1;
 $73 = $5;
 HEAP32[$73>>2] = $72;
 $74 = $8;
 $75 = $7;
 $76 = HEAP32[$75>>2]|0;
 $77 = ((($76)) + 4|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = (($78) + ($74))|0;
 HEAP32[$77>>2] = $79;
 STACKTOP = sp;return 1;
}
function _allocateCharacterClasses($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4128|0);
 $4 = sp + 24|0;
 $2 = $0;
 $3 = 0;
 $7 = $2;
 $8 = ((($7)) + 8|0);
 HEAP32[$8>>2] = 0;
 $9 = $2;
 $10 = ((($9)) + 16|0);
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = 1;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = 0;
 $15 = $2;
 $16 = ((($15)) + 24|0);
 $17 = $16;
 $18 = $17;
 HEAP32[$18>>2] = 65536;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = 0;
 while(1) {
  $21 = $3;
  $22 = (1328 + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)!=(0|0);
  if (!($24)) {
   label = 9;
   break;
  }
  $25 = $3;
  $26 = (1328 + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (_strlen($27)|0);
  $5 = $28;
  $6 = 0;
  while(1) {
   $29 = $6;
   $30 = $5;
   $31 = ($29|0)<($30|0);
   if (!($31)) {
    break;
   }
   $32 = $6;
   $33 = $3;
   $34 = (1328 + ($33<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($35) + ($32)|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37 << 24 >> 24;
   $39 = $6;
   $40 = (($4) + ($39<<1)|0);
   HEAP16[$40>>1] = $38;
   $41 = $6;
   $42 = (($41) + 1)|0;
   $6 = $42;
  }
  $43 = $5;
  $44 = $2;
  $45 = (_addCharacterClass(0,$4,$43,$44,0)|0);
  $46 = ($45|0)!=(0|0);
  if (!($46)) {
   label = 7;
   break;
  }
  $48 = $3;
  $49 = (($48) + 1)|0;
  $3 = $49;
 }
 if ((label|0) == 7) {
  $47 = $2;
  _deallocateCharacterClasses($47);
  $1 = 0;
  $50 = $1;
  STACKTOP = sp;return ($50|0);
 }
 else if ((label|0) == 9) {
  $1 = 1;
  $50 = $1;
  STACKTOP = sp;return ($50|0);
 }
 return (0)|0;
}
function _findCharacterClass($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $5 = $8;
 while(1) {
  $9 = $5;
  $10 = ($9|0)!=(0|0);
  if (!($10)) {
   label = 7;
   break;
  }
  $11 = $3;
  $12 = HEAP16[$11>>1]|0;
  $13 = $12&65535;
  $14 = $5;
  $15 = ((($14)) + 16|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&65535;
  $18 = ($13|0)==($17|0);
  if ($18) {
   $19 = $3;
   $20 = ((($19)) + 2|0);
   $21 = $5;
   $22 = ((($21)) + 18|0);
   $23 = $3;
   $24 = HEAP16[$23>>1]|0;
   $25 = $24&65535;
   $26 = $25<<1;
   $27 = (_memcmp($20,$22,$26)|0);
   $28 = ($27|0)==(0);
   if ($28) {
    label = 5;
    break;
   }
  }
  $30 = $5;
  $31 = HEAP32[$30>>2]|0;
  $5 = $31;
 }
 if ((label|0) == 5) {
  $29 = $5;
  $2 = $29;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 }
 else if ((label|0) == 7) {
  $2 = 0;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function _addCharacterClass($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer3 = sp + 24|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $15 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $17 = $10;
 $18 = ($17|0)!=(0);
 L1: do {
  if ($18) {
   $11 = 0;
   while(1) {
    $19 = $11;
    $20 = $8;
    $21 = ($19|0)<($20|0);
    if (!($21)) {
     break;
    }
    $22 = $11;
    $23 = $7;
    $24 = (($23) + ($22<<1)|0);
    $25 = HEAP16[$24>>1]|0;
    $26 = $25&65535;
    $27 = ($26|0)>=(97);
    if ($27) {
     $28 = $11;
     $29 = $7;
     $30 = (($29) + ($28<<1)|0);
     $31 = HEAP16[$30>>1]|0;
     $32 = $31&65535;
     $33 = ($32|0)<=(122);
     if (!($33)) {
      label = 6;
     }
    } else {
     label = 6;
    }
    do {
     if ((label|0) == 6) {
      label = 0;
      $34 = $11;
      $35 = $7;
      $36 = (($35) + ($34<<1)|0);
      $37 = HEAP16[$36>>1]|0;
      $38 = $37&65535;
      $39 = ($38|0)>=(65);
      if ($39) {
       $40 = $11;
       $41 = $7;
       $42 = (($41) + ($40<<1)|0);
       $43 = HEAP16[$42>>1]|0;
       $44 = $43&65535;
       $45 = ($44|0)<=(90);
       if ($45) {
        break;
       }
      }
      $46 = $6;
      _compileWarning($46,6734,$vararg_buffer);
     }
    } while(0);
    $47 = $11;
    $48 = (($47) + 1)|0;
    $11 = $48;
   }
   $12 = 0;
   while(1) {
    $49 = $12;
    $50 = (1368 + ($49<<2)|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ($51|0)!=(0|0);
    if (!($52)) {
     break L1;
    }
    $53 = $12;
    $54 = (1368 + ($53<<2)|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (_strlen($55)|0);
    $57 = $8;
    $58 = ($56|0)==($57|0);
    if ($58) {
     $13 = 0;
     while(1) {
      $59 = $13;
      $60 = $8;
      $61 = ($59|0)<($60|0);
      if (!($61)) {
       break;
      }
      $62 = $13;
      $63 = $12;
      $64 = (1368 + ($63<<2)|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = (($65) + ($62)|0);
      $67 = HEAP8[$66>>0]|0;
      $68 = $67 << 24 >> 24;
      $69 = $13;
      $70 = $7;
      $71 = (($70) + ($69<<1)|0);
      $72 = HEAP16[$71>>1]|0;
      $73 = $72&65535;
      $74 = ($68|0)!=($73|0);
      if ($74) {
       break;
      }
      $75 = $13;
      $76 = (($75) + 1)|0;
      $13 = $76;
     }
     $77 = $13;
     $78 = $8;
     $79 = ($77|0)==($78|0);
     if ($79) {
      break;
     }
    }
    $84 = $12;
    $85 = (($84) + 1)|0;
    $12 = $85;
   }
   $80 = $6;
   $81 = $12;
   $82 = (1368 + ($81<<2)|0);
   $83 = HEAP32[$82>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $83;
   _compileError($80,8165,$vararg_buffer1);
   $5 = 0;
   $139 = $5;
   STACKTOP = sp;return ($139|0);
  }
 } while(0);
 $86 = $9;
 $87 = ((($86)) + 8|0);
 $14 = $87;
 $88 = $9;
 $89 = (_getNextAttribute($88)|0);
 $90 = tempRet0;
 $91 = $15;
 $92 = $91;
 HEAP32[$92>>2] = $89;
 $93 = (($91) + 4)|0;
 $94 = $93;
 HEAP32[$94>>2] = $90;
 $95 = $15;
 $96 = $95;
 $97 = HEAP32[$96>>2]|0;
 $98 = (($95) + 4)|0;
 $99 = $98;
 $100 = HEAP32[$99>>2]|0;
 $101 = ($97|0)!=(0);
 $102 = ($100|0)!=(0);
 $103 = $101 | $102;
 do {
  if ($103) {
   $104 = $8;
   $105 = (($104) - 1)|0;
   $106 = $105<<1;
   $107 = (24 + ($106))|0;
   $108 = (_rpl_malloc($107)|0);
   $16 = $108;
   $109 = ($108|0)!=(0|0);
   if (!($109)) {
    __lou_outOfMemory();
    break;
   }
   $110 = $16;
   ;HEAP32[$110>>2]=0|0;HEAP32[$110+4>>2]=0|0;HEAP32[$110+8>>2]=0|0;HEAP32[$110+12>>2]=0|0;HEAP32[$110+16>>2]=0|0;HEAP32[$110+20>>2]=0|0;
   $111 = $16;
   $112 = ((($111)) + 18|0);
   $113 = $7;
   $114 = $8;
   $115 = $114&65535;
   $116 = $16;
   $117 = ((($116)) + 16|0);
   HEAP16[$117>>1] = $115;
   $118 = $115&65535;
   $119 = $118<<1;
   _memcpy(($112|0),($113|0),($119|0))|0;
   $120 = $15;
   $121 = $120;
   $122 = HEAP32[$121>>2]|0;
   $123 = (($120) + 4)|0;
   $124 = $123;
   $125 = HEAP32[$124>>2]|0;
   $126 = $16;
   $127 = ((($126)) + 8|0);
   $128 = $127;
   $129 = $128;
   HEAP32[$129>>2] = $122;
   $130 = (($128) + 4)|0;
   $131 = $130;
   HEAP32[$131>>2] = $125;
   $132 = $14;
   $133 = HEAP32[$132>>2]|0;
   $134 = $16;
   HEAP32[$134>>2] = $133;
   $135 = $16;
   $136 = $14;
   HEAP32[$136>>2] = $135;
   $137 = $16;
   $5 = $137;
   $139 = $5;
   STACKTOP = sp;return ($139|0);
  }
 } while(0);
 $138 = $6;
 _compileError($138,8196,$vararg_buffer3);
 $5 = 0;
 $139 = $5;
 STACKTOP = sp;return ($139|0);
}
function _compileBeforeAfter($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(8208|0);
 $3 = sp + 4106|0;
 $4 = sp + 8|0;
 $2 = $0;
 $5 = $2;
 $6 = (_getToken($5,$3,8436)|0);
 $7 = ($6|0)!=(0);
 do {
  if ($7) {
   $8 = $2;
   $9 = (_parseChars($8,$4,$3)|0);
   $10 = ($9|0)!=(0);
   if (!($10)) {
    $1 = 0;
    break;
   }
   $11 = ((($4)) + 2|0);
   $12 = (_eqasc2uni(2846,$11,6)|0);
   $13 = ($12|0)!=(0);
   if ($13) {
    $1 = 1;
    break;
   }
   $14 = ((($4)) + 2|0);
   $15 = (_eqasc2uni(2840,$14,5)|0);
   $16 = ($15|0)!=(0);
   if ($16) {
    $1 = 2;
    break;
   } else {
    $1 = 0;
    break;
   }
  } else {
   $1 = 0;
  }
 } while(0);
 $17 = $1;
 STACKTOP = sp;return ($17|0);
}
function _compileNumber($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4112|0);
 $vararg_buffer = sp;
 $3 = sp + 14|0;
 $4 = sp + 12|0;
 $2 = $0;
 $5 = $2;
 $6 = (_getToken($5,$3,8462)|0);
 $7 = ($6|0)!=(0);
 do {
  if ($7) {
   $8 = ((($3)) + 2|0);
   (_getNumber($8,$4)|0);
   $9 = HEAP16[$4>>1]|0;
   $10 = $9&65535;
   $11 = ($10|0)>(0);
   if ($11) {
    $13 = HEAP16[$4>>1]|0;
    $14 = $13&65535;
    $1 = $14;
    break;
   } else {
    $12 = $2;
    _compileError($12,8469,$vararg_buffer);
    $1 = 0;
    break;
   }
  } else {
   $1 = 0;
  }
 } while(0);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _getChar($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $4;
 $11 = (__lou_charHash($10)|0);
 $12 = $5;
 $13 = ((($12)) + 13160|0);
 $14 = (($13) + ($11<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 $7 = $15;
 $16 = $7;
 $8 = $16;
 while(1) {
  $17 = $8;
  $18 = ($17|0)!=(0);
  if (!($18)) {
   label = 8;
   break;
  }
  $19 = $8;
  $20 = $5;
  $21 = ((($20)) + 31168|0);
  $22 = (($21) + ($19<<3)|0);
  $9 = $22;
  $23 = $9;
  $24 = ((($23)) + 44|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $25&65535;
  $27 = $4;
  $28 = $27&65535;
  $29 = ($26|0)==($28|0);
  if ($29) {
   break;
  }
  $35 = $9;
  $36 = ((($35)) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $8 = $37;
 }
 if ((label|0) == 8) {
  $3 = 0;
  $38 = $3;
  STACKTOP = sp;return ($38|0);
 }
 $30 = $6;
 $31 = ($30|0)!=(0|0);
 if ($31) {
  $32 = $8;
  $33 = $6;
  HEAP32[$33>>2] = $32;
 }
 $34 = $9;
 $3 = $34;
 $38 = $3;
 STACKTOP = sp;return ($38|0);
}
function _atEndOfLine($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)>=($7|0);
 $9 = $8&1;
 STACKTOP = sp;return ($9|0);
}
function _getRuleDotsText($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4112|0);
 $5 = sp + 12|0;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = (_getToken($6,$5,7940)|0);
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $3;
  $10 = $4;
  $11 = (_parseChars($9,$10,$5)|0);
  $2 = $11;
  $12 = $2;
  STACKTOP = sp;return ($12|0);
 } else {
  $2 = 0;
  $12 = $2;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _putChar($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = sp + 12|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $14 = $6;
 $15 = $7;
 $16 = HEAP32[$15>>2]|0;
 $17 = $8;
 $18 = (_getChar($14,$16,$17)|0);
 $9 = $18;
 $19 = ($18|0)!=(0|0);
 if ($19) {
  $20 = $9;
  $4 = $20;
  $83 = $4;
  STACKTOP = sp;return ($83|0);
 }
 $21 = $5;
 $22 = $7;
 $23 = (_allocateSpaceInTranslationTable($21,$10,56,$22)|0);
 $24 = ($23|0)!=(0);
 if (!($24)) {
  $4 = 0;
  $83 = $4;
  STACKTOP = sp;return ($83|0);
 }
 $25 = HEAP32[$10>>2]|0;
 $26 = $7;
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 31168|0);
 $29 = (($28) + ($25<<3)|0);
 $9 = $29;
 $30 = $9;
 dest=$30; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $31 = $5;
 $32 = ((($31)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $9;
 HEAP32[$34>>2] = $33;
 $35 = $5;
 $36 = ((($35)) + 12|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $9;
 $39 = ((($38)) + 4|0);
 HEAP32[$39>>2] = $37;
 $40 = $6;
 $41 = $9;
 $42 = ((($41)) + 44|0);
 HEAP16[$42>>1] = $40;
 $43 = $6;
 $44 = (__lou_charHash($43)|0);
 $11 = $44;
 $45 = $11;
 $46 = $7;
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($47)) + 13160|0);
 $49 = (($48) + ($45<<2)|0);
 $50 = HEAP32[$49>>2]|0;
 $12 = $50;
 $51 = $12;
 $52 = ($51|0)!=(0);
 if ($52) {
  $59 = $12;
  $60 = $7;
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + 31168|0);
  $63 = (($62) + ($59<<3)|0);
  $13 = $63;
  while(1) {
   $64 = $13;
   $65 = ((($64)) + 8|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ($66|0)!=(0);
   if (!($67)) {
    break;
   }
   $68 = $13;
   $69 = ((($68)) + 8|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = $7;
   $72 = HEAP32[$71>>2]|0;
   $73 = ((($72)) + 31168|0);
   $74 = (($73) + ($70<<3)|0);
   $13 = $74;
  }
  $75 = HEAP32[$10>>2]|0;
  $76 = $13;
  $77 = ((($76)) + 8|0);
  HEAP32[$77>>2] = $75;
 } else {
  $53 = HEAP32[$10>>2]|0;
  $54 = $11;
  $55 = $7;
  $56 = HEAP32[$55>>2]|0;
  $57 = ((($56)) + 13160|0);
  $58 = (($57) + ($54<<2)|0);
  HEAP32[$58>>2] = $53;
 }
 $78 = $8;
 $79 = ($78|0)!=(0|0);
 if ($79) {
  $80 = HEAP32[$10>>2]|0;
  $81 = $8;
  HEAP32[$81>>2] = $80;
 }
 $82 = $9;
 $4 = $82;
 $83 = $4;
 STACKTOP = sp;return ($83|0);
}
function _compilePassOpcode($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0;
 var $vararg_buffer24 = 0, $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0, $vararg_buffer37 = 0, $vararg_buffer39 = 0, $vararg_buffer42 = 0, $vararg_buffer45 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8464|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(8464|0);
 $vararg_buffer45 = sp + 168|0;
 $vararg_buffer42 = sp + 160|0;
 $vararg_buffer39 = sp + 152|0;
 $vararg_buffer37 = sp + 144|0;
 $vararg_buffer35 = sp + 136|0;
 $vararg_buffer33 = sp + 128|0;
 $vararg_buffer31 = sp + 120|0;
 $vararg_buffer29 = sp + 112|0;
 $vararg_buffer26 = sp + 104|0;
 $vararg_buffer24 = sp + 96|0;
 $vararg_buffer21 = sp + 88|0;
 $vararg_buffer19 = sp + 80|0;
 $vararg_buffer17 = sp + 72|0;
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $18 = sp + 208|0;
 $19 = sp + 4360|0;
 $20 = sp + 4358|0;
 $21 = sp + 260|0;
 $22 = sp + 204|0;
 $23 = sp;
 $29 = sp + 180|0;
 $30 = sp + 176|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $13 = 0;
 $15 = 0;
 $16 = 0;
 $17 = (22606);
 HEAP32[$18>>2] = 0;
 HEAP16[9253] = 0;
 HEAP32[$22>>2] = 0;
 $24 = 0;
 HEAP16[$19>>1] = 0;
 $32 = $6;
 $33 = ((($32)) + 28|0);
 $34 = HEAP32[$33>>2]|0;
 $14 = $34;
 while(1) {
  $35 = $14;
  $36 = $6;
  $37 = ((($36)) + 24|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($35|0)<($38|0);
  if (!($39)) {
   break;
  }
  $40 = $14;
  $41 = $6;
  $42 = ((($41)) + 40|0);
  $43 = (($42) + ($40<<1)|0);
  $44 = HEAP16[$43>>1]|0;
  $45 = HEAP16[$19>>1]|0;
  $46 = (($45) + 1)<<16>>16;
  HEAP16[$19>>1] = $46;
  $47 = $45&65535;
  $48 = ((($19)) + 2|0);
  $49 = (($48) + ($47<<1)|0);
  HEAP16[$49>>1] = $44;
  $50 = $14;
  $51 = (($50) + 1)|0;
  $14 = $51;
 }
 $14 = 0;
 while(1) {
  $52 = $14;
  $53 = HEAP16[$19>>1]|0;
  $54 = $53&65535;
  $55 = ($52|0)<($54|0);
  if (!($55)) {
   break;
  }
  $56 = $14;
  $57 = ((($19)) + 2|0);
  $58 = (($57) + ($56<<1)|0);
  $59 = HEAP16[$58>>1]|0;
  $60 = $59&65535;
  $61 = ($60|0)>(32);
  if (!($61)) {
   break;
  }
  $62 = $14;
  $63 = (($62) + 1)|0;
  $14 = $63;
 }
 $64 = $14;
 $65 = HEAP16[$19>>1]|0;
 $66 = $65&65535;
 $67 = ($64|0)<($66|0);
 if (!($67)) {
  $72 = $6;
  _compileError($72,8507,$vararg_buffer);
  $5 = 0;
  $756 = $5;
  STACKTOP = sp;return ($756|0);
 }
 $68 = $14;
 $69 = ((($19)) + 2|0);
 $70 = (($69) + ($68<<1)|0);
 HEAP16[$70>>1] = 1;
 $71 = $6;
 (_parseChars($71,$21,$19)|0);
 $14 = 0;
 while(1) {
  $73 = $14;
  $74 = HEAP16[$21>>1]|0;
  $75 = $74&65535;
  $76 = ($73|0)<($75|0);
  if (!($76)) {
   break;
  }
  $77 = $14;
  $78 = ((($21)) + 2|0);
  $79 = (($78) + ($77<<1)|0);
  $80 = HEAP16[$79>>1]|0;
  $81 = $80&65535;
  $82 = ($81|0)!=(1);
  if (!($82)) {
   break;
  }
  $83 = $14;
  $84 = (($83) + 1)|0;
  $14 = $84;
 }
 $85 = $14;
 $16 = $85;
 $86 = $16;
 $87 = ((($21)) + 2|0);
 $88 = (($87) + ($86<<1)|0);
 HEAP16[$88>>1] = 32;
 HEAP32[$22>>2] = 0;
 L19: while(1) {
  $89 = HEAP32[$22>>2]|0;
  $90 = $16;
  $91 = ($89|0)<=($90|0);
  if (!($91)) {
   label = 151;
   break;
  }
  $92 = HEAP32[$22>>2]|0;
  $93 = ((($21)) + 2|0);
  $94 = (($93) + ($92<<1)|0);
  $95 = HEAP16[$94>>1]|0;
  $11 = $95;
  $96 = $95&65535;
  L22: do {
   switch ($96|0) {
   case 95:  {
    $97 = $6;
    $98 = $17;
    $99 = (_appendInstructionChar($97,$98,$18,95)|0);
    $100 = ($99|0)!=(0);
    if (!($100)) {
     label = 18;
     break L19;
    }
    $101 = HEAP32[$22>>2]|0;
    $102 = (($101) + 1)|0;
    HEAP32[$22>>2] = $102;
    (_passGetNumber($21,$22,$20)|0);
    $103 = HEAP16[$20>>1]|0;
    $104 = $103&65535;
    $105 = ($104|0)==(0);
    if ($105) {
     HEAP16[$20>>1] = 1;
    }
    $106 = $6;
    $107 = $17;
    $108 = HEAP16[$20>>1]|0;
    $109 = (_appendInstructionChar($106,$107,$18,$108)|0);
    $110 = ($109|0)!=(0);
    if ($110) {
     continue L19;
    } else {
     label = 22;
     break L19;
    }
    break;
   }
   case 33:  {
    $111 = $6;
    $112 = $17;
    $113 = (_appendInstructionChar($111,$112,$18,33)|0);
    $114 = ($113|0)!=(0);
    if (!($114)) {
     label = 24;
     break L19;
    }
    $115 = HEAP32[$22>>2]|0;
    $116 = (($115) + 1)|0;
    HEAP32[$22>>2] = $116;
    continue L19;
    break;
   }
   case 96:  {
    $117 = $6;
    $118 = $17;
    $119 = (_appendInstructionChar($117,$118,$18,96)|0);
    $120 = ($119|0)!=(0);
    if (!($120)) {
     label = 27;
     break L19;
    }
    $121 = HEAP32[$22>>2]|0;
    $122 = (($121) + 1)|0;
    HEAP32[$22>>2] = $122;
    continue L19;
    break;
   }
   case 126:  {
    $123 = $6;
    $124 = $17;
    $125 = (_appendInstructionChar($123,$124,$18,126)|0);
    $126 = ($125|0)!=(0);
    if (!($126)) {
     label = 30;
     break L19;
    }
    $127 = HEAP32[$22>>2]|0;
    $128 = (($127) + 1)|0;
    HEAP32[$22>>2] = $128;
    continue L19;
    break;
   }
   case 47:  {
    $129 = $6;
    $130 = $17;
    $131 = (_appendInstructionChar($129,$130,$18,47)|0);
    $132 = ($131|0)!=(0);
    if (!($132)) {
     label = 33;
     break L19;
    }
    $133 = HEAP32[$22>>2]|0;
    $134 = (($133) + 1)|0;
    HEAP32[$22>>2] = $134;
    continue L19;
    break;
   }
   case 34:  {
    $135 = $6;
    $136 = $7;
    $137 = $9;
    $138 = (_verifyStringOrDots($135,$136,1,0,$137)|0);
    $139 = ($138|0)!=(0);
    if (!($139)) {
     label = 36;
     break L19;
    }
    $140 = HEAP32[$22>>2]|0;
    $141 = (($140) + 1)|0;
    HEAP32[$22>>2] = $141;
    $142 = $6;
    $143 = $17;
    $144 = (_appendInstructionChar($142,$143,$18,34)|0);
    $145 = ($144|0)!=(0);
    if (!($145)) {
     label = 38;
     break L19;
    }
    $146 = $6;
    (_passGetString($21,$22,$19,$146)|0);
    $147 = HEAP16[$19>>1]|0;
    $148 = $147&65535;
    $149 = ($148|0)==(0);
    if ($149) {
     label = 40;
     break L19;
    } else {
     label = 47;
    }
    break;
   }
   case 64:  {
    $151 = $6;
    $152 = $7;
    $153 = $9;
    $154 = (_verifyStringOrDots($151,$152,0,0,$153)|0);
    $155 = ($154|0)!=(0);
    if (!($155)) {
     label = 42;
     break L19;
    }
    $156 = HEAP32[$22>>2]|0;
    $157 = (($156) + 1)|0;
    HEAP32[$22>>2] = $157;
    $158 = $6;
    $159 = $17;
    $160 = (_appendInstructionChar($158,$159,$18,64)|0);
    $161 = ($160|0)!=(0);
    if (!($161)) {
     label = 44;
     break L19;
    }
    $162 = $6;
    (_passGetDots($21,$22,$19,$162)|0);
    $163 = HEAP16[$19>>1]|0;
    $164 = $163&65535;
    $165 = ($164|0)==(0);
    if ($165) {
     label = 46;
     break L19;
    } else {
     label = 47;
    }
    break;
   }
   case 91:  {
    $190 = $24;
    $191 = ($190|0)!=(0);
    $192 = $6;
    if ($191) {
     label = 59;
     break L19;
    }
    $193 = $17;
    $194 = (_appendInstructionChar($192,$193,$18,91)|0);
    $195 = ($194|0)!=(0);
    if (!($195)) {
     label = 61;
     break L19;
    }
    $24 = 1;
    $196 = HEAP32[$22>>2]|0;
    $197 = (($196) + 1)|0;
    HEAP32[$22>>2] = $197;
    continue L19;
    break;
   }
   case 93:  {
    $198 = $24;
    $199 = ($198|0)!=(0);
    $200 = $6;
    if (!($199)) {
     label = 64;
     break L19;
    }
    $201 = $17;
    $202 = (_appendInstructionChar($200,$201,$18,93)|0);
    $203 = ($202|0)!=(0);
    if (!($203)) {
     label = 66;
     break L19;
    }
    $24 = 0;
    $204 = HEAP32[$22>>2]|0;
    $205 = (($204) + 1)|0;
    HEAP32[$22>>2] = $205;
    continue L19;
    break;
   }
   case 35:  {
    $206 = HEAP32[$22>>2]|0;
    $207 = (($206) + 1)|0;
    HEAP32[$22>>2] = $207;
    $208 = $6;
    $209 = (_passGetVariableNumber($208,$21,$22,$20)|0);
    $210 = ($209|0)!=(0);
    if (!($210)) {
     label = 69;
     break L19;
    }
    $211 = HEAP32[$22>>2]|0;
    $212 = ((($21)) + 2|0);
    $213 = (($212) + ($211<<1)|0);
    $214 = HEAP16[$213>>1]|0;
    $215 = $214&65535;
    L50: do {
     switch ($215|0) {
     case 61:  {
      $216 = $6;
      $217 = $17;
      $218 = (_appendInstructionChar($216,$217,$18,61)|0);
      $219 = ($218|0)!=(0);
      if (!($219)) {
       label = 72;
       break L19;
      }
      break;
     }
     case 60:  {
      $220 = HEAP32[$22>>2]|0;
      $221 = (($220) + 1)|0;
      $222 = ((($21)) + 2|0);
      $223 = (($222) + ($221<<1)|0);
      $224 = HEAP16[$223>>1]|0;
      $225 = $224&65535;
      $226 = ($225|0)==(61);
      if ($226) {
       $227 = HEAP32[$22>>2]|0;
       $228 = (($227) + 1)|0;
       HEAP32[$22>>2] = $228;
       $229 = $6;
       $230 = $17;
       $231 = (_appendInstructionChar($229,$230,$18,130)|0);
       $232 = ($231|0)!=(0);
       if ($232) {
        break L50;
       } else {
        label = 75;
        break L19;
       }
      } else {
       $233 = $6;
       $234 = $17;
       $235 = (_appendInstructionChar($233,$234,$18,60)|0);
       $236 = ($235|0)!=(0);
       if ($236) {
        break L50;
       } else {
        label = 77;
        break L19;
       }
      }
      break;
     }
     case 62:  {
      $237 = HEAP32[$22>>2]|0;
      $238 = (($237) + 1)|0;
      $239 = ((($21)) + 2|0);
      $240 = (($239) + ($238<<1)|0);
      $241 = HEAP16[$240>>1]|0;
      $242 = $241&65535;
      $243 = ($242|0)==(61);
      if ($243) {
       $244 = HEAP32[$22>>2]|0;
       $245 = (($244) + 1)|0;
       HEAP32[$22>>2] = $245;
       $246 = $6;
       $247 = $17;
       $248 = (_appendInstructionChar($246,$247,$18,131)|0);
       $249 = ($248|0)!=(0);
       if ($249) {
        break L50;
       } else {
        label = 80;
        break L19;
       }
      } else {
       $250 = $6;
       $251 = $17;
       $252 = (_appendInstructionChar($250,$251,$18,62)|0);
       $253 = ($252|0)!=(0);
       if ($253) {
        break L50;
       } else {
        label = 82;
        break L19;
       }
      }
      break;
     }
     default: {
      label = 87;
      break L19;
     }
     }
    } while(0);
    $254 = $6;
    $255 = $17;
    $256 = HEAP16[$20>>1]|0;
    $257 = (_appendInstructionChar($254,$255,$18,$256)|0);
    $258 = ($257|0)!=(0);
    if (!($258)) {
     label = 84;
     break L19;
    }
    $259 = HEAP32[$22>>2]|0;
    $260 = (($259) + 1)|0;
    HEAP32[$22>>2] = $260;
    (_passGetNumber($21,$22,$20)|0);
    $261 = $6;
    $262 = $17;
    $263 = HEAP16[$20>>1]|0;
    $264 = (_appendInstructionChar($261,$262,$18,$263)|0);
    $265 = ($264|0)!=(0);
    if ($265) {
     continue L19;
    } else {
     label = 86;
     break L19;
    }
    break;
   }
   case 36:  {
    $267 = HEAP32[$22>>2]|0;
    $268 = (($267) + 1)|0;
    HEAP32[$22>>2] = $268;
    $269 = $6;
    $270 = (_passGetAttributes($21,$22,$23,$269)|0);
    $271 = ($270|0)!=(0);
    if ($271) {
     label = 90;
    } else {
     label = 89;
     break L19;
    }
    break;
   }
   case 125: case 123:  {
    $379 = HEAP32[$22>>2]|0;
    $380 = (($379) + 1)|0;
    HEAP32[$22>>2] = $380;
    (_passGetName($21,$22,$19)|0);
    $381 = $10;
    $382 = HEAP32[$381>>2]|0;
    $383 = (_findRuleName($19,$382)|0);
    $25 = $383;
    $384 = $25;
    $385 = ($384|0)!=(0);
    if ($385) {
     $386 = $25;
     $387 = $10;
     $388 = HEAP32[$387>>2]|0;
     $389 = ((($388)) + 31168|0);
     $390 = (($389) + ($386<<3)|0);
     $13 = $390;
    }
    $391 = $13;
    $392 = ($391|0)!=(0|0);
    if (!($392)) {
     label = 129;
     break L19;
    }
    $393 = $13;
    $394 = ((($393)) + 36|0);
    $395 = HEAP32[$394>>2]|0;
    $396 = ($395|0)==(69);
    if (!($396)) {
     label = 129;
     break L19;
    }
    $397 = $6;
    $398 = $17;
    $399 = $11;
    $400 = (_appendInstructionChar($397,$398,$18,$399)|0);
    $401 = ($400|0)!=(0);
    if (!($401)) {
     label = 124;
     break L19;
    }
    $402 = $6;
    $403 = $17;
    $404 = $25;
    $405 = $404 >>> 16;
    $406 = $405&65535;
    $407 = (_appendInstructionChar($402,$403,$18,$406)|0);
    $408 = ($407|0)!=(0);
    if (!($408)) {
     label = 126;
     break L19;
    }
    $409 = $6;
    $410 = $17;
    $411 = $25;
    $412 = $411 & 65535;
    $413 = $412&65535;
    $414 = (_appendInstructionChar($409,$410,$18,$413)|0);
    $415 = ($414|0)!=(0);
    if ($415) {
     continue L19;
    } else {
     label = 128;
     break L19;
    }
    break;
   }
   case 37:  {
    $421 = HEAP32[$22>>2]|0;
    $422 = (($421) + 1)|0;
    HEAP32[$22>>2] = $422;
    (_passGetName($21,$22,$19)|0);
    $423 = $10;
    $424 = HEAP32[$423>>2]|0;
    $425 = (_findCharacterClass($19,$424)|0);
    $12 = $425;
    $426 = ($425|0)!=(0|0);
    if ($426) {
     $427 = $12;
     $428 = ((($427)) + 8|0);
     $429 = $428;
     $430 = $429;
     $431 = HEAP32[$430>>2]|0;
     $432 = (($429) + 4)|0;
     $433 = $432;
     $434 = HEAP32[$433>>2]|0;
     $435 = $23;
     $436 = $435;
     HEAP32[$436>>2] = $431;
     $437 = (($435) + 4)|0;
     $438 = $437;
     HEAP32[$438>>2] = $434;
     label = 90;
     break L22;
    }
    $439 = $10;
    $440 = HEAP32[$439>>2]|0;
    $441 = (_findRuleName($19,$440)|0);
    $26 = $441;
    $442 = $26;
    $443 = ($442|0)!=(0);
    if ($443) {
     $444 = $26;
     $445 = $10;
     $446 = HEAP32[$445>>2]|0;
     $447 = ((($446)) + 31168|0);
     $448 = (($447) + ($444<<3)|0);
     $13 = $448;
    }
    $449 = $13;
    $450 = ($449|0)!=(0|0);
    if (!($450)) {
     label = 144;
     break L19;
    }
    $451 = $13;
    $452 = ((($451)) + 36|0);
    $453 = HEAP32[$452>>2]|0;
    $454 = ($453|0)==(58);
    if (!($454)) {
     $455 = $13;
     $456 = ((($455)) + 36|0);
     $457 = HEAP32[$456>>2]|0;
     $458 = ($457|0)==(59);
     if (!($458)) {
      $459 = $13;
      $460 = ((($459)) + 36|0);
      $461 = HEAP32[$460>>2]|0;
      $462 = ($461|0)==(60);
      if (!($462)) {
       label = 144;
       break L19;
      }
     }
    }
    $463 = $6;
    $464 = $17;
    $465 = (_appendInstructionChar($463,$464,$18,37)|0);
    $466 = ($465|0)!=(0);
    if (!($466)) {
     label = 139;
     break L19;
    }
    $467 = $6;
    $468 = $17;
    $469 = $26;
    $470 = $469 >>> 16;
    $471 = $470&65535;
    $472 = (_appendInstructionChar($467,$468,$18,$471)|0);
    $473 = ($472|0)!=(0);
    if (!($473)) {
     label = 141;
     break L19;
    }
    $474 = $6;
    $475 = $17;
    $476 = $26;
    $477 = $476 & 65535;
    $478 = $477&65535;
    $479 = (_appendInstructionChar($474,$475,$18,$478)|0);
    $480 = ($479|0)!=(0);
    if (!($480)) {
     label = 143;
     break L19;
    }
    break;
   }
   case 32:  {
    $486 = $6;
    $487 = $17;
    $488 = (_appendInstructionChar($486,$487,$18,32)|0);
    $489 = ($488|0)!=(0);
    if (!($489)) {
     label = 146;
     break L19;
    }
    $490 = $24;
    $491 = ($490|0)!=(0);
    if ($491) {
     label = 148;
     break L19;
    }
    $493 = HEAP32[$22>>2]|0;
    $494 = (($493) + 1)|0;
    HEAP32[$22>>2] = $494;
    continue L19;
    break;
   }
   default: {
    label = 150;
    break L19;
   }
   }
  } while(0);
  if ((label|0) == 47) {
   label = 0;
   $167 = HEAP32[$18>>2]|0;
   $168 = ($167|0)>=(2048);
   $169 = $6;
   if ($168) {
    label = 48;
    break;
   }
   $170 = $17;
   $171 = HEAP16[$19>>1]|0;
   $172 = (_appendInstructionChar($169,$170,$18,$171)|0);
   $173 = ($172|0)!=(0);
   if (!($173)) {
    label = 50;
    break;
   }
   $15 = 0;
   while(1) {
    $174 = $15;
    $175 = HEAP16[$19>>1]|0;
    $176 = $175&65535;
    $177 = ($174|0)<($176|0);
    if (!($177)) {
     continue L19;
    }
    $178 = HEAP32[$18>>2]|0;
    $179 = ($178|0)>=(2048);
    $180 = $6;
    if ($179) {
     label = 54;
     break L19;
    }
    $181 = $17;
    $182 = $15;
    $183 = ((($19)) + 2|0);
    $184 = (($183) + ($182<<1)|0);
    $185 = HEAP16[$184>>1]|0;
    $186 = (_appendInstructionChar($180,$181,$18,$185)|0);
    $187 = ($186|0)!=(0);
    if (!($187)) {
     label = 56;
     break L19;
    }
    $188 = $15;
    $189 = (($188) + 1)|0;
    $15 = $189;
   }
  }
  else if ((label|0) == 90) {
   label = 0;
   $272 = $6;
   $273 = $17;
   $274 = (_appendInstructionChar($272,$273,$18,36)|0);
   $275 = ($274|0)!=(0);
   if (!($275)) {
    label = 91;
    break;
   }
   $276 = $6;
   $277 = $17;
   $278 = $23;
   $279 = $278;
   $280 = HEAP32[$279>>2]|0;
   $281 = (($278) + 4)|0;
   $282 = $281;
   $283 = HEAP32[$282>>2]|0;
   $284 = (_bitshift64Lshr(($280|0),($283|0),48)|0);
   $285 = tempRet0;
   $286 = $284 & 65535;
   $287 = $286&65535;
   $288 = (_appendInstructionChar($276,$277,$18,$287)|0);
   $289 = ($288|0)!=(0);
   if (!($289)) {
    label = 93;
    break;
   }
   $290 = $6;
   $291 = $17;
   $292 = $23;
   $293 = $292;
   $294 = HEAP32[$293>>2]|0;
   $295 = (($292) + 4)|0;
   $296 = $295;
   $297 = HEAP32[$296>>2]|0;
   $298 = $297 & 65535;
   $299 = $298&65535;
   $300 = (_appendInstructionChar($290,$291,$18,$299)|0);
   $301 = ($300|0)!=(0);
   if (!($301)) {
    label = 95;
    break;
   }
   $302 = $6;
   $303 = $17;
   $304 = $23;
   $305 = $304;
   $306 = HEAP32[$305>>2]|0;
   $307 = (($304) + 4)|0;
   $308 = $307;
   $309 = HEAP32[$308>>2]|0;
   $310 = (_bitshift64Lshr(($306|0),($309|0),16)|0);
   $311 = tempRet0;
   $312 = $310 & 65535;
   $313 = $312&65535;
   $314 = (_appendInstructionChar($302,$303,$18,$313)|0);
   $315 = ($314|0)!=(0);
   if (!($315)) {
    label = 97;
    break;
   }
   $316 = $6;
   $317 = $17;
   $318 = $23;
   $319 = $318;
   $320 = HEAP32[$319>>2]|0;
   $321 = (($318) + 4)|0;
   $322 = $321;
   $323 = HEAP32[$322>>2]|0;
   $324 = $320 & 65535;
   $325 = $324&65535;
   $326 = (_appendInstructionChar($316,$317,$18,$325)|0);
   $327 = ($326|0)!=(0);
   if (!($327)) {
    label = 99;
    break;
   }
  }
  $328 = HEAP32[$22>>2]|0;
  $329 = ((($21)) + 2|0);
  $330 = (($329) + ($328<<1)|0);
  $331 = HEAP16[$330>>1]|0;
  $332 = $331&65535;
  $333 = ($332|0)==(46);
  if ($333) {
   $334 = HEAP32[$22>>2]|0;
   $335 = (($334) + 1)|0;
   HEAP32[$22>>2] = $335;
   $336 = $6;
   $337 = $17;
   $338 = (_appendInstructionChar($336,$337,$18,1)|0);
   $339 = ($338|0)!=(0);
   if (!($339)) {
    label = 102;
    break;
   }
   $340 = $6;
   $341 = $17;
   $342 = (_appendInstructionChar($340,$341,$18,-1)|0);
   $343 = ($342|0)!=(0);
   if ($343) {
    continue;
   } else {
    label = 104;
    break;
   }
  }
  (_passGetNumber($21,$22,$20)|0);
  $344 = HEAP16[$20>>1]|0;
  $345 = $344&65535;
  $346 = ($345|0)==(0);
  $347 = $6;
  $348 = $17;
  if ($346) {
   $349 = (_appendInstructionChar($347,$348,$18,1)|0);
   $350 = ($349|0)!=(0);
   if (!($350)) {
    label = 107;
    break;
   }
   $351 = $6;
   $352 = $17;
   $353 = (_appendInstructionChar($351,$352,$18,1)|0);
   $354 = ($353|0)!=(0);
   if ($354) {
    continue;
   } else {
    label = 109;
    break;
   }
  }
  $355 = HEAP16[$20>>1]|0;
  $356 = (_appendInstructionChar($347,$348,$18,$355)|0);
  $357 = ($356|0)!=(0);
  if (!($357)) {
   label = 111;
   break;
  }
  $358 = HEAP32[$22>>2]|0;
  $359 = ((($21)) + 2|0);
  $360 = (($359) + ($358<<1)|0);
  $361 = HEAP16[$360>>1]|0;
  $362 = $361&65535;
  $363 = ($362|0)!=(45);
  if ($363) {
   $364 = $6;
   $365 = $17;
   $366 = HEAP16[$20>>1]|0;
   $367 = (_appendInstructionChar($364,$365,$18,$366)|0);
   $368 = ($367|0)!=(0);
   if ($368) {
    continue;
   } else {
    label = 114;
    break;
   }
  }
  $369 = HEAP32[$22>>2]|0;
  $370 = (($369) + 1)|0;
  HEAP32[$22>>2] = $370;
  (_passGetNumber($21,$22,$20)|0);
  $371 = HEAP16[$20>>1]|0;
  $372 = $371&65535;
  $373 = ($372|0)==(0);
  $374 = $6;
  if ($373) {
   label = 116;
   break;
  }
  $375 = $17;
  $376 = HEAP16[$20>>1]|0;
  $377 = (_appendInstructionChar($374,$375,$18,$376)|0);
  $378 = ($377|0)!=(0);
  if (!($378)) {
   label = 118;
   break;
  }
 }
 switch (label|0) {
  case 18: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 22: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 24: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 27: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 30: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 33: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 36: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 38: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 40: {
   $150 = $6;
   _compileError($150,8534,$vararg_buffer3);
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 42: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 44: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 46: {
   $166 = $6;
   _compileError($166,8560,$vararg_buffer5);
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 48: {
   _compileError($169,8610,$vararg_buffer7);
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 50: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 54: {
   _compileError($180,8610,$vararg_buffer9);
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 56: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 59: {
   _compileError($192,8663,$vararg_buffer11);
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 61: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 64: {
   _compileError($200,8693,$vararg_buffer13);
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 66: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 69: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 72: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 75: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 77: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 80: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 82: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 84: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 86: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 87: {
   $266 = $6;
   _compileError($266,8723,$vararg_buffer15);
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 89: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 91: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 93: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 95: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 97: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 99: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 102: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 104: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 107: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 109: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 111: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 114: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 116: {
   _compileError($374,8753,$vararg_buffer17);
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 118: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 124: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 126: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 128: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 129: {
   $416 = $6;
   $417 = ((($19)) + 2|0);
   $418 = HEAP16[$19>>1]|0;
   $419 = $418&65535;
   $420 = (__lou_showString($417,$419,0)|0);
   HEAP32[$vararg_buffer19>>2] = $420;
   _compileError($416,8767,$vararg_buffer19);
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 139: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 141: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 143: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 144: {
   $481 = $6;
   $482 = ((($19)) + 2|0);
   $483 = HEAP16[$19>>1]|0;
   $484 = $483&65535;
   $485 = (__lou_showString($482,$484,0)|0);
   HEAP32[$vararg_buffer21>>2] = $485;
   _compileError($481,8793,$vararg_buffer21);
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 146: {
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 148: {
   $492 = $6;
   _compileError($492,8837,$vararg_buffer24);
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 150: {
   $495 = $6;
   $496 = HEAP32[$22>>2]|0;
   $497 = ((($21)) + 2|0);
   $498 = (($497) + ($496<<1)|0);
   $499 = HEAP16[$498>>1]|0;
   $500 = $499&65535;
   HEAP32[$vararg_buffer26>>2] = $500;
   _compileError($495,8865,$vararg_buffer26);
   $5 = 0;
   $756 = $5;
   STACKTOP = sp;return ($756|0);
   break;
  }
  case 151: {
   while(1) {
    label = 0;
    $501 = HEAP32[$22>>2]|0;
    $502 = HEAP16[$21>>1]|0;
    $503 = $502&65535;
    $504 = ($501|0)<($503|0);
    if (!($504)) {
     break;
    }
    $505 = HEAP32[$22>>2]|0;
    $506 = ((($21)) + 2|0);
    $507 = (($506) + ($505<<1)|0);
    $508 = HEAP16[$507>>1]|0;
    $509 = $508&65535;
    $510 = ($509|0)<=(32);
    if (!($510)) {
     break;
    }
    $511 = HEAP32[$22>>2]|0;
    $512 = (($511) + 1)|0;
    HEAP32[$22>>2] = $512;
    label = 151;
   }
   L121: while(1) {
    $513 = HEAP32[$22>>2]|0;
    $514 = HEAP16[$21>>1]|0;
    $515 = $514&65535;
    $516 = ($513|0)<($515|0);
    if ($516) {
     $517 = HEAP32[$22>>2]|0;
     $518 = ((($21)) + 2|0);
     $519 = (($518) + ($517<<1)|0);
     $520 = HEAP16[$519>>1]|0;
     $521 = $520&65535;
     $522 = ($521|0)>(32);
     $757 = $522;
    } else {
     $757 = 0;
    }
    $523 = HEAP32[$18>>2]|0;
    if (!($757)) {
     label = 227;
     break;
    }
    $524 = ($523|0)>=(2048);
    if ($524) {
     label = 158;
     break;
    }
    $526 = HEAP32[$22>>2]|0;
    $527 = ((($21)) + 2|0);
    $528 = (($527) + ($526<<1)|0);
    $529 = HEAP16[$528>>1]|0;
    $11 = $529;
    $530 = $529&65535;
    switch ($530|0) {
    case 34:  {
     $531 = $6;
     $532 = $7;
     $533 = $9;
     $534 = (_verifyStringOrDots($531,$532,1,1,$533)|0);
     $535 = ($534|0)!=(0);
     if (!($535)) {
      label = 161;
      break L121;
     }
     $536 = HEAP32[$22>>2]|0;
     $537 = (($536) + 1)|0;
     HEAP32[$22>>2] = $537;
     $538 = $6;
     $539 = $17;
     $540 = (_appendInstructionChar($538,$539,$18,34)|0);
     $541 = ($540|0)!=(0);
     if (!($541)) {
      label = 163;
      break L121;
     }
     $542 = $6;
     (_passGetString($21,$22,$19,$542)|0);
     break;
    }
    case 64:  {
     $543 = $6;
     $544 = $7;
     $545 = $9;
     $546 = (_verifyStringOrDots($543,$544,0,1,$545)|0);
     $547 = ($546|0)!=(0);
     if (!($547)) {
      label = 166;
      break L121;
     }
     $548 = HEAP32[$22>>2]|0;
     $549 = (($548) + 1)|0;
     HEAP32[$22>>2] = $549;
     $550 = $6;
     (_passGetDots($21,$22,$19,$550)|0);
     $551 = $6;
     $552 = $17;
     $553 = (_appendInstructionChar($551,$552,$18,64)|0);
     $554 = ($553|0)!=(0);
     if (!($554)) {
      label = 168;
      break L121;
     }
     $555 = HEAP16[$19>>1]|0;
     $556 = $555&65535;
     $557 = ($556|0)==(0);
     if ($557) {
      label = 170;
      break L121;
     }
     break;
    }
    case 35:  {
     $582 = HEAP32[$22>>2]|0;
     $583 = (($582) + 1)|0;
     HEAP32[$22>>2] = $583;
     $584 = $6;
     $585 = (_passGetVariableNumber($584,$21,$22,$20)|0);
     $586 = ($585|0)!=(0);
     if (!($586)) {
      label = 183;
      break L121;
     }
     $587 = HEAP32[$22>>2]|0;
     $588 = ((($21)) + 2|0);
     $589 = (($588) + ($587<<1)|0);
     $590 = HEAP16[$589>>1]|0;
     $591 = $590&65535;
     switch ($591|0) {
     case 61:  {
      break;
     }
     case 45: case 43:  {
      $608 = $6;
      $609 = $17;
      $610 = HEAP32[$22>>2]|0;
      $611 = (($610) + 1)|0;
      HEAP32[$22>>2] = $611;
      $612 = ((($21)) + 2|0);
      $613 = (($612) + ($610<<1)|0);
      $614 = HEAP16[$613>>1]|0;
      $615 = (_appendInstructionChar($608,$609,$18,$614)|0);
      $616 = ($615|0)!=(0);
      if (!($616)) {
       label = 192;
       break L121;
      }
      $617 = $6;
      $618 = $17;
      $619 = HEAP16[$20>>1]|0;
      $620 = (_appendInstructionChar($617,$618,$18,$619)|0);
      $621 = ($620|0)!=(0);
      if ($621) {
       continue L121;
      } else {
       label = 194;
       break L121;
      }
      break;
     }
     default: {
      label = 195;
      break L121;
     }
     }
     $592 = $6;
     $593 = $17;
     $594 = (_appendInstructionChar($592,$593,$18,61)|0);
     $595 = ($594|0)!=(0);
     if (!($595)) {
      label = 186;
      break L121;
     }
     $596 = $6;
     $597 = $17;
     $598 = HEAP16[$20>>1]|0;
     $599 = (_appendInstructionChar($596,$597,$18,$598)|0);
     $600 = ($599|0)!=(0);
     if (!($600)) {
      label = 188;
      break L121;
     }
     $601 = HEAP32[$22>>2]|0;
     $602 = (($601) + 1)|0;
     HEAP32[$22>>2] = $602;
     (_passGetNumber($21,$22,$20)|0);
     $603 = $6;
     $604 = $17;
     $605 = HEAP16[$20>>1]|0;
     $606 = (_appendInstructionChar($603,$604,$18,$605)|0);
     $607 = ($606|0)!=(0);
     if ($607) {
      continue L121;
     } else {
      label = 190;
      break L121;
     }
     break;
    }
    case 42:  {
     $623 = $6;
     $624 = $17;
     $625 = (_appendInstructionChar($623,$624,$18,42)|0);
     $626 = ($625|0)!=(0);
     if (!($626)) {
      label = 197;
      break L121;
     }
     $627 = HEAP32[$22>>2]|0;
     $628 = (($627) + 1)|0;
     HEAP32[$22>>2] = $628;
     continue L121;
     break;
    }
    case 63:  {
     $629 = $6;
     $630 = $17;
     $631 = (_appendInstructionChar($629,$630,$18,63)|0);
     $632 = ($631|0)!=(0);
     if (!($632)) {
      label = 200;
      break L121;
     }
     $633 = HEAP32[$22>>2]|0;
     $634 = (($633) + 1)|0;
     HEAP32[$22>>2] = $634;
     continue L121;
     break;
    }
    case 125: case 123: case 59:  {
     $635 = HEAP32[$22>>2]|0;
     $636 = (($635) + 1)|0;
     HEAP32[$22>>2] = $636;
     (_passGetName($21,$22,$19)|0);
     $637 = $10;
     $638 = HEAP32[$637>>2]|0;
     $639 = (_findRuleName($19,$638)|0);
     $27 = $639;
     $640 = $27;
     $641 = ($640|0)!=(0);
     if ($641) {
      $642 = $27;
      $643 = $10;
      $644 = HEAP32[$643>>2]|0;
      $645 = ((($644)) + 31168|0);
      $646 = (($645) + ($642<<3)|0);
      $13 = $646;
     }
     $647 = $13;
     $648 = ($647|0)!=(0|0);
     if (!($648)) {
      label = 212;
      break L121;
     }
     $649 = $13;
     $650 = ((($649)) + 36|0);
     $651 = HEAP32[$650>>2]|0;
     $652 = ($651|0)==(69);
     if (!($652)) {
      label = 212;
      break L121;
     }
     $653 = $6;
     $654 = $17;
     $655 = $11;
     $656 = (_appendInstructionChar($653,$654,$18,$655)|0);
     $657 = ($656|0)!=(0);
     if (!($657)) {
      label = 207;
      break L121;
     }
     $658 = $6;
     $659 = $17;
     $660 = $27;
     $661 = $660 >>> 16;
     $662 = $661&65535;
     $663 = (_appendInstructionChar($658,$659,$18,$662)|0);
     $664 = ($663|0)!=(0);
     if (!($664)) {
      label = 209;
      break L121;
     }
     $665 = $6;
     $666 = $17;
     $667 = $27;
     $668 = $667 & 65535;
     $669 = $668&65535;
     $670 = (_appendInstructionChar($665,$666,$18,$669)|0);
     $671 = ($670|0)!=(0);
     if ($671) {
      continue L121;
     } else {
      label = 211;
      break L121;
     }
     break;
    }
    case 37:  {
     $677 = HEAP32[$22>>2]|0;
     $678 = (($677) + 1)|0;
     HEAP32[$22>>2] = $678;
     (_passGetName($21,$22,$19)|0);
     $679 = $10;
     $680 = HEAP32[$679>>2]|0;
     $681 = (_findRuleName($19,$680)|0);
     $28 = $681;
     $682 = $28;
     $683 = ($682|0)!=(0);
     if ($683) {
      $684 = $28;
      $685 = $10;
      $686 = HEAP32[$685>>2]|0;
      $687 = ((($686)) + 31168|0);
      $688 = (($687) + ($684<<3)|0);
      $13 = $688;
     }
     $689 = $13;
     $690 = ($689|0)!=(0|0);
     if (!($690)) {
      label = 225;
      break L121;
     }
     $691 = $13;
     $692 = ((($691)) + 36|0);
     $693 = HEAP32[$692>>2]|0;
     $694 = ($693|0)==(58);
     if (!($694)) {
      $695 = $13;
      $696 = ((($695)) + 36|0);
      $697 = HEAP32[$696>>2]|0;
      $698 = ($697|0)==(59);
      if (!($698)) {
       $699 = $13;
       $700 = ((($699)) + 36|0);
       $701 = HEAP32[$700>>2]|0;
       $702 = ($701|0)==(60);
       if (!($702)) {
        label = 225;
        break L121;
       }
      }
     }
     $703 = $6;
     $704 = $17;
     $705 = (_appendInstructionChar($703,$704,$18,37)|0);
     $706 = ($705|0)!=(0);
     if (!($706)) {
      label = 220;
      break L121;
     }
     $707 = $6;
     $708 = $17;
     $709 = $28;
     $710 = $709 >>> 16;
     $711 = $710&65535;
     $712 = (_appendInstructionChar($707,$708,$18,$711)|0);
     $713 = ($712|0)!=(0);
     if (!($713)) {
      label = 222;
      break L121;
     }
     $714 = $6;
     $715 = $17;
     $716 = $28;
     $717 = $716 & 65535;
     $718 = $717&65535;
     $719 = (_appendInstructionChar($714,$715,$18,$718)|0);
     $720 = ($719|0)!=(0);
     if ($720) {
      continue L121;
     } else {
      label = 224;
      break L121;
     }
     break;
    }
    default: {
     label = 226;
     break L121;
    }
    }
    $559 = HEAP32[$18>>2]|0;
    $560 = ($559|0)>=(2048);
    $561 = $6;
    if ($560) {
     label = 172;
     break;
    }
    $562 = $17;
    $563 = HEAP16[$19>>1]|0;
    $564 = (_appendInstructionChar($561,$562,$18,$563)|0);
    $565 = ($564|0)!=(0);
    if (!($565)) {
     label = 174;
     break;
    }
    $15 = 0;
    while(1) {
     $566 = $15;
     $567 = HEAP16[$19>>1]|0;
     $568 = $567&65535;
     $569 = ($566|0)<($568|0);
     if (!($569)) {
      continue L121;
     }
     $570 = HEAP32[$18>>2]|0;
     $571 = ($570|0)>=(2048);
     $572 = $6;
     if ($571) {
      label = 178;
      break L121;
     }
     $573 = $17;
     $574 = $15;
     $575 = ((($19)) + 2|0);
     $576 = (($575) + ($574<<1)|0);
     $577 = HEAP16[$576>>1]|0;
     $578 = (_appendInstructionChar($572,$573,$18,$577)|0);
     $579 = ($578|0)!=(0);
     if (!($579)) {
      label = 180;
      break L121;
     }
     $580 = $15;
     $581 = (($580) + 1)|0;
     $15 = $581;
    }
   }
   switch (label|0) {
    case 158: {
     $525 = $6;
     _compileError($525,8903,$vararg_buffer29);
     $5 = 0;
     $756 = $5;
     STACKTOP = sp;return ($756|0);
     break;
    }
    case 161: {
     $5 = 0;
     $756 = $5;
     STACKTOP = sp;return ($756|0);
     break;
    }
    case 163: {
     $5 = 0;
     $756 = $5;
     STACKTOP = sp;return ($756|0);
     break;
    }
    case 166: {
     $5 = 0;
     $756 = $5;
     STACKTOP = sp;return ($756|0);
     break;
    }
    case 168: {
     $5 = 0;
     $756 = $5;
     STACKTOP = sp;return ($756|0);
     break;
    }
    case 170: {
     $558 = $6;
     _compileError($558,8945,$vararg_buffer31);
     $5 = 0;
     $756 = $5;
     STACKTOP = sp;return ($756|0);
     break;
    }
    case 172: {
     _compileError($561,8997,$vararg_buffer33);
     $5 = 0;
     $756 = $5;
     STACKTOP = sp;return ($756|0);
     break;
    }
    case 174: {
     $5 = 0;
     $756 = $5;
     STACKTOP = sp;return ($756|0);
     break;
    }
    case 178: {
     _compileError($572,8997,$vararg_buffer35);
     $5 = 0;
     $756 = $5;
     STACKTOP = sp;return ($756|0);
     break;
    }
    case 180: {
     $5 = 0;
     $756 = $5;
     STACKTOP = sp;return ($756|0);
     break;
    }
    case 183: {
     $5 = 0;
     $756 = $5;
     STACKTOP = sp;return ($756|0);
     break;
    }
    case 186: {
     $5 = 0;
     $756 = $5;
     STACKTOP = sp;return ($756|0);
     break;
    }
    case 188: {
     $5 = 0;
     $756 = $5;
     STACKTOP = sp;return ($756|0);
     break;
    }
    case 190: {
     $5 = 0;
     $756 = $5;
     STACKTOP = sp;return ($756|0);
     break;
    }
    case 192: {
     $5 = 0;
     $756 = $5;
     STACKTOP = sp;return ($756|0);
     break;
    }
    case 194: {
     $5 = 0;
     $756 = $5;
     STACKTOP = sp;return ($756|0);
     break;
    }
    case 195: {
     $622 = $6;
     _compileError($622,9052,$vararg_buffer37);
     $5 = 0;
     $756 = $5;
     STACKTOP = sp;return ($756|0);
     break;
    }
    case 197: {
     $5 = 0;
     $756 = $5;
     STACKTOP = sp;return ($756|0);
     break;
    }
    case 200: {
     $5 = 0;
     $756 = $5;
     STACKTOP = sp;return ($756|0);
     break;
    }
    case 207: {
     $5 = 0;
     $756 = $5;
     STACKTOP = sp;return ($756|0);
     break;
    }
    case 209: {
     $5 = 0;
     $756 = $5;
     STACKTOP = sp;return ($756|0);
     break;
    }
    case 211: {
     $5 = 0;
     $756 = $5;
     STACKTOP = sp;return ($756|0);
     break;
    }
    case 212: {
     $672 = $6;
     $673 = ((($19)) + 2|0);
     $674 = HEAP16[$19>>1]|0;
     $675 = $674&65535;
     $676 = (__lou_showString($673,$675,0)|0);
     HEAP32[$vararg_buffer39>>2] = $676;
     _compileError($672,8767,$vararg_buffer39);
     $5 = 0;
     $756 = $5;
     STACKTOP = sp;return ($756|0);
     break;
    }
    case 220: {
     $5 = 0;
     $756 = $5;
     STACKTOP = sp;return ($756|0);
     break;
    }
    case 222: {
     $5 = 0;
     $756 = $5;
     STACKTOP = sp;return ($756|0);
     break;
    }
    case 224: {
     $5 = 0;
     $756 = $5;
     STACKTOP = sp;return ($756|0);
     break;
    }
    case 225: {
     $721 = $6;
     $722 = ((($19)) + 2|0);
     $723 = HEAP16[$19>>1]|0;
     $724 = $723&65535;
     $725 = (__lou_showString($722,$724,0)|0);
     HEAP32[$vararg_buffer42>>2] = $725;
     _compileError($721,9095,$vararg_buffer42);
     $5 = 0;
     $756 = $5;
     STACKTOP = sp;return ($756|0);
     break;
    }
    case 226: {
     $726 = $6;
     _compileError($726,9118,$vararg_buffer45);
     $5 = 0;
     $756 = $5;
     STACKTOP = sp;return ($756|0);
     break;
    }
    case 227: {
     $727 = $523&65535;
     HEAP16[11302] = $727;
     $728 = $6;
     $729 = $17;
     $730 = HEAP16[11302]|0;
     $731 = $730&65535;
     $732 = (_passFindCharacters($728,$729,$731,$29,$30)|0);
     $31 = $732;
     $733 = $31;
     $734 = ($733|0)!=(0);
     if (!($734)) {
      $5 = 0;
      $756 = $5;
      STACKTOP = sp;return ($756|0);
     }
     $735 = HEAP32[$29>>2]|0;
     $736 = ($735|0)!=(0|0);
     if ($736) {
      $14 = 0;
      while(1) {
       $737 = $14;
       $738 = HEAP32[$30>>2]|0;
       $739 = ($737|0)<($738|0);
       $740 = $14;
       if (!($739)) {
        break;
       }
       $741 = HEAP32[$29>>2]|0;
       $742 = (($741) + ($740<<1)|0);
       $743 = HEAP16[$742>>1]|0;
       $744 = $14;
       $745 = ((18508) + ($744<<1)|0);
       HEAP16[$745>>1] = $743;
       $746 = $14;
       $747 = (($746) + 1)|0;
       $14 = $747;
      }
      $748 = $740&65535;
      HEAP16[9253] = $748;
     }
     $749 = $6;
     $750 = $7;
     $751 = $8;
     $752 = $9;
     $753 = $10;
     $754 = (_addRule($749,$750,18506,22604,0,0,0,0,0,0,$751,$752,$753)|0);
     $755 = ($754|0)!=(0);
     if ($755) {
      $5 = 1;
      $756 = $5;
      STACKTOP = sp;return ($756|0);
     } else {
      $5 = 0;
      $756 = $5;
      STACKTOP = sp;return ($756|0);
     }
     break;
    }
   }
   break;
  }
 }
 return (0)|0;
}
function _getNextNumberedAttribute($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 8|0;
 $3 = sp;
 $2 = $0;
 $4 = $2;
 $5 = ((($4)) + 24|0);
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = $12;
 HEAP32[$13>>2] = $8;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $11;
 $16 = $3;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21>>>0)>(0);
 $23 = ($18>>>0)>(8388608);
 $24 = ($21|0)==(0);
 $25 = $24 & $23;
 $26 = $22 | $25;
 if ($26) {
  $27 = $1;
  $28 = $27;
  HEAP32[$28>>2] = 0;
  $29 = (($27) + 4)|0;
  $30 = $29;
  HEAP32[$30>>2] = 0;
  $55 = $1;
  $56 = $55;
  $57 = HEAP32[$56>>2]|0;
  $58 = (($55) + 4)|0;
  $59 = $58;
  $60 = HEAP32[$59>>2]|0;
  tempRet0 = ($60);
  STACKTOP = sp;return ($57|0);
 } else {
  $31 = $2;
  $32 = ((($31)) + 24|0);
  $33 = $32;
  $34 = $33;
  $35 = HEAP32[$34>>2]|0;
  $36 = (($33) + 4)|0;
  $37 = $36;
  $38 = HEAP32[$37>>2]|0;
  $39 = (_bitshift64Shl(($35|0),($38|0),1)|0);
  $40 = tempRet0;
  $41 = $32;
  $42 = $41;
  HEAP32[$42>>2] = $39;
  $43 = (($41) + 4)|0;
  $44 = $43;
  HEAP32[$44>>2] = $40;
  $45 = $3;
  $46 = $45;
  $47 = HEAP32[$46>>2]|0;
  $48 = (($45) + 4)|0;
  $49 = $48;
  $50 = HEAP32[$49>>2]|0;
  $51 = $1;
  $52 = $51;
  HEAP32[$52>>2] = $47;
  $53 = (($51) + 4)|0;
  $54 = $53;
  HEAP32[$54>>2] = $50;
  $55 = $1;
  $56 = $55;
  $57 = HEAP32[$56>>2]|0;
  $58 = (($55) + 4)|0;
  $59 = $58;
  $60 = HEAP32[$59>>2]|0;
  tempRet0 = ($60);
  STACKTOP = sp;return ($57|0);
 }
 return (0)|0;
}
function _compileSwap($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 20528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(20528|0);
 $11 = sp + 16420|0;
 $12 = sp + 12322|0;
 $13 = sp + 8224|0;
 $14 = sp + 4126|0;
 $15 = sp + 28|0;
 $16 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $17 = $6;
 $18 = (_getToken($17,$13,7665)|0);
 $19 = ($18|0)!=(0);
 do {
  if ($19) {
   $20 = $6;
   $21 = (_getToken($20,$14,9409)|0);
   $22 = ($21|0)!=(0);
   if (!($22)) {
    $5 = 0;
    break;
   }
   $23 = $6;
   $24 = (_getToken($23,$15,9425)|0);
   $25 = ($24|0)!=(0);
   if (!($25)) {
    $5 = 0;
    break;
   }
   $26 = $7;
   $27 = ($26|0)==(58);
   $28 = $7;
   $29 = ($28|0)==(59);
   $or$cond = $27 | $29;
   $30 = $6;
   if ($or$cond) {
    $31 = (_parseChars($30,$11,$14)|0);
    $32 = ($31|0)!=(0);
    if (!($32)) {
     $5 = 0;
     break;
    }
   } else {
    $33 = (_compileSwapDots($30,$14,$11)|0);
    $34 = ($33|0)!=(0);
    if (!($34)) {
     $5 = 0;
     break;
    }
   }
   $35 = $7;
   $36 = ($35|0)==(58);
   $37 = $6;
   if ($36) {
    $38 = (_parseChars($37,$12,$15)|0);
    $39 = ($38|0)!=(0);
    if (!($39)) {
     $5 = 0;
     break;
    }
   } else {
    $40 = (_compileSwapDots($37,$15,$12)|0);
    $41 = ($40|0)!=(0);
    if (!($41)) {
     $5 = 0;
     break;
    }
   }
   $42 = $6;
   $43 = $7;
   $44 = $8;
   $45 = $9;
   $46 = $10;
   $47 = (_addRule($42,$43,$11,$12,0,0,0,0,$16,0,$44,$45,$46)|0);
   $48 = ($47|0)!=(0);
   if (!($48)) {
    $5 = 0;
    break;
   }
   $49 = $6;
   $50 = HEAP32[$16>>2]|0;
   $51 = $10;
   $52 = HEAP32[$51>>2]|0;
   $53 = (_addRuleName($49,$13,$50,$52)|0);
   $54 = ($53|0)!=(0);
   if ($54) {
    $5 = 1;
    break;
   } else {
    $5 = 0;
    break;
   }
  } else {
   $5 = 0;
  }
 } while(0);
 $55 = $5;
 STACKTOP = sp;return ($55|0);
}
function _atTokenDelimiter($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 40|0);
 $7 = (($6) + ($4<<1)|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 $10 = ($9|0)<=(32);
 $11 = $10&1;
 STACKTOP = sp;return ($11|0);
}
function _hyphenHashNew() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_rpl_malloc(32764)|0);
 $0 = $1;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  __lou_outOfMemory();
 }
 $3 = $0;
 _memset(($3|0),0,32764)|0;
 $4 = $0;
 STACKTOP = sp;return ($4|0);
}
function _hyphenHashLookup($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $4;
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = ($10|0)==(0);
 if ($11) {
  $2 = 0;
  $62 = $2;
  STACKTOP = sp;return ($62|0);
 }
 $12 = $4;
 $13 = (_hyphenStringHash($12)|0);
 $14 = (($13>>>0) % 8191)&-1;
 $5 = $14;
 $15 = $5;
 $16 = $3;
 $17 = (($16) + ($15<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $7 = $18;
 while(1) {
  $19 = $7;
  $20 = ($19|0)!=(0|0);
  if (!($20)) {
   label = 13;
   break;
  }
  $21 = $4;
  $22 = HEAP16[$21>>1]|0;
  $23 = $22&65535;
  $24 = $7;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = HEAP16[$26>>1]|0;
  $28 = $27&65535;
  $29 = ($23|0)!=($28|0);
  if (!($29)) {
   $6 = 0;
   while(1) {
    $30 = $6;
    $31 = $4;
    $32 = HEAP16[$31>>1]|0;
    $33 = $32&65535;
    $34 = ($30|0)<($33|0);
    if (!($34)) {
     break;
    }
    $35 = $6;
    $36 = $4;
    $37 = ((($36)) + 2|0);
    $38 = (($37) + ($35<<1)|0);
    $39 = HEAP16[$38>>1]|0;
    $40 = $39&65535;
    $41 = $6;
    $42 = $7;
    $43 = ((($42)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ((($44)) + 2|0);
    $46 = (($45) + ($41<<1)|0);
    $47 = HEAP16[$46>>1]|0;
    $48 = $47&65535;
    $49 = ($40|0)!=($48|0);
    if ($49) {
     break;
    }
    $50 = $6;
    $51 = (($50) + 1)|0;
    $6 = $51;
   }
   $52 = $6;
   $53 = $4;
   $54 = HEAP16[$53>>1]|0;
   $55 = $54&65535;
   $56 = ($52|0)==($55|0);
   if ($56) {
    label = 11;
    break;
   }
  }
  $60 = $7;
  $61 = HEAP32[$60>>2]|0;
  $7 = $61;
 }
 if ((label|0) == 11) {
  $57 = $7;
  $58 = ((($57)) + 8|0);
  $59 = HEAP32[$58>>2]|0;
  $2 = $59;
  $62 = $2;
  STACKTOP = sp;return ($62|0);
 }
 else if ((label|0) == 13) {
  $2 = 65535;
  $62 = $2;
  STACKTOP = sp;return ($62|0);
 }
 return (0)|0;
}
function _hyphenGetNewState($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = $5;
 $8 = $3;
 $9 = HEAP32[$8>>2]|0;
 _hyphenHashInsert($6,$7,$9);
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) - 1)|0;
 $15 = $11 & $14;
 $16 = ($15|0)!=(0);
 if (!($16)) {
  $17 = $3;
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $3;
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 << 1;
  $23 = ($22*12)|0;
  $24 = (_rpl_realloc($19,$23)|0);
  $25 = $3;
  $26 = ((($25)) + 4|0);
  HEAP32[$26>>2] = $24;
 }
 $27 = $3;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)!=(0|0);
 if (!($30)) {
  __lou_outOfMemory();
 }
 $31 = $3;
 $32 = HEAP32[$31>>2]|0;
 $33 = $3;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) + (($32*12)|0)|0);
 $37 = ((($36)) + 4|0);
 HEAP32[$37>>2] = 0;
 $38 = $3;
 $39 = HEAP32[$38>>2]|0;
 $40 = $3;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42) + (($39*12)|0)|0);
 $44 = ((($43)) + 8|0);
 HEAP16[$44>>1] = -1;
 $45 = $3;
 $46 = HEAP32[$45>>2]|0;
 $47 = $3;
 $48 = ((($47)) + 4|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (($49) + (($46*12)|0)|0);
 $51 = ((($50)) + 10|0);
 HEAP16[$51>>1] = 0;
 $52 = $3;
 $53 = HEAP32[$52>>2]|0;
 $54 = $3;
 $55 = ((($54)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($56) + (($53*12)|0)|0);
 HEAP32[$57>>2] = 0;
 $58 = $3;
 $59 = HEAP32[$58>>2]|0;
 $60 = (($59) + 1)|0;
 HEAP32[$58>>2] = $60;
 STACKTOP = sp;return ($59|0);
}
function _hyphenAddTrans($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $5;
 $10 = $4;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + (($9*12)|0)|0);
 $14 = ((($13)) + 10|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15&65535;
 $8 = $16;
 $17 = $8;
 $18 = ($17|0)==(0);
 if ($18) {
  $19 = (_rpl_malloc(4)|0);
  $20 = $5;
  $21 = $4;
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + (($20*12)|0)|0);
  HEAP32[$24>>2] = $19;
 } else {
  $25 = $8;
  $26 = $8;
  $27 = (($26) - 1)|0;
  $28 = $25 & $27;
  $29 = ($28|0)!=(0);
  if (!($29)) {
   $30 = $5;
   $31 = $4;
   $32 = ((($31)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($33) + (($30*12)|0)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $8;
   $37 = $36 << 1;
   $38 = $37<<2;
   $39 = (_rpl_realloc($35,$38)|0);
   $40 = $5;
   $41 = $4;
   $42 = ((($41)) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (($43) + (($40*12)|0)|0);
   HEAP32[$44>>2] = $39;
  }
 }
 $45 = $7;
 $46 = $8;
 $47 = $5;
 $48 = $4;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($50) + (($47*12)|0)|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($52) + ($46<<2)|0);
 HEAP16[$53>>1] = $45;
 $54 = $6;
 $55 = $54&65535;
 $56 = $8;
 $57 = $5;
 $58 = $4;
 $59 = ((($58)) + 4|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($60) + (($57*12)|0)|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = (($62) + ($56<<2)|0);
 $64 = ((($63)) + 2|0);
 HEAP16[$64>>1] = $55;
 $65 = $5;
 $66 = $4;
 $67 = ((($66)) + 4|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = (($68) + (($65*12)|0)|0);
 $70 = ((($69)) + 10|0);
 $71 = HEAP16[$70>>1]|0;
 $72 = (($71) + 1)<<16>>16;
 HEAP16[$70>>1] = $72;
 STACKTOP = sp;return;
}
function _hyphenHashFree($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $5 = $2;
  $6 = ($5|0)<(8191);
  if (!($6)) {
   break;
  }
  $7 = $2;
  $8 = $1;
  $9 = (($8) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $3 = $10;
  while(1) {
   $11 = $3;
   $12 = ($11|0)!=(0|0);
   if (!($12)) {
    break;
   }
   $13 = $3;
   $14 = HEAP32[$13>>2]|0;
   $4 = $14;
   $15 = $3;
   $16 = ((($15)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   _rpl_free($17);
   $18 = $3;
   _rpl_free($18);
   $19 = $4;
   $3 = $19;
  }
  $20 = $2;
  $21 = (($20) + 1)|0;
  $2 = $21;
 }
 $22 = $1;
 _rpl_free($22);
 STACKTOP = sp;return;
}
function _hyphenStringHash($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = 0;
 $2 = 0;
 while(1) {
  $5 = $2;
  $6 = $1;
  $7 = HEAP16[$6>>1]|0;
  $8 = $7&65535;
  $9 = ($5|0)<($8|0);
  $10 = $3;
  if (!($9)) {
   break;
  }
  $11 = $10 << 4;
  $12 = $2;
  $13 = $1;
  $14 = ((($13)) + 2|0);
  $15 = (($14) + ($12<<1)|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&65535;
  $18 = (($11) + ($17))|0;
  $3 = $18;
  $19 = $3;
  $20 = $19 & -268435456;
  $4 = $20;
  $21 = ($20|0)!=(0);
  if ($21) {
   $22 = $3;
   $23 = $4;
   $24 = $23 >>> 24;
   $25 = $22 ^ $24;
   $3 = $25;
   $26 = $3;
   $27 = $4;
   $28 = $26 ^ $27;
   $3 = $28;
  }
  $29 = $2;
  $30 = (($29) + 1)|0;
  $2 = $30;
 }
 STACKTOP = sp;return ($10|0);
}
function _hyphenHashInsert($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $4;
 $10 = (_hyphenStringHash($9)|0);
 $11 = (($10>>>0) % 8191)&-1;
 $6 = $11;
 $12 = (_rpl_malloc(12)|0);
 $8 = $12;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  __lou_outOfMemory();
 }
 $14 = $6;
 $15 = $3;
 $16 = (($15) + ($14<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $8;
 HEAP32[$18>>2] = $17;
 $19 = $4;
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 $22 = (($21) + 1)|0;
 $23 = $22<<1;
 $24 = (_rpl_malloc($23)|0);
 $25 = $8;
 $26 = ((($25)) + 4|0);
 HEAP32[$26>>2] = $24;
 $27 = $8;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)!=(0|0);
 if (!($30)) {
  __lou_outOfMemory();
 }
 $31 = $4;
 $32 = HEAP16[$31>>1]|0;
 $33 = $8;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 HEAP16[$35>>1] = $32;
 $7 = 0;
 while(1) {
  $36 = $7;
  $37 = $4;
  $38 = HEAP16[$37>>1]|0;
  $39 = $38&65535;
  $40 = ($36|0)<($39|0);
  if (!($40)) {
   break;
  }
  $41 = $7;
  $42 = $4;
  $43 = ((($42)) + 2|0);
  $44 = (($43) + ($41<<1)|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = $7;
  $47 = $8;
  $48 = ((($47)) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($49)) + 2|0);
  $51 = (($50) + ($46<<1)|0);
  HEAP16[$51>>1] = $45;
  $52 = $7;
  $53 = (($52) + 1)|0;
  $7 = $53;
 }
 $54 = $5;
 $55 = $8;
 $56 = ((($55)) + 8|0);
 HEAP32[$56>>2] = $54;
 $57 = $8;
 $58 = $6;
 $59 = $3;
 $60 = (($59) + ($58<<2)|0);
 HEAP32[$60>>2] = $57;
 STACKTOP = sp;return;
}
function _putDots($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = sp + 12|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $12 = $5;
 $13 = $6;
 $14 = HEAP32[$13>>2]|0;
 $15 = (_getDots($12,$14)|0);
 $7 = $15;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $7;
  $3 = $17;
  $76 = $3;
  STACKTOP = sp;return ($76|0);
 }
 $18 = $4;
 $19 = $6;
 $20 = (_allocateSpaceInTranslationTable($18,$8,56,$19)|0);
 $21 = ($20|0)!=(0);
 if (!($21)) {
  $3 = 0;
  $76 = $3;
  STACKTOP = sp;return ($76|0);
 }
 $22 = HEAP32[$8>>2]|0;
 $23 = $6;
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($24)) + 31168|0);
 $26 = (($25) + ($22<<3)|0);
 $7 = $26;
 $27 = $7;
 dest=$27; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $28 = $4;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $7;
 HEAP32[$31>>2] = $30;
 $32 = $4;
 $33 = ((($32)) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $7;
 $36 = ((($35)) + 4|0);
 HEAP32[$36>>2] = $34;
 $37 = $5;
 $38 = $7;
 $39 = ((($38)) + 44|0);
 HEAP16[$39>>1] = $37;
 $40 = $5;
 $41 = (__lou_charHash($40)|0);
 $9 = $41;
 $42 = $9;
 $43 = $6;
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($44)) + 17652|0);
 $46 = (($45) + ($42<<2)|0);
 $47 = HEAP32[$46>>2]|0;
 $10 = $47;
 $48 = $10;
 $49 = ($48|0)!=(0);
 if ($49) {
  $56 = $10;
  $57 = $6;
  $58 = HEAP32[$57>>2]|0;
  $59 = ((($58)) + 31168|0);
  $60 = (($59) + ($56<<3)|0);
  $11 = $60;
  while(1) {
   $61 = $11;
   $62 = ((($61)) + 8|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($63|0)!=(0);
   if (!($64)) {
    break;
   }
   $65 = $11;
   $66 = ((($65)) + 8|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = $6;
   $69 = HEAP32[$68>>2]|0;
   $70 = ((($69)) + 31168|0);
   $71 = (($70) + ($67<<3)|0);
   $11 = $71;
  }
  $72 = HEAP32[$8>>2]|0;
  $73 = $11;
  $74 = ((($73)) + 8|0);
  HEAP32[$74>>2] = $72;
 } else {
  $50 = HEAP32[$8>>2]|0;
  $51 = $9;
  $52 = $6;
  $53 = HEAP32[$52>>2]|0;
  $54 = ((($53)) + 17652|0);
  $55 = (($54) + ($51<<2)|0);
  HEAP32[$55>>2] = $50;
 }
 $75 = $7;
 $3 = $75;
 $76 = $3;
 STACKTOP = sp;return ($76|0);
}
function _addRuleName($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = $6;
 $13 = HEAP16[$12>>1]|0;
 $14 = $13&65535;
 $15 = (($14) - 1)|0;
 $16 = $15<<1;
 $17 = (12 + ($16))|0;
 $18 = (_rpl_malloc($17)|0);
 $10 = $18;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  $20 = $5;
  _compileError($20,7821,$vararg_buffer);
  __lou_outOfMemory();
 }
 $21 = $10;
 ;HEAP32[$21>>2]=0|0;HEAP32[$21+4>>2]=0|0;HEAP32[$21+8>>2]=0|0;
 $9 = 0;
 while(1) {
  $22 = $9;
  $23 = $6;
  $24 = HEAP16[$23>>1]|0;
  $25 = $24&65535;
  $26 = ($22|0)<($25|0);
  if (!($26)) {
   label = 11;
   break;
  }
  $27 = $9;
  $28 = $6;
  $29 = ((($28)) + 2|0);
  $30 = (($29) + ($27<<1)|0);
  $31 = HEAP16[$30>>1]|0;
  $11 = $31;
  $32 = $11;
  $33 = $32&65535;
  $34 = ($33|0)>=(97);
  if ($34) {
   $35 = $11;
   $36 = $35&65535;
   $37 = ($36|0)<=(122);
   if (!($37)) {
    label = 7;
   }
  } else {
   label = 7;
  }
  if ((label|0) == 7) {
   label = 0;
   $38 = $11;
   $39 = $38&65535;
   $40 = ($39|0)>=(65);
   if (!($40)) {
    label = 10;
    break;
   }
   $41 = $11;
   $42 = $41&65535;
   $43 = ($42|0)<=(90);
   if (!($43)) {
    label = 10;
    break;
   }
  }
  $44 = $11;
  $45 = $9;
  $46 = $10;
  $47 = ((($46)) + 10|0);
  $48 = (($47) + ($45<<1)|0);
  HEAP16[$48>>1] = $44;
  $49 = $9;
  $50 = (($49) + 1)|0;
  $9 = $50;
 }
 if ((label|0) == 10) {
  $51 = $5;
  _compileError($51,7839,$vararg_buffer1);
  $52 = $10;
  _rpl_free($52);
  $4 = 0;
  $67 = $4;
  STACKTOP = sp;return ($67|0);
 }
 else if ((label|0) == 11) {
  $53 = $6;
  $54 = HEAP16[$53>>1]|0;
  $55 = $10;
  $56 = ((($55)) + 8|0);
  HEAP16[$56>>1] = $54;
  $57 = $7;
  $58 = $10;
  $59 = ((($58)) + 4|0);
  HEAP32[$59>>2] = $57;
  $60 = $8;
  $61 = ((($60)) + 32|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $10;
  HEAP32[$63>>2] = $62;
  $64 = $10;
  $65 = $8;
  $66 = ((($65)) + 32|0);
  HEAP32[$66>>2] = $64;
  $4 = 1;
  $67 = $4;
  STACKTOP = sp;return ($67|0);
 }
 return (0)|0;
}
function _allocateSpaceInDisplayTable($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $13 = $6;
 $14 = (($13) + 8)|0;
 $15 = (($14) - 1)|0;
 $16 = (($15>>>0) / 8)&-1;
 $17 = $16<<3;
 $8 = $17;
 $18 = $7;
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $8;
 $23 = (($21) + ($22))|0;
 $9 = $23;
 $24 = $7;
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[$25>>2]|0;
 $10 = $26;
 $27 = $9;
 $28 = $10;
 $29 = ($27>>>0)>($28>>>0);
 if ($29) {
  $30 = $9;
  $31 = (($30>>>0) / 8)&-1;
  $32 = $9;
  $33 = (($32) + ($31))|0;
  $9 = $33;
  $34 = $7;
  $35 = HEAP32[$34>>2]|0;
  $36 = $9;
  $37 = (_rpl_realloc($35,$36)|0);
  $11 = $37;
  $38 = $11;
  $39 = ($38|0)!=(0|0);
  if (!($39)) {
   $40 = $4;
   _compileError($40,7903,$vararg_buffer);
   __lou_outOfMemory();
  }
  $41 = $11;
  $42 = $10;
  $43 = (($41) + ($42)|0);
  $44 = $9;
  $45 = $10;
  $46 = (($44) - ($45))|0;
  _memset(($43|0),0,($46|0))|0;
  $47 = HEAP32[4314]|0;
  $12 = $47;
  while(1) {
   $48 = $12;
   $49 = ($48|0)!=(0|0);
   if (!($49)) {
    break;
   }
   $50 = $12;
   $51 = ((($50)) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $7;
   $54 = HEAP32[$53>>2]|0;
   $55 = ($52|0)==($54|0);
   if ($55) {
    $56 = $11;
    $57 = $12;
    $58 = ((($57)) + 4|0);
    HEAP32[$58>>2] = $56;
   }
   $59 = $12;
   $60 = HEAP32[$59>>2]|0;
   $12 = $60;
  }
  $61 = $9;
  $62 = $11;
  HEAP32[$62>>2] = $61;
  $63 = $11;
  $64 = $7;
  HEAP32[$64>>2] = $63;
 }
 $65 = $5;
 $66 = ($65|0)!=(0|0);
 if (!($66)) {
  STACKTOP = sp;return 1;
 }
 $67 = $7;
 $68 = HEAP32[$67>>2]|0;
 $69 = ((($68)) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = (($70) - 9000)|0;
 $72 = (($71>>>0) / 8)&-1;
 $73 = $5;
 HEAP32[$73>>2] = $72;
 $74 = $8;
 $75 = $7;
 $76 = HEAP32[$75>>2]|0;
 $77 = ((($76)) + 4|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = (($78) + ($74))|0;
 HEAP32[$77>>2] = $79;
 STACKTOP = sp;return 1;
}
function _addForwardPassRule($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $5;
 $10 = ((($9)) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 switch ($11|0) {
 case 75:  {
  $12 = $6;
  $13 = ((($12)) + 22144|0);
  $7 = $13;
  break;
 }
 case 74:  {
  $14 = $6;
  $15 = ((($14)) + 22144|0);
  $16 = ((($15)) + 4|0);
  $7 = $16;
  break;
 }
 case 76:  {
  $17 = $6;
  $18 = ((($17)) + 22144|0);
  $19 = ((($18)) + 8|0);
  $7 = $19;
  break;
 }
 case 77:  {
  $20 = $6;
  $21 = ((($20)) + 22144|0);
  $22 = ((($21)) + 12|0);
  $7 = $22;
  break;
 }
 case 78:  {
  $23 = $6;
  $24 = ((($23)) + 22144|0);
  $25 = ((($24)) + 16|0);
  $7 = $25;
  break;
 }
 default: {
  $3 = 0;
  $51 = $3;
  STACKTOP = sp;return ($51|0);
 }
 }
 while(1) {
  $26 = $7;
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)!=(0);
  if (!($28)) {
   break;
  }
  $29 = $7;
  $30 = HEAP32[$29>>2]|0;
  $31 = $6;
  $32 = ((($31)) + 31168|0);
  $33 = (($32) + ($30<<3)|0);
  $8 = $33;
  $34 = $5;
  $35 = ((($34)) + 42|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = $36 << 16 >> 16;
  $38 = $8;
  $39 = ((($38)) + 42|0);
  $40 = HEAP16[$39>>1]|0;
  $41 = $40 << 16 >> 16;
  $42 = ($37|0)>($41|0);
  if ($42) {
   break;
  }
  $43 = $8;
  $44 = ((($43)) + 8|0);
  $7 = $44;
 }
 $45 = $7;
 $46 = HEAP32[$45>>2]|0;
 $47 = $5;
 $48 = ((($47)) + 8|0);
 HEAP32[$48>>2] = $46;
 $49 = $4;
 $50 = $7;
 HEAP32[$50>>2] = $49;
 $3 = 1;
 $51 = $3;
 STACKTOP = sp;return ($51|0);
}
function _addBackwardPassRule($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $5;
 $10 = ((($9)) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 switch ($11|0) {
 case 75:  {
  $12 = $6;
  $13 = ((($12)) + 22164|0);
  $7 = $13;
  break;
 }
 case 74:  {
  $14 = $6;
  $15 = ((($14)) + 22164|0);
  $16 = ((($15)) + 4|0);
  $7 = $16;
  break;
 }
 case 76:  {
  $17 = $6;
  $18 = ((($17)) + 22164|0);
  $19 = ((($18)) + 8|0);
  $7 = $19;
  break;
 }
 case 77:  {
  $20 = $6;
  $21 = ((($20)) + 22164|0);
  $22 = ((($21)) + 12|0);
  $7 = $22;
  break;
 }
 case 78:  {
  $23 = $6;
  $24 = ((($23)) + 22164|0);
  $25 = ((($24)) + 16|0);
  $7 = $25;
  break;
 }
 default: {
  $3 = 0;
  $51 = $3;
  STACKTOP = sp;return ($51|0);
 }
 }
 while(1) {
  $26 = $7;
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)!=(0);
  if (!($28)) {
   break;
  }
  $29 = $7;
  $30 = HEAP32[$29>>2]|0;
  $31 = $6;
  $32 = ((($31)) + 31168|0);
  $33 = (($32) + ($30<<3)|0);
  $8 = $33;
  $34 = $5;
  $35 = ((($34)) + 42|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = $36 << 16 >> 16;
  $38 = $8;
  $39 = ((($38)) + 42|0);
  $40 = HEAP16[$39>>1]|0;
  $41 = $40 << 16 >> 16;
  $42 = ($37|0)>($41|0);
  if ($42) {
   break;
  }
  $43 = $8;
  $44 = ((($43)) + 12|0);
  $7 = $44;
 }
 $45 = $7;
 $46 = HEAP32[$45>>2]|0;
 $47 = $5;
 $48 = ((($47)) + 12|0);
 HEAP32[$48>>2] = $46;
 $49 = $4;
 $50 = $7;
 HEAP32[$50>>2] = $49;
 $3 = 1;
 $51 = $3;
 STACKTOP = sp;return ($51|0);
}
function _addForwardRuleWithSingleChar($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $12 = $6;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14>>>0)>=(76);
 if ($15) {
  $16 = $6;
  $17 = ((($16)) + 36|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18>>>0)<=(78);
  if ($19) {
   $20 = $4;
   $21 = $6;
   $22 = ((($21)) + 46|0);
   $23 = HEAP16[$22>>1]|0;
   $24 = $7;
   $25 = (_putDots($20,$23,$24)|0);
   $8 = $25;
   $26 = $5;
   $27 = $7;
   $28 = HEAP32[$27>>2]|0;
   $29 = ((($28)) + 31168|0);
   $30 = (($29) + ($26<<3)|0);
   $6 = $30;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $31 = $6;
   $32 = ((($31)) + 36|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)==(49);
   if (!($34)) {
    $35 = $6;
    $36 = ((($35)) + 36|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($37|0)==(50);
    if (!($38)) {
     $53 = $4;
     $54 = $6;
     $55 = ((($54)) + 46|0);
     $56 = HEAP16[$55>>1]|0;
     $57 = $7;
     $58 = (_putChar($53,$56,$57,0)|0);
     $8 = $58;
     $59 = $5;
     $60 = $7;
     $61 = HEAP32[$60>>2]|0;
     $62 = ((($61)) + 31168|0);
     $63 = (($62) + ($59<<3)|0);
     $6 = $63;
     $64 = $6;
     $65 = ((($64)) + 36|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = ($66>>>0)>=(61);
     if (!($67)) {
      break;
     }
     $68 = $6;
     $69 = ((($68)) + 36|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($70>>>0)<(70);
     if (!($71)) {
      break;
     }
     $72 = $8;
     $73 = ((($72)) + 12|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = ($74|0)!=(0);
     $76 = $8;
     if ($75) {
      $77 = ((($76)) + 12|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = $7;
      $80 = HEAP32[$79>>2]|0;
      $81 = ((($80)) + 31168|0);
      $82 = (($81) + ($78<<3)|0);
      $9 = $82;
      $83 = $4;
      $84 = HEAP32[$83>>2]|0;
      $85 = $4;
      $86 = ((($85)) + 12|0);
      $87 = HEAP32[$86>>2]|0;
      $88 = $4;
      $89 = $9;
      $90 = HEAP32[$89>>2]|0;
      $91 = $9;
      $92 = ((($91)) + 4|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = (_printSource($88,$90,$93)|0);
      HEAP32[$vararg_buffer>>2] = $84;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $87;
      $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
      HEAP32[$vararg_ptr2>>2] = $94;
      __lou_logMessage(10000,7951,$vararg_buffer);
     } else {
      $95 = ((($76)) + 48|0);
      $96 = HEAP32[$95>>2]|0;
      $97 = ($96|0)!=(0);
      if ($97) {
       $98 = $4;
       $99 = HEAP32[$98>>2]|0;
       $100 = $4;
       $101 = ((($100)) + 12|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = $4;
       $104 = $8;
       $105 = HEAP32[$104>>2]|0;
       $106 = $8;
       $107 = ((($106)) + 4|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = (_printSource($103,$105,$108)|0);
       $110 = $6;
       $111 = ((($110)) + 36|0);
       $112 = HEAP32[$111>>2]|0;
       $113 = (__lou_findOpcodeName($112)|0);
       HEAP32[$vararg_buffer3>>2] = $99;
       $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
       HEAP32[$vararg_ptr6>>2] = $102;
       $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
       HEAP32[$vararg_ptr7>>2] = $109;
       $vararg_ptr8 = ((($vararg_buffer3)) + 12|0);
       HEAP32[$vararg_ptr8>>2] = $113;
       __lou_logMessage(10000,8031,$vararg_buffer3);
       $114 = $8;
       $115 = ((($114)) + 48|0);
       HEAP32[$115>>2] = 0;
       $116 = $8;
       $117 = ((($116)) + 32|0);
       $118 = $117;
       $119 = $118;
       HEAP32[$119>>2] = 0;
       $120 = (($118) + 4)|0;
       $121 = $120;
       HEAP32[$121>>2] = 0;
      }
     }
     $122 = $5;
     $123 = $8;
     $124 = ((($123)) + 12|0);
     HEAP32[$124>>2] = $122;
     break;
    }
   }
   $39 = $4;
   $40 = $6;
   $41 = ((($40)) + 46|0);
   $42 = HEAP16[$41>>1]|0;
   $43 = $7;
   $44 = (_putChar($39,$42,$43,0)|0);
   $8 = $44;
   $45 = $5;
   $46 = $7;
   $47 = HEAP32[$46>>2]|0;
   $48 = ((($47)) + 31168|0);
   $49 = (($48) + ($45<<3)|0);
   $6 = $49;
   $50 = $5;
   $51 = $8;
   $52 = ((($51)) + 40|0);
   HEAP32[$52>>2] = $50;
   STACKTOP = sp;return;
  }
 } while(0);
 $125 = $8;
 $126 = ((($125)) + 16|0);
 $10 = $126;
 while(1) {
  $127 = $10;
  $128 = HEAP32[$127>>2]|0;
  $129 = ($128|0)!=(0);
  if (!($129)) {
   break;
  }
  $130 = $10;
  $131 = HEAP32[$130>>2]|0;
  $132 = $7;
  $133 = HEAP32[$132>>2]|0;
  $134 = ((($133)) + 31168|0);
  $135 = (($134) + ($131<<3)|0);
  $11 = $135;
  $136 = $11;
  $137 = ((($136)) + 42|0);
  $138 = HEAP16[$137>>1]|0;
  $139 = $138 << 16 >> 16;
  $140 = ($139|0)==(0);
  if ($140) {
   break;
  }
  $141 = $11;
  $142 = ((($141)) + 36|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = ($143>>>0)>=(61);
  if ($144) {
   $145 = $11;
   $146 = ((($145)) + 36|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = ($147>>>0)<(70);
   if ($148) {
    $149 = $6;
    $150 = ((($149)) + 36|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = ($151>>>0)>=(61);
    if (!($152)) {
     break;
    }
    $153 = $6;
    $154 = ((($153)) + 36|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = ($155>>>0)<(70);
    if (!($156)) {
     break;
    }
   }
  }
  $157 = $11;
  $158 = ((($157)) + 8|0);
  $10 = $158;
 }
 $159 = $10;
 $160 = HEAP32[$159>>2]|0;
 $161 = $6;
 $162 = ((($161)) + 8|0);
 HEAP32[$162>>2] = $160;
 $163 = $5;
 $164 = $10;
 HEAP32[$164>>2] = $163;
 STACKTOP = sp;return;
}
function _addForwardRuleWithMultipleChars($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $4;
 $9 = ((($8)) + 46|0);
 $10 = (__lou_stringHash($9,0,0)|0);
 $11 = $5;
 $12 = ((($11)) + 22184|0);
 $13 = (($12) + ($10<<2)|0);
 $6 = $13;
 while(1) {
  $14 = $6;
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0);
  if (!($16)) {
   break;
  }
  $17 = $6;
  $18 = HEAP32[$17>>2]|0;
  $19 = $5;
  $20 = ((($19)) + 31168|0);
  $21 = (($20) + ($18<<3)|0);
  $7 = $21;
  $22 = $4;
  $23 = ((($22)) + 42|0);
  $24 = HEAP16[$23>>1]|0;
  $25 = $24 << 16 >> 16;
  $26 = $7;
  $27 = ((($26)) + 42|0);
  $28 = HEAP16[$27>>1]|0;
  $29 = $28 << 16 >> 16;
  $30 = ($25|0)>($29|0);
  if ($30) {
   break;
  }
  $31 = $4;
  $32 = ((($31)) + 42|0);
  $33 = HEAP16[$32>>1]|0;
  $34 = $33 << 16 >> 16;
  $35 = $7;
  $36 = ((($35)) + 42|0);
  $37 = HEAP16[$36>>1]|0;
  $38 = $37 << 16 >> 16;
  $39 = ($34|0)==($38|0);
  if ($39) {
   $40 = $7;
   $41 = ((($40)) + 36|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==(83);
   if ($43) {
    $44 = $4;
    $45 = ((($44)) + 36|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($46|0)!=(83);
    if ($47) {
     break;
    }
   }
  }
  $48 = $7;
  $49 = ((($48)) + 8|0);
  $6 = $49;
 }
 $50 = $6;
 $51 = HEAP32[$50>>2]|0;
 $52 = $4;
 $53 = ((($52)) + 8|0);
 HEAP32[$53>>2] = $51;
 $54 = $3;
 $55 = $6;
 HEAP32[$55>>2] = $54;
 STACKTOP = sp;return;
}
function _addBackwardRuleWithSingleCell($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $13 = $8;
 $14 = ((($13)) + 36|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(58);
 if ($16) {
  STACKTOP = sp;return;
 }
 $17 = $8;
 $18 = ((($17)) + 36|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(79);
 if ($20) {
  STACKTOP = sp;return;
 }
 $21 = $5;
 $22 = $6;
 $23 = $9;
 $24 = (_putDots($21,$22,$23)|0);
 $10 = $24;
 $25 = $7;
 $26 = $9;
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 31168|0);
 $29 = (($28) + ($25<<3)|0);
 $8 = $29;
 $30 = $8;
 $31 = ((($30)) + 36|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32>>>0)>=(61);
 if ($33) {
  $34 = $8;
  $35 = ((($34)) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36>>>0)<(70);
  if ($37) {
   $38 = $7;
   $39 = $10;
   $40 = ((($39)) + 12|0);
   HEAP32[$40>>2] = $38;
  }
 }
 $41 = $10;
 $42 = ((($41)) + 16|0);
 $11 = $42;
 while(1) {
  $43 = $11;
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)!=(0);
  if (!($45)) {
   break;
  }
  $46 = $11;
  $47 = HEAP32[$46>>2]|0;
  $48 = $9;
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($49)) + 31168|0);
  $51 = (($50) + ($47<<3)|0);
  $12 = $51;
  $52 = $8;
  $53 = ((($52)) + 42|0);
  $54 = HEAP16[$53>>1]|0;
  $55 = $54 << 16 >> 16;
  $56 = $12;
  $57 = ((($56)) + 42|0);
  $58 = HEAP16[$57>>1]|0;
  $59 = $58 << 16 >> 16;
  $60 = ($55|0)>($59|0);
  if ($60) {
   break;
  }
  $61 = $12;
  $62 = ((($61)) + 44|0);
  $63 = HEAP16[$62>>1]|0;
  $64 = $63 << 16 >> 16;
  $65 = ($64|0)==(0);
  if ($65) {
   break;
  }
  $66 = $12;
  $67 = ((($66)) + 36|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ($68>>>0)>=(61);
  if ($69) {
   $70 = $12;
   $71 = ((($70)) + 36|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ($72>>>0)<(70);
   if ($73) {
    $74 = $8;
    $75 = ((($74)) + 36|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($76>>>0)>=(61);
    if (!($77)) {
     break;
    }
    $78 = $8;
    $79 = ((($78)) + 36|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ($80>>>0)<(70);
    if (!($81)) {
     break;
    }
   }
  }
  $82 = $12;
  $83 = ((($82)) + 12|0);
  $11 = $83;
 }
 $84 = $11;
 $85 = HEAP32[$84>>2]|0;
 $86 = $8;
 $87 = ((($86)) + 12|0);
 HEAP32[$87>>2] = $85;
 $88 = $7;
 $89 = $11;
 HEAP32[$89>>2] = $88;
 STACKTOP = sp;return;
}
function _addBackwardRuleWithMultipleCells($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $14 = $5;
 $15 = (__lou_stringHash($14,0,0)|0);
 $16 = $9;
 $17 = ((($16)) + 26676|0);
 $18 = (($17) + ($15<<2)|0);
 $10 = $18;
 $19 = $8;
 $20 = ((($19)) + 36|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(58);
 if ($22) {
  STACKTOP = sp;return;
 }
 $23 = $6;
 $24 = $8;
 $25 = ((($24)) + 42|0);
 $26 = HEAP16[$25>>1]|0;
 $27 = $26 << 16 >> 16;
 $28 = (($23) + ($27))|0;
 $11 = $28;
 while(1) {
  $29 = $10;
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)!=(0);
  if (!($31)) {
   break;
  }
  $32 = $10;
  $33 = HEAP32[$32>>2]|0;
  $34 = $9;
  $35 = ((($34)) + 31168|0);
  $36 = (($35) + ($33<<3)|0);
  $12 = $36;
  $37 = $12;
  $38 = ((($37)) + 44|0);
  $39 = HEAP16[$38>>1]|0;
  $40 = $39 << 16 >> 16;
  $41 = $12;
  $42 = ((($41)) + 42|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 << 16 >> 16;
  $45 = (($40) + ($44))|0;
  $13 = $45;
  $46 = $11;
  $47 = $13;
  $48 = ($46|0)>($47|0);
  if ($48) {
   break;
  }
  $49 = $13;
  $50 = $11;
  $51 = ($49|0)==($50|0);
  if ($51) {
   $52 = $12;
   $53 = ((($52)) + 36|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ($54|0)==(83);
   if ($55) {
    $56 = $8;
    $57 = ((($56)) + 36|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = ($58|0)!=(83);
    if ($59) {
     break;
    }
   }
  }
  $60 = $12;
  $61 = ((($60)) + 12|0);
  $10 = $61;
 }
 $62 = $10;
 $63 = HEAP32[$62>>2]|0;
 $64 = $8;
 $65 = ((($64)) + 12|0);
 HEAP32[$65>>2] = $63;
 $66 = $7;
 $67 = $10;
 HEAP32[$67>>2] = $66;
 STACKTOP = sp;return;
}
function _deallocateCharacterClasses($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 $2 = $5;
 while(1) {
  $6 = $2;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   break;
  }
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $3 = $10;
  $11 = $2;
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  $14 = $2;
  HEAP32[$14>>2] = $13;
  $15 = $3;
  $16 = ($15|0)!=(0|0);
  if (!($16)) {
   continue;
  }
  $17 = $3;
  _rpl_free($17);
 }
 STACKTOP = sp;return;
}
function _getNextAttribute($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 8|0;
 $3 = sp;
 $2 = $0;
 $4 = $2;
 $5 = ((($4)) + 16|0);
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = $12;
 HEAP32[$13>>2] = $8;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $11;
 $16 = $3;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = ($18|0)!=(0);
 $23 = ($21|0)!=(0);
 $24 = $22 | $23;
 if (!($24)) {
  $62 = $2;
  $63 = (_getNextNumberedAttribute($62)|0);
  $64 = tempRet0;
  $65 = $1;
  $66 = $65;
  HEAP32[$66>>2] = $63;
  $67 = (($65) + 4)|0;
  $68 = $67;
  HEAP32[$68>>2] = $64;
  $69 = $1;
  $70 = $69;
  $71 = HEAP32[$70>>2]|0;
  $72 = (($69) + 4)|0;
  $73 = $72;
  $74 = HEAP32[$73>>2]|0;
  tempRet0 = ($74);
  STACKTOP = sp;return ($71|0);
 }
 $25 = $3;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) + 4)|0;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = ($27|0)==(256);
 $32 = ($30|0)==(0);
 $33 = $31 & $32;
 $34 = $2;
 $35 = ((($34)) + 16|0);
 if ($33) {
  $36 = $35;
  $37 = $36;
  HEAP32[$37>>2] = 134217728;
  $38 = (($36) + 4)|0;
  $39 = $38;
  HEAP32[$39>>2] = 0;
 } else {
  $40 = $35;
  $41 = $40;
  $42 = HEAP32[$41>>2]|0;
  $43 = (($40) + 4)|0;
  $44 = $43;
  $45 = HEAP32[$44>>2]|0;
  $46 = (_bitshift64Shl(($42|0),($45|0),1)|0);
  $47 = tempRet0;
  $48 = $35;
  $49 = $48;
  HEAP32[$49>>2] = $46;
  $50 = (($48) + 4)|0;
  $51 = $50;
  HEAP32[$51>>2] = $47;
 }
 $52 = $3;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = (($52) + 4)|0;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 $58 = $1;
 $59 = $58;
 HEAP32[$59>>2] = $54;
 $60 = (($58) + 4)|0;
 $61 = $60;
 HEAP32[$61>>2] = $57;
 $69 = $1;
 $70 = $69;
 $71 = HEAP32[$70>>2]|0;
 $72 = (($69) + 4)|0;
 $73 = $72;
 $74 = HEAP32[$73>>2]|0;
 tempRet0 = ($74);
 STACKTOP = sp;return ($71|0);
}
function _getNumber($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $5 = $3;
 HEAP16[$5>>1] = 0;
 while(1) {
  $6 = $4;
  $7 = $2;
  $8 = (($7) + ($6<<1)|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = $9&65535;
  $11 = ($10|0)>=(48);
  if (!($11)) {
   label = 5;
   break;
  }
  $12 = $4;
  $13 = $2;
  $14 = (($13) + ($12<<1)|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15&65535;
  $17 = ($16|0)<=(57);
  if (!($17)) {
   label = 5;
   break;
  }
  $18 = $3;
  $19 = HEAP16[$18>>1]|0;
  $20 = $19&65535;
  $21 = ($20*10)|0;
  $22 = $4;
  $23 = (($22) + 1)|0;
  $4 = $23;
  $24 = $2;
  $25 = (($24) + ($22<<1)|0);
  $26 = HEAP16[$25>>1]|0;
  $27 = $26&65535;
  $28 = (($27) - 48)|0;
  $29 = (($21) + ($28))|0;
  $30 = $29&65535;
  $31 = $3;
  HEAP16[$31>>1] = $30;
 }
 if ((label|0) == 5) {
  $32 = $4;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function _appendInstructionChar($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $7;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)>=(2048);
 if ($11) {
  $12 = $5;
  _compileError($12,9152,$vararg_buffer);
  $4 = 0;
  $19 = $4;
  STACKTOP = sp;return ($19|0);
 } else {
  $13 = $8;
  $14 = $7;
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 1)|0;
  HEAP32[$14>>2] = $16;
  $17 = $6;
  $18 = (($17) + ($15<<1)|0);
  HEAP16[$18>>1] = $13;
  $4 = 1;
  $19 = $4;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _passGetNumber($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $5;
 HEAP16[$6>>1] = 0;
 while(1) {
  $7 = $4;
  $8 = HEAP32[$7>>2]|0;
  $9 = $3;
  $10 = HEAP16[$9>>1]|0;
  $11 = $10&65535;
  $12 = ($8|0)<($11|0);
  if (!($12)) {
   label = 6;
   break;
  }
  $13 = $4;
  $14 = HEAP32[$13>>2]|0;
  $15 = $3;
  $16 = ((($15)) + 2|0);
  $17 = (($16) + ($14<<1)|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $18&65535;
  $20 = ($19|0)>=(48);
  if (!($20)) {
   label = 6;
   break;
  }
  $21 = $4;
  $22 = HEAP32[$21>>2]|0;
  $23 = $3;
  $24 = ((($23)) + 2|0);
  $25 = (($24) + ($22<<1)|0);
  $26 = HEAP16[$25>>1]|0;
  $27 = $26&65535;
  $28 = ($27|0)<=(57);
  if (!($28)) {
   label = 6;
   break;
  }
  $29 = $5;
  $30 = HEAP16[$29>>1]|0;
  $31 = $30&65535;
  $32 = ($31*10)|0;
  $33 = $4;
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + 1)|0;
  HEAP32[$33>>2] = $35;
  $36 = $3;
  $37 = ((($36)) + 2|0);
  $38 = (($37) + ($34<<1)|0);
  $39 = HEAP16[$38>>1]|0;
  $40 = $39&65535;
  $41 = (($40) - 48)|0;
  $42 = (($32) + ($41))|0;
  $43 = $42&65535;
  $44 = $5;
  HEAP16[$44>>1] = $43;
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return 1;
 }
 return (0)|0;
}
function _verifyStringOrDots($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $7;
 $12 = $9;
 $13 = $10;
 $14 = (_wantsString($11,$12,$13)|0);
 $15 = ($14|0)!=(0);
 $16 = $15 ^ 1;
 $17 = $16&1;
 $18 = $8;
 $19 = ($18|0)!=(0);
 $20 = $19 ^ 1;
 $21 = $20&1;
 $22 = ($17|0)==($21|0);
 if ($22) {
  $5 = 1;
  $34 = $5;
  STACKTOP = sp;return ($34|0);
 } else {
  $23 = $6;
  $24 = $8;
  $25 = ($24|0)!=(0);
  $26 = $25 ? 9242 : 9250;
  $27 = $9;
  $28 = (_getPartName($27)|0);
  $29 = $10;
  $30 = ($29|0)!=(0);
  $31 = $30 ? 9255 : 9264;
  $32 = $7;
  $33 = (__lou_findOpcodeName($32)|0);
  HEAP32[$vararg_buffer>>2] = $26;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $28;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $31;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $33;
  _compileError($23,9179,$vararg_buffer);
  $5 = 0;
  $34 = $5;
  STACKTOP = sp;return ($34|0);
 }
 return (0)|0;
}
function _passGetString($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $7;
 HEAP16[$9>>1] = 0;
 while(1) {
  $10 = $6;
  $11 = HEAP32[$10>>2]|0;
  $12 = $5;
  $13 = HEAP16[$12>>1]|0;
  $14 = $13&65535;
  $15 = ($11|0)>=($14|0);
  if ($15) {
   label = 4;
   break;
  }
  $16 = $6;
  $17 = HEAP32[$16>>2]|0;
  $18 = $5;
  $19 = ((($18)) + 2|0);
  $20 = (($19) + ($17<<1)|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = ($21<<16>>16)!=(0);
  if (!($22)) {
   label = 4;
   break;
  }
  $24 = $6;
  $25 = HEAP32[$24>>2]|0;
  $26 = $5;
  $27 = ((($26)) + 2|0);
  $28 = (($27) + ($25<<1)|0);
  $29 = HEAP16[$28>>1]|0;
  $30 = $29&65535;
  $31 = ($30|0)==(34);
  if ($31) {
   label = 10;
   break;
  }
  $32 = $6;
  $33 = HEAP32[$32>>2]|0;
  $34 = $5;
  $35 = ((($34)) + 2|0);
  $36 = (($35) + ($33<<1)|0);
  $37 = HEAP16[$36>>1]|0;
  $38 = $37&65535;
  $39 = ($38|0)==(28);
  if ($39) {
   $40 = $7;
   $41 = HEAP16[$40>>1]|0;
   $42 = (($41) + 1)<<16>>16;
   HEAP16[$40>>1] = $42;
   $43 = $41&65535;
   $44 = $7;
   $45 = ((($44)) + 2|0);
   $46 = (($45) + ($43<<1)|0);
   HEAP16[$46>>1] = 34;
  } else {
   $47 = $6;
   $48 = HEAP32[$47>>2]|0;
   $49 = $5;
   $50 = ((($49)) + 2|0);
   $51 = (($50) + ($48<<1)|0);
   $52 = HEAP16[$51>>1]|0;
   $53 = $7;
   $54 = HEAP16[$53>>1]|0;
   $55 = (($54) + 1)<<16>>16;
   HEAP16[$53>>1] = $55;
   $56 = $54&65535;
   $57 = $7;
   $58 = ((($57)) + 2|0);
   $59 = (($58) + ($56<<1)|0);
   HEAP16[$59>>1] = $52;
  }
  $60 = $6;
  $61 = HEAP32[$60>>2]|0;
  $62 = (($61) + 1)|0;
  HEAP32[$60>>2] = $62;
 }
 if ((label|0) == 4) {
  $23 = $8;
  _compileError($23,9284,$vararg_buffer);
  $4 = 0;
  $72 = $4;
  STACKTOP = sp;return ($72|0);
 }
 else if ((label|0) == 10) {
  $63 = $7;
  $64 = HEAP16[$63>>1]|0;
  $65 = $64&65535;
  $66 = $7;
  $67 = ((($66)) + 2|0);
  $68 = (($67) + ($65<<1)|0);
  HEAP16[$68>>1] = 0;
  $69 = $6;
  $70 = HEAP32[$69>>2]|0;
  $71 = (($70) + 1)|0;
  HEAP32[$69>>2] = $71;
  $4 = 1;
  $72 = $4;
  STACKTOP = sp;return ($72|0);
 }
 return (0)|0;
}
function _passGetDots($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4128|0);
 $9 = sp + 20|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 HEAP16[$9>>1] = 0;
 L1: while(1) {
  $10 = $6;
  $11 = HEAP32[$10>>2]|0;
  $12 = $5;
  $13 = HEAP16[$12>>1]|0;
  $14 = $13&65535;
  $15 = ($11|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $6;
  $17 = HEAP32[$16>>2]|0;
  $18 = $5;
  $19 = ((($18)) + 2|0);
  $20 = (($19) + ($17<<1)|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21&65535;
  $23 = ($22|0)==(45);
  do {
   if (!($23)) {
    $24 = $6;
    $25 = HEAP32[$24>>2]|0;
    $26 = $5;
    $27 = ((($26)) + 2|0);
    $28 = (($27) + ($25<<1)|0);
    $29 = HEAP16[$28>>1]|0;
    $30 = $29&65535;
    $31 = ($30|0)>=(48);
    if ($31) {
     $32 = $6;
     $33 = HEAP32[$32>>2]|0;
     $34 = $5;
     $35 = ((($34)) + 2|0);
     $36 = (($35) + ($33<<1)|0);
     $37 = HEAP16[$36>>1]|0;
     $38 = $37&65535;
     $39 = ($38|0)<=(57);
     if ($39) {
      break;
     }
    }
    $40 = $6;
    $41 = HEAP32[$40>>2]|0;
    $42 = $5;
    $43 = ((($42)) + 2|0);
    $44 = (($43) + ($41<<1)|0);
    $45 = HEAP16[$44>>1]|0;
    $46 = $45&65535;
    $47 = $46 | 32;
    $48 = ($47|0)>=(97);
    if (!($48)) {
     break L1;
    }
    $49 = $6;
    $50 = HEAP32[$49>>2]|0;
    $51 = $5;
    $52 = ((($51)) + 2|0);
    $53 = (($52) + ($50<<1)|0);
    $54 = HEAP16[$53>>1]|0;
    $55 = $54&65535;
    $56 = $55 | 32;
    $57 = ($56|0)<=(102);
    if (!($57)) {
     break L1;
    }
   }
  } while(0);
  $58 = $6;
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + 1)|0;
  HEAP32[$58>>2] = $60;
  $61 = $5;
  $62 = ((($61)) + 2|0);
  $63 = (($62) + ($59<<1)|0);
  $64 = HEAP16[$63>>1]|0;
  $65 = HEAP16[$9>>1]|0;
  $66 = (($65) + 1)<<16>>16;
  HEAP16[$9>>1] = $66;
  $67 = $65&65535;
  $68 = ((($9)) + 2|0);
  $69 = (($68) + ($67<<1)|0);
  HEAP16[$69>>1] = $64;
 }
 $70 = $8;
 $71 = $7;
 $72 = (_parseDots($70,$71,$9)|0);
 $73 = ($72|0)!=(0);
 if ($73) {
  $4 = 1;
  $74 = $4;
  STACKTOP = sp;return ($74|0);
 } else {
  $4 = 0;
  $74 = $4;
  STACKTOP = sp;return ($74|0);
 }
 return (0)|0;
}
function _passGetVariableNumber($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $6;
 $10 = $7;
 $11 = $8;
 $12 = (_passGetNumber($9,$10,$11)|0);
 $13 = ($12|0)!=(0);
 if (!($13)) {
  $14 = $5;
  _compileError($14,9304,$vararg_buffer);
  $4 = 0;
  $24 = $4;
  STACKTOP = sp;return ($24|0);
 }
 $15 = $8;
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 $18 = ($17|0)>=(0);
 if ($18) {
  $19 = $8;
  $20 = HEAP16[$19>>1]|0;
  $21 = $20&65535;
  $22 = ($21|0)<(50);
  if ($22) {
   $4 = 1;
   $24 = $4;
   STACKTOP = sp;return ($24|0);
  }
 }
 $23 = $5;
 _compileError($23,9328,$vararg_buffer1);
 $4 = 0;
 $24 = $4;
 STACKTOP = sp;return ($24|0);
}
function _passGetAttributes($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = 1;
 $10 = $7;
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = 0;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = 0;
 while(1) {
  $15 = $9;
  $16 = ($15|0)!=(0);
  if (!($16)) {
   break;
  }
  $17 = $6;
  $18 = HEAP32[$17>>2]|0;
  $19 = $5;
  $20 = ((($19)) + 2|0);
  $21 = (($20) + ($18<<1)|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22&65535;
  do {
   switch ($23|0) {
   case 97:  {
    $24 = $7;
    $25 = $24;
    $26 = $25;
    HEAP32[$26>>2] = -1;
    $27 = (($25) + 4)|0;
    $28 = $27;
    HEAP32[$28>>2] = 0;
    break;
   }
   case 100:  {
    $29 = $7;
    $30 = $29;
    $31 = $30;
    $32 = HEAP32[$31>>2]|0;
    $33 = (($30) + 4)|0;
    $34 = $33;
    $35 = HEAP32[$34>>2]|0;
    $36 = $32 | 4;
    $37 = $29;
    $38 = $37;
    HEAP32[$38>>2] = $36;
    $39 = (($37) + 4)|0;
    $40 = $39;
    HEAP32[$40>>2] = $35;
    break;
   }
   case 68:  {
    $41 = $7;
    $42 = $41;
    $43 = $42;
    $44 = HEAP32[$43>>2]|0;
    $45 = (($42) + 4)|0;
    $46 = $45;
    $47 = HEAP32[$46>>2]|0;
    $48 = $44 | 256;
    $49 = $41;
    $50 = $49;
    HEAP32[$50>>2] = $48;
    $51 = (($49) + 4)|0;
    $52 = $51;
    HEAP32[$52>>2] = $47;
    break;
   }
   case 108:  {
    $53 = $7;
    $54 = $53;
    $55 = $54;
    $56 = HEAP32[$55>>2]|0;
    $57 = (($54) + 4)|0;
    $58 = $57;
    $59 = HEAP32[$58>>2]|0;
    $60 = $56 | 2;
    $61 = $53;
    $62 = $61;
    HEAP32[$62>>2] = $60;
    $63 = (($61) + 4)|0;
    $64 = $63;
    HEAP32[$64>>2] = $59;
    break;
   }
   case 109:  {
    $65 = $7;
    $66 = $65;
    $67 = $66;
    $68 = HEAP32[$67>>2]|0;
    $69 = (($66) + 4)|0;
    $70 = $69;
    $71 = HEAP32[$70>>2]|0;
    $72 = $68 | 64;
    $73 = $65;
    $74 = $73;
    HEAP32[$74>>2] = $72;
    $75 = (($73) + 4)|0;
    $76 = $75;
    HEAP32[$76>>2] = $71;
    break;
   }
   case 112:  {
    $77 = $7;
    $78 = $77;
    $79 = $78;
    $80 = HEAP32[$79>>2]|0;
    $81 = (($78) + 4)|0;
    $82 = $81;
    $83 = HEAP32[$82>>2]|0;
    $84 = $80 | 8;
    $85 = $77;
    $86 = $85;
    HEAP32[$86>>2] = $84;
    $87 = (($85) + 4)|0;
    $88 = $87;
    HEAP32[$88>>2] = $83;
    break;
   }
   case 83:  {
    $89 = $7;
    $90 = $89;
    $91 = $90;
    $92 = HEAP32[$91>>2]|0;
    $93 = (($90) + 4)|0;
    $94 = $93;
    $95 = HEAP32[$94>>2]|0;
    $96 = $92 | 128;
    $97 = $89;
    $98 = $97;
    HEAP32[$98>>2] = $96;
    $99 = (($97) + 4)|0;
    $100 = $99;
    HEAP32[$100>>2] = $95;
    break;
   }
   case 115:  {
    $101 = $7;
    $102 = $101;
    $103 = $102;
    $104 = HEAP32[$103>>2]|0;
    $105 = (($102) + 4)|0;
    $106 = $105;
    $107 = HEAP32[$106>>2]|0;
    $108 = $104 | 1;
    $109 = $101;
    $110 = $109;
    HEAP32[$110>>2] = $108;
    $111 = (($109) + 4)|0;
    $112 = $111;
    HEAP32[$112>>2] = $107;
    break;
   }
   case 85:  {
    $113 = $7;
    $114 = $113;
    $115 = $114;
    $116 = HEAP32[$115>>2]|0;
    $117 = (($114) + 4)|0;
    $118 = $117;
    $119 = HEAP32[$118>>2]|0;
    $120 = $116 | 16;
    $121 = $113;
    $122 = $121;
    HEAP32[$122>>2] = $120;
    $123 = (($121) + 4)|0;
    $124 = $123;
    HEAP32[$124>>2] = $119;
    break;
   }
   case 117:  {
    $125 = $7;
    $126 = $125;
    $127 = $126;
    $128 = HEAP32[$127>>2]|0;
    $129 = (($126) + 4)|0;
    $130 = $129;
    $131 = HEAP32[$130>>2]|0;
    $132 = $128 | 32;
    $133 = $125;
    $134 = $133;
    HEAP32[$134>>2] = $132;
    $135 = (($133) + 4)|0;
    $136 = $135;
    HEAP32[$136>>2] = $131;
    break;
   }
   case 119:  {
    $137 = $7;
    $138 = $137;
    $139 = $138;
    $140 = HEAP32[$139>>2]|0;
    $141 = (($138) + 4)|0;
    $142 = $141;
    $143 = HEAP32[$142>>2]|0;
    $144 = $140 | 134217728;
    $145 = $137;
    $146 = $145;
    HEAP32[$146>>2] = $144;
    $147 = (($145) + 4)|0;
    $148 = $147;
    HEAP32[$148>>2] = $143;
    break;
   }
   case 120:  {
    $149 = $7;
    $150 = $149;
    $151 = $150;
    $152 = HEAP32[$151>>2]|0;
    $153 = (($150) + 4)|0;
    $154 = $153;
    $155 = HEAP32[$154>>2]|0;
    $156 = $152 | 268435456;
    $157 = $149;
    $158 = $157;
    HEAP32[$158>>2] = $156;
    $159 = (($157) + 4)|0;
    $160 = $159;
    HEAP32[$160>>2] = $155;
    break;
   }
   case 121:  {
    $161 = $7;
    $162 = $161;
    $163 = $162;
    $164 = HEAP32[$163>>2]|0;
    $165 = (($162) + 4)|0;
    $166 = $165;
    $167 = HEAP32[$166>>2]|0;
    $168 = $164 | 536870912;
    $169 = $161;
    $170 = $169;
    HEAP32[$170>>2] = $168;
    $171 = (($169) + 4)|0;
    $172 = $171;
    HEAP32[$172>>2] = $167;
    break;
   }
   case 122:  {
    $173 = $7;
    $174 = $173;
    $175 = $174;
    $176 = HEAP32[$175>>2]|0;
    $177 = (($174) + 4)|0;
    $178 = $177;
    $179 = HEAP32[$178>>2]|0;
    $180 = $176 | 1073741824;
    $181 = $173;
    $182 = $181;
    HEAP32[$182>>2] = $180;
    $183 = (($181) + 4)|0;
    $184 = $183;
    HEAP32[$184>>2] = $179;
    break;
   }
   default: {
    $9 = 0;
   }
   }
  } while(0);
  $185 = $9;
  $186 = ($185|0)!=(0);
  if (!($186)) {
   continue;
  }
  $187 = $6;
  $188 = HEAP32[$187>>2]|0;
  $189 = (($188) + 1)|0;
  HEAP32[$187>>2] = $189;
 }
 $190 = $7;
 $191 = $190;
 $192 = $191;
 $193 = HEAP32[$192>>2]|0;
 $194 = (($191) + 4)|0;
 $195 = $194;
 $196 = HEAP32[$195>>2]|0;
 $197 = ($193|0)!=(0);
 $198 = ($196|0)!=(0);
 $199 = $197 | $198;
 if ($199) {
  $4 = 1;
  $204 = $4;
  STACKTOP = sp;return ($204|0);
 } else {
  $200 = $8;
  _compileError($200,9357,$vararg_buffer);
  $201 = $6;
  $202 = HEAP32[$201>>2]|0;
  $203 = (($202) + -1)|0;
  HEAP32[$201>>2] = $203;
  $4 = 0;
  $204 = $4;
  STACKTOP = sp;return ($204|0);
 }
 return (0)|0;
}
function _passGetName($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $5;
 HEAP16[$7>>1] = 0;
 while(1) {
  $8 = $4;
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  $11 = ((($10)) + 2|0);
  $12 = (($11) + ($9<<1)|0);
  $13 = HEAP16[$12>>1]|0;
  $6 = $13;
  $14 = $6;
  $15 = $14&65535;
  $16 = ($15|0)>=(97);
  if ($16) {
   $17 = $6;
   $18 = $17&65535;
   $19 = ($18|0)<=(122);
   if (!($19)) {
    label = 4;
   }
  } else {
   label = 4;
  }
  if ((label|0) == 4) {
   label = 0;
   $20 = $6;
   $21 = $20&65535;
   $22 = ($21|0)>=(65);
   if (!($22)) {
    label = 7;
    break;
   }
   $23 = $6;
   $24 = $23&65535;
   $25 = ($24|0)<=(90);
   if (!($25)) {
    label = 7;
    break;
   }
  }
  $26 = $6;
  $27 = $5;
  $28 = HEAP16[$27>>1]|0;
  $29 = (($28) + 1)<<16>>16;
  HEAP16[$27>>1] = $29;
  $30 = $28&65535;
  $31 = $5;
  $32 = ((($31)) + 2|0);
  $33 = (($32) + ($30<<1)|0);
  HEAP16[$33>>1] = $26;
  $34 = $4;
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + 1)|0;
  HEAP32[$34>>2] = $36;
  $37 = $4;
  $38 = HEAP32[$37>>2]|0;
  $39 = $3;
  $40 = HEAP16[$39>>1]|0;
  $41 = $40&65535;
  $42 = ($38|0)<($41|0);
  if (!($42)) {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return 1;
 }
 return (0)|0;
}
function _findRuleName($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = ((($6)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $5 = $8;
 while(1) {
  $9 = $5;
  $10 = ($9|0)!=(0|0);
  if (!($10)) {
   label = 7;
   break;
  }
  $11 = $3;
  $12 = HEAP16[$11>>1]|0;
  $13 = $12&65535;
  $14 = $5;
  $15 = ((($14)) + 8|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&65535;
  $18 = ($13|0)==($17|0);
  if ($18) {
   $19 = $3;
   $20 = ((($19)) + 2|0);
   $21 = $5;
   $22 = ((($21)) + 10|0);
   $23 = $3;
   $24 = HEAP16[$23>>1]|0;
   $25 = $24&65535;
   $26 = $25<<1;
   $27 = (_memcmp($20,$22,$26)|0);
   $28 = ($27|0)==(0);
   if ($28) {
    label = 5;
    break;
   }
  }
  $32 = $5;
  $33 = HEAP32[$32>>2]|0;
  $5 = $33;
 }
 if ((label|0) == 5) {
  $29 = $5;
  $30 = ((($29)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $2 = $31;
  $34 = $2;
  STACKTOP = sp;return ($34|0);
 }
 else if ((label|0) == 7) {
  $2 = 0;
  $34 = $2;
  STACKTOP = sp;return ($34|0);
 }
 return (0)|0;
}
function _passFindCharacters($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = 0;
 $12 = 0;
 $15 = $9;
 HEAP32[$15>>2] = 0;
 $16 = $10;
 HEAP32[$16>>2] = 0;
 L1: while(1) {
  $17 = $11;
  $18 = $8;
  $19 = ($17|0)<($18|0);
  if (!($19)) {
   break;
  }
  $20 = $11;
  $21 = $7;
  $22 = (($21) + ($20<<1)|0);
  $23 = HEAP16[$22>>1]|0;
  $13 = $23;
  $24 = $13;
  $25 = $24&65535;
  switch ($25|0) {
  case 32:  {
   break L1;
   break;
  }
  case 37:  {
   label = 10;
   break L1;
   break;
  }
  case 59: case 125: case 123:  {
   label = 11;
   break L1;
   break;
  }
  case 64: case 34:  {
   $26 = $11;
   $27 = (($26) + 1)|0;
   $28 = $7;
   $29 = (($28) + ($27<<1)|0);
   $30 = HEAP16[$29>>1]|0;
   $31 = $30&65535;
   $14 = $31;
   $32 = $11;
   $33 = (($32) + 2)|0;
   $11 = $33;
   $34 = $14;
   $35 = $12;
   $36 = ($34|0)>($35|0);
   if ($36) {
    label = 5;
    break L1;
   }
   $47 = $14;
   $48 = $12;
   $49 = (($48) - ($47))|0;
   $12 = $49;
   $50 = $14;
   $51 = $11;
   $52 = (($51) + ($50))|0;
   $11 = $52;
   continue L1;
   break;
  }
  case 36:  {
   $53 = $11;
   $54 = (($53) + 7)|0;
   $11 = $54;
   $55 = $11;
   $56 = (($55) - 2)|0;
   $57 = $7;
   $58 = (($57) + ($56<<1)|0);
   $59 = HEAP16[$58>>1]|0;
   $60 = $59&65535;
   $61 = $11;
   $62 = (($61) - 1)|0;
   $63 = $7;
   $64 = (($63) + ($62<<1)|0);
   $65 = HEAP16[$64>>1]|0;
   $66 = $65&65535;
   $67 = ($60|0)==($66|0);
   if (!($67)) {
    break L1;
   }
   $68 = $11;
   $69 = (($68) - 1)|0;
   $70 = $7;
   $71 = (($70) + ($69<<1)|0);
   $72 = HEAP16[$71>>1]|0;
   $73 = $72&65535;
   $74 = $12;
   $75 = ($73|0)<=($74|0);
   if (!($75)) {
    break L1;
   }
   $76 = $11;
   $77 = (($76) - 1)|0;
   $78 = $7;
   $79 = (($78) + ($77<<1)|0);
   $80 = HEAP16[$79>>1]|0;
   $81 = $80&65535;
   $82 = $12;
   $83 = (($82) - ($81))|0;
   $12 = $83;
   continue L1;
   break;
  }
  case 131: case 130: case 62: case 60: case 61:  {
   $88 = $11;
   $89 = (($88) + 3)|0;
   $11 = $89;
   continue L1;
   break;
  }
  case 95:  {
   $90 = $11;
   $91 = (($90) + 1)|0;
   $92 = $7;
   $93 = (($92) + ($91<<1)|0);
   $94 = HEAP16[$93>>1]|0;
   $95 = $94&65535;
   $96 = $12;
   $97 = (($96) + ($95))|0;
   $12 = $97;
   $98 = $11;
   $99 = (($98) + 2)|0;
   $11 = $99;
   continue L1;
   break;
  }
  case 45: case 43: case 63: case 42: case 126: case 96: case 93: case 91: case 33:  {
   $100 = $11;
   $101 = (($100) + 1)|0;
   $11 = $101;
   continue L1;
   break;
  }
  default: {
   label = 16;
   break L1;
  }
  }
 }
 if ((label|0) == 5) {
  $37 = $11;
  $38 = $12;
  $39 = (($37) + ($38))|0;
  $40 = $7;
  $41 = (($40) + ($39<<1)|0);
  $42 = $9;
  HEAP32[$42>>2] = $41;
  $43 = $14;
  $44 = $12;
  $45 = (($43) - ($44))|0;
  $46 = $10;
  HEAP32[$46>>2] = $45;
  $5 = 1;
  $105 = $5;
  STACKTOP = sp;return ($105|0);
 }
 else if ((label|0) == 10) {
  $84 = $11;
  $85 = (($84) + 2)|0;
  $11 = $85;
  label = 11;
 }
 else if ((label|0) == 16) {
  $102 = $6;
  $103 = $13;
  $104 = $103&65535;
  HEAP32[$vararg_buffer>>2] = $104;
  _compileError($102,9375,$vararg_buffer);
  $5 = 0;
  $105 = $5;
  STACKTOP = sp;return ($105|0);
 }
 if ((label|0) == 11) {
  $86 = $11;
  $87 = (($86) + 3)|0;
  $11 = $87;
 }
 $5 = 1;
 $105 = $5;
 STACKTOP = sp;return ($105|0);
}
function _wantsString($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $4;
 $8 = ($7|0)==(75);
 do {
  if ($8) {
   $3 = 1;
  } else {
   $9 = $4;
   $10 = ($9|0)!=(74);
   if ($10) {
    $3 = 0;
    break;
   } else {
    $11 = $6;
    $12 = ($11|0)!=(0);
    $13 = $12 ^ 1;
    $14 = $13&1;
    $15 = $5;
    $16 = ($15|0)!=(0);
    $17 = $16 ^ 1;
    $18 = $17&1;
    $19 = ($14|0)==($18|0);
    $20 = $19&1;
    $3 = $20;
    break;
   }
  }
 } while(0);
 $21 = $3;
 STACKTOP = sp;return ($21|0);
}
function _getPartName($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0);
 $4 = $3 ? 9272 : 9279;
 STACKTOP = sp;return ($4|0);
}
function _compileSwapDots($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(8224|0);
 $9 = sp + 4122|0;
 $10 = sp + 24|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 $8 = 0;
 $11 = $6;
 HEAP16[$11>>1] = 0;
 HEAP16[$9>>1] = 0;
 while(1) {
  $12 = $7;
  $13 = $5;
  $14 = HEAP16[$13>>1]|0;
  $15 = $14&65535;
  $16 = ($12|0)<=($15|0);
  if (!($16)) {
   label = 13;
   break;
  }
  $17 = $7;
  $18 = $5;
  $19 = ((($18)) + 2|0);
  $20 = (($19) + ($17<<1)|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21&65535;
  $23 = ($22|0)!=(44);
  if ($23) {
   $24 = $7;
   $25 = $5;
   $26 = HEAP16[$25>>1]|0;
   $27 = $26&65535;
   $28 = ($24|0)!=($27|0);
   if ($28) {
    $29 = $7;
    $30 = $5;
    $31 = ((($30)) + 2|0);
    $32 = (($31) + ($29<<1)|0);
    $33 = HEAP16[$32>>1]|0;
    $34 = HEAP16[$9>>1]|0;
    $35 = (($34) + 1)<<16>>16;
    HEAP16[$9>>1] = $35;
    $36 = $34&65535;
    $37 = ((($9)) + 2|0);
    $38 = (($37) + ($36<<1)|0);
    HEAP16[$38>>1] = $33;
   } else {
    label = 6;
   }
  } else {
   label = 6;
  }
  if ((label|0) == 6) {
   label = 0;
   $39 = $4;
   $40 = (_parseDots($39,$10,$9)|0);
   $41 = ($40|0)!=(0);
   if (!($41)) {
    label = 7;
    break;
   }
   $42 = HEAP16[$10>>1]|0;
   $43 = $42&65535;
   $44 = (($43) + 1)|0;
   $45 = $44&65535;
   $46 = $6;
   $47 = HEAP16[$46>>1]|0;
   $48 = (($47) + 1)<<16>>16;
   HEAP16[$46>>1] = $48;
   $49 = $47&65535;
   $50 = $6;
   $51 = ((($50)) + 2|0);
   $52 = (($51) + ($49<<1)|0);
   HEAP16[$52>>1] = $45;
   $8 = 0;
   while(1) {
    $53 = $8;
    $54 = HEAP16[$10>>1]|0;
    $55 = $54&65535;
    $56 = ($53|0)<($55|0);
    if (!($56)) {
     break;
    }
    $57 = $8;
    $58 = ((($10)) + 2|0);
    $59 = (($58) + ($57<<1)|0);
    $60 = HEAP16[$59>>1]|0;
    $61 = $6;
    $62 = HEAP16[$61>>1]|0;
    $63 = (($62) + 1)<<16>>16;
    HEAP16[$61>>1] = $63;
    $64 = $62&65535;
    $65 = $6;
    $66 = ((($65)) + 2|0);
    $67 = (($66) + ($64<<1)|0);
    HEAP16[$67>>1] = $60;
    $68 = $8;
    $69 = (($68) + 1)|0;
    $8 = $69;
   }
   HEAP16[$9>>1] = 0;
  }
  $70 = $7;
  $71 = (($70) + 1)|0;
  $7 = $71;
 }
 if ((label|0) == 7) {
  $3 = 0;
  $72 = $3;
  STACKTOP = sp;return ($72|0);
 }
 else if ((label|0) == 13) {
  $3 = 1;
  $72 = $3;
  STACKTOP = sp;return ($72|0);
 }
 return (0)|0;
}
function _free_macro($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 _rpl_free($5);
 $6 = $1;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 _rpl_free($8);
 $9 = $1;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 _rpl_free($11);
 $12 = $1;
 _rpl_free($12);
 STACKTOP = sp;return;
}
function _deallocateRuleNames($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = ((($4)) + 32|0);
 $2 = $5;
 while(1) {
  $6 = $2;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   break;
  }
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $3 = $10;
  $11 = $3;
  $12 = HEAP32[$11>>2]|0;
  $13 = $2;
  HEAP32[$13>>2] = $12;
  $14 = $3;
  _rpl_free($14);
 }
 STACKTOP = sp;return;
}
function _lou_translateString($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = $8;
 $17 = $9;
 $18 = $10;
 $19 = $11;
 $20 = $12;
 $21 = $13;
 $22 = $14;
 $23 = $15;
 $24 = (_lou_translate($16,$17,$18,$19,$20,$21,$22,0,0,0,$23)|0);
 STACKTOP = sp;return ($24|0);
}
function _lou_translate($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $21 = $10;
 $22 = $11;
 $23 = $11;
 $24 = $12;
 $25 = $13;
 $26 = $14;
 $27 = $15;
 $28 = $16;
 $29 = $17;
 $30 = $18;
 $31 = $19;
 $32 = $20;
 $33 = $21;
 $34 = (__lou_translate($22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,0,0)|0);
 STACKTOP = sp;return ($34|0);
}
function __lou_translate($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond10 = 0, $or$cond12 = 0;
 var $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $vararg_buffer = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer21 = 0, $vararg_ptr13 = 0, $vararg_ptr20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $vararg_buffer21 = sp + 24|0;
 $vararg_buffer17 = sp + 16|0;
 $vararg_buffer14 = sp + 8|0;
 $vararg_buffer = sp;
 $29 = sp + 216|0;
 $30 = sp + 212|0;
 $31 = sp + 200|0;
 $32 = sp + 184|0;
 $42 = sp + 144|0;
 $43 = sp + 140|0;
 $49 = sp + 108|0;
 $51 = sp + 88|0;
 $54 = sp + 76|0;
 $57 = sp + 56|0;
 $58 = sp + 40|0;
 $15 = $0;
 $16 = $1;
 $17 = $2;
 $18 = $3;
 $19 = $4;
 $20 = $5;
 $21 = $6;
 $22 = $7;
 $23 = $8;
 $24 = $9;
 $25 = $10;
 $26 = $11;
 $27 = $12;
 $28 = $13;
 $45 = -1;
 $46 = -1;
 $48 = 1;
 $61 = $15;
 $62 = ($61|0)==(0|0);
 $63 = $17;
 $64 = ($63|0)==(0|0);
 $or$cond = $62 | $64;
 $65 = $18;
 $66 = ($65|0)==(0|0);
 $or$cond3 = $or$cond | $66;
 $67 = $19;
 $68 = ($67|0)==(0|0);
 $or$cond5 = $or$cond3 | $68;
 $69 = $20;
 $70 = ($69|0)==(0|0);
 $or$cond7 = $or$cond5 | $70;
 if ($or$cond7) {
  $14 = 0;
  $589 = $14;
  STACKTOP = sp;return ($589|0);
 }
 $71 = $15;
 $72 = $18;
 $73 = HEAP32[$72>>2]|0;
 HEAP32[$vararg_buffer>>2] = $71;
 $vararg_ptr13 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr13>>2] = $73;
 __lou_logMessage(0,9465,$vararg_buffer);
 $74 = $17;
 $75 = $18;
 $76 = HEAP32[$75>>2]|0;
 __lou_logWidecharBuf(0,9512,$74,$76);
 $77 = $26;
 $78 = (__lou_isValidMode($77)|0);
 $79 = ($78|0)!=(0);
 if (!($79)) {
  $80 = $26;
  HEAP32[$vararg_buffer14>>2] = $80;
  __lou_logMessage(40000,9610,$vararg_buffer14);
 }
 $81 = $16;
 $82 = ($81|0)==(0|0);
 if ($82) {
  $83 = $15;
  $16 = $83;
 }
 $84 = $15;
 $85 = $16;
 __lou_getTable($84,$85,$29,$30);
 $86 = HEAP32[$29>>2]|0;
 $87 = ($86|0)==(0|0);
 if (!($87)) {
  $88 = $18;
  $89 = HEAP32[$88>>2]|0;
  $90 = ($89|0)<(0);
  if (!($90)) {
   $91 = $20;
   $92 = HEAP32[$91>>2]|0;
   $93 = ($92|0)<(0);
   if (!($93)) {
    $47 = 0;
    while(1) {
     $94 = $47;
     $95 = $18;
     $96 = HEAP32[$95>>2]|0;
     $97 = ($94|0)<($96|0);
     if (!($97)) {
      break;
     }
     $98 = $47;
     $99 = $17;
     $100 = (($99) + ($98<<1)|0);
     $101 = HEAP16[$100>>1]|0;
     $102 = $101&65535;
     $103 = ($102|0)!=(0);
     if (!($103)) {
      break;
     }
     $104 = $47;
     $105 = (($104) + 1)|0;
     $47 = $105;
    }
    HEAP32[$49>>2] = -1;
    $106 = ((($49)) + 4|0);
    $107 = $17;
    HEAP32[$106>>2] = $107;
    $108 = ((($49)) + 8|0);
    $109 = $47;
    HEAP32[$108>>2] = $109;
    ;HEAP32[$31>>2]=HEAP32[$49>>2]|0;HEAP32[$31+4>>2]=HEAP32[$49+4>>2]|0;HEAP32[$31+8>>2]=HEAP32[$49+8>>2]|0;
    $44 = 0;
    $110 = ((($31)) + 8|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = $20;
    $113 = HEAP32[$112>>2]|0;
    $114 = (__lou_allocMem(0,0,$111,$113)|0);
    $37 = $114;
    $115 = ($114|0)!=(0|0);
    if (!($115)) {
     $14 = 0;
     $589 = $14;
     STACKTOP = sp;return ($589|0);
    }
    $116 = $21;
    $117 = ($116|0)!=(0|0);
    L24: do {
     if ($117) {
      $47 = 0;
      while(1) {
       $118 = $47;
       $119 = ((($31)) + 8|0);
       $120 = HEAP32[$119>>2]|0;
       $121 = ($118|0)<($120|0);
       if (!($121)) {
        break L24;
       }
       $122 = $47;
       $123 = $21;
       $124 = (($123) + ($122<<1)|0);
       $125 = HEAP16[$124>>1]|0;
       $126 = $47;
       $127 = $37;
       $128 = (($127) + ($126<<1)|0);
       HEAP16[$128>>1] = $125;
       $129 = $47;
       $130 = $37;
       $131 = (($130) + ($129<<1)|0);
       $132 = HEAP16[$131>>1]|0;
       $133 = $132&65535;
       $134 = $133 & 16383;
       $135 = ($134|0)!=(0);
       if ($135) {
        $44 = 1;
       }
       $136 = $47;
       $137 = (($136) + 1)|0;
       $47 = $137;
      }
     } else {
      $138 = $37;
      $139 = ((($31)) + 8|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = $140<<1;
      _memset(($138|0),0,($141|0))|0;
     }
    } while(0);
    $142 = $22;
    $143 = ($142|0)==(0|0);
    if ($143) {
     label = 27;
    } else {
     $144 = $22;
     $145 = HEAP8[$144>>0]|0;
     $146 = $145 << 24 >> 24;
     $147 = ($146|0)==(88);
     if ($147) {
      label = 27;
     } else {
      $148 = $22;
      $38 = $148;
     }
    }
    if ((label|0) == 27) {
     $38 = 0;
    }
    $149 = $23;
    $150 = ($149|0)!=(0|0);
    L40: do {
     if ($150) {
      $47 = 0;
      while(1) {
       $151 = $47;
       $152 = ((($31)) + 8|0);
       $153 = HEAP32[$152>>2]|0;
       $154 = ($151|0)<($153|0);
       if (!($154)) {
        break L40;
       }
       $155 = $47;
       $156 = $23;
       $157 = (($156) + ($155<<2)|0);
       HEAP32[$157>>2] = -1;
       $158 = $47;
       $159 = (($158) + 1)|0;
       $47 = $159;
      }
     }
    } while(0);
    $160 = $25;
    $161 = ($160|0)!=(0|0);
    L46: do {
     if ($161) {
      $162 = $25;
      $163 = HEAP32[$162>>2]|0;
      $164 = ($163|0)>=(0);
      if ($164) {
       HEAP32[$43>>2] = 0;
       $165 = $25;
       $166 = HEAP32[$165>>2]|0;
       HEAP32[$42>>2] = $166;
       $167 = $26;
       $168 = $167 & 34;
       $169 = ($168|0)!=(0);
       if ($169) {
        $170 = HEAP32[$42>>2]|0;
        $45 = $170;
        $171 = $45;
        $172 = ((($31)) + 4|0);
        $173 = HEAP32[$172>>2]|0;
        $174 = (($173) + ($171<<1)|0);
        $175 = HEAP16[$174>>1]|0;
        $176 = HEAP32[$29>>2]|0;
        $177 = (_checkCharAttr($175,1,0,$176)|0);
        $178 = ($177|0)!=(0);
        if ($178) {
         $179 = $45;
         $180 = (($179) + 1)|0;
         $46 = $180;
         break;
        }
        while(1) {
         $181 = $45;
         $182 = ($181|0)>=(0);
         if ($182) {
          $183 = $45;
          $184 = ((($31)) + 4|0);
          $185 = HEAP32[$184>>2]|0;
          $186 = (($185) + ($183<<1)|0);
          $187 = HEAP16[$186>>1]|0;
          $188 = HEAP32[$29>>2]|0;
          $189 = (_checkCharAttr($187,1,0,$188)|0);
          $190 = ($189|0)!=(0);
          $191 = $190 ^ 1;
          $590 = $191;
         } else {
          $590 = 0;
         }
         $192 = $45;
         if (!($590)) {
          break;
         }
         $193 = (($192) + -1)|0;
         $45 = $193;
        }
        $194 = (($192) + 1)|0;
        $45 = $194;
        $195 = HEAP32[$42>>2]|0;
        $46 = $195;
        $196 = $26;
        $197 = $196 & 32;
        $198 = ($197|0)!=(0);
        if (!($198)) {
         while(1) {
          $199 = $46;
          $200 = ((($31)) + 8|0);
          $201 = HEAP32[$200>>2]|0;
          $202 = ($199|0)<($201|0);
          if (!($202)) {
           break L46;
          }
          $203 = $46;
          $204 = ((($31)) + 4|0);
          $205 = HEAP32[$204>>2]|0;
          $206 = (($205) + ($203<<1)|0);
          $207 = HEAP16[$206>>1]|0;
          $208 = HEAP32[$29>>2]|0;
          $209 = (_checkCharAttr($207,1,0,$208)|0);
          $210 = ($209|0)!=(0);
          $211 = $210 ^ 1;
          if (!($211)) {
           break L46;
          }
          $212 = $46;
          $213 = (($212) + 1)|0;
          $46 = $213;
         }
        }
       }
      } else {
       label = 45;
      }
     } else {
      label = 45;
     }
    } while(0);
    if ((label|0) == 45) {
     HEAP32[$42>>2] = -1;
     HEAP32[$43>>2] = 1;
    }
    $214 = ((($31)) + 8|0);
    $215 = HEAP32[$214>>2]|0;
    $216 = $20;
    $217 = HEAP32[$216>>2]|0;
    $218 = (__lou_allocMem(5,0,$215,$217)|0);
    $34 = $218;
    $219 = ($218|0)!=(0|0);
    if (!($219)) {
     $14 = 0;
     $589 = $14;
     STACKTOP = sp;return ($589|0);
    }
    $220 = HEAP32[$29>>2]|0;
    $221 = ((($220)) + 520|0);
    $222 = HEAP32[$221>>2]|0;
    $223 = ($222|0)>(1);
    if ($223) {
     label = 50;
    } else {
     $224 = HEAP32[$29>>2]|0;
     $225 = ((($224)) + 524|0);
     $226 = HEAP32[$225>>2]|0;
     $227 = ($226|0)!=(0);
     if ($227) {
      label = 50;
     }
    }
    if ((label|0) == 50) {
     $228 = ((($31)) + 8|0);
     $229 = HEAP32[$228>>2]|0;
     $230 = $20;
     $231 = HEAP32[$230>>2]|0;
     $232 = (__lou_allocMem(6,0,$229,$231)|0);
     $35 = $232;
     $233 = ($232|0)!=(0|0);
     if (!($233)) {
      $14 = 0;
      $589 = $14;
      STACKTOP = sp;return ($589|0);
     }
     $234 = ((($31)) + 8|0);
     $235 = HEAP32[$234>>2]|0;
     $236 = $20;
     $237 = HEAP32[$236>>2]|0;
     $238 = (__lou_allocMem(7,0,$235,$237)|0);
     $36 = $238;
     $239 = ($238|0)!=(0|0);
     if (!($239)) {
      $14 = 0;
      $589 = $14;
      STACKTOP = sp;return ($589|0);
     }
    }
    $240 = $38;
    $241 = ($240|0)!=(0|0);
    do {
     if ($241) {
      $242 = ((($31)) + 8|0);
      $243 = HEAP32[$242>>2]|0;
      $244 = $20;
      $245 = HEAP32[$244>>2]|0;
      $246 = (__lou_allocMem(3,0,$243,$245)|0);
      $39 = $246;
      $247 = ($246|0)!=(0|0);
      if ($247) {
       $248 = $39;
       $249 = $20;
       $250 = HEAP32[$249>>2]|0;
       _memset(($248|0),42,($250|0))|0;
       break;
      } else {
       $48 = 0;
       break;
      }
     } else {
      $39 = 0;
     }
    } while(0);
    HEAP32[4355] = 0;
    $251 = $27;
    $252 = ($251|0)!=(0|0);
    $253 = $28;
    $254 = ($253|0)!=(0|0);
    $or$cond10 = $252 & $254;
    if ($or$cond10) {
     $255 = $27;
     HEAP32[4356] = $255;
     $256 = $28;
     $257 = HEAP32[$256>>2]|0;
     HEAP32[4357] = $257;
    } else {
     HEAP32[4356] = 0;
     HEAP32[4357] = 0;
    }
    $258 = HEAP32[4358]|0;
    $259 = ($258|0)!=(0|0);
    if (!($259)) {
     _initStringBufferPool();
    }
    $50 = 0;
    while(1) {
     $260 = $50;
     $261 = HEAP32[4358]|0;
     $262 = HEAP32[$261>>2]|0;
     $263 = ($260|0)<($262|0);
     if (!($263)) {
      break;
     }
     $264 = $50;
     (_releaseStringBuffer($264)|0);
     $265 = $50;
     $266 = (($265) + 1)|0;
     $50 = $266;
    }
    $267 = $20;
    $268 = HEAP32[$267>>2]|0;
    $269 = (_getStringBuffer($268)|0);
    $50 = $269;
    $270 = $50;
    HEAP32[$51>>2] = $270;
    $271 = ((($51)) + 4|0);
    $272 = $50;
    $273 = HEAP32[4358]|0;
    $274 = ((($273)) + 4|0);
    $275 = HEAP32[$274>>2]|0;
    $276 = (($275) + ($272<<2)|0);
    $277 = HEAP32[$276>>2]|0;
    HEAP32[$271>>2] = $277;
    $278 = ((($51)) + 8|0);
    $279 = $20;
    $280 = HEAP32[$279>>2]|0;
    HEAP32[$278>>2] = $280;
    $281 = ((($51)) + 12|0);
    HEAP32[$281>>2] = 0;
    ;HEAP32[$32>>2]=HEAP32[$51>>2]|0;HEAP32[$32+4>>2]=HEAP32[$51+4>>2]|0;HEAP32[$32+8>>2]=HEAP32[$51+8>>2]|0;HEAP32[$32+12>>2]=HEAP32[$51+12>>2]|0;
    $282 = $34;
    $33 = $282;
    $283 = HEAP32[$29>>2]|0;
    $284 = ((($283)) + 524|0);
    $285 = HEAP32[$284>>2]|0;
    $286 = ($285|0)!=(0);
    $287 = $286 ? 0 : 1;
    $52 = $287;
    $288 = $33;
    $53 = $288;
    L99: while(1) {
     $289 = $52;
     switch ($289|0) {
     case 0:  {
      $290 = HEAP32[$29>>2]|0;
      $291 = $53;
      $292 = $37;
      $293 = $26;
      $294 = (_makeCorrections($290,$31,$32,$291,$292,$54,$42,$43,$293)|0);
      $48 = $294;
      break;
     }
     case 1:  {
      $295 = ((($31)) + 8|0);
      $296 = HEAP32[$295>>2]|0;
      $297 = $20;
      $298 = HEAP32[$297>>2]|0;
      $299 = (__lou_allocMem(1,0,$296,$298)|0);
      $40 = $299;
      $300 = ($299|0)!=(0|0);
      if (!($300)) {
       label = 71;
       break L99;
      }
      $301 = ((($31)) + 8|0);
      $302 = HEAP32[$301>>2]|0;
      $303 = $20;
      $304 = HEAP32[$303>>2]|0;
      $305 = (__lou_allocMem(2,0,$302,$304)|0);
      $41 = $305;
      $306 = ($305|0)!=(0|0);
      if (!($306)) {
       label = 73;
       break L99;
      }
      $307 = HEAP32[$29>>2]|0;
      $308 = $26;
      $309 = $52;
      $310 = $53;
      $311 = $37;
      $312 = $38;
      $313 = $39;
      $314 = $40;
      $315 = $41;
      $316 = $44;
      $317 = $45;
      $318 = $46;
      $319 = (_translateString($307,$308,$309,$31,$32,$310,$311,$312,$313,$314,$315,$316,$54,$42,$43,$317,$318)|0);
      $48 = $319;
      break;
     }
     default: {
      $320 = HEAP32[$29>>2]|0;
      $321 = $52;
      $322 = $53;
      $323 = $26;
      $324 = (_translatePass($320,$321,$31,$32,$322,$54,$42,$43,$323)|0);
      $48 = $324;
     }
     }
     $325 = HEAP32[$54>>2]|0;
     $326 = ((($32)) + 12|0);
     $327 = HEAP32[$326>>2]|0;
     $328 = $53;
     $329 = (($328) + ($327<<2)|0);
     HEAP32[$329>>2] = $325;
     $330 = $53;
     $331 = $33;
     $332 = ($330|0)==($331|0);
     L108: do {
      if ($332) {
       $333 = $35;
       $53 = $333;
      } else {
       $334 = $36;
       $55 = $334;
       $335 = $55;
       $336 = $33;
       $337 = $20;
       $338 = HEAP32[$337>>2]|0;
       $339 = (($338) + 1)|0;
       $340 = $339<<2;
       _memcpy(($335|0),($336|0),($340|0))|0;
       $47 = 0;
       while(1) {
        $341 = $47;
        $342 = ((($32)) + 12|0);
        $343 = HEAP32[$342>>2]|0;
        $344 = ($341|0)<=($343|0);
        if (!($344)) {
         break L108;
        }
        $345 = $47;
        $346 = $53;
        $347 = (($346) + ($345<<2)|0);
        $348 = HEAP32[$347>>2]|0;
        $349 = ($348|0)<(0);
        if ($349) {
         $350 = $55;
         $351 = HEAP32[$350>>2]|0;
         $352 = $47;
         $353 = $33;
         $354 = (($353) + ($352<<2)|0);
         HEAP32[$354>>2] = $351;
        } else {
         $355 = $47;
         $356 = $53;
         $357 = (($356) + ($355<<2)|0);
         $358 = HEAP32[$357>>2]|0;
         $359 = $55;
         $360 = (($359) + ($358<<2)|0);
         $361 = HEAP32[$360>>2]|0;
         $362 = $47;
         $363 = $33;
         $364 = (($363) + ($362<<2)|0);
         HEAP32[$364>>2] = $361;
        }
        $365 = $47;
        $366 = (($365) + 1)|0;
        $47 = $366;
       }
      }
     } while(0);
     $367 = $52;
     $368 = (($367) + 1)|0;
     $52 = $368;
     $369 = $52;
     $370 = HEAP32[$29>>2]|0;
     $371 = ((($370)) + 520|0);
     $372 = HEAP32[$371>>2]|0;
     $373 = ($369|0)<=($372|0);
     $374 = $48;
     $375 = ($374|0)!=(0);
     $or$cond12 = $373 & $375;
     if (!($or$cond12)) {
      label = 86;
      break;
     }
     $376 = HEAP32[$31>>2]|0;
     (_releaseStringBuffer($376)|0);
     $377 = HEAP32[$32>>2]|0;
     HEAP32[$57>>2] = $377;
     $378 = ((($57)) + 4|0);
     $379 = ((($32)) + 4|0);
     $380 = HEAP32[$379>>2]|0;
     HEAP32[$378>>2] = $380;
     $381 = ((($57)) + 8|0);
     $382 = ((($32)) + 12|0);
     $383 = HEAP32[$382>>2]|0;
     HEAP32[$381>>2] = $383;
     ;HEAP32[$31>>2]=HEAP32[$57>>2]|0;HEAP32[$31+4>>2]=HEAP32[$57+4>>2]|0;HEAP32[$31+8>>2]=HEAP32[$57+8>>2]|0;
     $384 = $20;
     $385 = HEAP32[$384>>2]|0;
     $386 = (_getStringBuffer($385)|0);
     $56 = $386;
     $387 = $56;
     HEAP32[$58>>2] = $387;
     $388 = ((($58)) + 4|0);
     $389 = $56;
     $390 = HEAP32[4358]|0;
     $391 = ((($390)) + 4|0);
     $392 = HEAP32[$391>>2]|0;
     $393 = (($392) + ($389<<2)|0);
     $394 = HEAP32[$393>>2]|0;
     HEAP32[$388>>2] = $394;
     $395 = ((($58)) + 8|0);
     $396 = $20;
     $397 = HEAP32[$396>>2]|0;
     HEAP32[$395>>2] = $397;
     $398 = ((($58)) + 12|0);
     HEAP32[$398>>2] = 0;
     ;HEAP32[$32>>2]=HEAP32[$58>>2]|0;HEAP32[$32+4>>2]=HEAP32[$58+4>>2]|0;HEAP32[$32+8>>2]=HEAP32[$58+8>>2]|0;HEAP32[$32+12>>2]=HEAP32[$58+12>>2]|0;
    }
    if ((label|0) == 71) {
     $14 = 0;
     $589 = $14;
     STACKTOP = sp;return ($589|0);
    }
    else if ((label|0) == 73) {
     $14 = 0;
     $589 = $14;
     STACKTOP = sp;return ($589|0);
    }
    else if ((label|0) == 86) {
     $399 = $48;
     $400 = ($399|0)!=(0);
     L122: do {
      if ($400) {
       $47 = 0;
       L124: while(1) {
        $401 = $47;
        $402 = ((($32)) + 12|0);
        $403 = HEAP32[$402>>2]|0;
        $404 = ($401|0)<($403|0);
        if (!($404)) {
         break;
        }
        $405 = $21;
        $406 = ($405|0)!=(0|0);
        do {
         if ($406) {
          $407 = $47;
          $408 = ((($32)) + 4|0);
          $409 = HEAP32[$408>>2]|0;
          $410 = (($409) + ($407<<1)|0);
          $411 = HEAP16[$410>>1]|0;
          $412 = $411&65535;
          $413 = $412 & 192;
          $414 = ($413|0)!=(0);
          $415 = $47;
          $416 = $21;
          $417 = (($416) + ($415<<1)|0);
          if ($414) {
           HEAP16[$417>>1] = 56;
           break;
          } else {
           HEAP16[$417>>1] = 48;
           break;
          }
         }
        } while(0);
        $418 = $26;
        $419 = $418 & 4;
        $420 = ($419|0)!=(0);
        do {
         if ($420) {
          $421 = $26;
          $422 = $421 & 64;
          $423 = ($422|0)!=(0);
          $424 = $47;
          $425 = ((($32)) + 4|0);
          $426 = HEAP32[$425>>2]|0;
          $427 = (($426) + ($424<<1)|0);
          $428 = HEAP16[$427>>1]|0;
          if ($423) {
           $429 = $428&65535;
           $430 = $429 & 255;
           $431 = $430 | 10240;
           $432 = $431&65535;
           $433 = $47;
           $434 = $19;
           $435 = (($434) + ($433<<1)|0);
           HEAP16[$435>>1] = $432;
           break;
          } else {
           $436 = $47;
           $437 = $19;
           $438 = (($437) + ($436<<1)|0);
           HEAP16[$438>>1] = $428;
           break;
          }
         } else {
          $439 = $47;
          $440 = ((($32)) + 4|0);
          $441 = HEAP32[$440>>2]|0;
          $442 = (($441) + ($439<<1)|0);
          $443 = HEAP16[$442>>1]|0;
          $444 = HEAP32[$30>>2]|0;
          $445 = (__lou_getCharForDots($443,$444)|0);
          $446 = $47;
          $447 = $19;
          $448 = (($447) + ($446<<1)|0);
          HEAP16[$448>>1] = $445;
          $449 = $47;
          $450 = $19;
          $451 = (($450) + ($449<<1)|0);
          $452 = HEAP16[$451>>1]|0;
          $453 = ($452<<16>>16)!=(0);
          if (!($453)) {
           label = 98;
           break L124;
          }
         }
        } while(0);
        $460 = $47;
        $461 = (($460) + 1)|0;
        $47 = $461;
       }
       if ((label|0) == 98) {
        $454 = $16;
        $455 = $47;
        $456 = ((($32)) + 4|0);
        $457 = HEAP32[$456>>2]|0;
        $458 = (($457) + ($455<<1)|0);
        $459 = (__lou_showDots($458,1)|0);
        HEAP32[$vararg_buffer17>>2] = $454;
        $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
        HEAP32[$vararg_ptr20>>2] = $459;
        __lou_logMessage(40000,9519,$vararg_buffer17);
        $14 = 0;
        $589 = $14;
        STACKTOP = sp;return ($589|0);
       }
       $462 = ((($32)) + 12|0);
       $463 = HEAP32[$462>>2]|0;
       $464 = $33;
       $465 = (($464) + ($463<<2)|0);
       $466 = HEAP32[$465>>2]|0;
       $467 = $18;
       HEAP32[$467>>2] = $466;
       $468 = ((($32)) + 12|0);
       $469 = HEAP32[$468>>2]|0;
       $470 = $20;
       HEAP32[$470>>2] = $469;
       $471 = $24;
       $472 = ($471|0)!=(0|0);
       L144: do {
        if ($472) {
         $47 = 0;
         while(1) {
          $473 = $47;
          $474 = $20;
          $475 = HEAP32[$474>>2]|0;
          $476 = ($473|0)<($475|0);
          if (!($476)) {
           break L144;
          }
          $477 = $47;
          $478 = $33;
          $479 = (($478) + ($477<<2)|0);
          $480 = HEAP32[$479>>2]|0;
          $481 = ($480|0)<(0);
          $482 = $47;
          do {
           if ($481) {
            $483 = $24;
            $484 = (($483) + ($482<<2)|0);
            HEAP32[$484>>2] = 0;
           } else {
            $485 = $33;
            $486 = (($485) + ($482<<2)|0);
            $487 = HEAP32[$486>>2]|0;
            $488 = $18;
            $489 = HEAP32[$488>>2]|0;
            $490 = (($489) - 1)|0;
            $491 = ($487|0)>($490|0);
            if ($491) {
             $492 = $18;
             $493 = HEAP32[$492>>2]|0;
             $494 = (($493) - 1)|0;
             $495 = $47;
             $496 = $24;
             $497 = (($496) + ($495<<2)|0);
             HEAP32[$497>>2] = $494;
             break;
            } else {
             $498 = $47;
             $499 = $33;
             $500 = (($499) + ($498<<2)|0);
             $501 = HEAP32[$500>>2]|0;
             $502 = $47;
             $503 = $24;
             $504 = (($503) + ($502<<2)|0);
             HEAP32[$504>>2] = $501;
             break;
            }
           }
          } while(0);
          $505 = $47;
          $506 = (($505) + 1)|0;
          $47 = $506;
         }
        }
       } while(0);
       $507 = $23;
       $508 = ($507|0)!=(0|0);
       if (!($508)) {
        break;
       }
       $59 = -1;
       $60 = -1;
       $47 = 0;
       while(1) {
        $509 = $47;
        $510 = $20;
        $511 = HEAP32[$510>>2]|0;
        $512 = ($509|0)<($511|0);
        if (!($512)) {
         break;
        }
        $513 = $47;
        $514 = $33;
        $515 = (($514) + ($513<<2)|0);
        $516 = HEAP32[$515>>2]|0;
        $517 = $59;
        $518 = ($516|0)>($517|0);
        if ($518) {
         while(1) {
          $519 = $59;
          $520 = $47;
          $521 = $33;
          $522 = (($521) + ($520<<2)|0);
          $523 = HEAP32[$522>>2]|0;
          $524 = ($519|0)<($523|0);
          if (!($524)) {
           break;
          }
          $525 = $59;
          $526 = ($525|0)>=(0);
          do {
           if ($526) {
            $527 = $59;
            $528 = $18;
            $529 = HEAP32[$528>>2]|0;
            $530 = ($527|0)<($529|0);
            if (!($530)) {
             break;
            }
            $531 = $60;
            $532 = ($531|0)<(0);
            $533 = $60;
            $534 = $532 ? 0 : $533;
            $535 = $59;
            $536 = $23;
            $537 = (($536) + ($535<<2)|0);
            HEAP32[$537>>2] = $534;
           }
          } while(0);
          $538 = $59;
          $539 = (($538) + 1)|0;
          $59 = $539;
         }
         $540 = $47;
         $60 = $540;
        }
        $541 = $47;
        $542 = (($541) + 1)|0;
        $47 = $542;
       }
       $543 = $59;
       $544 = ($543|0)<(0);
       if ($544) {
        $59 = 0;
       }
       while(1) {
        $545 = $59;
        $546 = $18;
        $547 = HEAP32[$546>>2]|0;
        $548 = ($545|0)<($547|0);
        if (!($548)) {
         break L122;
        }
        $549 = $60;
        $550 = $59;
        $551 = (($550) + 1)|0;
        $59 = $551;
        $552 = $23;
        $553 = (($552) + ($550<<2)|0);
        HEAP32[$553>>2] = $549;
       }
      }
     } while(0);
     $554 = $39;
     $555 = ($554|0)!=(0|0);
     if ($555) {
      $556 = $38;
      $557 = $39;
      $558 = ((($31)) + 8|0);
      $559 = HEAP32[$558>>2]|0;
      _memcpy(($556|0),($557|0),($559|0))|0;
      $560 = ((($31)) + 8|0);
      $561 = HEAP32[$560>>2]|0;
      $562 = $38;
      $563 = (($562) + ($561)|0);
      HEAP8[$563>>0] = 0;
     }
     $564 = $25;
     $565 = ($564|0)!=(0|0);
     do {
      if ($565) {
       $566 = $25;
       $567 = HEAP32[$566>>2]|0;
       $568 = ($567|0)!=(-1);
       if (!($568)) {
        break;
       }
       $569 = $23;
       $570 = ($569|0)!=(0|0);
       if ($570) {
        $571 = $25;
        $572 = HEAP32[$571>>2]|0;
        $573 = $23;
        $574 = (($573) + ($572<<2)|0);
        $575 = HEAP32[$574>>2]|0;
        $576 = $25;
        HEAP32[$576>>2] = $575;
        break;
       } else {
        $577 = HEAP32[$42>>2]|0;
        $578 = $25;
        HEAP32[$578>>2] = $577;
        break;
       }
      }
     } while(0);
     $579 = $28;
     $580 = ($579|0)!=(0|0);
     if ($580) {
      $581 = HEAP32[4355]|0;
      $582 = $28;
      HEAP32[$582>>2] = $581;
     }
     $583 = $20;
     $584 = HEAP32[$583>>2]|0;
     HEAP32[$vararg_buffer21>>2] = $584;
     __lou_logMessage(0,9570,$vararg_buffer21);
     $585 = $19;
     $586 = $20;
     $587 = HEAP32[$586>>2]|0;
     __lou_logWidecharBuf(0,9602,$585,$587);
     $588 = $48;
     $14 = $588;
     $589 = $14;
     STACKTOP = sp;return ($589|0);
    }
   }
  }
 }
 $14 = 0;
 $589 = $14;
 STACKTOP = sp;return ($589|0);
}
function _lou_translatePrehyphenated($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $14 = $0;
 $15 = $1;
 $16 = $2;
 $17 = $3;
 $18 = $4;
 $19 = $5;
 $20 = $6;
 $21 = $7;
 $22 = $8;
 $23 = $9;
 $24 = $10;
 $25 = $11;
 $26 = $12;
 $27 = 1;
 $28 = 0;
 $32 = $24;
 $33 = ($32|0)!=(0|0);
 if ($33) {
  $34 = $25;
  $35 = ($34|0)==(0|0);
  if ($35) {
   $13 = 0;
   $90 = $13;
   STACKTOP = sp;return ($90|0);
  }
  $36 = $22;
  $37 = ($36|0)==(0|0);
  if ($37) {
   $38 = $18;
   $39 = HEAP32[$38>>2]|0;
   $40 = $39<<2;
   $41 = (_rpl_malloc($40)|0);
   $28 = $41;
   $42 = ($41|0)==(0|0);
   if ($42) {
    __lou_outOfMemory();
   }
   $43 = $28;
   $22 = $43;
  }
 }
 $44 = $14;
 $45 = $15;
 $46 = $16;
 $47 = $17;
 $48 = $18;
 $49 = $19;
 $50 = $20;
 $51 = $21;
 $52 = $22;
 $53 = $23;
 $54 = $26;
 $55 = (_lou_translate($44,$45,$46,$47,$48,$49,$50,$51,$52,$53,$54)|0);
 $56 = ($55|0)!=(0);
 $57 = $24;
 $58 = ($57|0)!=(0|0);
 $or$cond = $56 & $58;
 L12: do {
  if ($or$cond) {
   $29 = 0;
   $30 = 0;
   while(1) {
    $59 = $30;
    $60 = $18;
    $61 = HEAP32[$60>>2]|0;
    $62 = ($59|0)<($61|0);
    if (!($62)) {
     break L12;
    }
    $63 = $30;
    $64 = $22;
    $65 = (($64) + ($63<<2)|0);
    $66 = HEAP32[$65>>2]|0;
    $31 = $66;
    $67 = $31;
    $68 = $29;
    $69 = ($67|0)<($68|0);
    if ($69) {
     break;
    }
    $70 = $31;
    $71 = $29;
    $72 = ($70|0)>($71|0);
    if ($72) {
     $73 = $31;
     $74 = $24;
     $75 = (($74) + ($73)|0);
     $76 = HEAP8[$75>>0]|0;
     $77 = $30;
     $78 = $25;
     $79 = (($78) + ($77)|0);
     HEAP8[$79>>0] = $76;
    } else {
     $80 = $30;
     $81 = $25;
     $82 = (($81) + ($80)|0);
     HEAP8[$82>>0] = 48;
    }
    $83 = $31;
    $29 = $83;
    $84 = $30;
    $85 = (($84) + 1)|0;
    $30 = $85;
   }
   $27 = 0;
  }
 } while(0);
 $86 = $28;
 $87 = ($86|0)!=(0|0);
 if ($87) {
  $88 = $28;
  _rpl_free($88);
 }
 $89 = $27;
 $13 = $89;
 $90 = $13;
 STACKTOP = sp;return ($90|0);
}
function _lou_hyphenate($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $12 = sp + 64|0;
 $16 = sp + 20|0;
 $18 = sp + 12|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $22 = $6;
 $23 = (_lou_getTable($22)|0);
 $11 = $23;
 $24 = $11;
 $25 = ($24|0)==(0|0);
 $26 = $7;
 $27 = ($26|0)==(0|0);
 $or$cond = $25 | $27;
 $28 = $9;
 $29 = ($28|0)==(0|0);
 $or$cond3 = $or$cond | $29;
 if (!($or$cond3)) {
  $30 = $11;
  $31 = ((($30)) + 2096|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)==(0);
  $34 = $8;
  $35 = ($34|0)>=(100);
  $or$cond5 = $33 | $35;
  if (!($or$cond5)) {
   $36 = $10;
   $37 = ($36|0)!=(0);
   do {
    if ($37) {
     $38 = $8;
     HEAP32[$18>>2] = $38;
     HEAP32[$16>>2] = 100;
     $39 = HEAP32[$16>>2]|0;
     $40 = $39<<2;
     $41 = (_rpl_malloc($40)|0);
     $14 = $41;
     $42 = $6;
     $43 = $7;
     $44 = $14;
     $45 = (_lou_backTranslate($42,$43,$18,$12,$16,0,0,0,$44,0,0)|0);
     $46 = ($45|0)!=(0);
     if ($46) {
      $48 = HEAP32[$16>>2]|0;
      $49 = (($48) + 1)|0;
      $50 = $49;
      $51 = (_rpl_malloc($50)|0);
      $13 = $51;
      break;
     }
     $47 = $14;
     _rpl_free($47);
     $5 = 0;
     $217 = $5;
     STACKTOP = sp;return ($217|0);
    } else {
     $52 = $7;
     $53 = $8;
     $54 = $53<<1;
     _memcpy(($12|0),($52|0),($54|0))|0;
     $55 = $8;
     HEAP32[$16>>2] = $55;
     $56 = $9;
     $13 = $56;
    }
   } while(0);
   $15 = 0;
   while(1) {
    $57 = $15;
    $58 = HEAP32[$16>>2]|0;
    $59 = ($57|0)<($58|0);
    $60 = $15;
    $61 = $13;
    $62 = (($61) + ($60)|0);
    if (!($59)) {
     break;
    }
    HEAP8[$62>>0] = 48;
    $63 = $15;
    $64 = (($63) + 1)|0;
    $15 = $64;
   }
   HEAP8[$62>>0] = 0;
   $17 = 0;
   while(1) {
    while(1) {
     $65 = $17;
     $66 = HEAP32[$16>>2]|0;
     $67 = ($65|0)<($66|0);
     if (!($67)) {
      break;
     }
     $68 = $17;
     $69 = (($12) + ($68<<1)|0);
     $70 = HEAP16[$69>>1]|0;
     $71 = $11;
     $72 = (_getChar_2($70,$71)|0);
     $73 = ((($72)) + 24|0);
     $74 = $73;
     $75 = $74;
     $76 = HEAP32[$75>>2]|0;
     $77 = (($74) + 4)|0;
     $78 = $77;
     $79 = HEAP32[$78>>2]|0;
     $80 = $76 & 2;
     $81 = ($80|0)!=(0);
     $82 = (0)!=(0);
     $83 = $81 | $82;
     if ($83) {
      break;
     }
     $84 = $17;
     $85 = (($84) + 1)|0;
     $17 = $85;
    }
    $86 = $17;
    $87 = HEAP32[$16>>2]|0;
    $88 = ($86|0)==($87|0);
    if ($88) {
     break;
    }
    $89 = $17;
    $90 = (($89) + 1)|0;
    $19 = $90;
    while(1) {
     $91 = $19;
     $92 = HEAP32[$16>>2]|0;
     $93 = ($91|0)<($92|0);
     if (!($93)) {
      break;
     }
     $94 = $19;
     $95 = (($12) + ($94<<1)|0);
     $96 = HEAP16[$95>>1]|0;
     $97 = $11;
     $98 = (_getChar_2($96,$97)|0);
     $99 = ((($98)) + 24|0);
     $100 = $99;
     $101 = $100;
     $102 = HEAP32[$101>>2]|0;
     $103 = (($100) + 4)|0;
     $104 = $103;
     $105 = HEAP32[$104>>2]|0;
     $106 = $102 & 2;
     $107 = ($106|0)!=(0);
     $108 = (0)!=(0);
     $109 = $107 | $108;
     if (!($109)) {
      break;
     }
     $110 = $19;
     $111 = (($110) + 1)|0;
     $19 = $111;
    }
    $112 = $17;
    $113 = (($12) + ($112<<1)|0);
    $114 = $19;
    $115 = $17;
    $116 = (($114) - ($115))|0;
    $117 = $17;
    $118 = $13;
    $119 = (($118) + ($117)|0);
    $120 = $11;
    $121 = (_hyphenateWord($113,$116,$119,$120)|0);
    $122 = ($121|0)!=(0);
    if (!($122)) {
     label = 23;
     break;
    }
    $123 = $17;
    $124 = ($123|0)>=(2);
    if ($124) {
     $125 = $11;
     $126 = $17;
     $127 = (($126) - 1)|0;
     $128 = (($12) + ($127<<1)|0);
     $129 = HEAP16[$128>>1]|0;
     $130 = (_isHyphen($125,$129)|0);
     $131 = ($130|0)!=(0);
     if ($131) {
      $132 = $17;
      $133 = (($132) - 2)|0;
      $134 = (($12) + ($133<<1)|0);
      $135 = HEAP16[$134>>1]|0;
      $136 = $11;
      $137 = (_getChar_2($135,$136)|0);
      $138 = ((($137)) + 24|0);
      $139 = $138;
      $140 = $139;
      $141 = HEAP32[$140>>2]|0;
      $142 = (($139) + 4)|0;
      $143 = $142;
      $144 = HEAP32[$143>>2]|0;
      $145 = $141 & 2;
      $146 = ($145|0)!=(0);
      $147 = (0)!=(0);
      $148 = $146 | $147;
      if ($148) {
       $149 = $17;
       $150 = $13;
       $151 = (($150) + ($149)|0);
       HEAP8[$151>>0] = 50;
      } else {
       label = 28;
      }
     } else {
      label = 28;
     }
    } else {
     label = 28;
    }
    if ((label|0) == 28) {
     label = 0;
     $152 = $17;
     $153 = $13;
     $154 = (($153) + ($152)|0);
     HEAP8[$154>>0] = 48;
    }
    $155 = $17;
    $156 = (($155) + 1)|0;
    $15 = $156;
    while(1) {
     $157 = $15;
     $158 = $19;
     $159 = ($157|0)<($158|0);
     if (!($159)) {
      break;
     }
     $160 = $15;
     $161 = $13;
     $162 = (($161) + ($160)|0);
     $163 = HEAP8[$162>>0]|0;
     $164 = $163 << 24 >> 24;
     $165 = $164 & 1;
     $166 = ($165|0)!=(0);
     $167 = $15;
     $168 = $13;
     $169 = (($168) + ($167)|0);
     if ($166) {
      HEAP8[$169>>0] = 49;
     } else {
      HEAP8[$169>>0] = 48;
     }
     $170 = $15;
     $171 = (($170) + 1)|0;
     $15 = $171;
    }
    $172 = $19;
    $173 = HEAP32[$16>>2]|0;
    $174 = ($172|0)==($173|0);
    if ($174) {
     break;
    }
    $175 = $19;
    $176 = $13;
    $177 = (($176) + ($175)|0);
    HEAP8[$177>>0] = 48;
    $178 = $19;
    $179 = (($178) + 1)|0;
    $17 = $179;
   }
   if ((label|0) == 23) {
    $5 = 0;
    $217 = $5;
    STACKTOP = sp;return ($217|0);
   }
   $180 = $10;
   $181 = ($180|0)!=(0);
   if ($181) {
    $15 = 0;
    while(1) {
     $182 = $15;
     $183 = $8;
     $184 = ($182|0)<($183|0);
     $185 = $15;
     $186 = $9;
     $187 = (($186) + ($185)|0);
     if (!($184)) {
      break;
     }
     HEAP8[$187>>0] = 48;
     $188 = $15;
     $189 = (($188) + 1)|0;
     $15 = $189;
    }
    HEAP8[$187>>0] = 0;
    $20 = -1;
    $15 = 0;
    while(1) {
     $190 = $15;
     $191 = HEAP32[$16>>2]|0;
     $192 = ($190|0)<($191|0);
     if (!($192)) {
      break;
     }
     $193 = $15;
     $194 = $14;
     $195 = (($194) + ($193<<2)|0);
     $196 = HEAP32[$195>>2]|0;
     $21 = $196;
     $197 = $21;
     $198 = $8;
     $199 = ($197|0)>($198|0);
     $200 = $21;
     $201 = ($200|0)<(0);
     $or$cond7 = $199 | $201;
     if ($or$cond7) {
      break;
     }
     $202 = $21;
     $203 = $20;
     $204 = ($202|0)>($203|0);
     if ($204) {
      $205 = $15;
      $206 = $13;
      $207 = (($206) + ($205)|0);
      $208 = HEAP8[$207>>0]|0;
      $209 = $21;
      $210 = $9;
      $211 = (($210) + ($209)|0);
      HEAP8[$211>>0] = $208;
      $212 = $21;
      $20 = $212;
     }
     $213 = $15;
     $214 = (($213) + 1)|0;
     $15 = $214;
    }
    $215 = $13;
    _rpl_free($215);
    $216 = $14;
    _rpl_free($216);
   }
   $5 = 1;
   $217 = $5;
   STACKTOP = sp;return ($217|0);
  }
 }
 $5 = 0;
 $217 = $5;
 STACKTOP = sp;return ($217|0);
}
function _lou_dotsToChar($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $14 = $6;
 $15 = ($14|0)==(0|0);
 $16 = $7;
 $17 = ($16|0)==(0|0);
 $or$cond = $15 | $17;
 $18 = $8;
 $19 = ($18|0)==(0|0);
 $or$cond3 = $or$cond | $19;
 if ($or$cond3) {
  $5 = 0;
  $63 = $5;
  STACKTOP = sp;return ($63|0);
 }
 $20 = $6;
 $21 = (__lou_getDisplayTable($20)|0);
 $11 = $21;
 $22 = $11;
 $23 = ($22|0)==(0|0);
 $24 = $9;
 $25 = ($24|0)<=(0);
 $or$cond5 = $23 | $25;
 if ($or$cond5) {
  $5 = 0;
  $63 = $5;
  STACKTOP = sp;return ($63|0);
 }
 $12 = 0;
 while(1) {
  $26 = $12;
  $27 = $9;
  $28 = ($26|0)<($27|0);
  if (!($28)) {
   break;
  }
  $29 = $12;
  $30 = $7;
  $31 = (($30) + ($29<<1)|0);
  $32 = HEAP16[$31>>1]|0;
  $13 = $32;
  $33 = $13;
  $34 = $33&65535;
  $35 = $34 & 32768;
  $36 = ($35|0)!=(0);
  if (!($36)) {
   $37 = $13;
   $38 = $37&65535;
   $39 = $38 & 65280;
   $40 = ($39|0)==(10240);
   if ($40) {
    $41 = $13;
    $42 = $41&65535;
    $43 = $42 & 255;
    $44 = $43 | 32768;
    $45 = $44&65535;
    $13 = $45;
   }
  }
  $46 = $13;
  $47 = $11;
  $48 = (__lou_getCharForDots($46,$47)|0);
  $49 = $12;
  $50 = $8;
  $51 = (($50) + ($49<<1)|0);
  HEAP16[$51>>1] = $48;
  $52 = $12;
  $53 = $8;
  $54 = (($53) + ($52<<1)|0);
  $55 = HEAP16[$54>>1]|0;
  $56 = $55&65535;
  $57 = ($56|0)==(0);
  if ($57) {
   $58 = $12;
   $59 = $8;
   $60 = (($59) + ($58<<1)|0);
   HEAP16[$60>>1] = 32;
  }
  $61 = $12;
  $62 = (($61) + 1)|0;
  $12 = $62;
 }
 $5 = 1;
 $63 = $5;
 STACKTOP = sp;return ($63|0);
}
function _lou_charToDots($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $13 = $6;
 $14 = ($13|0)==(0|0);
 $15 = $7;
 $16 = ($15|0)==(0|0);
 $or$cond = $14 | $16;
 $17 = $8;
 $18 = ($17|0)==(0|0);
 $or$cond3 = $or$cond | $18;
 if ($or$cond3) {
  $5 = 0;
  $49 = $5;
  STACKTOP = sp;return ($49|0);
 }
 $19 = $6;
 $20 = (__lou_getDisplayTable($19)|0);
 $11 = $20;
 $21 = $11;
 $22 = ($21|0)==(0|0);
 $23 = $9;
 $24 = ($23|0)<=(0);
 $or$cond5 = $22 | $24;
 if ($or$cond5) {
  $5 = 0;
  $49 = $5;
  STACKTOP = sp;return ($49|0);
 }
 $12 = 0;
 while(1) {
  $25 = $12;
  $26 = $9;
  $27 = ($25|0)<($26|0);
  if (!($27)) {
   break;
  }
  $28 = $10;
  $29 = $28 & 64;
  $30 = ($29|0)!=(0);
  $31 = $12;
  $32 = $7;
  $33 = (($32) + ($31<<1)|0);
  $34 = HEAP16[$33>>1]|0;
  $35 = $11;
  $36 = (__lou_getDotsForChar($34,$35)|0);
  if ($30) {
   $37 = $36&65535;
   $38 = $37 & 255;
   $39 = $38 | 10240;
   $40 = $39&65535;
   $41 = $12;
   $42 = $8;
   $43 = (($42) + ($41<<1)|0);
   HEAP16[$43>>1] = $40;
  } else {
   $44 = $12;
   $45 = $8;
   $46 = (($45) + ($44<<1)|0);
   HEAP16[$46>>1] = $36;
  }
  $47 = $12;
  $48 = (($47) + 1)|0;
  $12 = $48;
 }
 $5 = 1;
 $49 = $5;
 STACKTOP = sp;return ($49|0);
}
function _getChar_2($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = (__lou_charHash($8)|0);
 $10 = $4;
 $11 = ((($10)) + 13160|0);
 $12 = (($11) + ($9<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $5 = $13;
 $14 = $5;
 $6 = $14;
 while(1) {
  $15 = $6;
  $16 = ($15|0)!=(0);
  if (!($16)) {
   label = 6;
   break;
  }
  $17 = $6;
  $18 = $4;
  $19 = ((($18)) + 31168|0);
  $20 = (($19) + ($17<<3)|0);
  $7 = $20;
  $21 = $7;
  $22 = ((($21)) + 44|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23&65535;
  $25 = $3;
  $26 = $25&65535;
  $27 = ($24|0)==($26|0);
  $28 = $7;
  if ($27) {
   label = 4;
   break;
  }
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $6 = $30;
 }
 if ((label|0) == 4) {
  $2 = $28;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 }
 else if ((label|0) == 6) {
  $31 = $3;
  HEAP16[(52)>>1] = $31;
  $2 = 8;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function _hyphenateWord($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $20 = $8;
 $21 = ((($20)) + 2096|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $8;
 $24 = ((($23)) + 31168|0);
 $25 = (($24) + ($22<<3)|0);
 $15 = $25;
 $26 = $8;
 $27 = ((($26)) + 2096|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)!=(0);
 if ($29) {
  $30 = $6;
  $31 = (($30) + 3)|0;
  $32 = ($31|0)>(2048);
  if (!($32)) {
   $33 = $6;
   $34 = (($33) + 3)|0;
   $35 = (_calloc($34,2)|0);
   $9 = $35;
   $36 = $9;
   HEAP16[$36>>1] = 46;
   $10 = 0;
   while(1) {
    $37 = $10;
    $38 = $6;
    $39 = ($37|0)<($38|0);
    if (!($39)) {
     break;
    }
    $40 = $8;
    $41 = $10;
    $42 = $5;
    $43 = (($42) + ($41<<1)|0);
    $44 = HEAP16[$43>>1]|0;
    $45 = $8;
    $46 = (_getChar_2($44,$45)|0);
    $47 = (_toLowercase_441($40,$46)|0);
    $48 = $10;
    $49 = (($48) + 1)|0;
    $50 = $9;
    $51 = (($50) + ($49<<1)|0);
    HEAP16[$51>>1] = $47;
    $52 = $10;
    $53 = $7;
    $54 = (($53) + ($52)|0);
    HEAP8[$54>>0] = 48;
    $55 = $10;
    $56 = (($55) + 1)|0;
    $10 = $56;
   }
   $57 = $6;
   $58 = (($57) + 1)|0;
   $59 = $9;
   $60 = (($59) + ($58<<1)|0);
   HEAP16[$60>>1] = 46;
   $13 = 0;
   $10 = 0;
   while(1) {
    $61 = $10;
    $62 = $6;
    $63 = (($62) + 2)|0;
    $64 = ($61|0)<($63|0);
    if (!($64)) {
     break;
    }
    $65 = $10;
    $66 = $9;
    $67 = (($66) + ($65<<1)|0);
    $68 = HEAP16[$67>>1]|0;
    $14 = $68;
    L11: while(1) {
     $69 = $13;
     $70 = ($69|0)==(65535);
     if ($70) {
      label = 11;
      break;
     }
     $71 = $13;
     $72 = $15;
     $73 = (($72) + (($71*12)|0)|0);
     $16 = $73;
     $74 = $16;
     $75 = HEAP32[$74>>2]|0;
     $76 = ($75|0)!=(0);
     L14: do {
      if ($76) {
       $77 = $16;
       $78 = HEAP32[$77>>2]|0;
       $79 = $8;
       $80 = ((($79)) + 31168|0);
       $81 = (($80) + ($78<<3)|0);
       $17 = $81;
       $11 = 0;
       while(1) {
        $82 = $11;
        $83 = $16;
        $84 = ((($83)) + 10|0);
        $85 = HEAP16[$84>>1]|0;
        $86 = $85&65535;
        $87 = ($82|0)<($86|0);
        if (!($87)) {
         break L14;
        }
        $88 = $11;
        $89 = $17;
        $90 = (($89) + ($88<<2)|0);
        $91 = HEAP16[$90>>1]|0;
        $92 = $91&65535;
        $93 = $14;
        $94 = $93&65535;
        $95 = ($92|0)==($94|0);
        $96 = $11;
        if ($95) {
         label = 16;
         break L11;
        }
        $109 = (($96) + 1)|0;
        $11 = $109;
       }
      }
     } while(0);
     $110 = $16;
     $111 = ((($110)) + 8|0);
     $112 = HEAP16[$111>>1]|0;
     $113 = $112&65535;
     $13 = $113;
    }
    L21: do {
     if ((label|0) == 11) {
      label = 0;
      $13 = 0;
     }
     else if ((label|0) == 16) {
      label = 0;
      $97 = $17;
      $98 = (($97) + ($96<<2)|0);
      $99 = ((($98)) + 2|0);
      $100 = HEAP16[$99>>1]|0;
      $101 = $100&65535;
      $13 = $101;
      $102 = $13;
      $103 = $15;
      $104 = (($103) + (($102*12)|0)|0);
      $16 = $104;
      $105 = $16;
      $106 = ((($105)) + 4|0);
      $107 = HEAP32[$106>>2]|0;
      $108 = ($107|0)!=(0);
      if ($108) {
       $114 = $16;
       $115 = ((($114)) + 4|0);
       $116 = HEAP32[$115>>2]|0;
       $117 = $8;
       $118 = ((($117)) + 31168|0);
       $119 = (($118) + ($116<<3)|0);
       $18 = $119;
       $120 = $10;
       $121 = (($120) + 1)|0;
       $122 = $18;
       $123 = (_strlen($122)|0);
       $124 = (($121) - ($123))|0;
       $19 = $124;
       $125 = $18;
       $126 = (_strlen($125)|0);
       $127 = $6;
       $128 = $19;
       $129 = (($127) - ($128))|0;
       $130 = ($126|0)<($129|0);
       if ($130) {
        $131 = $18;
        $132 = (_strlen($131)|0);
        $136 = $132;
       } else {
        $133 = $6;
        $134 = $19;
        $135 = (($133) - ($134))|0;
        $136 = $135;
       }
       $12 = $136;
       $11 = 0;
       while(1) {
        $137 = $11;
        $138 = $12;
        $139 = ($137|0)<($138|0);
        if (!($139)) {
         break L21;
        }
        $140 = $19;
        $141 = $11;
        $142 = (($140) + ($141))|0;
        $143 = $7;
        $144 = (($143) + ($142)|0);
        $145 = HEAP8[$144>>0]|0;
        $146 = $145 << 24 >> 24;
        $147 = $11;
        $148 = $18;
        $149 = (($148) + ($147)|0);
        $150 = HEAP8[$149>>0]|0;
        $151 = $150 << 24 >> 24;
        $152 = ($146|0)<($151|0);
        if ($152) {
         $153 = $11;
         $154 = $18;
         $155 = (($154) + ($153)|0);
         $156 = HEAP8[$155>>0]|0;
         $157 = $19;
         $158 = $11;
         $159 = (($157) + ($158))|0;
         $160 = $7;
         $161 = (($160) + ($159)|0);
         HEAP8[$161>>0] = $156;
        }
        $162 = $11;
        $163 = (($162) + 1)|0;
        $11 = $163;
       }
      }
     }
    } while(0);
    $164 = $10;
    $165 = (($164) + 1)|0;
    $10 = $165;
   }
   $166 = $6;
   $167 = $7;
   $168 = (($167) + ($166)|0);
   HEAP8[$168>>0] = 0;
   $169 = $9;
   _rpl_free($169);
   $4 = 1;
   $170 = $4;
   STACKTOP = sp;return ($170|0);
  }
 }
 $4 = 0;
 $170 = $4;
 STACKTOP = sp;return ($170|0);
}
function _isHyphen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $4;
 $8 = $3;
 $9 = (_getChar_2($7,$8)|0);
 $10 = ((($9)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $6 = $11;
 while(1) {
  $12 = $6;
  $13 = ($12|0)!=(0);
  if (!($13)) {
   label = 6;
   break;
  }
  $14 = $6;
  $15 = $3;
  $16 = ((($15)) + 31168|0);
  $17 = (($16) + ($14<<3)|0);
  $5 = $17;
  $18 = $5;
  $19 = ((($18)) + 36|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(110);
  if ($21) {
   label = 4;
   break;
  }
  $22 = $5;
  $23 = ((($22)) + 12|0);
  $24 = HEAP32[$23>>2]|0;
  $6 = $24;
 }
 if ((label|0) == 4) {
  $2 = 1;
  $25 = $2;
  STACKTOP = sp;return ($25|0);
 }
 else if ((label|0) == 6) {
  $2 = 0;
  $25 = $2;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function _toLowercase_441($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = ((($6)) + 32|0);
 $8 = $7;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = $10 & 16;
 $15 = ($14|0)!=(0);
 $16 = (0)!=(0);
 $17 = $15 | $16;
 L1: do {
  if ($17) {
   $18 = $4;
   $5 = $18;
   $19 = $5;
   $20 = ((($19)) + 48|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)!=(0);
   if ($22) {
    $23 = $5;
    $24 = ((($23)) + 48|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $3;
    $27 = ((($26)) + 31168|0);
    $28 = (($27) + ($25<<3)|0);
    $5 = $28;
   }
   while(1) {
    $29 = $5;
    $30 = ((($29)) + 32|0);
    $31 = $30;
    $32 = $31;
    $33 = HEAP32[$32>>2]|0;
    $34 = (($31) + 4)|0;
    $35 = $34;
    $36 = HEAP32[$35>>2]|0;
    $37 = $4;
    $38 = ((($37)) + 32|0);
    $39 = $38;
    $40 = $39;
    $41 = HEAP32[$40>>2]|0;
    $42 = (($39) + 4)|0;
    $43 = $42;
    $44 = HEAP32[$43>>2]|0;
    $45 = $41 & -17;
    $46 = $33 & $45;
    $47 = $36 & $44;
    $48 = $4;
    $49 = ((($48)) + 32|0);
    $50 = $49;
    $51 = $50;
    $52 = HEAP32[$51>>2]|0;
    $53 = (($50) + 4)|0;
    $54 = $53;
    $55 = HEAP32[$54>>2]|0;
    $56 = $52 & -17;
    $57 = ($46|0)==($56|0);
    $58 = ($47|0)==($55|0);
    $59 = $57 & $58;
    $60 = $5;
    if ($59) {
     break;
    }
    $63 = ((($60)) + 52|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = ($64|0)!=(0);
    if (!($65)) {
     break L1;
    }
    $66 = $5;
    $67 = ((($66)) + 52|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = $3;
    $70 = ((($69)) + 31168|0);
    $71 = (($70) + ($68<<3)|0);
    $5 = $71;
   }
   $61 = ((($60)) + 44|0);
   $62 = HEAP16[$61>>1]|0;
   $2 = $62;
   $75 = $2;
   STACKTOP = sp;return ($75|0);
  }
 } while(0);
 $72 = $4;
 $73 = ((($72)) + 44|0);
 $74 = HEAP16[$73>>1]|0;
 $2 = $74;
 $75 = $2;
 STACKTOP = sp;return ($75|0);
}
function _checkCharAttr($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $4 = $0;
 $7 = $5;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $2;
 $6 = $3;
 $11 = $4;
 $12 = $6;
 $13 = (_getChar_2($11,$12)|0);
 $14 = ((($13)) + 24|0);
 $15 = $14;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = $5;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = (($21) + 4)|0;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = $17 & $23;
 $28 = $20 & $26;
 $29 = ($27|0)!=(0);
 $30 = ($28|0)!=(0);
 $31 = $29 | $30;
 $32 = $31 ? 1 : 0;
 STACKTOP = sp;return ($32|0);
}
function _initStringBufferPool() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_rpl_malloc(20)|0);
 $0 = $1;
 $2 = $0;
 HEAP32[$2>>2] = 3;
 $3 = $0;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 17460;
 $5 = $0;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = 17472;
 $7 = $0;
 $8 = ((($7)) + 12|0);
 HEAP32[$8>>2] = 11;
 $9 = $0;
 $10 = ((($9)) + 16|0);
 HEAP32[$10>>2] = 0;
 $11 = $0;
 HEAP32[4358] = $11;
 STACKTOP = sp;return;
}
function _releaseStringBuffer($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)>=(0);
 if ($5) {
  $6 = $2;
  $7 = HEAP32[4358]|0;
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6|0)<($8|0);
  if ($9) {
   $10 = $2;
   $11 = HEAP32[4358]|0;
   $12 = ((($11)) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($13) + ($10<<2)|0);
   $15 = HEAP32[$14>>2]|0;
   $3 = $15;
   $16 = $3;
   $17 = ($16|0)!=(0);
   if ($17) {
    $18 = HEAP32[4358]|0;
    $19 = ((($18)) + 16|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)!=(0|0);
    if ($21) {
     $22 = HEAP32[4358]|0;
     $23 = ((($22)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = $2;
     $26 = HEAP32[4358]|0;
     $27 = ((($26)) + 4|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (($28) + ($25<<2)|0);
     $30 = HEAP32[$29>>2]|0;
     FUNCTION_TABLE_vi[$24 & 31]($30);
    }
   }
   $31 = $2;
   $32 = HEAP32[4358]|0;
   $33 = ((($32)) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($34) + ($31<<2)|0);
   HEAP32[$35>>2] = 0;
   $36 = $3;
   $1 = $36;
   $37 = $1;
   STACKTOP = sp;return ($37|0);
  }
 }
 $1 = 0;
 $37 = $1;
 STACKTOP = sp;return ($37|0);
}
function _getStringBuffer($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = 0;
 while(1) {
  $4 = $3;
  $5 = HEAP32[4358]|0;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($4|0)<($6|0);
  if (!($7)) {
   label = 6;
   break;
  }
  $8 = $3;
  $9 = HEAP32[4358]|0;
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($8<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(0);
  if (!($14)) {
   label = 4;
   break;
  }
  $32 = $3;
  $33 = (($32) + 1)|0;
  $3 = $33;
 }
 if ((label|0) == 4) {
  $15 = HEAP32[4358]|0;
  $16 = ((($15)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $3;
  $19 = $2;
  $20 = (FUNCTION_TABLE_iii[$17 & 31]($18,$19)|0);
  $21 = $3;
  $22 = HEAP32[4358]|0;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + ($21<<2)|0);
  HEAP32[$25>>2] = $20;
  $26 = $3;
  $27 = HEAP32[4358]|0;
  $28 = ((($27)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + ($26<<2)|0);
  HEAP32[$30>>2] = 1;
  $31 = $3;
  $1 = $31;
  $34 = $1;
  STACKTOP = sp;return ($34|0);
 }
 else if ((label|0) == 6) {
  __lou_outOfMemory();
  $1 = -1;
  $34 = $1;
  STACKTOP = sp;return ($34|0);
 }
 return (0)|0;
}
function _makeCorrections($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $$byval_copy = 0, $$old = 0, $$old2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $$byval_copy = sp + 128|0;
 $11 = sp + 112|0;
 $19 = sp + 80|0;
 $20 = sp + 76|0;
 $21 = sp + 72|0;
 $22 = sp + 68|0;
 $23 = sp + 64|0;
 $24 = sp + 60|0;
 $25 = sp + 56|0;
 $26 = sp + 40|0;
 $27 = sp + 36|0;
 $28 = sp + 144|0;
 $10 = $0;
 HEAP32[$11>>2] = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $38 = HEAP32[$11>>2]|0;
 $29 = $38;
 $39 = $10;
 $40 = ((($39)) + 524|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)!=(0);
 if (!($42)) {
  $9 = 1;
  $272 = $9;
  STACKTOP = sp;return ($272|0);
 }
 HEAP32[$19>>2] = 0;
 $43 = $12;
 $44 = ((($43)) + 12|0);
 HEAP32[$44>>2] = 0;
 $30 = 1;
 __lou_resetPassVariables();
 L5: while(1) {
  $45 = HEAP32[$19>>2]|0;
  $46 = HEAP32[$11>>2]|0;
  $47 = ((($46)) + 8|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($45|0)<($48|0);
  if (!($49)) {
   label = 35;
   break;
  }
  $50 = HEAP32[$11>>2]|0;
  $51 = ((($50)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = HEAP32[$19>>2]|0;
  $54 = (($52) - ($53))|0;
  $31 = $54;
  $32 = 0;
  $55 = $30;
  $56 = ($55|0)!=(0);
  if ($56) {
   $57 = $10;
   $58 = HEAP32[$19>>2]|0;
   $59 = HEAP32[$11>>2]|0;
   $60 = (_findForPassRule($57,$58,0,$59,$20,$21,$22,$23,$24,$25,$26,$27,$28)|0);
   $61 = ($60|0)==(0);
   $62 = $32;
   $63 = ($62|0)<(3);
   $or$cond3 = $61 & $63;
   if ($or$cond3) {
    label = 8;
   } else {
    label = 23;
   }
  } else {
   label = 7;
  }
  L10: while(1) {
   if ((label|0) == 7) {
    label = 0;
    $$old = $32;
    $$old2 = ($$old|0)<(3);
    if ($$old2) {
     label = 8;
     continue;
    } else {
     label = 23;
     continue;
    }
   }
   else if ((label|0) == 8) {
    label = 0;
    $33 = 0;
    $64 = $32;
    switch ($64|0) {
    case 0:  {
     $65 = $31;
     $66 = ($65|0)>=(2);
     if ($66) {
      $67 = HEAP32[$19>>2]|0;
      $68 = HEAP32[$11>>2]|0;
      $69 = ((($68)) + 4|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = (($70) + ($67<<1)|0);
      $72 = $10;
      $73 = (__lou_stringHash($71,1,$72)|0);
      $74 = $10;
      $75 = ((($74)) + 22184|0);
      $76 = (($75) + ($73<<2)|0);
      $77 = HEAP32[$76>>2]|0;
      $33 = $77;
     }
     break;
    }
    case 1:  {
     $78 = $31;
     $79 = ($78|0)>=(1);
     if ($79) {
      $31 = 1;
      $80 = HEAP32[$19>>2]|0;
      $81 = HEAP32[$11>>2]|0;
      $82 = ((($81)) + 4|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = (($83) + ($80<<1)|0);
      $85 = HEAP16[$84>>1]|0;
      $86 = $10;
      $87 = (_getChar_2($85,$86)|0);
      $88 = ((($87)) + 16|0);
      $89 = HEAP32[$88>>2]|0;
      $33 = $89;
     }
     break;
    }
    case 2:  {
     HEAP32[$20>>2] = 83;
     $33 = 0;
     break;
    }
    default: {
    }
    }
    while(1) {
     $90 = $33;
     $91 = ($90|0)!=(0);
     if (!($91)) {
      break;
     }
     $92 = $33;
     $93 = $10;
     $94 = ((($93)) + 31168|0);
     $95 = (($94) + ($92<<3)|0);
     HEAP32[$21>>2] = $95;
     $96 = HEAP32[$21>>2]|0;
     $97 = ((($96)) + 36|0);
     $98 = HEAP32[$97>>2]|0;
     HEAP32[$20>>2] = $98;
     $99 = HEAP32[$21>>2]|0;
     $100 = ((($99)) + 42|0);
     $101 = HEAP16[$100>>1]|0;
     $102 = $101 << 16 >> 16;
     HEAP32[$22>>2] = $102;
     $103 = $32;
     $104 = ($103|0)==(1);
     if ($104) {
      label = 18;
     } else {
      $105 = HEAP32[$22>>2]|0;
      $106 = $31;
      $107 = ($105|0)<=($106|0);
      if ($107) {
       $108 = HEAP32[$21>>2]|0;
       $109 = ((($108)) + 46|0);
       $110 = HEAP32[$19>>2]|0;
       $111 = HEAP32[$11>>2]|0;
       $112 = ((($111)) + 4|0);
       $113 = HEAP32[$112>>2]|0;
       $114 = (($113) + ($110<<1)|0);
       $115 = HEAP32[$22>>2]|0;
       $116 = $10;
       $117 = (_compareChars($109,$114,$115,$116)|0);
       $118 = ($117|0)!=(0);
       if ($118) {
        label = 18;
       }
      }
     }
     if ((label|0) == 18) {
      label = 0;
      $119 = $30;
      $120 = ($119|0)!=(0);
      $121 = HEAP32[$20>>2]|0;
      $122 = ($121|0)==(75);
      $or$cond = $120 & $122;
      if ($or$cond) {
       $123 = $10;
       $124 = HEAP32[$19>>2]|0;
       $125 = HEAP32[$11>>2]|0;
       $126 = HEAP32[$20>>2]|0;
       $127 = HEAP32[$21>>2]|0;
       $128 = (_passDoTest($123,$124,$125,$126,$127,$23,$24,$25,$26,$27,$28)|0);
       $129 = ($128|0)!=(0);
       if ($129) {
        label = 20;
        break;
       }
      }
     }
     $130 = HEAP32[$21>>2]|0;
     $131 = ((($130)) + 8|0);
     $132 = HEAP32[$131>>2]|0;
     $33 = $132;
    }
    if ((label|0) == 20) {
     label = 0;
     $32 = 4;
    }
    $133 = $32;
    $134 = (($133) + 1)|0;
    $32 = $134;
    label = 7;
    continue;
   }
   else if ((label|0) == 23) {
    label = 0;
    $30 = 1;
    $135 = HEAP32[$20>>2]|0;
    switch ($135|0) {
    case 83:  {
     label = 24;
     break L10;
     break;
    }
    case 75:  {
     break L10;
     break;
    }
    default: {
     continue L5;
    }
    }
   }
  }
  if ((label|0) == 24) {
   label = 0;
   $136 = $12;
   $137 = ((($136)) + 12|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = $12;
   $140 = ((($139)) + 8|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = ($138|0)>=($141|0);
   if ($142) {
    break;
   }
   $143 = HEAP32[$19>>2]|0;
   $144 = $12;
   $145 = ((($144)) + 12|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = $13;
   $148 = (($147) + ($146<<2)|0);
   HEAP32[$148>>2] = $143;
   $149 = HEAP32[$19>>2]|0;
   $150 = (($149) + 1)|0;
   HEAP32[$19>>2] = $150;
   $151 = HEAP32[$11>>2]|0;
   $152 = ((($151)) + 4|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = (($153) + ($149<<1)|0);
   $155 = HEAP16[$154>>1]|0;
   $156 = $12;
   $157 = ((($156)) + 12|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = (($158) + 1)|0;
   HEAP32[$157>>2] = $159;
   $160 = $12;
   $161 = ((($160)) + 4|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = (($162) + ($158<<1)|0);
   HEAP16[$163>>1] = $155;
   continue;
  }
  $164 = HEAP32[$11>>2]|0;
  $34 = $164;
  $165 = HEAP32[$19>>2]|0;
  $35 = $165;
  $166 = HEAP32[4356]|0;
  $167 = ($166|0)!=(0|0);
  if ($167) {
   $168 = HEAP32[4355]|0;
   $169 = HEAP32[4357]|0;
   $170 = ($168|0)<($169|0);
   if ($170) {
    $171 = HEAP32[$21>>2]|0;
    $172 = HEAP32[4355]|0;
    $173 = (($172) + 1)|0;
    HEAP32[4355] = $173;
    $174 = HEAP32[4356]|0;
    $175 = (($174) + ($172<<2)|0);
    HEAP32[$175>>2] = $171;
   }
  }
  $176 = $10;
  $177 = $12;
  $178 = $13;
  $179 = HEAP32[$20>>2]|0;
  $180 = HEAP32[$23>>2]|0;
  $181 = HEAP32[$24>>2]|0;
  $182 = HEAP32[$25>>2]|0;
  $183 = $16;
  $184 = $17;
  $185 = HEAP32[$27>>2]|0;
  $186 = HEAP16[$28>>1]|0;
  $187 = $18;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$26>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$26+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$26+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$26+12>>2]|0;
  $188 = (_passDoAction($176,$11,$177,$178,$179,$21,$180,$181,$182,$19,$$byval_copy,$183,$184,$185,$186,$187)|0);
  $189 = ($188|0)!=(0);
  if (!($189)) {
   break;
  }
  $190 = HEAP32[$11>>2]|0;
  $191 = HEAP32[$190>>2]|0;
  $192 = $34;
  $193 = HEAP32[$192>>2]|0;
  $194 = ($191|0)!=($193|0);
  if ($194) {
   $195 = $34;
   $196 = HEAP32[$195>>2]|0;
   $197 = $29;
   $198 = HEAP32[$197>>2]|0;
   $199 = ($196|0)!=($198|0);
   if ($199) {
    $200 = $34;
    $201 = HEAP32[$200>>2]|0;
    (_releaseStringBuffer($201)|0);
   }
  }
  $202 = HEAP32[$19>>2]|0;
  $203 = $35;
  $204 = ($202|0)==($203|0);
  if (!($204)) {
   continue;
  }
  $30 = 0;
 }
 if ((label|0) == 35) {
  $205 = $12;
  $206 = ((($205)) + 12|0);
  $207 = HEAP32[$206>>2]|0;
  $208 = $207<<1;
  $209 = (_rpl_malloc($208)|0);
  $37 = $209;
  $210 = ($209|0)==(0|0);
  if ($210) {
   __lou_outOfMemory();
  }
  $36 = 0;
  while(1) {
   $211 = $36;
   $212 = $12;
   $213 = ((($212)) + 12|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = ($211|0)<($214|0);
   if (!($215)) {
    break;
   }
   $216 = $36;
   $217 = $13;
   $218 = (($217) + ($216<<2)|0);
   $219 = HEAP32[$218>>2]|0;
   $220 = ($219|0)<(0);
   do {
    if ($220) {
     $221 = $14;
     $222 = HEAP16[$221>>1]|0;
     $223 = $36;
     $224 = $37;
     $225 = (($224) + ($223<<1)|0);
     HEAP16[$225>>1] = $222;
    } else {
     $226 = $36;
     $227 = $13;
     $228 = (($227) + ($226<<2)|0);
     $229 = HEAP32[$228>>2]|0;
     $230 = HEAP32[$11>>2]|0;
     $231 = ((($230)) + 8|0);
     $232 = HEAP32[$231>>2]|0;
     $233 = ($229|0)>=($232|0);
     if ($233) {
      $234 = HEAP32[$11>>2]|0;
      $235 = ((($234)) + 8|0);
      $236 = HEAP32[$235>>2]|0;
      $237 = (($236) - 1)|0;
      $238 = $14;
      $239 = (($238) + ($237<<1)|0);
      $240 = HEAP16[$239>>1]|0;
      $241 = $36;
      $242 = $37;
      $243 = (($242) + ($241<<1)|0);
      HEAP16[$243>>1] = $240;
      break;
     } else {
      $244 = $36;
      $245 = $13;
      $246 = (($245) + ($244<<2)|0);
      $247 = HEAP32[$246>>2]|0;
      $248 = $14;
      $249 = (($248) + ($247<<1)|0);
      $250 = HEAP16[$249>>1]|0;
      $251 = $36;
      $252 = $37;
      $253 = (($252) + ($251<<1)|0);
      HEAP16[$253>>1] = $250;
      break;
     }
    }
   } while(0);
   $254 = $36;
   $255 = (($254) + 1)|0;
   $36 = $255;
  }
  $256 = $14;
  $257 = $37;
  $258 = $12;
  $259 = ((($258)) + 12|0);
  $260 = HEAP32[$259>>2]|0;
  $261 = $260<<1;
  _memcpy(($256|0),($257|0),($261|0))|0;
  $262 = $37;
  _rpl_free($262);
 }
 $263 = HEAP32[$19>>2]|0;
 $264 = $15;
 HEAP32[$264>>2] = $263;
 $265 = HEAP32[$11>>2]|0;
 $266 = HEAP32[$265>>2]|0;
 $267 = $29;
 $268 = HEAP32[$267>>2]|0;
 $269 = ($266|0)!=($268|0);
 if ($269) {
  $270 = HEAP32[$11>>2]|0;
  $271 = HEAP32[$270>>2]|0;
  (_releaseStringBuffer($271)|0);
 }
 $9 = 1;
 $272 = $9;
 STACKTOP = sp;return ($272|0);
}
function _translateString($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 $15 = $15|0;
 $16 = $16|0;
 var $$byval_copy = 0, $$byval_copy10 = 0, $$off = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0;
 var $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0;
 var $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0;
 var $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0;
 var $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0;
 var $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0;
 var $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0;
 var $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0;
 var $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0;
 var $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0;
 var $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0;
 var $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0;
 var $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0;
 var $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0;
 var $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0;
 var $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0;
 var $997 = 0, $998 = 0, $999 = 0, $cond = 0, $or$cond = 0, $or$cond7 = 0, $or$cond9 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $$byval_copy10 = sp + 304|0;
 $$byval_copy = sp + 288|0;
 $20 = sp + 268|0;
 $34 = sp + 212|0;
 $35 = sp + 208|0;
 $37 = sp + 200|0;
 $38 = sp + 196|0;
 $39 = sp + 192|0;
 $40 = sp + 188|0;
 $41 = sp + 184|0;
 $42 = sp + 168|0;
 $43 = sp + 160|0;
 $44 = sp + 322|0;
 $45 = sp + 156|0;
 $46 = sp + 152|0;
 $47 = sp + 140|0;
 $48 = sp + 136|0;
 $49 = sp + 132|0;
 $51 = sp + 124|0;
 $54 = sp + 104|0;
 $56 = sp + 88|0;
 $57 = sp + 84|0;
 $58 = sp;
 $59 = sp + 320|0;
 $63 = sp + 68|0;
 $17 = $0;
 $18 = $1;
 $19 = $2;
 HEAP32[$20>>2] = $3;
 $21 = $4;
 $22 = $5;
 $23 = $6;
 $24 = $7;
 $25 = $8;
 $26 = $9;
 $27 = $10;
 $28 = $11;
 $29 = $12;
 $30 = $13;
 $31 = $14;
 $32 = $15;
 $33 = $16;
 $79 = HEAP32[$20>>2]|0;
 $52 = $79;
 HEAP32[374] = 1;
 $80 = $17;
 $81 = HEAP32[$20>>2]|0;
 $82 = $23;
 (_markSyllables($80,$81,$82)|0);
 HEAP32[$45>>2] = 0;
 HEAP32[$54>>2] = 0;
 $83 = ((($54)) + 4|0);
 HEAP32[$83>>2] = 0;
 $84 = ((($54)) + 8|0);
 HEAP32[$84>>2] = 0;
 ;HEAP32[$47>>2]=HEAP32[$54>>2]|0;HEAP32[$47+4>>2]=HEAP32[$54+4>>2]|0;HEAP32[$47+8>>2]=HEAP32[$54+8>>2]|0;
 HEAP32[$46>>2] = 0;
 $36 = 117;
 $85 = $21;
 $86 = ((($85)) + 12|0);
 HEAP32[$86>>2] = 0;
 HEAP32[$34>>2] = 0;
 $55 = 1;
 HEAP32[$48>>2] = 0;
 __lou_resetPassVariables();
 $87 = $23;
 $88 = ($87|0)!=(0|0);
 L1: do {
  if ($88) {
   $89 = $17;
   $90 = (_capsletterDefined($89)|0);
   $91 = ($90|0)!=(0);
   if ($91) {
    $53 = 0;
    while(1) {
     $92 = $53;
     $93 = HEAP32[$20>>2]|0;
     $94 = ((($93)) + 8|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($92|0)<($95|0);
     if (!($96)) {
      break L1;
     }
     $97 = $53;
     $98 = HEAP32[$20>>2]|0;
     $99 = ((($98)) + 4|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = (($100) + ($97<<1)|0);
     $102 = HEAP16[$101>>1]|0;
     $103 = $17;
     $104 = (_checkCharAttr($102,16,0,$103)|0);
     $105 = ($104|0)!=(0);
     if ($105) {
      $106 = $53;
      $107 = $23;
      $108 = (($107) + ($106<<1)|0);
      $109 = HEAP16[$108>>1]|0;
      $110 = $109&65535;
      $111 = $110 | 32768;
      $112 = $111&65535;
      HEAP16[$108>>1] = $112;
     }
     $113 = $53;
     $114 = (($113) + 1)|0;
     $53 = $114;
    }
   }
  }
 } while(0);
 $115 = $17;
 $116 = HEAP32[$20>>2]|0;
 $117 = $23;
 $118 = $26;
 $119 = $27;
 _markEmphases($115,$116,$117,$118,$119);
 L11: while(1) {
  $120 = HEAP32[$34>>2]|0;
  $121 = HEAP32[$20>>2]|0;
  $122 = ((($121)) + 8|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = ($120|0)<=($123|0);
  if (!($124)) {
   label = 161;
   break;
  }
  $125 = HEAP32[$34>>2]|0;
  $126 = ($125|0)>(0);
  if ($126) {
   $127 = HEAP32[$34>>2]|0;
   $128 = (($127) - 1)|0;
   $129 = HEAP32[$20>>2]|0;
   $130 = ((($129)) + 4|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = (($131) + ($128<<1)|0);
   $133 = HEAP16[$132>>1]|0;
   $134 = $17;
   $135 = (_checkCharAttr($133,1,0,$134)|0);
   $136 = ($135|0)!=(0);
   $137 = HEAP32[$35>>2]|0;
   $138 = ($137|0)!=(94);
   $or$cond = $136 & $138;
   if ($or$cond) {
    $139 = HEAP32[$34>>2]|0;
    HEAP32[$56>>2] = $139;
    $140 = ((($56)) + 4|0);
    $141 = $21;
    $142 = ((($141)) + 12|0);
    $143 = HEAP32[$142>>2]|0;
    HEAP32[$140>>2] = $143;
    $144 = ((($56)) + 8|0);
    $145 = HEAP32[$48>>2]|0;
    HEAP32[$144>>2] = $145;
    ;HEAP32[$47>>2]=HEAP32[$56>>2]|0;HEAP32[$47+4>>2]=HEAP32[$56+4>>2]|0;HEAP32[$47+8>>2]=HEAP32[$56+8>>2]|0;
   }
  }
  $146 = HEAP32[$34>>2]|0;
  $147 = HEAP32[$20>>2]|0;
  $148 = ((($147)) + 8|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = ($146|0)==($149|0);
  if ($150) {
   label = 161;
   break;
  }
  $151 = HEAP32[$34>>2]|0;
  $152 = $32;
  $153 = ($151|0)>=($152|0);
  if ($153) {
   $154 = HEAP32[$34>>2]|0;
   $155 = $33;
   $156 = ($154|0)<($155|0);
   if ($156) {
    HEAP32[$57>>2] = 2;
    $157 = HEAP32[$34>>2]|0;
    $158 = $33;
    $159 = $17;
    $160 = HEAP32[$20>>2]|0;
    $161 = $21;
    $162 = $22;
    $163 = $27;
    $164 = $30;
    $165 = $18;
    $166 = (_doCompTrans($157,$158,$159,$34,$160,$161,$162,$163,$37,$164,$57,$165)|0);
    $167 = ($166|0)!=(0);
    if ($167) {
     continue;
    } else {
     break;
    }
   }
  }
  $168 = $17;
  $169 = HEAP32[$34>>2]|0;
  $170 = HEAP32[$20>>2]|0;
  _setBefore($168,$169,$170,$58);
  $171 = HEAP32[$34>>2]|0;
  $172 = HEAP32[$20>>2]|0;
  $173 = ((($172)) + 8|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = ($171|0)>=($174|0);
  if ($175) {
   label = 161;
   break;
  }
  $176 = HEAP32[$46>>2]|0;
  $177 = ($176|0)!=(0);
  if (!($177)) {
   $178 = HEAP32[$34>>2]|0;
   $179 = $23;
   $180 = (($179) + ($178<<1)|0);
   $181 = HEAP16[$180>>1]|0;
   $182 = $181&65535;
   $183 = $182 & 4096;
   HEAP32[$46>>2] = $183;
  }
  $184 = HEAP32[$34>>2]|0;
  $185 = $23;
  $186 = (($185) + ($184<<1)|0);
  $187 = HEAP16[$186>>1]|0;
  $188 = $187&65535;
  $189 = $188 & 2048;
  $190 = ($189|0)!=(0);
  if ($190) {
   $191 = HEAP32[$34>>2]|0;
   $192 = HEAP32[$20>>2]|0;
   $193 = ((($192)) + 4|0);
   $194 = HEAP32[$193>>2]|0;
   $195 = (($194) + ($191<<1)|0);
   $196 = HEAP16[$195>>1]|0;
   $197 = $196&65535;
   $198 = ($197|0)<(32);
   if ($198) {
    break;
   }
   $199 = HEAP32[$34>>2]|0;
   $200 = HEAP32[$20>>2]|0;
   $201 = ((($200)) + 4|0);
   $202 = HEAP32[$201>>2]|0;
   $203 = (($202) + ($199<<1)|0);
   $204 = HEAP16[$203>>1]|0;
   $205 = $204&65535;
   $206 = ($205|0)>(126);
   if ($206) {
    break;
   }
   HEAP16[$59>>1] = -32768;
   $207 = HEAP32[$34>>2]|0;
   $208 = HEAP32[$20>>2]|0;
   $209 = ((($208)) + 4|0);
   $210 = HEAP32[$209>>2]|0;
   $211 = (($210) + ($207<<1)|0);
   $212 = HEAP16[$211>>1]|0;
   $213 = $17;
   $214 = (_getChar_2($212,$213)|0);
   $215 = ((($214)) + 16|0);
   $216 = HEAP32[$215>>2]|0;
   $60 = $216;
   while(1) {
    $217 = $60;
    $218 = ($217|0)!=(0);
    if (!($218)) {
     break;
    }
    $219 = $60;
    $220 = $17;
    $221 = ((($220)) + 31168|0);
    $222 = (($221) + ($219<<3)|0);
    $61 = $222;
    $223 = $61;
    $224 = ((($223)) + 36|0);
    $225 = HEAP32[$224>>2]|0;
    $226 = ($225>>>0)>=(61);
    if ($226) {
     $227 = $61;
     $228 = ((($227)) + 36|0);
     $229 = HEAP32[$228>>2]|0;
     $230 = ($229>>>0)<(70);
     if ($230) {
      $231 = $61;
      $232 = ((($231)) + 44|0);
      $233 = HEAP16[$232>>1]|0;
      $234 = $233 << 16 >> 16;
      $235 = ($234|0)==(1);
      if ($235) {
       label = 28;
       break;
      }
     }
    }
    $240 = $61;
    $241 = ((($240)) + 8|0);
    $242 = HEAP32[$241>>2]|0;
    $60 = $242;
   }
   if ((label|0) == 28) {
    label = 0;
    $236 = $61;
    $237 = ((($236)) + 46|0);
    $238 = ((($237)) + 2|0);
    $239 = HEAP16[$238>>1]|0;
    HEAP16[$59>>1] = $239;
   }
   $243 = HEAP32[$34>>2]|0;
   $244 = HEAP32[$20>>2]|0;
   $245 = $21;
   $246 = $22;
   $247 = $30;
   $248 = $31;
   $249 = (_for_updatePositions($59,1,1,0,$243,$244,$245,$246,$247,$248)|0);
   $250 = ($249|0)!=(0);
   if (!($250)) {
    break;
   }
   $251 = HEAP32[$34>>2]|0;
   $252 = (($251) + 1)|0;
   HEAP32[$34>>2] = $252;
   $55 = 1;
   $253 = HEAP32[$34>>2]|0;
   HEAP32[$48>>2] = $253;
   continue;
  }
  HEAP32[$51>>2] = 0;
  $254 = $17;
  $255 = HEAP32[$34>>2]|0;
  $256 = $21;
  $257 = $22;
  $258 = $18;
  $259 = HEAP32[$20>>2]|0;
  $260 = $23;
  $261 = $27;
  $262 = $36;
  $263 = $55;
  $264 = $30;
  $265 = HEAP32[$264>>2]|0;
  $266 = HEAP32[$46>>2]|0;
  $267 = $32;
  $268 = $33;
  $269 = $58;
  $270 = $269;
  $271 = HEAP32[$270>>2]|0;
  $272 = (($269) + 4)|0;
  $273 = $272;
  $274 = HEAP32[$273>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$256>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$256+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$256+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$256+12>>2]|0;
  _for_selectRule($254,$255,$$byval_copy,$257,$258,$259,$260,$261,$35,$262,$37,$38,$39,$40,$41,$42,$263,$265,$51,$266,$267,$268,$271,$274,$49,$43,$44);
  $275 = HEAP32[$35>>2]|0;
  $$off = (($275) + -88)|0;
  $switch = ($$off>>>0)<(2);
  if ($switch) {
   $276 = $17;
   $277 = HEAP32[$20>>2]|0;
   $278 = $21;
   $279 = $22;
   $280 = $27;
   $281 = $30;
   $282 = $31;
   $283 = $18;
   $284 = (_doCompbrl($276,$34,$277,$278,$279,$280,$37,$281,$282,$47,$48,$283)|0);
   $285 = ($284|0)!=(0);
   if ($285) {
    continue;
   } else {
    break;
   }
  }
  $286 = HEAP32[$51>>2]|0;
  $287 = ($286|0)!=(0);
  if ($287) {
   $288 = HEAP32[$38>>2]|0;
   $289 = HEAP32[$34>>2]|0;
   $290 = (($289) + ($288))|0;
   HEAP32[$34>>2] = $290;
  }
  $291 = HEAP32[$48>>2]|0;
  $62 = $291;
  while(1) {
   $292 = $62;
   $293 = HEAP32[$34>>2]|0;
   $294 = ($292|0)<=($293|0);
   if (!($294)) {
    break;
   }
   $295 = $62;
   $296 = $17;
   $297 = HEAP32[$34>>2]|0;
   $298 = HEAP32[$20>>2]|0;
   $299 = $21;
   $300 = $22;
   $301 = $27;
   $302 = $30;
   $303 = $31;
   _insertEmphasesAt(0,1,1,0,$295,$296,$297,$298,$299,$300,$301,$302,$303);
   $304 = $28;
   $305 = ($304|0)!=(0);
   if ($305) {
    $306 = $62;
    $307 = $17;
    $308 = HEAP32[$34>>2]|0;
    $309 = HEAP32[$20>>2]|0;
    $310 = $21;
    $311 = $22;
    $312 = $27;
    $313 = $30;
    $314 = $31;
    _insertEmphasesAt(0,1,0,1,$306,$307,$308,$309,$310,$311,$312,$313,$314);
    $315 = $62;
    $316 = $17;
    $317 = HEAP32[$34>>2]|0;
    $318 = HEAP32[$20>>2]|0;
    $319 = $21;
    $320 = $22;
    $321 = $27;
    $322 = $30;
    $323 = $31;
    _insertEmphasesAt(1,0,0,1,$315,$316,$317,$318,$319,$320,$321,$322,$323);
   }
   $324 = $62;
   $325 = HEAP32[$34>>2]|0;
   $326 = ($324|0)<($325|0);
   if ($326) {
    $327 = $62;
    $328 = $17;
    $329 = HEAP32[$34>>2]|0;
    $330 = HEAP32[$20>>2]|0;
    $331 = $21;
    $332 = $22;
    $333 = $27;
    $334 = $30;
    $335 = $31;
    _insertEmphasesAt(1,0,1,0,$327,$328,$329,$330,$331,$332,$333,$334,$335);
   }
   $336 = $62;
   $337 = (($336) + 1)|0;
   $62 = $337;
  }
  $338 = HEAP32[$34>>2]|0;
  $339 = (($338) + 1)|0;
  HEAP32[$48>>2] = $339;
  $340 = HEAP32[$35>>2]|0;
  $341 = ($340|0)==(96);
  if ($341) {
   $342 = $17;
   $343 = ((($342)) + 556|0);
   $344 = HEAP32[$343>>2]|0;
   $345 = $17;
   $346 = (_brailleIndicatorDefined($344,$345,$63)|0);
   $347 = ($346|0)!=(0);
   if ($347) {
    $348 = HEAP32[$63>>2]|0;
    $349 = ((($348)) + 46|0);
    $350 = HEAP32[$63>>2]|0;
    $351 = ((($350)) + 44|0);
    $352 = HEAP16[$351>>1]|0;
    $353 = $352 << 16 >> 16;
    $354 = HEAP32[$34>>2]|0;
    $355 = HEAP32[$20>>2]|0;
    $356 = $21;
    $357 = $22;
    $358 = $30;
    $359 = $31;
    (_for_updatePositions($349,0,$353,0,$354,$355,$356,$357,$358,$359)|0);
   }
  }
  $360 = $17;
  $361 = HEAP32[$34>>2]|0;
  $362 = HEAP32[$20>>2]|0;
  $363 = $21;
  $364 = $22;
  $365 = HEAP32[$35>>2]|0;
  $366 = $30;
  $367 = $31;
  $368 = $58;
  $369 = $368;
  $370 = HEAP32[$369>>2]|0;
  $371 = (($368) + 4)|0;
  $372 = $371;
  $373 = HEAP32[$372>>2]|0;
  $374 = (_insertLetterSign($360,$361,$362,$363,$364,$365,$366,$367,$370,$373)|0);
  $375 = ($374|0)!=(0);
  if (!($375)) {
   break;
  }
  $376 = HEAP32[$34>>2]|0;
  $377 = $17;
  $378 = HEAP32[$34>>2]|0;
  $379 = HEAP32[$20>>2]|0;
  $380 = $21;
  $381 = $22;
  $382 = $27;
  $383 = $30;
  $384 = $31;
  _insertEmphasesAt(1,0,1,0,$376,$377,$378,$379,$380,$381,$382,$383,$384);
  $385 = $17;
  $386 = ((($385)) + 536|0);
  $387 = HEAP32[$386>>2]|0;
  $388 = ($387|0)!=(0);
  if (!($388)) {
   $389 = $17;
   $390 = HEAP32[$34>>2]|0;
   $391 = HEAP32[$20>>2]|0;
   $392 = $21;
   $393 = $22;
   $394 = $36;
   $395 = $30;
   $396 = $31;
   $397 = $58;
   $398 = $397;
   $399 = HEAP32[$398>>2]|0;
   $400 = (($397) + 4)|0;
   $401 = $400;
   $402 = HEAP32[$401>>2]|0;
   $403 = (_insertNumberSign($389,$390,$391,$392,$393,$394,$395,$396,$399,$402)|0);
   $404 = ($403|0)!=(0);
   if (!($404)) {
    break;
   }
  }
  $405 = $17;
  $406 = ((($405)) + 536|0);
  $407 = HEAP32[$406>>2]|0;
  $408 = ($407|0)!=(0);
  if ($408) {
   $409 = $17;
   $410 = HEAP32[$34>>2]|0;
   $411 = HEAP32[$20>>2]|0;
   $412 = $21;
   $413 = $22;
   $414 = $30;
   $415 = $31;
   _checkNumericMode($409,$410,$411,$412,$413,$414,$415,$46,$45);
  }
  $416 = HEAP32[$35>>2]|0;
  $417 = ($416|0)==(74);
  do {
   if ($417) {
    label = 54;
   } else {
    $418 = $55;
    $419 = ($418|0)!=(0);
    if ($419) {
     $420 = $17;
     $421 = HEAP32[$34>>2]|0;
     $422 = $19;
     $423 = HEAP32[$20>>2]|0;
     $424 = (_findForPassRule($420,$421,$422,$423,$35,$37,$38,$39,$40,$41,$42,$43,$44)|0);
     $425 = ($424|0)!=(0);
     if ($425) {
      label = 54;
      break;
     }
    }
    $468 = HEAP32[4356]|0;
    $469 = ($468|0)!=(0|0);
    do {
     if ($469) {
      $470 = HEAP32[4355]|0;
      $471 = HEAP32[4357]|0;
      $472 = ($470|0)<($471|0);
      if (!($472)) {
       break;
      }
      $473 = HEAP32[$37>>2]|0;
      $474 = HEAP32[4355]|0;
      $475 = (($474) + 1)|0;
      HEAP32[4355] = $475;
      $476 = HEAP32[4356]|0;
      $477 = (($476) + ($474<<2)|0);
      HEAP32[$477>>2] = $473;
     }
    } while(0);
    $55 = 1;
   }
  } while(0);
  if ((label|0) == 54) {
   label = 0;
   $55 = 1;
   $426 = HEAP32[$35>>2]|0;
   $cond = ($426|0)==(74);
   if ($cond) {
    $427 = HEAP32[$20>>2]|0;
    $64 = $427;
    $428 = HEAP32[$34>>2]|0;
    $65 = $428;
    $429 = HEAP32[4356]|0;
    $430 = ($429|0)!=(0|0);
    do {
     if ($430) {
      $431 = HEAP32[4355]|0;
      $432 = HEAP32[4357]|0;
      $433 = ($431|0)<($432|0);
      if (!($433)) {
       break;
      }
      $434 = HEAP32[$37>>2]|0;
      $435 = HEAP32[4355]|0;
      $436 = (($435) + 1)|0;
      HEAP32[4355] = $436;
      $437 = HEAP32[4356]|0;
      $438 = (($437) + ($435<<2)|0);
      HEAP32[$438>>2] = $434;
     }
    } while(0);
    $439 = $17;
    $440 = $21;
    $441 = $22;
    $442 = HEAP32[$35>>2]|0;
    $443 = HEAP32[$39>>2]|0;
    $444 = HEAP32[$40>>2]|0;
    $445 = HEAP32[$41>>2]|0;
    $446 = $30;
    $447 = $31;
    $448 = HEAP32[$43>>2]|0;
    $449 = HEAP16[$44>>1]|0;
    $450 = $18;
    ;HEAP32[$$byval_copy10>>2]=HEAP32[$42>>2]|0;HEAP32[$$byval_copy10+4>>2]=HEAP32[$42+4>>2]|0;HEAP32[$$byval_copy10+8>>2]=HEAP32[$42+8>>2]|0;HEAP32[$$byval_copy10+12>>2]=HEAP32[$42+12>>2]|0;
    $451 = (_passDoAction($439,$20,$440,$441,$442,$37,$443,$444,$445,$34,$$byval_copy10,$446,$447,$448,$449,$450)|0);
    $452 = ($451|0)!=(0);
    if (!($452)) {
     break;
    }
    $453 = HEAP32[$20>>2]|0;
    $454 = HEAP32[$453>>2]|0;
    $455 = $64;
    $456 = HEAP32[$455>>2]|0;
    $457 = ($454|0)!=($456|0);
    do {
     if ($457) {
      $458 = $64;
      $459 = HEAP32[$458>>2]|0;
      $460 = $52;
      $461 = HEAP32[$460>>2]|0;
      $462 = ($459|0)!=($461|0);
      if (!($462)) {
       break;
      }
      $463 = $64;
      $464 = HEAP32[$463>>2]|0;
      (_releaseStringBuffer($464)|0);
     }
    } while(0);
    $465 = HEAP32[$34>>2]|0;
    $466 = $65;
    $467 = ($465|0)==($466|0);
    if (!($467)) {
     continue;
    }
    $55 = 0;
    continue;
   }
  }
  $478 = HEAP32[$34>>2]|0;
  $479 = HEAP32[$20>>2]|0;
  $480 = ((($479)) + 4|0);
  $481 = HEAP32[$480>>2]|0;
  $482 = (($481) + ($478<<1)|0);
  $483 = HEAP16[$482>>1]|0;
  $484 = $17;
  $485 = (_checkCharAttr($483,8193,0,$484)|0);
  $486 = ($485|0)!=(0);
  if ($486) {
   HEAP32[$46>>2] = 0;
  }
  $487 = HEAP32[$35>>2]|0;
  switch ($487|0) {
  case 108:  {
   $488 = $17;
   $489 = ((($488)) + 548|0);
   $490 = HEAP32[$489>>2]|0;
   $491 = ($490|0)!=(0);
   if ($491) {
    $492 = HEAP32[$34>>2]|0;
    $493 = HEAP32[$20>>2]|0;
    $494 = ((($493)) + 4|0);
    $495 = HEAP32[$494>>2]|0;
    $496 = (($495) + ($492<<1)|0);
    $497 = HEAP16[$496>>1]|0;
    $498 = $17;
    $499 = (_checkCharAttr($497,2,0,$498)|0);
    $500 = ($499|0)!=(0);
    if ($500) {
     $501 = $21;
     $502 = ((($501)) + 12|0);
     $503 = HEAP32[$502>>2]|0;
     $504 = (($503) + -1)|0;
     HEAP32[$502>>2] = $504;
    }
   }
   break;
  }
  case 61: case 79:  {
   HEAP32[$46>>2] = 0;
   break;
  }
  case 90:  {
   $505 = $36;
   $506 = ($505|0)==(90);
   if ($506) {
    $66 = 0;
    while(1) {
     $507 = $21;
     $508 = ((($507)) + 12|0);
     $509 = HEAP32[$508>>2]|0;
     $510 = ($509|0)>(0);
     if (!($510)) {
      break;
     }
     $511 = $21;
     $512 = ((($511)) + 12|0);
     $513 = HEAP32[$512>>2]|0;
     $514 = (($513) - 1)|0;
     $515 = $21;
     $516 = ((($515)) + 4|0);
     $517 = HEAP32[$516>>2]|0;
     $518 = (($517) + ($514<<1)|0);
     $519 = HEAP16[$518>>1]|0;
     $520 = $17;
     $521 = (_checkDotsAttr($519,1,0,$520)|0);
     $522 = ($521|0)!=(0);
     if (!($522)) {
      break;
     }
     $523 = $21;
     $524 = ((($523)) + 12|0);
     $525 = HEAP32[$524>>2]|0;
     $526 = (($525) - 1)|0;
     $527 = $21;
     $528 = ((($527)) + 4|0);
     $529 = HEAP32[$528>>2]|0;
     $530 = (($529) + ($526<<1)|0);
     $531 = HEAP16[$530>>1]|0;
     $532 = $531&65535;
     $533 = ($532|0)==(65535);
     if ($533) {
      $66 = 1;
     }
     $534 = $21;
     $535 = ((($534)) + 12|0);
     $536 = HEAP32[$535>>2]|0;
     $537 = (($536) + -1)|0;
     HEAP32[$535>>2] = $537;
    }
    $538 = $66;
    $539 = ($538|0)!=(0);
    if ($539) {
     $540 = $21;
     $541 = ((($540)) + 12|0);
     $542 = HEAP32[$541>>2]|0;
     $543 = $21;
     $544 = ((($543)) + 4|0);
     $545 = HEAP32[$544>>2]|0;
     $546 = (($545) + ($542<<1)|0);
     HEAP16[$546>>1] = -1;
     $547 = $21;
     $548 = ((($547)) + 12|0);
     $549 = HEAP32[$548>>2]|0;
     $550 = (($549) + 1)|0;
     HEAP32[$548>>2] = $550;
    }
   }
   break;
  }
  case 109:  {
   $551 = $17;
   $552 = ((($551)) + 536|0);
   $553 = HEAP32[$552>>2]|0;
   $554 = ($553|0)!=(0);
   do {
    if (!($554)) {
     $555 = $17;
     $556 = ((($555)) + 552|0);
     $557 = HEAP32[$556>>2]|0;
     $558 = ($557|0)!=(0);
     if (!($558)) {
      break;
     }
     $559 = $17;
     $560 = ((($559)) + 552|0);
     $561 = HEAP32[$560>>2]|0;
     $562 = $17;
     $563 = ((($562)) + 31168|0);
     $564 = (($563) + ($561<<3)|0);
     $67 = $564;
     $565 = $67;
     $566 = ((($565)) + 42|0);
     $567 = HEAP16[$566>>1]|0;
     $568 = $567 << 16 >> 16;
     $569 = $67;
     $570 = ((($569)) + 46|0);
     $571 = (($570) + ($568<<1)|0);
     $572 = $67;
     $573 = ((($572)) + 42|0);
     $574 = HEAP16[$573>>1]|0;
     $575 = $574 << 16 >> 16;
     $576 = $67;
     $577 = ((($576)) + 44|0);
     $578 = HEAP16[$577>>1]|0;
     $579 = $578 << 16 >> 16;
     $580 = HEAP32[$34>>2]|0;
     $581 = HEAP32[$20>>2]|0;
     $582 = $21;
     $583 = $22;
     $584 = $30;
     $585 = $31;
     $586 = (_for_updatePositions($571,$575,$579,0,$580,$581,$582,$583,$584,$585)|0);
     $587 = ($586|0)!=(0);
     if (!($587)) {
      break L11;
     }
    }
   } while(0);
   HEAP32[$35>>2] = 107;
   break;
  }
  case 87:  {
   $588 = HEAP32[$46>>2]|0;
   $589 = ($588|0)!=(0);
   if ($589) {
    continue L11;
   }
   $590 = $17;
   $591 = $21;
   $592 = $18;
   $593 = HEAP32[$20>>2]|0;
   (_doNocont($590,$34,$591,$592,$593,$47,$46,$48)|0);
   continue L11;
   break;
  }
  case 81: case 80:  {
   $594 = HEAP32[$34>>2]|0;
   $595 = HEAP32[$38>>2]|0;
   $596 = (($594) - ($595))|0;
   $597 = HEAP32[$51>>2]|0;
   $598 = (($596) - ($597))|0;
   $50 = $598;
   break;
  }
  default: {
  }
  }
  $599 = HEAP32[$35>>2]|0;
  L121: do {
   switch ($599|0) {
   case 73:  {
    $600 = HEAP32[$38>>2]|0;
    $601 = HEAP32[$34>>2]|0;
    $602 = (($601) + ($600))|0;
    HEAP32[$34>>2] = $602;
    $603 = HEAP32[$38>>2]|0;
    $604 = HEAP32[$37>>2]|0;
    $605 = ((($604)) + 46|0);
    $606 = (($605) + ($603<<1)|0);
    $607 = HEAP32[$37>>2]|0;
    $608 = ((($607)) + 44|0);
    $609 = HEAP16[$608>>1]|0;
    $610 = $609 << 16 >> 16;
    $611 = $17;
    $612 = HEAP32[$34>>2]|0;
    $613 = HEAP32[$20>>2]|0;
    $614 = $21;
    $615 = $22;
    $616 = $30;
    $617 = $31;
    $618 = $18;
    $619 = (_putCharacters($606,$610,$611,$612,$613,$614,$615,$616,$617,$618)|0);
    $620 = ($619|0)!=(0);
    if (!($620)) {
     break L11;
    }
    break;
   }
   case 117:  {
    $621 = HEAP32[$34>>2]|0;
    $622 = HEAP32[$20>>2]|0;
    $623 = ((($622)) + 4|0);
    $624 = HEAP32[$623>>2]|0;
    $625 = (($624) + ($621<<1)|0);
    $626 = HEAP16[$625>>1]|0;
    $627 = $17;
    $628 = HEAP32[$34>>2]|0;
    $629 = HEAP32[$20>>2]|0;
    $630 = $21;
    $631 = $22;
    $632 = $30;
    $633 = $31;
    $634 = $18;
    $635 = (_putCharacter($626,$627,$628,$629,$630,$631,$632,$633,$634)|0);
    $636 = ($635|0)!=(0);
    if (!($636)) {
     break L11;
    }
    $637 = HEAP32[$34>>2]|0;
    $638 = (($637) + 1)|0;
    HEAP32[$34>>2] = $638;
    break;
   }
   default: {
    $639 = HEAP32[$38>>2]|0;
    $640 = HEAP32[$37>>2]|0;
    $641 = ((($640)) + 46|0);
    $642 = (($641) + ($639<<1)|0);
    $68 = $642;
    $643 = HEAP32[$37>>2]|0;
    $644 = ((($643)) + 44|0);
    $645 = HEAP16[$644>>1]|0;
    $646 = $645 << 16 >> 16;
    $69 = $646;
    $647 = HEAP32[$35>>2]|0;
    $648 = ($647|0)==(81);
    if ($648) {
     $70 = 1;
     while(1) {
      $649 = $70;
      $650 = $68;
      $651 = (($650) + ($649<<1)|0);
      $652 = HEAP16[$651>>1]|0;
      $653 = $652&65535;
      $654 = ($653|0)!=(44);
      $655 = $70;
      $656 = (($655) + 1)|0;
      $70 = $656;
      if (!($654)) {
       break;
      }
     }
     $657 = $70;
     $658 = $68;
     $659 = (($658) + ($657<<1)|0);
     $68 = $659;
     $660 = $70;
     $661 = $69;
     $662 = (($661) - ($660))|0;
     $69 = $662;
    }
    $663 = $69;
    $664 = ($663|0)!=(0);
    if ($664) {
     $665 = HEAP32[$51>>2]|0;
     $666 = ($665|0)!=(0);
     $667 = $68;
     if ($666) {
      $668 = $69;
      $669 = HEAP32[$34>>2]|0;
      $670 = HEAP32[$20>>2]|0;
      $671 = $21;
      $672 = $22;
      $673 = $30;
      $674 = $31;
      $675 = (_for_updatePositions($667,0,$668,0,$669,$670,$671,$672,$673,$674)|0);
      $676 = ($675|0)!=(0);
      if ($676) {
       break L121;
      } else {
       break L11;
      }
     }
     $677 = HEAP32[$38>>2]|0;
     $678 = $69;
     $679 = HEAP32[$34>>2]|0;
     $680 = HEAP32[$20>>2]|0;
     $681 = $21;
     $682 = $22;
     $683 = $30;
     $684 = $31;
     $685 = (_for_updatePositions($667,$677,$678,0,$679,$680,$681,$682,$683,$684)|0);
     $686 = ($685|0)!=(0);
     if (!($686)) {
      break L11;
     }
     $687 = HEAP32[$38>>2]|0;
     $688 = HEAP32[$34>>2]|0;
     $689 = (($688) + ($687))|0;
     HEAP32[$34>>2] = $689;
     break L121;
    } else {
     $53 = 0;
     while(1) {
      $690 = $53;
      $691 = HEAP32[$38>>2]|0;
      $692 = ($690|0)<($691|0);
      if (!($692)) {
       break L121;
      }
      $693 = HEAP32[$34>>2]|0;
      $694 = HEAP32[$20>>2]|0;
      $695 = ((($694)) + 4|0);
      $696 = HEAP32[$695>>2]|0;
      $697 = (($696) + ($693<<1)|0);
      $698 = HEAP16[$697>>1]|0;
      $699 = $17;
      $700 = HEAP32[$34>>2]|0;
      $701 = HEAP32[$20>>2]|0;
      $702 = $21;
      $703 = $22;
      $704 = $30;
      $705 = $31;
      $706 = $18;
      $707 = (_putCharacter($698,$699,$700,$701,$702,$703,$704,$705,$706)|0);
      $708 = ($707|0)!=(0);
      if (!($708)) {
       break L11;
      }
      $709 = HEAP32[$34>>2]|0;
      $710 = (($709) + 1)|0;
      HEAP32[$34>>2] = $710;
      $711 = $53;
      $712 = (($711) + 1)|0;
      $53 = $712;
     }
    }
   }
   }
  } while(0);
  $713 = HEAP32[$35>>2]|0;
  L144: do {
   switch ($713|0) {
   case 79:  {
    $714 = HEAP32[$20>>2]|0;
    $715 = ((($714)) + 8|0);
    $716 = HEAP32[$715>>2]|0;
    $717 = HEAP32[$38>>2]|0;
    $718 = (($716) - ($717))|0;
    $71 = $718;
    $719 = $18;
    $720 = $719 & 34;
    $721 = ($720|0)!=(0);
    do {
     if ($721) {
      $722 = $32;
      $723 = $71;
      $724 = ($722|0)<($723|0);
      if (!($724)) {
       break;
      }
      $725 = $32;
      $726 = (($725) - 1)|0;
      $71 = $726;
     }
    } while(0);
    while(1) {
     $727 = HEAP32[$34>>2]|0;
     $728 = $71;
     $729 = ($727|0)<=($728|0);
     if (!($729)) {
      break L144;
     }
     $730 = HEAP32[$37>>2]|0;
     $731 = ((($730)) + 46|0);
     $732 = HEAP32[$34>>2]|0;
     $733 = HEAP32[$20>>2]|0;
     $734 = ((($733)) + 4|0);
     $735 = HEAP32[$734>>2]|0;
     $736 = (($735) + ($732<<1)|0);
     $737 = HEAP32[$38>>2]|0;
     $738 = $17;
     $739 = (_compareChars($731,$736,$737,$738)|0);
     $740 = ($739|0)!=(0);
     if (!($740)) {
      break L144;
     }
     $741 = $31;
     $742 = HEAP32[$741>>2]|0;
     $743 = ($742|0)!=(0);
     do {
      if (!($743)) {
       $744 = HEAP32[$34>>2]|0;
       $745 = $30;
       $746 = HEAP32[$745>>2]|0;
       $747 = ($744|0)<=($746|0);
       if (!($747)) {
        break;
       }
       $748 = $30;
       $749 = HEAP32[$748>>2]|0;
       $750 = HEAP32[$34>>2]|0;
       $751 = HEAP32[$38>>2]|0;
       $752 = (($750) + ($751))|0;
       $753 = ($749|0)<($752|0);
       if (!($753)) {
        break;
       }
       $754 = $31;
       HEAP32[$754>>2] = 1;
       $755 = $21;
       $756 = ((($755)) + 12|0);
       $757 = HEAP32[$756>>2]|0;
       $758 = (($757) - 1)|0;
       $759 = $30;
       HEAP32[$759>>2] = $758;
      }
     } while(0);
     $760 = HEAP32[$38>>2]|0;
     $761 = HEAP32[$34>>2]|0;
     $762 = (($761) + ($760))|0;
     HEAP32[$34>>2] = $762;
    }
    break;
   }
   case 81:  {
    $763 = HEAP32[$38>>2]|0;
    $764 = HEAP32[$37>>2]|0;
    $765 = ((($764)) + 46|0);
    $766 = (($765) + ($763<<1)|0);
    $72 = $766;
    $73 = 1;
    while(1) {
     $767 = $73;
     $768 = $72;
     $769 = (($768) + ($767<<1)|0);
     $770 = HEAP16[$769>>1]|0;
     $771 = $770&65535;
     $772 = ($771|0)!=(44);
     if (!($772)) {
      break;
     }
     $773 = $73;
     $774 = (($773) + 1)|0;
     $73 = $774;
    }
    $775 = $21;
    $776 = ((($775)) + 12|0);
    $777 = HEAP32[$776>>2]|0;
    $778 = $73;
    $779 = (($777) + ($778))|0;
    $780 = $21;
    $781 = ((($780)) + 8|0);
    $782 = HEAP32[$781>>2]|0;
    $783 = ($779|0)>($782|0);
    if ($783) {
     break L11;
    }
    $784 = $21;
    $785 = ((($784)) + 12|0);
    $786 = HEAP32[$785>>2]|0;
    $787 = (($786) - 1)|0;
    $74 = $787;
    while(1) {
     $788 = $74;
     $789 = ($788|0)>=(0);
     if (!($789)) {
      break;
     }
     $790 = $74;
     $791 = $22;
     $792 = (($791) + ($790<<2)|0);
     $793 = HEAP32[$792>>2]|0;
     $794 = $50;
     $795 = ($793|0)>=($794|0);
     if (!($795)) {
      break;
     }
     $796 = $74;
     $797 = $21;
     $798 = ((($797)) + 4|0);
     $799 = HEAP32[$798>>2]|0;
     $800 = (($799) + ($796<<1)|0);
     $801 = HEAP16[$800>>1]|0;
     $802 = $74;
     $803 = $73;
     $804 = (($802) + ($803))|0;
     $805 = $21;
     $806 = ((($805)) + 4|0);
     $807 = HEAP32[$806>>2]|0;
     $808 = (($807) + ($804<<1)|0);
     HEAP16[$808>>1] = $801;
     $809 = $74;
     $810 = $22;
     $811 = (($810) + ($809<<2)|0);
     $812 = HEAP32[$811>>2]|0;
     $813 = $74;
     $814 = $73;
     $815 = (($813) + ($814))|0;
     $816 = $22;
     $817 = (($816) + ($815<<2)|0);
     HEAP32[$817>>2] = $812;
     $818 = $74;
     $819 = (($818) + -1)|0;
     $74 = $819;
    }
    $820 = $74;
    $821 = (($820) + 1)|0;
    $74 = $821;
    $822 = $74;
    $823 = $21;
    $824 = ((($823)) + 4|0);
    $825 = HEAP32[$824>>2]|0;
    $826 = (($825) + ($822<<1)|0);
    $827 = $72;
    $828 = $73;
    $829 = $828<<1;
    _memcpy(($826|0),($827|0),($829|0))|0;
    $75 = 0;
    while(1) {
     $830 = $75;
     $831 = $73;
     $832 = ($830|0)<($831|0);
     if (!($832)) {
      break;
     }
     $833 = $74;
     $834 = $22;
     $835 = (($834) + ($833<<2)|0);
     $836 = HEAP32[$835>>2]|0;
     $837 = $74;
     $838 = $75;
     $839 = (($837) + ($838))|0;
     $840 = $22;
     $841 = (($840) + ($839<<2)|0);
     HEAP32[$841>>2] = $836;
     $842 = $75;
     $843 = (($842) + 1)|0;
     $75 = $843;
    }
    $844 = $73;
    $845 = $21;
    $846 = ((($845)) + 12|0);
    $847 = HEAP32[$846>>2]|0;
    $848 = (($847) + ($844))|0;
    HEAP32[$846>>2] = $848;
    $849 = $31;
    $850 = HEAP32[$849>>2]|0;
    $851 = ($850|0)!=(0);
    if ($851) {
     $852 = $30;
     $853 = HEAP32[$852>>2]|0;
     $854 = $74;
     $855 = ($853|0)>=($854|0);
     if (!($855)) {
      label = 133;
      break L144;
     }
     $856 = $73;
     $857 = $30;
     $858 = HEAP32[$857>>2]|0;
     $859 = (($858) + ($856))|0;
     HEAP32[$857>>2] = $859;
     label = 133;
    } else {
     label = 133;
    }
    break;
   }
   case 80:  {
    label = 133;
    break;
   }
   case 94: case 93:  {
    while(1) {
     $946 = HEAP32[$34>>2]|0;
     $947 = HEAP32[$20>>2]|0;
     $948 = ((($947)) + 8|0);
     $949 = HEAP32[$948>>2]|0;
     $950 = ($946|0)<($949|0);
     if (!($950)) {
      break L144;
     }
     $951 = HEAP32[$34>>2]|0;
     $952 = HEAP32[$20>>2]|0;
     $953 = ((($952)) + 4|0);
     $954 = HEAP32[$953>>2]|0;
     $955 = (($954) + ($951<<1)|0);
     $956 = HEAP16[$955>>1]|0;
     $957 = $17;
     $958 = (_checkCharAttr($956,1,0,$957)|0);
     $959 = ($958|0)!=(0);
     if (!($959)) {
      break L144;
     }
     $960 = HEAP32[$34>>2]|0;
     $961 = HEAP32[$20>>2]|0;
     $962 = ((($961)) + 4|0);
     $963 = HEAP32[$962>>2]|0;
     $964 = (($963) + ($960<<1)|0);
     $965 = HEAP16[$964>>1]|0;
     $966 = $965&65535;
     $967 = ($966|0)!=(65535);
     if (!($967)) {
      break L144;
     }
     $968 = HEAP32[$34>>2]|0;
     $969 = (($968) + 1)|0;
     HEAP32[$34>>2] = $969;
    }
    break;
   }
   default: {
   }
   }
  } while(0);
  if ((label|0) == 133) {
   label = 0;
   $860 = HEAP32[$20>>2]|0;
   $861 = ((($860)) + 8|0);
   $862 = HEAP32[$861>>2]|0;
   $76 = $862;
   $863 = $18;
   $864 = $863 & 34;
   $865 = ($864|0)!=(0);
   do {
    if ($865) {
     $866 = $32;
     $867 = $76;
     $868 = ($866|0)<($867|0);
     if (!($868)) {
      break;
     }
     $869 = $32;
     $76 = $869;
    }
   } while(0);
   $77 = 1;
   while(1) {
    $870 = HEAP32[$34>>2]|0;
    $871 = HEAP32[$51>>2]|0;
    $872 = (($870) + ($871))|0;
    $873 = $76;
    $874 = ($872|0)<=($873|0);
    if (!($874)) {
     break;
    }
    $875 = $50;
    $876 = HEAP32[$20>>2]|0;
    $877 = ((($876)) + 4|0);
    $878 = HEAP32[$877>>2]|0;
    $879 = (($878) + ($875<<1)|0);
    $880 = HEAP32[$34>>2]|0;
    $881 = HEAP32[$20>>2]|0;
    $882 = ((($881)) + 4|0);
    $883 = HEAP32[$882>>2]|0;
    $884 = (($883) + ($880<<1)|0);
    $885 = HEAP32[$51>>2]|0;
    $886 = $17;
    $887 = (_compareChars($879,$884,$885,$886)|0);
    $888 = ($887|0)!=(0);
    if (!($888)) {
     break;
    }
    $889 = $77;
    $890 = ($889|0)!=(0);
    if (!($890)) {
     $891 = HEAP32[$34>>2]|0;
     $892 = (($891) - 1)|0;
     $893 = HEAP32[$51>>2]|0;
     $894 = $27;
     $895 = (_checkEmphasisChange($892,$893,$894)|0);
     $896 = ($895|0)!=(0);
     if ($896) {
      break;
     }
    }
    $897 = $31;
    $898 = HEAP32[$897>>2]|0;
    $899 = ($898|0)!=(0);
    do {
     if (!($899)) {
      $900 = $30;
      $901 = HEAP32[$900>>2]|0;
      $902 = HEAP32[$34>>2]|0;
      $903 = HEAP32[$38>>2]|0;
      $904 = (($902) - ($903))|0;
      $905 = ($901|0)>=($904|0);
      if (!($905)) {
       break;
      }
      $906 = $30;
      $907 = HEAP32[$906>>2]|0;
      $908 = HEAP32[$34>>2]|0;
      $909 = HEAP32[$51>>2]|0;
      $910 = (($908) + ($909))|0;
      $911 = ($907|0)<($910|0);
      if (!($911)) {
       break;
      }
      $912 = $31;
      HEAP32[$912>>2] = 1;
      $913 = $21;
      $914 = ((($913)) + 12|0);
      $915 = HEAP32[$914>>2]|0;
      $916 = (($915) - 1)|0;
      $917 = $30;
      HEAP32[$917>>2] = $916;
     }
    } while(0);
    $918 = HEAP32[$51>>2]|0;
    $919 = HEAP32[$34>>2]|0;
    $920 = (($919) + ($918))|0;
    HEAP32[$34>>2] = $920;
    $921 = HEAP32[$34>>2]|0;
    $922 = HEAP32[$38>>2]|0;
    $923 = (($921) + ($922))|0;
    $924 = $76;
    $925 = ($923|0)<=($924|0);
    if (!($925)) {
     label = 148;
     break;
    }
    $926 = HEAP32[$37>>2]|0;
    $927 = ((($926)) + 46|0);
    $928 = HEAP32[$34>>2]|0;
    $929 = HEAP32[$20>>2]|0;
    $930 = ((($929)) + 4|0);
    $931 = HEAP32[$930>>2]|0;
    $932 = (($931) + ($928<<1)|0);
    $933 = HEAP32[$38>>2]|0;
    $934 = $933<<1;
    $935 = (_memcmp($927,$932,$934)|0);
    $936 = ($935|0)!=(0);
    if ($936) {
     label = 148;
     break;
    }
    $937 = HEAP32[$38>>2]|0;
    $938 = HEAP32[$34>>2]|0;
    $939 = (($938) + ($937))|0;
    HEAP32[$34>>2] = $939;
    $77 = 0;
   }
   if ((label|0) == 148) {
    label = 0;
    $940 = HEAP32[$38>>2]|0;
    $941 = HEAP32[$34>>2]|0;
    $942 = (($941) + ($940))|0;
    HEAP32[$34>>2] = $942;
   }
   $943 = HEAP32[$38>>2]|0;
   $944 = HEAP32[$34>>2]|0;
   $945 = (($944) - ($943))|0;
   HEAP32[$34>>2] = $945;
  }
  $970 = $24;
  $971 = ($970|0)!=(0|0);
  do {
   if ($971) {
    $972 = HEAP32[$34>>2]|0;
    $973 = $24;
    $974 = (($973) + ($972)|0);
    $975 = HEAP8[$974>>0]|0;
    $976 = $975&255;
    $977 = ($976|0)>=(48);
    if ($977) {
     $978 = HEAP32[$34>>2]|0;
     $979 = $24;
     $980 = (($979) + ($978)|0);
     $981 = HEAP8[$980>>0]|0;
     $982 = $981&255;
     $983 = ($982|0)<=(57);
     if (!($983)) {
      break;
     }
     $984 = HEAP32[$34>>2]|0;
     $985 = $24;
     $986 = (($985) + ($984)|0);
     $987 = HEAP8[$986>>0]|0;
     $988 = $21;
     $989 = ((($988)) + 12|0);
     $990 = HEAP32[$989>>2]|0;
     $991 = $25;
     $992 = (($991) + ($990)|0);
     HEAP8[$992>>0] = $987;
    }
   }
  } while(0);
  $993 = HEAP32[$35>>2]|0;
  $994 = ($993|0)>=(83);
  $995 = HEAP32[$35>>2]|0;
  $996 = ($995|0)<=(117);
  $or$cond7 = $994 & $996;
  if (!($or$cond7)) {
   $997 = HEAP32[$35>>2]|0;
   $998 = ($997|0)>=(62);
   $999 = HEAP32[$35>>2]|0;
   $1000 = ($999|0)<=(71);
   $or$cond9 = $998 & $1000;
   if (!($or$cond9)) {
    continue;
   }
  }
  $1001 = HEAP32[$35>>2]|0;
  $36 = $1001;
 }
 L212: do {
  if ((label|0) == 161) {
   $1002 = HEAP32[$48>>2]|0;
   $78 = $1002;
   while(1) {
    $1003 = $78;
    $1004 = HEAP32[$34>>2]|0;
    $1005 = ($1003|0)<=($1004|0);
    if (!($1005)) {
     break L212;
    }
    $1006 = $78;
    $1007 = $17;
    $1008 = HEAP32[$34>>2]|0;
    $1009 = HEAP32[$20>>2]|0;
    $1010 = $21;
    $1011 = $22;
    $1012 = $27;
    $1013 = $30;
    $1014 = $31;
    _insertEmphasesAt(0,1,1,0,$1006,$1007,$1008,$1009,$1010,$1011,$1012,$1013,$1014);
    $1015 = $28;
    $1016 = ($1015|0)!=(0);
    if ($1016) {
     $1017 = $78;
     $1018 = $17;
     $1019 = HEAP32[$34>>2]|0;
     $1020 = HEAP32[$20>>2]|0;
     $1021 = $21;
     $1022 = $22;
     $1023 = $27;
     $1024 = $30;
     $1025 = $31;
     _insertEmphasesAt(0,1,0,1,$1017,$1018,$1019,$1020,$1021,$1022,$1023,$1024,$1025);
     $1026 = $78;
     $1027 = $17;
     $1028 = HEAP32[$34>>2]|0;
     $1029 = HEAP32[$20>>2]|0;
     $1030 = $21;
     $1031 = $22;
     $1032 = $27;
     $1033 = $30;
     $1034 = $31;
     _insertEmphasesAt(1,0,0,1,$1026,$1027,$1028,$1029,$1030,$1031,$1032,$1033,$1034);
    }
    $1035 = $78;
    $1036 = $17;
    $1037 = HEAP32[$34>>2]|0;
    $1038 = HEAP32[$20>>2]|0;
    $1039 = $21;
    $1040 = $22;
    $1041 = $27;
    $1042 = $30;
    $1043 = $31;
    _insertEmphasesAt(1,0,1,0,$1035,$1036,$1037,$1038,$1039,$1040,$1041,$1042,$1043);
    $1044 = $78;
    $1045 = (($1044) + 1)|0;
    $78 = $1045;
   }
  }
 } while(0);
 $1046 = ((($47)) + 4|0);
 $1047 = HEAP32[$1046>>2]|0;
 $1048 = ($1047|0)!=(0);
 if ($1048) {
  $1049 = HEAP32[$34>>2]|0;
  $1050 = HEAP32[$20>>2]|0;
  $1051 = ((($1050)) + 8|0);
  $1052 = HEAP32[$1051>>2]|0;
  $1053 = ($1049|0)<($1052|0);
  if ($1053) {
   $1054 = HEAP32[$34>>2]|0;
   $1055 = HEAP32[$20>>2]|0;
   $1056 = ((($1055)) + 4|0);
   $1057 = HEAP32[$1056>>2]|0;
   $1058 = (($1057) + ($1054<<1)|0);
   $1059 = HEAP16[$1058>>1]|0;
   $1060 = $17;
   $1061 = (_checkCharAttr($1059,1,0,$1060)|0);
   $1062 = ($1061|0)!=(0);
   if (!($1062)) {
    $1063 = HEAP32[$47>>2]|0;
    HEAP32[$34>>2] = $1063;
    $1064 = ((($47)) + 4|0);
    $1065 = HEAP32[$1064>>2]|0;
    $1066 = $21;
    $1067 = ((($1066)) + 12|0);
    HEAP32[$1067>>2] = $1065;
   }
  }
 }
 $1068 = HEAP32[$34>>2]|0;
 $1069 = HEAP32[$20>>2]|0;
 $1070 = ((($1069)) + 8|0);
 $1071 = HEAP32[$1070>>2]|0;
 $1072 = ($1068|0)<($1071|0);
 L226: do {
  if ($1072) {
   while(1) {
    $1073 = HEAP32[$34>>2]|0;
    $1074 = HEAP32[$20>>2]|0;
    $1075 = ((($1074)) + 4|0);
    $1076 = HEAP32[$1075>>2]|0;
    $1077 = (($1076) + ($1073<<1)|0);
    $1078 = HEAP16[$1077>>1]|0;
    $1079 = $17;
    $1080 = (_checkCharAttr($1078,1,0,$1079)|0);
    $1081 = ($1080|0)!=(0);
    if (!($1081)) {
     break L226;
    }
    $1082 = HEAP32[$34>>2]|0;
    $1083 = (($1082) + 1)|0;
    HEAP32[$34>>2] = $1083;
    $1084 = HEAP32[$20>>2]|0;
    $1085 = ((($1084)) + 8|0);
    $1086 = HEAP32[$1085>>2]|0;
    $1087 = ($1083|0)==($1086|0);
    if ($1087) {
     break;
    }
   }
  }
 } while(0);
 $1088 = HEAP32[$34>>2]|0;
 $1089 = $29;
 HEAP32[$1089>>2] = $1088;
 $1090 = HEAP32[$20>>2]|0;
 $1091 = HEAP32[$1090>>2]|0;
 $1092 = $52;
 $1093 = HEAP32[$1092>>2]|0;
 $1094 = ($1091|0)!=($1093|0);
 if (!($1094)) {
  STACKTOP = sp;return 1;
 }
 $1095 = HEAP32[$20>>2]|0;
 $1096 = HEAP32[$1095>>2]|0;
 (_releaseStringBuffer($1096)|0);
 STACKTOP = sp;return 1;
}
function _translatePass($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $$byval_copy = sp + 104|0;
 $11 = sp + 92|0;
 $18 = sp + 64|0;
 $19 = sp + 60|0;
 $20 = sp + 56|0;
 $21 = sp + 52|0;
 $22 = sp + 48|0;
 $23 = sp + 44|0;
 $24 = sp + 40|0;
 $25 = sp + 24|0;
 $26 = sp + 16|0;
 $27 = sp + 120|0;
 $9 = $0;
 $10 = $1;
 HEAP32[$11>>2] = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $32 = HEAP32[$11>>2]|0;
 $28 = $32;
 $33 = $12;
 $34 = ((($33)) + 12|0);
 HEAP32[$34>>2] = 0;
 HEAP32[$18>>2] = 0;
 $29 = 1;
 __lou_resetPassVariables();
 L1: while(1) {
  $35 = HEAP32[$18>>2]|0;
  $36 = HEAP32[$11>>2]|0;
  $37 = ((($36)) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($35|0)<($38|0);
  if (!($39)) {
   break;
  }
  $40 = $29;
  $41 = ($40|0)!=(0);
  if ($41) {
   $42 = $9;
   $43 = HEAP32[$18>>2]|0;
   $44 = $10;
   $45 = HEAP32[$11>>2]|0;
   _passSelectRule($42,$43,$44,$45,$19,$20,$21,$22,$23,$24,$25,$26,$27);
  } else {
   HEAP32[$19>>2] = 83;
  }
  $29 = 1;
  $46 = HEAP32[$19>>2]|0;
  switch ($46|0) {
  case 78: case 77: case 76: case 74:  {
   break;
  }
  case 83:  {
   $88 = $12;
   $89 = ((($88)) + 12|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = (($90) + 1)|0;
   $92 = $12;
   $93 = ((($92)) + 8|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = ($91|0)>($94|0);
   if ($95) {
    break L1;
   }
   $96 = HEAP32[$18>>2]|0;
   $97 = $12;
   $98 = ((($97)) + 12|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = $13;
   $101 = (($100) + ($99<<2)|0);
   HEAP32[$101>>2] = $96;
   $102 = HEAP32[$18>>2]|0;
   $103 = (($102) + 1)|0;
   HEAP32[$18>>2] = $103;
   $104 = HEAP32[$11>>2]|0;
   $105 = ((($104)) + 4|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (($106) + ($102<<1)|0);
   $108 = HEAP16[$107>>1]|0;
   $109 = $12;
   $110 = ((($109)) + 12|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = (($111) + 1)|0;
   HEAP32[$110>>2] = $112;
   $113 = $12;
   $114 = ((($113)) + 4|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = (($115) + ($111<<1)|0);
   HEAP16[$116>>1] = $108;
   continue L1;
   break;
  }
  default: {
   break L1;
  }
  }
  $47 = HEAP32[$11>>2]|0;
  $30 = $47;
  $48 = HEAP32[$18>>2]|0;
  $31 = $48;
  $49 = HEAP32[4356]|0;
  $50 = ($49|0)!=(0|0);
  if ($50) {
   $51 = HEAP32[4355]|0;
   $52 = HEAP32[4357]|0;
   $53 = ($51|0)<($52|0);
   if ($53) {
    $54 = HEAP32[$20>>2]|0;
    $55 = HEAP32[4355]|0;
    $56 = (($55) + 1)|0;
    HEAP32[4355] = $56;
    $57 = HEAP32[4356]|0;
    $58 = (($57) + ($55<<2)|0);
    HEAP32[$58>>2] = $54;
   }
  }
  $59 = $9;
  $60 = $12;
  $61 = $13;
  $62 = HEAP32[$19>>2]|0;
  $63 = HEAP32[$22>>2]|0;
  $64 = HEAP32[$23>>2]|0;
  $65 = HEAP32[$24>>2]|0;
  $66 = $15;
  $67 = $16;
  $68 = HEAP32[$26>>2]|0;
  $69 = HEAP16[$27>>1]|0;
  $70 = $17;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$25>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$25+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$25+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$25+12>>2]|0;
  $71 = (_passDoAction($59,$11,$60,$61,$62,$20,$63,$64,$65,$18,$$byval_copy,$66,$67,$68,$69,$70)|0);
  $72 = ($71|0)!=(0);
  if (!($72)) {
   break;
  }
  $73 = HEAP32[$11>>2]|0;
  $74 = HEAP32[$73>>2]|0;
  $75 = $30;
  $76 = HEAP32[$75>>2]|0;
  $77 = ($74|0)!=($76|0);
  if ($77) {
   $78 = $30;
   $79 = HEAP32[$78>>2]|0;
   $80 = $28;
   $81 = HEAP32[$80>>2]|0;
   $82 = ($79|0)!=($81|0);
   if ($82) {
    $83 = $30;
    $84 = HEAP32[$83>>2]|0;
    (_releaseStringBuffer($84)|0);
   }
  }
  $85 = HEAP32[$18>>2]|0;
  $86 = $31;
  $87 = ($85|0)==($86|0);
  if (!($87)) {
   continue;
  }
  $29 = 0;
 }
 $117 = HEAP32[$18>>2]|0;
 $118 = HEAP32[$11>>2]|0;
 $119 = ((($118)) + 8|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = ($117|0)<($120|0);
 L23: do {
  if ($121) {
   while(1) {
    $122 = HEAP32[$18>>2]|0;
    $123 = HEAP32[$11>>2]|0;
    $124 = ((($123)) + 4|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = (($125) + ($122<<1)|0);
    $127 = HEAP16[$126>>1]|0;
    $128 = $9;
    $129 = (_checkDotsAttr($127,1,0,$128)|0);
    $130 = ($129|0)!=(0);
    if (!($130)) {
     break L23;
    }
    $131 = HEAP32[$18>>2]|0;
    $132 = (($131) + 1)|0;
    HEAP32[$18>>2] = $132;
    $133 = HEAP32[$11>>2]|0;
    $134 = ((($133)) + 8|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = ($132|0)==($135|0);
    if ($136) {
     break;
    }
   }
  }
 } while(0);
 $137 = HEAP32[$18>>2]|0;
 $138 = $14;
 HEAP32[$138>>2] = $137;
 $139 = HEAP32[$11>>2]|0;
 $140 = HEAP32[$139>>2]|0;
 $141 = $28;
 $142 = HEAP32[$141>>2]|0;
 $143 = ($140|0)!=($142|0);
 if (!($143)) {
  STACKTOP = sp;return 1;
 }
 $144 = HEAP32[$11>>2]|0;
 $145 = HEAP32[$144>>2]|0;
 (_releaseStringBuffer($145)|0);
 STACKTOP = sp;return 1;
}
function _passSelectRule($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $13 = $0;
 $14 = $1;
 $15 = $2;
 $16 = $3;
 $17 = $4;
 $18 = $5;
 $19 = $6;
 $20 = $7;
 $21 = $8;
 $22 = $9;
 $23 = $10;
 $24 = $11;
 $25 = $12;
 $26 = $13;
 $27 = $14;
 $28 = $15;
 $29 = $16;
 $30 = $17;
 $31 = $18;
 $32 = $19;
 $33 = $20;
 $34 = $21;
 $35 = $22;
 $36 = $23;
 $37 = $24;
 $38 = $25;
 $39 = (_findForPassRule($26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38)|0);
 $40 = ($39|0)!=(0);
 if ($40) {
  STACKTOP = sp;return;
 }
 $41 = $17;
 HEAP32[$41>>2] = 83;
 STACKTOP = sp;return;
}
function _passDoAction($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 $15 = $15|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $25 = sp + 48|0;
 $17 = $0;
 $18 = $1;
 $19 = $2;
 $20 = $3;
 $21 = $4;
 $22 = $5;
 $23 = $6;
 $24 = $7;
 HEAP32[$25>>2] = $8;
 $26 = $9;
 $27 = $11;
 $28 = $12;
 $29 = $13;
 $30 = $14;
 $31 = $15;
 $33 = 0;
 $34 = 0;
 $39 = $19;
 $40 = ((($39)) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $35 = $41;
 $42 = ((($10)) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 $37 = $43;
 $44 = HEAP32[$10>>2]|0;
 $45 = ((($10)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $17;
 $48 = $18;
 $49 = HEAP32[$48>>2]|0;
 $50 = $19;
 $51 = $20;
 $52 = $21;
 $53 = $27;
 $54 = $28;
 $55 = $31;
 $56 = (_copyCharacters($44,$46,$47,$49,$50,$51,$52,$53,$54,$55)|0);
 $57 = ($56|0)!=(0);
 if (!($57)) {
  $16 = 0;
  $314 = $16;
  STACKTOP = sp;return ($314|0);
 }
 $58 = $19;
 $59 = ((($58)) + 12|0);
 $60 = HEAP32[$59>>2]|0;
 $36 = $60;
 L5: while(1) {
  $61 = HEAP32[$25>>2]|0;
  $62 = $22;
  $63 = HEAP32[$62>>2]|0;
  $64 = ((($63)) + 44|0);
  $65 = HEAP16[$64>>1]|0;
  $66 = $65 << 16 >> 16;
  $67 = ($61|0)<($66|0);
  if (!($67)) {
   label = 31;
   break;
  }
  $68 = HEAP32[$25>>2]|0;
  $69 = $24;
  $70 = (($69) + ($68<<1)|0);
  $71 = HEAP16[$70>>1]|0;
  $72 = $71&65535;
  switch ($72|0) {
  case 64: case 34:  {
   $73 = $19;
   $74 = ((($73)) + 12|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = HEAP32[$25>>2]|0;
   $77 = (($76) + 1)|0;
   $78 = $24;
   $79 = (($78) + ($77<<1)|0);
   $80 = HEAP16[$79>>1]|0;
   $81 = $80&65535;
   $82 = (($75) + ($81))|0;
   $83 = $19;
   $84 = ((($83)) + 8|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ($82|0)>($85|0);
   if ($86) {
    label = 7;
    break L5;
   }
   $32 = 0;
   while(1) {
    $87 = $32;
    $88 = HEAP32[$25>>2]|0;
    $89 = (($88) + 1)|0;
    $90 = $24;
    $91 = (($90) + ($89<<1)|0);
    $92 = HEAP16[$91>>1]|0;
    $93 = $92&65535;
    $94 = ($87|0)<($93|0);
    if (!($94)) {
     break;
    }
    $95 = ((($10)) + 4|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = $19;
    $98 = ((($97)) + 12|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = $32;
    $101 = (($99) + ($100))|0;
    $102 = $20;
    $103 = (($102) + ($101<<2)|0);
    HEAP32[$103>>2] = $96;
    $104 = $32;
    $105 = (($104) + 1)|0;
    $32 = $105;
   }
   $106 = $19;
   $107 = ((($106)) + 12|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $19;
   $110 = ((($109)) + 4|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = (($111) + ($108<<1)|0);
   $113 = HEAP32[$25>>2]|0;
   $114 = (($113) + 2)|0;
   $115 = $24;
   $116 = (($115) + ($114<<1)|0);
   $117 = HEAP32[$25>>2]|0;
   $118 = (($117) + 1)|0;
   $119 = $24;
   $120 = (($119) + ($118<<1)|0);
   $121 = HEAP16[$120>>1]|0;
   $122 = $121&65535;
   $123 = $122<<1;
   _memcpy(($112|0),($116|0),($123|0))|0;
   $124 = HEAP32[$25>>2]|0;
   $125 = (($124) + 1)|0;
   $126 = $24;
   $127 = (($126) + ($125<<1)|0);
   $128 = HEAP16[$127>>1]|0;
   $129 = $128&65535;
   $130 = $19;
   $131 = ((($130)) + 12|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = (($132) + ($129))|0;
   HEAP32[$131>>2] = $133;
   $134 = HEAP32[$25>>2]|0;
   $135 = (($134) + 1)|0;
   $136 = $24;
   $137 = (($136) + ($135<<1)|0);
   $138 = HEAP16[$137>>1]|0;
   $139 = $138&65535;
   $140 = (($139) + 2)|0;
   $141 = HEAP32[$25>>2]|0;
   $142 = (($141) + ($140))|0;
   HEAP32[$25>>2] = $142;
   continue L5;
   break;
  }
  case 123:  {
   $143 = HEAP32[$25>>2]|0;
   $144 = (($143) + 1)|0;
   $145 = $24;
   $146 = (($145) + ($144<<1)|0);
   $147 = HEAP16[$146>>1]|0;
   $148 = $147&65535;
   $149 = $148 << 16;
   $150 = HEAP32[$25>>2]|0;
   $151 = (($150) + 2)|0;
   $152 = $24;
   $153 = (($152) + ($151<<1)|0);
   $154 = HEAP16[$153>>1]|0;
   $155 = $154&65535;
   $156 = $149 | $155;
   $33 = $156;
   $157 = $33;
   $158 = $17;
   $159 = ((($158)) + 31168|0);
   $160 = (($159) + ($157<<3)|0);
   $34 = $160;
   $161 = HEAP32[$10>>2]|0;
   $162 = $19;
   $163 = ((($162)) + 12|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = $20;
   $166 = (($165) + ($164<<2)|0);
   HEAP32[$166>>2] = $161;
   $167 = $23;
   $168 = $167<<1;
   $169 = $34;
   $170 = ((($169)) + 46|0);
   $171 = (($170) + ($168<<1)|0);
   $172 = HEAP16[$171>>1]|0;
   $173 = $19;
   $174 = ((($173)) + 12|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = (($175) + 1)|0;
   HEAP32[$174>>2] = $176;
   $177 = $19;
   $178 = ((($177)) + 4|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = (($179) + ($175<<1)|0);
   HEAP16[$180>>1] = $172;
   $181 = HEAP32[$25>>2]|0;
   $182 = (($181) + 3)|0;
   HEAP32[$25>>2] = $182;
   continue L5;
   break;
  }
  case 125:  {
   $183 = HEAP32[$25>>2]|0;
   $184 = (($183) + 1)|0;
   $185 = $24;
   $186 = (($185) + ($184<<1)|0);
   $187 = HEAP16[$186>>1]|0;
   $188 = $187&65535;
   $189 = $188 << 16;
   $190 = HEAP32[$25>>2]|0;
   $191 = (($190) + 2)|0;
   $192 = $24;
   $193 = (($192) + ($191<<1)|0);
   $194 = HEAP16[$193>>1]|0;
   $195 = $194&65535;
   $196 = $189 | $195;
   $33 = $196;
   $197 = $33;
   $198 = $17;
   $199 = ((($198)) + 31168|0);
   $200 = (($199) + ($197<<3)|0);
   $34 = $200;
   $201 = HEAP32[$10>>2]|0;
   $202 = $19;
   $203 = ((($202)) + 12|0);
   $204 = HEAP32[$203>>2]|0;
   $205 = $20;
   $206 = (($205) + ($204<<2)|0);
   HEAP32[$206>>2] = $201;
   $207 = $23;
   $208 = $207<<1;
   $209 = (($208) + 1)|0;
   $210 = $34;
   $211 = ((($210)) + 46|0);
   $212 = (($211) + ($209<<1)|0);
   $213 = HEAP16[$212>>1]|0;
   $214 = $19;
   $215 = ((($214)) + 12|0);
   $216 = HEAP32[$215>>2]|0;
   $217 = (($216) + 1)|0;
   HEAP32[$215>>2] = $217;
   $218 = $19;
   $219 = ((($218)) + 4|0);
   $220 = HEAP32[$219>>2]|0;
   $221 = (($220) + ($216<<1)|0);
   HEAP16[$221>>1] = $213;
   $222 = HEAP32[$25>>2]|0;
   $223 = (($222) + 3)|0;
   HEAP32[$25>>2] = $223;
   continue L5;
   break;
  }
  case 37:  {
   $224 = ((($10)) + 4|0);
   $225 = HEAP32[$224>>2]|0;
   $226 = ((($10)) + 8|0);
   $227 = HEAP32[$226>>2]|0;
   $228 = $17;
   $229 = $18;
   $230 = HEAP32[$229>>2]|0;
   $231 = $19;
   $232 = $20;
   $233 = $24;
   $234 = HEAP32[$25>>2]|0;
   $235 = (_swapReplace($225,$227,$228,$230,$231,$232,$233,$234)|0);
   $236 = ($235|0)!=(0);
   if (!($236)) {
    label = 15;
    break L5;
   }
   $237 = HEAP32[$25>>2]|0;
   $238 = (($237) + 3)|0;
   HEAP32[$25>>2] = $238;
   continue L5;
   break;
  }
  case 59:  {
   $239 = $29;
   $240 = ($239|0)!=(0|0);
   if (!($240)) {
    label = 19;
    break L5;
   }
   $241 = $17;
   $242 = $18;
   $243 = $19;
   $244 = $21;
   $245 = $23;
   $246 = $24;
   $247 = HEAP32[$25>>2]|0;
   $248 = ((($10)) + 4|0);
   $249 = HEAP32[$248>>2]|0;
   $250 = $29;
   $251 = $30;
   $252 = (_replaceGrouping($241,$242,$243,$244,$245,$246,$247,$249,$250,$251)|0);
   $253 = ($252|0)!=(0);
   if (!($253)) {
    label = 19;
    break L5;
   }
   $254 = HEAP32[$25>>2]|0;
   $255 = (($254) + 3)|0;
   HEAP32[$25>>2] = $255;
   continue L5;
   break;
  }
  case 63:  {
   $256 = $29;
   $257 = ($256|0)!=(0|0);
   if ($257) {
    $258 = $18;
    $259 = $19;
    $260 = $23;
    $261 = ((($10)) + 4|0);
    $262 = HEAP32[$261>>2]|0;
    $263 = $29;
    $264 = $30;
    (_removeGrouping($258,$259,$260,$262,$263,$264)|0);
   }
   $265 = HEAP32[$25>>2]|0;
   $266 = (($265) + 1)|0;
   HEAP32[$25>>2] = $266;
   continue L5;
   break;
  }
  case 42:  {
   $267 = $36;
   $268 = $35;
   $269 = (($267) - ($268))|0;
   $38 = $269;
   $270 = $38;
   $271 = ($270|0)>(0);
   if ($271) {
    $272 = $35;
    $273 = $19;
    $274 = ((($273)) + 4|0);
    $275 = HEAP32[$274>>2]|0;
    $276 = (($275) + ($272<<1)|0);
    $277 = $36;
    $278 = $19;
    $279 = ((($278)) + 4|0);
    $280 = HEAP32[$279>>2]|0;
    $281 = (($280) + ($277<<1)|0);
    $282 = $38;
    $283 = $282<<1;
    _memmove(($276|0),($281|0),($283|0))|0;
    $284 = $38;
    $285 = $19;
    $286 = ((($285)) + 12|0);
    $287 = HEAP32[$286>>2]|0;
    $288 = (($287) - ($284))|0;
    HEAP32[$286>>2] = $288;
    $289 = $35;
    $36 = $289;
   }
   $290 = ((($10)) + 4|0);
   $291 = HEAP32[$290>>2]|0;
   $292 = ((($10)) + 8|0);
   $293 = HEAP32[$292>>2]|0;
   $294 = $17;
   $295 = $18;
   $296 = HEAP32[$295>>2]|0;
   $297 = $19;
   $298 = $20;
   $299 = $21;
   $300 = $27;
   $301 = $28;
   $302 = $31;
   $303 = (_copyCharacters($291,$293,$294,$296,$297,$298,$299,$300,$301,$302)|0);
   $304 = ($303|0)!=(0);
   if (!($304)) {
    label = 27;
    break L5;
   }
   $305 = ((($10)) + 12|0);
   $306 = HEAP32[$305>>2]|0;
   $37 = $306;
   $307 = HEAP32[$25>>2]|0;
   $308 = (($307) + 1)|0;
   HEAP32[$25>>2] = $308;
   continue L5;
   break;
  }
  default: {
   $309 = $24;
   $310 = (__lou_handlePassVariableAction($309,$25)|0);
   $311 = ($310|0)!=(0);
   if ($311) {
    continue L5;
   } else {
    label = 30;
    break L5;
   }
  }
  }
 }
 if ((label|0) == 7) {
  $16 = 0;
  $314 = $16;
  STACKTOP = sp;return ($314|0);
 }
 else if ((label|0) == 15) {
  $16 = 0;
  $314 = $16;
  STACKTOP = sp;return ($314|0);
 }
 else if ((label|0) == 19) {
  $16 = 0;
  $314 = $16;
  STACKTOP = sp;return ($314|0);
 }
 else if ((label|0) == 27) {
  $16 = 0;
  $314 = $16;
  STACKTOP = sp;return ($314|0);
 }
 else if ((label|0) == 30) {
  $16 = 0;
  $314 = $16;
  STACKTOP = sp;return ($314|0);
 }
 else if ((label|0) == 31) {
  $312 = $37;
  $313 = $26;
  HEAP32[$313>>2] = $312;
  $16 = 1;
  $314 = $16;
  STACKTOP = sp;return ($314|0);
 }
 return (0)|0;
}
function _checkDotsAttr($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $4 = $0;
 $7 = $5;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $2;
 $6 = $3;
 $11 = $4;
 $12 = $6;
 $13 = (_getDots_341($11,$12)|0);
 $14 = ((($13)) + 24|0);
 $15 = $14;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = $5;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = (($21) + 4)|0;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = $17 & $23;
 $28 = $20 & $26;
 $29 = ($27|0)!=(0);
 $30 = ($28|0)!=(0);
 $31 = $29 | $30;
 $32 = $31 ? 1 : 0;
 STACKTOP = sp;return ($32|0);
}
function _getDots_341($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = (__lou_charHash($8)|0);
 $10 = $4;
 $11 = ((($10)) + 17652|0);
 $12 = (($11) + ($9<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $5 = $13;
 $14 = $5;
 $6 = $14;
 while(1) {
  $15 = $6;
  $16 = ($15|0)!=(0);
  if (!($16)) {
   label = 6;
   break;
  }
  $17 = $6;
  $18 = $4;
  $19 = ((($18)) + 31168|0);
  $20 = (($19) + ($17<<3)|0);
  $7 = $20;
  $21 = $7;
  $22 = ((($21)) + 44|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23&65535;
  $25 = $3;
  $26 = $25&65535;
  $27 = ($24|0)==($26|0);
  $28 = $7;
  if ($27) {
   label = 4;
   break;
  }
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $6 = $30;
 }
 if ((label|0) == 4) {
  $2 = $28;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 }
 else if ((label|0) == 6) {
  $31 = $3;
  HEAP16[(108)>>1] = $31;
  $2 = 64;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function _copyCharacters($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $21 = $17;
 $22 = ($21|0)==(74);
 L1: do {
  if ($22) {
   while(1) {
    $23 = $11;
    $24 = $12;
    $25 = ($23|0)<($24|0);
    if (!($25)) {
     break L1;
    }
    $26 = $11;
    $27 = $14;
    $28 = ((($27)) + 4|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (($29) + ($26<<1)|0);
    $31 = HEAP16[$30>>1]|0;
    $32 = $13;
    $33 = $11;
    $34 = $14;
    $35 = $15;
    $36 = $16;
    $37 = $18;
    $38 = $19;
    $39 = $20;
    $40 = (_putCharacter($31,$32,$33,$34,$35,$36,$37,$38,$39)|0);
    $41 = ($40|0)!=(0);
    if (!($41)) {
     break;
    }
    $42 = $11;
    $43 = (($42) + 1)|0;
    $11 = $43;
   }
   $10 = 0;
   $86 = $10;
   STACKTOP = sp;return ($86|0);
  } else {
   $44 = $12;
   $45 = $11;
   $46 = ($44|0)>($45|0);
   if ($46) {
    $47 = $15;
    $48 = ((($47)) + 12|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = $12;
    $51 = (($49) + ($50))|0;
    $52 = $11;
    $53 = (($51) - ($52))|0;
    $54 = $15;
    $55 = ((($54)) + 8|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ($53|0)>($56|0);
    if ($57) {
     $10 = 0;
     $86 = $10;
     STACKTOP = sp;return ($86|0);
    } else {
     while(1) {
      $58 = $12;
      $59 = $11;
      $60 = ($58|0)>($59|0);
      if (!($60)) {
       break L1;
      }
      $61 = $11;
      $62 = $15;
      $63 = ((($62)) + 12|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = $16;
      $66 = (($65) + ($64<<2)|0);
      HEAP32[$66>>2] = $61;
      $67 = $11;
      $68 = $14;
      $69 = ((($68)) + 4|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = (($70) + ($67<<1)|0);
      $72 = HEAP16[$71>>1]|0;
      $73 = $15;
      $74 = ((($73)) + 12|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = $15;
      $77 = ((($76)) + 4|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = (($78) + ($75<<1)|0);
      HEAP16[$79>>1] = $72;
      $80 = $15;
      $81 = ((($80)) + 12|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = (($82) + 1)|0;
      HEAP32[$81>>2] = $83;
      $84 = $11;
      $85 = (($84) + 1)|0;
      $11 = $85;
     }
    }
   }
  }
 } while(0);
 $10 = 1;
 $86 = $10;
 STACKTOP = sp;return ($86|0);
}
function _swapReplace($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $26 = $16;
 $27 = (($26) + 1)|0;
 $28 = $15;
 $29 = (($28) + ($27<<1)|0);
 $30 = HEAP16[$29>>1]|0;
 $31 = $30&65535;
 $32 = $31 << 16;
 $33 = $16;
 $34 = (($33) + 2)|0;
 $35 = $15;
 $36 = (($35) + ($34<<1)|0);
 $37 = HEAP16[$36>>1]|0;
 $38 = $37&65535;
 $39 = $32 | $38;
 $17 = $39;
 $40 = $17;
 $41 = $11;
 $42 = ((($41)) + 31168|0);
 $43 = (($42) + ($40<<3)|0);
 $18 = $43;
 $44 = $18;
 $45 = ((($44)) + 42|0);
 $46 = HEAP16[$45>>1]|0;
 $47 = $46 << 16 >> 16;
 $48 = $18;
 $49 = ((($48)) + 46|0);
 $50 = (($49) + ($47<<1)|0);
 $19 = $50;
 $51 = $9;
 $20 = $51;
 L1: while(1) {
  $52 = $20;
  $53 = $10;
  $54 = ($52|0)<($53|0);
  if (!($54)) {
   label = 28;
   break;
  }
  $55 = $18;
  $56 = ((($55)) + 36|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($57|0)==(60);
  $22 = 0;
  if ($58) {
   while(1) {
    $59 = $22;
    $60 = $59<<1;
    $61 = (($60) + 1)|0;
    $62 = $18;
    $63 = ((($62)) + 42|0);
    $64 = HEAP16[$63>>1]|0;
    $65 = $64 << 16 >> 16;
    $66 = ($61|0)<($65|0);
    if (!($66)) {
     break;
    }
    $67 = $20;
    $68 = $12;
    $69 = ((($68)) + 4|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (($70) + ($67<<1)|0);
    $72 = HEAP16[$71>>1]|0;
    $73 = $72&65535;
    $74 = $22;
    $75 = $74<<1;
    $76 = (($75) + 1)|0;
    $77 = $18;
    $78 = ((($77)) + 46|0);
    $79 = (($78) + ($76<<1)|0);
    $80 = HEAP16[$79>>1]|0;
    $81 = $80&65535;
    $82 = ($73|0)==($81|0);
    if ($82) {
     break;
    }
    $83 = $22;
    $84 = (($83) + 1)|0;
    $22 = $84;
   }
   $85 = $22;
   $86 = $85<<1;
   $87 = $18;
   $88 = ((($87)) + 42|0);
   $89 = HEAP16[$88>>1]|0;
   $90 = $89 << 16 >> 16;
   $91 = ($86|0)==($90|0);
   if (!($91)) {
    label = 12;
   }
  } else {
   while(1) {
    $92 = $22;
    $93 = $18;
    $94 = ((($93)) + 42|0);
    $95 = HEAP16[$94>>1]|0;
    $96 = $95 << 16 >> 16;
    $97 = ($92|0)<($96|0);
    if (!($97)) {
     break;
    }
    $98 = $20;
    $99 = $12;
    $100 = ((($99)) + 4|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = (($101) + ($98<<1)|0);
    $103 = HEAP16[$102>>1]|0;
    $104 = $103&65535;
    $105 = $22;
    $106 = $18;
    $107 = ((($106)) + 46|0);
    $108 = (($107) + ($105<<1)|0);
    $109 = HEAP16[$108>>1]|0;
    $110 = $109&65535;
    $111 = ($104|0)==($110|0);
    if ($111) {
     break;
    }
    $112 = $22;
    $113 = (($112) + 1)|0;
    $22 = $113;
   }
   $114 = $22;
   $115 = $18;
   $116 = ((($115)) + 42|0);
   $117 = HEAP16[$116>>1]|0;
   $118 = $117 << 16 >> 16;
   $119 = ($114|0)==($118|0);
   if (!($119)) {
    label = 12;
   }
  }
  do {
   if ((label|0) == 12) {
    label = 0;
    $23 = 0;
    $21 = 0;
    while(1) {
     $120 = $21;
     $121 = $22;
     $122 = ($120|0)<($121|0);
     $123 = $18;
     $124 = ((($123)) + 36|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = ($125|0)==(58);
     if (!($122)) {
      break;
     }
     $127 = $23;
     if ($126) {
      $128 = (($127) + 1)|0;
      $23 = $128;
     } else {
      $129 = $19;
      $130 = (($129) + ($127<<1)|0);
      $131 = HEAP16[$130>>1]|0;
      $132 = $131&65535;
      $133 = $23;
      $134 = (($133) + ($132))|0;
      $23 = $134;
     }
     $135 = $21;
     $136 = (($135) + 1)|0;
     $21 = $136;
    }
    if ($126) {
     $137 = $13;
     $138 = ((($137)) + 12|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (($139) + 1)|0;
     $141 = $13;
     $142 = ((($141)) + 8|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = ($140|0)>($143|0);
     if ($144) {
      label = 20;
      break L1;
     }
     $145 = $20;
     $146 = $13;
     $147 = ((($146)) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = $14;
     $150 = (($149) + ($148<<2)|0);
     HEAP32[$150>>2] = $145;
     $151 = $23;
     $152 = $19;
     $153 = (($152) + ($151<<1)|0);
     $154 = HEAP16[$153>>1]|0;
     $155 = $13;
     $156 = ((($155)) + 12|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = (($157) + 1)|0;
     HEAP32[$156>>2] = $158;
     $159 = $13;
     $160 = ((($159)) + 4|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = (($161) + ($157<<1)|0);
     HEAP16[$162>>1] = $154;
     break;
    }
    $163 = $23;
    $164 = $19;
    $165 = (($164) + ($163<<1)|0);
    $166 = HEAP16[$165>>1]|0;
    $167 = $166&65535;
    $168 = (($167) - 1)|0;
    $24 = $168;
    $169 = $13;
    $170 = ((($169)) + 12|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = $24;
    $173 = (($171) + ($172))|0;
    $25 = $173;
    $174 = $25;
    $175 = $13;
    $176 = ((($175)) + 8|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = ($174|0)>($177|0);
    if ($178) {
     label = 23;
     break L1;
    }
    while(1) {
     $179 = $25;
     $180 = (($179) + -1)|0;
     $25 = $180;
     $181 = $13;
     $182 = ((($181)) + 12|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = ($180|0)>=($183|0);
     if (!($184)) {
      break;
     }
     $185 = $20;
     $186 = $25;
     $187 = $14;
     $188 = (($187) + ($186<<2)|0);
     HEAP32[$188>>2] = $185;
    }
    $189 = $13;
    $190 = ((($189)) + 12|0);
    $191 = HEAP32[$190>>2]|0;
    $192 = $13;
    $193 = ((($192)) + 4|0);
    $194 = HEAP32[$193>>2]|0;
    $195 = (($194) + ($191<<1)|0);
    $196 = $23;
    $197 = (($196) + 1)|0;
    $198 = $19;
    $199 = (($198) + ($197<<1)|0);
    $200 = $24;
    $201 = $200<<1;
    _memcpy(($195|0),($199|0),($201|0))|0;
    $202 = $24;
    $203 = $13;
    $204 = ((($203)) + 12|0);
    $205 = HEAP32[$204>>2]|0;
    $206 = (($205) + ($202))|0;
    HEAP32[$204>>2] = $206;
   }
  } while(0);
  $207 = $20;
  $208 = (($207) + 1)|0;
  $20 = $208;
 }
 if ((label|0) == 20) {
  $8 = 0;
  $209 = $8;
  STACKTOP = sp;return ($209|0);
 }
 else if ((label|0) == 23) {
  $8 = 0;
  $209 = $8;
  STACKTOP = sp;return ($209|0);
 }
 else if ((label|0) == 28) {
  $8 = 1;
  $209 = $8;
  STACKTOP = sp;return ($209|0);
 }
 return (0)|0;
}
function _replaceGrouping($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $31 = sp;
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $32 = $15;
 $33 = $32<<1;
 $34 = $19;
 $35 = ((($34)) + 46|0);
 $36 = (($35) + ($33<<1)|0);
 $37 = HEAP16[$36>>1]|0;
 $21 = $37;
 $38 = $15;
 $39 = $38<<1;
 $40 = (($39) + 1)|0;
 $41 = $19;
 $42 = ((($41)) + 46|0);
 $43 = (($42) + ($40<<1)|0);
 $44 = HEAP16[$43>>1]|0;
 $22 = $44;
 $24 = 0;
 $45 = $17;
 $46 = (($45) + 1)|0;
 $47 = $16;
 $48 = (($47) + ($46<<1)|0);
 $49 = HEAP16[$48>>1]|0;
 $50 = $49&65535;
 $51 = $50 << 16;
 $52 = $17;
 $53 = (($52) + 2)|0;
 $54 = $16;
 $55 = (($54) + ($53<<1)|0);
 $56 = HEAP16[$55>>1]|0;
 $57 = $56&65535;
 $58 = $57 & 255;
 $59 = $51 | $58;
 $25 = $59;
 $60 = $25;
 $61 = $11;
 $62 = ((($61)) + 31168|0);
 $63 = (($62) + ($60<<3)|0);
 $26 = $63;
 $64 = $15;
 $65 = $64<<1;
 $66 = $26;
 $67 = ((($66)) + 46|0);
 $68 = (($67) + ($65<<1)|0);
 $69 = HEAP16[$68>>1]|0;
 $27 = $69;
 $70 = $15;
 $71 = $70<<1;
 $72 = (($71) + 1)|0;
 $73 = $26;
 $74 = ((($73)) + 46|0);
 $75 = (($74) + ($72<<1)|0);
 $76 = HEAP16[$75>>1]|0;
 $28 = $76;
 $77 = $20;
 $78 = $77&65535;
 $79 = ($78|0)==(123);
 do {
  if ($79) {
   $80 = $18;
   $81 = (($80) + 1)|0;
   $23 = $81;
   while(1) {
    $82 = $23;
    $83 = $12;
    $84 = HEAP32[$83>>2]|0;
    $85 = ((($84)) + 8|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($82|0)<($86|0);
    if (!($87)) {
     break;
    }
    $88 = $23;
    $89 = $12;
    $90 = HEAP32[$89>>2]|0;
    $91 = ((($90)) + 4|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = (($92) + ($88<<1)|0);
    $94 = HEAP16[$93>>1]|0;
    $95 = $94&65535;
    $96 = $21;
    $97 = $96&65535;
    $98 = ($95|0)==($97|0);
    if ($98) {
     $99 = $24;
     $100 = (($99) + -1)|0;
     $24 = $100;
    }
    $101 = $23;
    $102 = $12;
    $103 = HEAP32[$102>>2]|0;
    $104 = ((($103)) + 4|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = (($105) + ($101<<1)|0);
    $107 = HEAP16[$106>>1]|0;
    $108 = $107&65535;
    $109 = $22;
    $110 = $109&65535;
    $111 = ($108|0)==($110|0);
    if ($111) {
     $112 = $24;
     $113 = (($112) + 1)|0;
     $24 = $113;
    }
    $114 = $24;
    $115 = ($114|0)==(1);
    if ($115) {
     break;
    }
    $116 = $23;
    $117 = (($116) + 1)|0;
    $23 = $117;
   }
   $118 = $23;
   $119 = $12;
   $120 = HEAP32[$119>>2]|0;
   $121 = ((($120)) + 8|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = ($118|0)==($122|0);
   if (!($123)) {
    $124 = $12;
    $125 = HEAP32[$124>>2]|0;
    $126 = ((($125)) + 8|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = (_getStringBuffer($127)|0);
    $29 = $128;
    $129 = $29;
    $130 = HEAP32[4358]|0;
    $131 = ((($130)) + 4|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = (($132) + ($129<<2)|0);
    $134 = HEAP32[$133>>2]|0;
    $30 = $134;
    $135 = $30;
    $136 = $12;
    $137 = HEAP32[$136>>2]|0;
    $138 = ((($137)) + 4|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $12;
    $141 = HEAP32[$140>>2]|0;
    $142 = ((($141)) + 8|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = $143<<1;
    _memcpy(($135|0),($139|0),($144|0))|0;
    $145 = $27;
    $146 = $18;
    $147 = $30;
    $148 = (($147) + ($146<<1)|0);
    HEAP16[$148>>1] = $145;
    $149 = $28;
    $150 = $23;
    $151 = $30;
    $152 = (($151) + ($150<<1)|0);
    HEAP16[$152>>1] = $149;
    $153 = $29;
    HEAP32[$31>>2] = $153;
    $154 = ((($31)) + 4|0);
    $155 = $30;
    HEAP32[$154>>2] = $155;
    $156 = ((($31)) + 8|0);
    $157 = $12;
    $158 = HEAP32[$157>>2]|0;
    $159 = ((($158)) + 8|0);
    $160 = HEAP32[$159>>2]|0;
    HEAP32[$156>>2] = $160;
    ;HEAP32[17448>>2]=HEAP32[$31>>2]|0;HEAP32[17448+4>>2]=HEAP32[$31+4>>2]|0;HEAP32[17448+8>>2]=HEAP32[$31+8>>2]|0;
    $161 = $12;
    HEAP32[$161>>2] = 17448;
    break;
   }
   $10 = 0;
   $234 = $10;
   STACKTOP = sp;return ($234|0);
  } else {
   $162 = $14;
   $163 = ($162|0)==(74);
   if ($163) {
    $164 = $19;
    $165 = ((($164)) + 46|0);
    $166 = ((($165)) + 4|0);
    $167 = HEAP16[$166>>1]|0;
    $21 = $167;
    $168 = $19;
    $169 = ((($168)) + 46|0);
    $170 = ((($169)) + 6|0);
    $171 = HEAP16[$170>>1]|0;
    $22 = $171;
    $172 = $26;
    $173 = ((($172)) + 46|0);
    $174 = ((($173)) + 4|0);
    $175 = HEAP16[$174>>1]|0;
    $27 = $175;
    $176 = $26;
    $177 = ((($176)) + 46|0);
    $178 = ((($177)) + 6|0);
    $179 = HEAP16[$178>>1]|0;
    $28 = $179;
   }
   $180 = $28;
   $181 = $13;
   $182 = ((($181)) + 12|0);
   $183 = HEAP32[$182>>2]|0;
   $184 = $13;
   $185 = ((($184)) + 4|0);
   $186 = HEAP32[$185>>2]|0;
   $187 = (($186) + ($183<<1)|0);
   HEAP16[$187>>1] = $180;
   $188 = $13;
   $189 = ((($188)) + 12|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = (($190) - 1)|0;
   $23 = $191;
   while(1) {
    $192 = $23;
    $193 = ($192|0)>=(0);
    if (!($193)) {
     break;
    }
    $194 = $23;
    $195 = $13;
    $196 = ((($195)) + 4|0);
    $197 = HEAP32[$196>>2]|0;
    $198 = (($197) + ($194<<1)|0);
    $199 = HEAP16[$198>>1]|0;
    $200 = $199&65535;
    $201 = $22;
    $202 = $201&65535;
    $203 = ($200|0)==($202|0);
    if ($203) {
     $204 = $24;
     $205 = (($204) + -1)|0;
     $24 = $205;
    }
    $206 = $23;
    $207 = $13;
    $208 = ((($207)) + 4|0);
    $209 = HEAP32[$208>>2]|0;
    $210 = (($209) + ($206<<1)|0);
    $211 = HEAP16[$210>>1]|0;
    $212 = $211&65535;
    $213 = $21;
    $214 = $213&65535;
    $215 = ($212|0)==($214|0);
    if ($215) {
     $216 = $24;
     $217 = (($216) + 1)|0;
     $24 = $217;
    }
    $218 = $24;
    $219 = ($218|0)==(1);
    if ($219) {
     break;
    }
    $220 = $23;
    $221 = (($220) + -1)|0;
    $23 = $221;
   }
   $222 = $23;
   $223 = ($222|0)<(0);
   if (!($223)) {
    $224 = $27;
    $225 = $23;
    $226 = $13;
    $227 = ((($226)) + 4|0);
    $228 = HEAP32[$227>>2]|0;
    $229 = (($228) + ($225<<1)|0);
    HEAP16[$229>>1] = $224;
    $230 = $13;
    $231 = ((($230)) + 12|0);
    $232 = HEAP32[$231>>2]|0;
    $233 = (($232) + 1)|0;
    HEAP32[$231>>2] = $233;
    break;
   }
   $10 = 0;
   $234 = $10;
   STACKTOP = sp;return ($234|0);
  }
 } while(0);
 $10 = 1;
 $234 = $10;
 STACKTOP = sp;return ($234|0);
}
function _removeGrouping($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $21 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $22 = $9;
 $23 = $22<<1;
 $24 = $11;
 $25 = ((($24)) + 46|0);
 $26 = (($25) + ($23<<1)|0);
 $27 = HEAP16[$26>>1]|0;
 $13 = $27;
 $28 = $9;
 $29 = $28<<1;
 $30 = (($29) + 1)|0;
 $31 = $11;
 $32 = ((($31)) + 46|0);
 $33 = (($32) + ($30<<1)|0);
 $34 = HEAP16[$33>>1]|0;
 $14 = $34;
 $16 = 0;
 $35 = $12;
 $36 = $35&65535;
 $37 = ($36|0)==(123);
 if ($37) {
  $38 = $10;
  $39 = (($38) + 1)|0;
  $15 = $39;
  while(1) {
   $40 = $15;
   $41 = $7;
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($42)) + 8|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($40|0)<($44|0);
   if (!($45)) {
    break;
   }
   $46 = $15;
   $47 = $7;
   $48 = HEAP32[$47>>2]|0;
   $49 = ((($48)) + 4|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($50) + ($46<<1)|0);
   $52 = HEAP16[$51>>1]|0;
   $53 = $52&65535;
   $54 = $13;
   $55 = $54&65535;
   $56 = ($53|0)==($55|0);
   if ($56) {
    $57 = $16;
    $58 = (($57) + -1)|0;
    $16 = $58;
   }
   $59 = $15;
   $60 = $7;
   $61 = HEAP32[$60>>2]|0;
   $62 = ((($61)) + 4|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($63) + ($59<<1)|0);
   $65 = HEAP16[$64>>1]|0;
   $66 = $65&65535;
   $67 = $14;
   $68 = $67&65535;
   $69 = ($66|0)==($68|0);
   if ($69) {
    $70 = $16;
    $71 = (($70) + 1)|0;
    $16 = $71;
   }
   $72 = $16;
   $73 = ($72|0)==(1);
   if ($73) {
    break;
   }
   $74 = $15;
   $75 = (($74) + 1)|0;
   $15 = $75;
  }
  $76 = $15;
  $77 = $7;
  $78 = HEAP32[$77>>2]|0;
  $79 = ((($78)) + 8|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($76|0)==($80|0);
  if ($81) {
   $6 = 0;
   $182 = $6;
   STACKTOP = sp;return ($182|0);
  }
  $82 = $7;
  $83 = HEAP32[$82>>2]|0;
  $84 = ((($83)) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (_getStringBuffer($85)|0);
  $17 = $86;
  $87 = $17;
  $88 = HEAP32[4358]|0;
  $89 = ((($88)) + 4|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (($90) + ($87<<2)|0);
  $92 = HEAP32[$91>>2]|0;
  $18 = $92;
  $19 = 0;
  $20 = 0;
  while(1) {
   $93 = $20;
   $94 = $7;
   $95 = HEAP32[$94>>2]|0;
   $96 = ((($95)) + 8|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = ($93|0)<($97|0);
   if (!($98)) {
    break;
   }
   $99 = $20;
   $100 = $15;
   $101 = ($99|0)==($100|0);
   if (!($101)) {
    $102 = $20;
    $103 = $7;
    $104 = HEAP32[$103>>2]|0;
    $105 = ((($104)) + 4|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = (($106) + ($102<<1)|0);
    $108 = HEAP16[$107>>1]|0;
    $109 = $19;
    $110 = (($109) + 1)|0;
    $19 = $110;
    $111 = $18;
    $112 = (($111) + ($109<<1)|0);
    HEAP16[$112>>1] = $108;
   }
   $113 = $20;
   $114 = (($113) + 1)|0;
   $20 = $114;
  }
  $115 = $17;
  HEAP32[$21>>2] = $115;
  $116 = ((($21)) + 4|0);
  $117 = $18;
  HEAP32[$116>>2] = $117;
  $118 = ((($21)) + 8|0);
  $119 = $19;
  HEAP32[$118>>2] = $119;
  ;HEAP32[17436>>2]=HEAP32[$21>>2]|0;HEAP32[17436+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[17436+8>>2]=HEAP32[$21+8>>2]|0;
  $120 = $7;
  HEAP32[$120>>2] = 17436;
 } else {
  $121 = $8;
  $122 = ((($121)) + 12|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = (($123) - 1)|0;
  $15 = $124;
  while(1) {
   $125 = $15;
   $126 = ($125|0)>=(0);
   if (!($126)) {
    break;
   }
   $127 = $15;
   $128 = $8;
   $129 = ((($128)) + 4|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (($130) + ($127<<1)|0);
   $132 = HEAP16[$131>>1]|0;
   $133 = $132&65535;
   $134 = $14;
   $135 = $134&65535;
   $136 = ($133|0)==($135|0);
   if ($136) {
    $137 = $16;
    $138 = (($137) + -1)|0;
    $16 = $138;
   }
   $139 = $15;
   $140 = $8;
   $141 = ((($140)) + 4|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = (($142) + ($139<<1)|0);
   $144 = HEAP16[$143>>1]|0;
   $145 = $144&65535;
   $146 = $13;
   $147 = $146&65535;
   $148 = ($145|0)==($147|0);
   if ($148) {
    $149 = $16;
    $150 = (($149) + 1)|0;
    $16 = $150;
   }
   $151 = $16;
   $152 = ($151|0)==(1);
   if ($152) {
    break;
   }
   $153 = $15;
   $154 = (($153) + -1)|0;
   $15 = $154;
  }
  $155 = $15;
  $156 = ($155|0)<(0);
  if ($156) {
   $6 = 0;
   $182 = $6;
   STACKTOP = sp;return ($182|0);
  }
  $157 = $15;
  $158 = (($157) + 1)|0;
  $15 = $158;
  while(1) {
   $159 = $15;
   $160 = $8;
   $161 = ((($160)) + 12|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = ($159|0)<($162|0);
   if (!($163)) {
    break;
   }
   $164 = $15;
   $165 = $8;
   $166 = ((($165)) + 4|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = (($167) + ($164<<1)|0);
   $169 = HEAP16[$168>>1]|0;
   $170 = $15;
   $171 = (($170) - 1)|0;
   $172 = $8;
   $173 = ((($172)) + 4|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = (($174) + ($171<<1)|0);
   HEAP16[$175>>1] = $169;
   $176 = $15;
   $177 = (($176) + 1)|0;
   $15 = $177;
  }
  $178 = $8;
  $179 = ((($178)) + 12|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = (($180) + -1)|0;
  HEAP32[$179>>2] = $181;
 }
 $6 = 1;
 $182 = $6;
 STACKTOP = sp;return ($182|0);
}
function _putCharacter($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $22 = $10;
 $23 = $11;
 $24 = (_getChar_2($22,$23)|0);
 $20 = $24;
 $25 = $20;
 $26 = ((($25)) + 48|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0);
 if ($28) {
  $29 = $20;
  $30 = ((($29)) + 48|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $11;
  $33 = ((($32)) + 31168|0);
  $34 = (($33) + ($31<<3)|0);
  $20 = $34;
 }
 $35 = $20;
 $36 = ((($35)) + 12|0);
 $37 = HEAP32[$36>>2]|0;
 $19 = $37;
 $38 = $19;
 $39 = ($38|0)!=(0);
 if ($39) {
  $40 = $19;
  $41 = $11;
  $42 = ((($41)) + 31168|0);
  $43 = (($42) + ($40<<3)|0);
  $21 = $43;
  $44 = $21;
  $45 = ((($44)) + 46|0);
  $46 = ((($45)) + 2|0);
  $47 = $21;
  $48 = ((($47)) + 44|0);
  $49 = HEAP16[$48>>1]|0;
  $50 = $49 << 16 >> 16;
  $51 = $12;
  $52 = $13;
  $53 = $14;
  $54 = $15;
  $55 = $16;
  $56 = $17;
  $57 = (_for_updatePositions($46,1,$50,0,$51,$52,$53,$54,$55,$56)|0);
  $9 = $57;
  $68 = $9;
  STACKTOP = sp;return ($68|0);
 } else {
  $58 = $10;
  $59 = $11;
  $60 = $12;
  $61 = $13;
  $62 = $14;
  $63 = $15;
  $64 = $16;
  $65 = $17;
  $66 = $18;
  $67 = (_undefinedCharacter($58,$59,$60,$61,$62,$63,$64,$65,$66)|0);
  $9 = $67;
  $68 = $9;
  STACKTOP = sp;return ($68|0);
 }
 return (0)|0;
}
function _for_updatePositions($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $22 = $17;
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $13;
 $26 = (($24) + ($25))|0;
 $27 = $17;
 $28 = ((($27)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($26|0)>($29|0);
 if (!($30)) {
  $31 = $15;
  $32 = $12;
  $33 = (($31) + ($32))|0;
  $34 = $16;
  $35 = ((($34)) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($33|0)>($36|0);
  if (!($37)) {
   $38 = $17;
   $39 = ((($38)) + 12|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $17;
   $42 = ((($41)) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (($43) + ($40<<1)|0);
   $45 = $11;
   $46 = $13;
   $47 = $46<<1;
   _memcpy(($44|0),($45|0),($47|0))|0;
   $48 = $20;
   $49 = HEAP32[$48>>2]|0;
   $50 = ($49|0)!=(0);
   do {
    if ($50) {
     $90 = $20;
     $91 = HEAP32[$90>>2]|0;
     $92 = ($91|0)==(2);
     if ($92) {
      $93 = $19;
      $94 = HEAP32[$93>>2]|0;
      $95 = $15;
      $96 = ($94|0)==($95|0);
      if ($96) {
       $97 = $17;
       $98 = ((($97)) + 12|0);
       $99 = HEAP32[$98>>2]|0;
       $100 = $19;
       HEAP32[$100>>2] = $99;
      }
     }
    } else {
     $51 = $19;
     $52 = HEAP32[$51>>2]|0;
     $53 = $15;
     $54 = ($52|0)>=($53|0);
     if ($54) {
      $55 = $19;
      $56 = HEAP32[$55>>2]|0;
      $57 = $15;
      $58 = $12;
      $59 = (($57) + ($58))|0;
      $60 = ($56|0)<($59|0);
      if ($60) {
       $61 = $17;
       $62 = ((($61)) + 12|0);
       $63 = HEAP32[$62>>2]|0;
       $64 = $19;
       HEAP32[$64>>2] = $63;
       $65 = $20;
       HEAP32[$65>>2] = 1;
       break;
      }
     }
     $66 = $19;
     $67 = HEAP32[$66>>2]|0;
     $68 = $16;
     $69 = ((($68)) + 4|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = (($70) + ($67<<1)|0);
     $72 = HEAP16[$71>>1]|0;
     $73 = $72&65535;
     $74 = ($73|0)==(0);
     if ($74) {
      $75 = $19;
      $76 = HEAP32[$75>>2]|0;
      $77 = $15;
      $78 = $12;
      $79 = (($77) + ($78))|0;
      $80 = ($76|0)==($79|0);
      if ($80) {
       $81 = $17;
       $82 = ((($81)) + 12|0);
       $83 = HEAP32[$82>>2]|0;
       $84 = $13;
       $85 = (($84|0) / 2)&-1;
       $86 = (($83) + ($85))|0;
       $87 = (($86) + 1)|0;
       $88 = $19;
       HEAP32[$88>>2] = $87;
       $89 = $20;
       HEAP32[$89>>2] = 1;
      }
     }
    }
   } while(0);
   $21 = 0;
   while(1) {
    $101 = $21;
    $102 = $13;
    $103 = ($101|0)<($102|0);
    if (!($103)) {
     break;
    }
    $104 = $15;
    $105 = $14;
    $106 = (($104) + ($105))|0;
    $107 = $17;
    $108 = ((($107)) + 12|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = $21;
    $111 = (($109) + ($110))|0;
    $112 = $18;
    $113 = (($112) + ($111<<2)|0);
    HEAP32[$113>>2] = $106;
    $114 = $21;
    $115 = (($114) + 1)|0;
    $21 = $115;
   }
   $116 = $13;
   $117 = $17;
   $118 = ((($117)) + 12|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = (($119) + ($116))|0;
   HEAP32[$118>>2] = $120;
   $10 = 1;
   $121 = $10;
   STACKTOP = sp;return ($121|0);
  }
 }
 $10 = 0;
 $121 = $10;
 STACKTOP = sp;return ($121|0);
}
function _undefinedCharacter($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $$alloca_mul = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $10 = sp + 64|0;
 HEAP16[$10>>1] = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $26 = $11;
 $27 = ((($26)) + 544|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)!=(0);
 if ($29) {
  $30 = $11;
  $31 = ((($30)) + 544|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $11;
  $34 = ((($33)) + 31168|0);
  $35 = (($34) + ($32<<3)|0);
  $19 = $35;
  $36 = $19;
  $37 = ((($36)) + 42|0);
  $38 = HEAP16[$37>>1]|0;
  $39 = $38 << 16 >> 16;
  $40 = $19;
  $41 = ((($40)) + 46|0);
  $42 = (($41) + ($39<<1)|0);
  $43 = $19;
  $44 = ((($43)) + 42|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = $45 << 16 >> 16;
  $47 = $19;
  $48 = ((($47)) + 44|0);
  $49 = HEAP16[$48>>1]|0;
  $50 = $49 << 16 >> 16;
  $51 = $12;
  $52 = $13;
  $53 = $14;
  $54 = $15;
  $55 = $16;
  $56 = $17;
  $57 = (_for_updatePositions($42,$46,$50,0,$51,$52,$53,$54,$55,$56)|0);
  $9 = $57;
  $136 = $9;
  STACKTOP = sp;return ($136|0);
 }
 $58 = $18;
 $59 = $58 & 128;
 $60 = ($59|0)!=(0);
 if ($60) {
  $62 = 32848;
 } else {
  $61 = (__lou_showString($10,1,1)|0);
  $62 = $61;
 }
 $20 = $62;
 $63 = $20;
 $64 = (_strlen($63)|0);
 $21 = $64;
 $65 = $21;
 $66 = ($65|0)==(0);
 $67 = $21;
 $68 = $66 ? 1 : $67;
 $69 = (_llvm_stacksave()|0);
 $22 = $69;
 $$alloca_mul = $68<<1;
 $70 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $23 = 0;
 while(1) {
  $71 = $23;
  $72 = $21;
  $73 = ($71>>>0)<($72>>>0);
  if (!($73)) {
   break;
  }
  $74 = $23;
  $75 = (($70) + ($74<<1)|0);
  HEAP16[$75>>1] = 0;
  $76 = $23;
  $77 = $20;
  $78 = (($77) + ($76)|0);
  $79 = HEAP8[$78>>0]|0;
  $80 = $79 << 24 >> 24;
  $81 = $11;
  $82 = (_getChar_2($80,$81)|0);
  $83 = ((($82)) + 16|0);
  $84 = HEAP32[$83>>2]|0;
  $24 = $84;
  while(1) {
   $85 = $24;
   $86 = ($85|0)!=(0);
   if (!($86)) {
    break;
   }
   $87 = $24;
   $88 = $11;
   $89 = ((($88)) + 31168|0);
   $90 = (($89) + ($87<<3)|0);
   $25 = $90;
   $91 = $25;
   $92 = ((($91)) + 36|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ($93>>>0)>=(61);
   if ($94) {
    $95 = $25;
    $96 = ((($95)) + 36|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97>>>0)<(70);
    if ($98) {
     $99 = $25;
     $100 = ((($99)) + 44|0);
     $101 = HEAP16[$100>>1]|0;
     $102 = $101 << 16 >> 16;
     $103 = ($102|0)==(1);
     if ($103) {
      label = 12;
      break;
     }
    }
   }
   $110 = $25;
   $111 = ((($110)) + 8|0);
   $112 = HEAP32[$111>>2]|0;
   $24 = $112;
  }
  if ((label|0) == 12) {
   label = 0;
   $104 = $25;
   $105 = ((($104)) + 46|0);
   $106 = ((($105)) + 2|0);
   $107 = HEAP16[$106>>1]|0;
   $108 = $23;
   $109 = (($70) + ($108<<1)|0);
   HEAP16[$109>>1] = $107;
  }
  $113 = $23;
  $114 = (($70) + ($113<<1)|0);
  $115 = HEAP16[$114>>1]|0;
  $116 = ($115<<16>>16)!=(0);
  if (!($116)) {
   $117 = $23;
   $118 = $20;
   $119 = (($118) + ($117)|0);
   $120 = HEAP8[$119>>0]|0;
   $121 = $120 << 24 >> 24;
   $122 = (__lou_charToFallbackDots($121)|0);
   $123 = $23;
   $124 = (($70) + ($123<<1)|0);
   HEAP16[$124>>1] = $122;
  }
  $125 = $23;
  $126 = (($125) + 1)|0;
  $23 = $126;
 }
 $127 = $21;
 $128 = $12;
 $129 = $13;
 $130 = $14;
 $131 = $15;
 $132 = $16;
 $133 = $17;
 $134 = (_for_updatePositions($70,1,$127,0,$128,$129,$130,$131,$132,$133)|0);
 $9 = $134;
 $135 = $22;
 _llvm_stackrestore(($135|0));
 $136 = $9;
 STACKTOP = sp;return ($136|0);
}
function _findForPassRule($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $14 = $0;
 $15 = $1;
 $16 = $2;
 $17 = $3;
 $18 = $4;
 $19 = $5;
 $20 = $6;
 $21 = $7;
 $22 = $8;
 $23 = $9;
 $24 = $10;
 $25 = $11;
 $26 = $12;
 $31 = $20;
 $32 = HEAP32[$31>>2]|0;
 $27 = $32;
 $33 = $19;
 $34 = HEAP32[$33>>2]|0;
 $28 = $34;
 $35 = $18;
 $36 = HEAP32[$35>>2]|0;
 $29 = $36;
 $37 = $16;
 $38 = $14;
 $39 = ((($38)) + 22144|0);
 $40 = (($39) + ($37<<2)|0);
 $41 = HEAP32[$40>>2]|0;
 $30 = $41;
 $42 = $20;
 HEAP32[$42>>2] = 0;
 while(1) {
  $43 = $30;
  $44 = ($43|0)!=(0);
  if (!($44)) {
   label = 6;
   break;
  }
  $45 = $30;
  $46 = $14;
  $47 = ((($46)) + 31168|0);
  $48 = (($47) + ($45<<3)|0);
  $49 = $19;
  HEAP32[$49>>2] = $48;
  $50 = $19;
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($51)) + 36|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $18;
  HEAP32[$54>>2] = $53;
  $55 = $14;
  $56 = $15;
  $57 = $17;
  $58 = $18;
  $59 = HEAP32[$58>>2]|0;
  $60 = $19;
  $61 = HEAP32[$60>>2]|0;
  $62 = $21;
  $63 = $22;
  $64 = $23;
  $65 = $24;
  $66 = $25;
  $67 = $26;
  $68 = (_passDoTest($55,$56,$57,$59,$61,$62,$63,$64,$65,$66,$67)|0);
  $69 = ($68|0)!=(0);
  if ($69) {
   label = 4;
   break;
  }
  $70 = $19;
  $71 = HEAP32[$70>>2]|0;
  $72 = ((($71)) + 8|0);
  $73 = HEAP32[$72>>2]|0;
  $30 = $73;
 }
 if ((label|0) == 4) {
  $13 = 1;
  $80 = $13;
  STACKTOP = sp;return ($80|0);
 }
 else if ((label|0) == 6) {
  $74 = $27;
  $75 = $20;
  HEAP32[$75>>2] = $74;
  $76 = $28;
  $77 = $19;
  HEAP32[$77>>2] = $76;
  $78 = $29;
  $79 = $18;
  HEAP32[$79>>2] = $78;
  $13 = 0;
  $80 = $13;
  STACKTOP = sp;return ($80|0);
 }
 return (0)|0;
}
function _passDoTest($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0;
 var $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0;
 var $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0;
 var $537 = 0, $538 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $13 = sp + 104|0;
 $23 = sp + 64|0;
 $24 = sp + 60|0;
 $29 = sp;
 $34 = sp + 24|0;
 $35 = sp + 8|0;
 $12 = $0;
 HEAP32[$13>>2] = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $26 = 0;
 $27 = 0;
 $28 = 0;
 $36 = $29;
 $37 = $36;
 HEAP32[$37>>2] = 0;
 $38 = (($36) + 4)|0;
 $39 = $38;
 HEAP32[$39>>2] = 0;
 $40 = HEAP32[$13>>2]|0;
 $30 = $40;
 $41 = HEAP32[$13>>2]|0;
 $31 = $41;
 $32 = -1;
 $33 = -1;
 $42 = $21;
 HEAP32[$42>>2] = 0;
 $43 = $16;
 $44 = ((($43)) + 42|0);
 $45 = HEAP16[$44>>1]|0;
 $46 = $45 << 16 >> 16;
 $47 = $16;
 $48 = ((($47)) + 46|0);
 $49 = (($48) + ($46<<1)|0);
 $50 = $18;
 HEAP32[$50>>2] = $49;
 $51 = $19;
 HEAP32[$51>>2] = 0;
 $52 = $15;
 $53 = ($52|0)==(74);
 $54 = $15;
 $55 = ($54|0)==(75);
 $or$cond = $53 | $55;
 $56 = $17;
 if ($or$cond) {
  HEAP32[$56>>2] = 0;
 } else {
  HEAP32[$56>>2] = 1;
 }
 L4: while(1) {
  $57 = $19;
  $58 = HEAP32[$57>>2]|0;
  $59 = $16;
  $60 = ((($59)) + 44|0);
  $61 = HEAP16[$60>>1]|0;
  $62 = $61 << 16 >> 16;
  $63 = ($58|0)<($62|0);
  if (!($63)) {
   label = 74;
   break;
  }
  HEAP32[$34>>2] = 1;
  $64 = HEAP32[$13>>2]|0;
  $65 = $14;
  $66 = ((($65)) + 8|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = ($64|0)>($67|0);
  if ($68) {
   label = 6;
   break;
  }
  $69 = $19;
  $70 = HEAP32[$69>>2]|0;
  $71 = $18;
  $72 = HEAP32[$71>>2]|0;
  $73 = (($72) + ($70<<1)|0);
  $74 = HEAP16[$73>>1]|0;
  $75 = $74&65535;
  do {
   switch ($75|0) {
   case 47:  {
    label = 59;
    break L4;
    break;
   }
   case 32:  {
    break L4;
    break;
   }
   case 96:  {
    $76 = HEAP32[$13>>2]|0;
    $77 = ($76|0)!=(0);
    if ($77) {
     HEAP32[$34>>2] = 0;
    }
    $78 = $19;
    $79 = HEAP32[$78>>2]|0;
    $80 = (($79) + 1)|0;
    HEAP32[$78>>2] = $80;
    break;
   }
   case 126:  {
    $81 = HEAP32[$13>>2]|0;
    $82 = $14;
    $83 = ((($82)) + 8|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($81|0)!=($84|0);
    if ($85) {
     HEAP32[$34>>2] = 0;
    }
    $86 = $19;
    $87 = HEAP32[$86>>2]|0;
    $88 = (($87) + 1)|0;
    HEAP32[$86>>2] = $88;
    break;
   }
   case 95:  {
    $89 = $19;
    $90 = HEAP32[$89>>2]|0;
    $91 = (($90) + 1)|0;
    $92 = $18;
    $93 = HEAP32[$92>>2]|0;
    $94 = (($93) + ($91<<1)|0);
    $95 = HEAP16[$94>>1]|0;
    $96 = $95&65535;
    $97 = HEAP32[$13>>2]|0;
    $98 = (($97) - ($96))|0;
    HEAP32[$13>>2] = $98;
    $99 = HEAP32[$13>>2]|0;
    $100 = ($99|0)<(0);
    if ($100) {
     HEAP32[$24>>2] = 0;
     HEAP32[$34>>2] = 0;
    }
    $101 = $19;
    $102 = HEAP32[$101>>2]|0;
    $103 = (($102) + 2)|0;
    HEAP32[$101>>2] = $103;
    break;
   }
   case 33:  {
    $104 = $26;
    $105 = ($104|0)!=(0);
    $106 = $105 ^ 1;
    $107 = $106&1;
    $26 = $107;
    $108 = $19;
    $109 = HEAP32[$108>>2]|0;
    $110 = (($109) + 1)|0;
    HEAP32[$108>>2] = $110;
    continue L4;
    break;
   }
   case 64: case 34:  {
    $111 = $14;
    $112 = HEAP32[$13>>2]|0;
    $113 = $18;
    $114 = HEAP32[$113>>2]|0;
    $115 = $19;
    $116 = HEAP32[$115>>2]|0;
    $117 = (_matchCurrentInput($111,$112,$114,$116)|0);
    HEAP32[$34>>2] = $117;
    $118 = $19;
    $119 = HEAP32[$118>>2]|0;
    $120 = (($119) + 1)|0;
    $121 = $18;
    $122 = HEAP32[$121>>2]|0;
    $123 = (($122) + ($120<<1)|0);
    $124 = HEAP16[$123>>1]|0;
    $125 = $124&65535;
    $126 = HEAP32[$13>>2]|0;
    $127 = (($126) + ($125))|0;
    HEAP32[$13>>2] = $127;
    $128 = $19;
    $129 = HEAP32[$128>>2]|0;
    $130 = (($129) + 1)|0;
    $131 = $18;
    $132 = HEAP32[$131>>2]|0;
    $133 = (($132) + ($130<<1)|0);
    $134 = HEAP16[$133>>1]|0;
    $135 = $134&65535;
    $136 = (($135) + 2)|0;
    $137 = $19;
    $138 = HEAP32[$137>>2]|0;
    $139 = (($138) + ($136))|0;
    HEAP32[$137>>2] = $139;
    break;
   }
   case 91:  {
    $140 = HEAP32[$13>>2]|0;
    $32 = $140;
    $141 = $19;
    $142 = HEAP32[$141>>2]|0;
    $143 = (($142) + 1)|0;
    HEAP32[$141>>2] = $143;
    break;
   }
   case 93:  {
    $144 = HEAP32[$13>>2]|0;
    $33 = $144;
    $145 = $19;
    $146 = HEAP32[$145>>2]|0;
    $147 = (($146) + 1)|0;
    HEAP32[$145>>2] = $147;
    break;
   }
   case 36:  {
    $148 = $19;
    $149 = HEAP32[$148>>2]|0;
    $150 = (($149) + 1)|0;
    $151 = $18;
    $152 = HEAP32[$151>>2]|0;
    $153 = (($152) + ($150<<1)|0);
    $154 = HEAP16[$153>>1]|0;
    $155 = $154&65535;
    $156 = $29;
    $157 = $156;
    HEAP32[$157>>2] = $155;
    $158 = (($156) + 4)|0;
    $159 = $158;
    HEAP32[$159>>2] = 0;
    $160 = $29;
    $161 = $160;
    $162 = HEAP32[$161>>2]|0;
    $163 = (($160) + 4)|0;
    $164 = $163;
    $165 = HEAP32[$164>>2]|0;
    $166 = (_bitshift64Shl(($162|0),($165|0),16)|0);
    $167 = tempRet0;
    $168 = $29;
    $169 = $168;
    HEAP32[$169>>2] = $166;
    $170 = (($168) + 4)|0;
    $171 = $170;
    HEAP32[$171>>2] = $167;
    $172 = $19;
    $173 = HEAP32[$172>>2]|0;
    $174 = (($173) + 2)|0;
    $175 = $18;
    $176 = HEAP32[$175>>2]|0;
    $177 = (($176) + ($174<<1)|0);
    $178 = HEAP16[$177>>1]|0;
    $179 = $178&65535;
    $180 = $29;
    $181 = $180;
    $182 = HEAP32[$181>>2]|0;
    $183 = (($180) + 4)|0;
    $184 = $183;
    $185 = HEAP32[$184>>2]|0;
    $186 = $182 | $179;
    $187 = $29;
    $188 = $187;
    HEAP32[$188>>2] = $186;
    $189 = (($187) + 4)|0;
    $190 = $189;
    HEAP32[$190>>2] = $185;
    $191 = $29;
    $192 = $191;
    $193 = HEAP32[$192>>2]|0;
    $194 = (($191) + 4)|0;
    $195 = $194;
    $196 = HEAP32[$195>>2]|0;
    $197 = (_bitshift64Shl(($193|0),($196|0),16)|0);
    $198 = tempRet0;
    $199 = $29;
    $200 = $199;
    HEAP32[$200>>2] = $197;
    $201 = (($199) + 4)|0;
    $202 = $201;
    HEAP32[$202>>2] = $198;
    $203 = $19;
    $204 = HEAP32[$203>>2]|0;
    $205 = (($204) + 3)|0;
    $206 = $18;
    $207 = HEAP32[$206>>2]|0;
    $208 = (($207) + ($205<<1)|0);
    $209 = HEAP16[$208>>1]|0;
    $210 = $209&65535;
    $211 = $29;
    $212 = $211;
    $213 = HEAP32[$212>>2]|0;
    $214 = (($211) + 4)|0;
    $215 = $214;
    $216 = HEAP32[$215>>2]|0;
    $217 = $213 | $210;
    $218 = $29;
    $219 = $218;
    HEAP32[$219>>2] = $217;
    $220 = (($218) + 4)|0;
    $221 = $220;
    HEAP32[$221>>2] = $216;
    $222 = $29;
    $223 = $222;
    $224 = HEAP32[$223>>2]|0;
    $225 = (($222) + 4)|0;
    $226 = $225;
    $227 = HEAP32[$226>>2]|0;
    $228 = (_bitshift64Shl(($224|0),($227|0),16)|0);
    $229 = tempRet0;
    $230 = $29;
    $231 = $230;
    HEAP32[$231>>2] = $228;
    $232 = (($230) + 4)|0;
    $233 = $232;
    HEAP32[$233>>2] = $229;
    $234 = $19;
    $235 = HEAP32[$234>>2]|0;
    $236 = (($235) + 4)|0;
    $237 = $18;
    $238 = HEAP32[$237>>2]|0;
    $239 = (($238) + ($236<<1)|0);
    $240 = HEAP16[$239>>1]|0;
    $241 = $240&65535;
    $242 = $29;
    $243 = $242;
    $244 = HEAP32[$243>>2]|0;
    $245 = (($242) + 4)|0;
    $246 = $245;
    $247 = HEAP32[$246>>2]|0;
    $248 = $244 | $241;
    $249 = $29;
    $250 = $249;
    HEAP32[$250>>2] = $248;
    $251 = (($249) + 4)|0;
    $252 = $251;
    HEAP32[$252>>2] = $247;
    $25 = 0;
    while(1) {
     $253 = $25;
     $254 = $19;
     $255 = HEAP32[$254>>2]|0;
     $256 = (($255) + 5)|0;
     $257 = $18;
     $258 = HEAP32[$257>>2]|0;
     $259 = (($258) + ($256<<1)|0);
     $260 = HEAP16[$259>>1]|0;
     $261 = $260&65535;
     $262 = ($253|0)<($261|0);
     if (!($262)) {
      break;
     }
     $263 = HEAP32[$13>>2]|0;
     $264 = $14;
     $265 = ((($264)) + 8|0);
     $266 = HEAP32[$265>>2]|0;
     $267 = ($263|0)>=($266|0);
     if ($267) {
      label = 24;
      break;
     }
     $268 = HEAP32[$13>>2]|0;
     $269 = $14;
     $270 = ((($269)) + 4|0);
     $271 = HEAP32[$270>>2]|0;
     $272 = (($271) + ($268<<1)|0);
     $273 = HEAP16[$272>>1]|0;
     $274 = $273&65535;
     $275 = ($274|0)==(65535);
     if ($275) {
      label = 26;
      break;
     }
     $276 = $17;
     $277 = HEAP32[$276>>2]|0;
     $278 = ($277|0)!=(0);
     $279 = HEAP32[$13>>2]|0;
     $280 = $14;
     $281 = ((($280)) + 4|0);
     $282 = HEAP32[$281>>2]|0;
     $283 = (($282) + ($279<<1)|0);
     $284 = HEAP16[$283>>1]|0;
     $285 = $12;
     if ($278) {
      $286 = (_getDots_341($284,$285)|0);
      $289 = $286;
     } else {
      $287 = (_getChar_2($284,$285)|0);
      $289 = $287;
     }
     $288 = ((($289)) + 24|0);
     $290 = $288;
     $291 = $290;
     $292 = HEAP32[$291>>2]|0;
     $293 = (($290) + 4)|0;
     $294 = $293;
     $295 = HEAP32[$294>>2]|0;
     $296 = $29;
     $297 = $296;
     $298 = HEAP32[$297>>2]|0;
     $299 = (($296) + 4)|0;
     $300 = $299;
     $301 = HEAP32[$300>>2]|0;
     $302 = $292 & $298;
     $303 = $295 & $301;
     $304 = ($302|0)!=(0);
     $305 = ($303|0)!=(0);
     $306 = $304 | $305;
     $307 = $26;
     $308 = ($307|0)!=(0);
     if ($306) {
      if ($308) {
       label = 34;
       break;
      }
     } else {
      if (!($308)) {
       label = 32;
       break;
      }
     }
     $309 = HEAP32[$13>>2]|0;
     $310 = (($309) + 1)|0;
     HEAP32[$13>>2] = $310;
     $311 = $25;
     $312 = (($311) + 1)|0;
     $25 = $312;
    }
    if ((label|0) == 24) {
     label = 0;
     HEAP32[$34>>2] = 0;
    }
    else if ((label|0) == 26) {
     label = 0;
     HEAP32[$34>>2] = 0;
    }
    else if ((label|0) == 32) {
     label = 0;
     HEAP32[$34>>2] = 0;
    }
    else if ((label|0) == 34) {
     label = 0;
     HEAP32[$34>>2] = 0;
    }
    $313 = HEAP32[$34>>2]|0;
    $314 = ($313|0)!=(0);
    L46: do {
     if ($314) {
      $315 = $19;
      $316 = HEAP32[$315>>2]|0;
      $317 = (($316) + 5)|0;
      $318 = $18;
      $319 = HEAP32[$318>>2]|0;
      $320 = (($319) + ($317<<1)|0);
      $321 = HEAP16[$320>>1]|0;
      $322 = $321&65535;
      $25 = $322;
      while(1) {
       $323 = $25;
       $324 = $19;
       $325 = HEAP32[$324>>2]|0;
       $326 = (($325) + 6)|0;
       $327 = $18;
       $328 = HEAP32[$327>>2]|0;
       $329 = (($328) + ($326<<1)|0);
       $330 = HEAP16[$329>>1]|0;
       $331 = $330&65535;
       $332 = ($323|0)<($331|0);
       if (!($332)) {
        break L46;
       }
       $333 = HEAP32[$13>>2]|0;
       $334 = $14;
       $335 = ((($334)) + 8|0);
       $336 = HEAP32[$335>>2]|0;
       $337 = ($333|0)<($336|0);
       if (!($337)) {
        break L46;
       }
       $338 = HEAP32[$13>>2]|0;
       $339 = $14;
       $340 = ((($339)) + 4|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = (($341) + ($338<<1)|0);
       $343 = HEAP16[$342>>1]|0;
       $344 = $343&65535;
       $345 = ($344|0)==(65535);
       if ($345) {
        break;
       }
       $346 = $17;
       $347 = HEAP32[$346>>2]|0;
       $348 = ($347|0)!=(0);
       $349 = HEAP32[$13>>2]|0;
       $350 = $14;
       $351 = ((($350)) + 4|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = (($352) + ($349<<1)|0);
       $354 = HEAP16[$353>>1]|0;
       $355 = $12;
       if ($348) {
        $356 = (_getDots_341($354,$355)|0);
        $359 = $356;
       } else {
        $357 = (_getChar_2($354,$355)|0);
        $359 = $357;
       }
       $358 = ((($359)) + 24|0);
       $360 = $358;
       $361 = $360;
       $362 = HEAP32[$361>>2]|0;
       $363 = (($360) + 4)|0;
       $364 = $363;
       $365 = HEAP32[$364>>2]|0;
       $366 = $29;
       $367 = $366;
       $368 = HEAP32[$367>>2]|0;
       $369 = (($366) + 4)|0;
       $370 = $369;
       $371 = HEAP32[$370>>2]|0;
       $372 = $362 & $368;
       $373 = $365 & $371;
       $374 = ($372|0)!=(0);
       $375 = ($373|0)!=(0);
       $376 = $374 | $375;
       $377 = $26;
       $378 = ($377|0)!=(0);
       if ($376) {
        if ($378) {
         break L46;
        }
       } else {
        if (!($378)) {
         break L46;
        }
       }
       $379 = HEAP32[$13>>2]|0;
       $380 = (($379) + 1)|0;
       HEAP32[$13>>2] = $380;
       $381 = $25;
       $382 = (($381) + 1)|0;
       $25 = $382;
      }
      HEAP32[$34>>2] = 0;
     }
    } while(0);
    $26 = 0;
    $383 = $19;
    $384 = HEAP32[$383>>2]|0;
    $385 = (($384) + 7)|0;
    HEAP32[$383>>2] = $385;
    break;
   }
   case 125: case 123:  {
    $386 = $19;
    $387 = HEAP32[$386>>2]|0;
    $388 = (($387) + 1)|0;
    $389 = $18;
    $390 = HEAP32[$389>>2]|0;
    $391 = (($390) + ($388<<1)|0);
    $392 = HEAP16[$391>>1]|0;
    $393 = $392&65535;
    $394 = $393 << 16;
    $395 = $19;
    $396 = HEAP32[$395>>2]|0;
    $397 = (($396) + 2)|0;
    $398 = $18;
    $399 = HEAP32[$398>>2]|0;
    $400 = (($399) + ($397<<1)|0);
    $401 = HEAP16[$400>>1]|0;
    $402 = $401&65535;
    $403 = $394 | $402;
    $27 = $403;
    $404 = $27;
    $405 = $12;
    $406 = ((($405)) + 31168|0);
    $407 = (($406) + ($404<<3)|0);
    $28 = $407;
    $408 = $19;
    $409 = HEAP32[$408>>2]|0;
    $410 = ($409|0)==(0);
    if ($410) {
     label = 53;
    } else {
     $411 = $19;
     $412 = HEAP32[$411>>2]|0;
     $413 = ($412|0)>(0);
     if ($413) {
      $414 = $19;
      $415 = HEAP32[$414>>2]|0;
      $416 = (($415) - 1)|0;
      $417 = $18;
      $418 = HEAP32[$417>>2]|0;
      $419 = (($418) + ($416<<1)|0);
      $420 = HEAP16[$419>>1]|0;
      $421 = $420&65535;
      $422 = ($421|0)==(91);
      if ($422) {
       label = 53;
      }
     }
    }
    if ((label|0) == 53) {
     label = 0;
     $423 = $28;
     $424 = $21;
     HEAP32[$424>>2] = $423;
     $425 = $19;
     $426 = HEAP32[$425>>2]|0;
     $427 = $18;
     $428 = HEAP32[$427>>2]|0;
     $429 = (($428) + ($426<<1)|0);
     $430 = HEAP16[$429>>1]|0;
     $431 = $22;
     HEAP16[$431>>1] = $430;
    }
    $432 = $19;
    $433 = HEAP32[$432>>2]|0;
    $434 = $18;
    $435 = HEAP32[$434>>2]|0;
    $436 = (($435) + ($433<<1)|0);
    $437 = HEAP16[$436>>1]|0;
    $438 = $437&65535;
    $439 = ($438|0)==(123);
    $440 = HEAP32[$13>>2]|0;
    $441 = $14;
    $442 = ((($441)) + 4|0);
    $443 = HEAP32[$442>>2]|0;
    $444 = (($443) + ($440<<1)|0);
    $445 = HEAP16[$444>>1]|0;
    $446 = $445&65535;
    $447 = $17;
    $448 = HEAP32[$447>>2]|0;
    $449 = $448<<1;
    if ($439) {
     $450 = $28;
     $451 = ((($450)) + 46|0);
     $452 = (($451) + ($449<<1)|0);
     $453 = HEAP16[$452>>1]|0;
     $454 = $453&65535;
     $455 = ($446|0)==($454|0);
     $456 = $455 ? 1 : 0;
     HEAP32[$34>>2] = $456;
    } else {
     $457 = (($449) + 1)|0;
     $458 = $28;
     $459 = ((($458)) + 46|0);
     $460 = (($459) + ($457<<1)|0);
     $461 = HEAP16[$460>>1]|0;
     $462 = $461&65535;
     $463 = ($446|0)==($462|0);
     $464 = $463 ? 1 : 0;
     HEAP32[$34>>2] = $464;
    }
    $465 = HEAP32[$13>>2]|0;
    $466 = (($465) + 1)|0;
    HEAP32[$13>>2] = $466;
    $467 = $19;
    $468 = HEAP32[$467>>2]|0;
    $469 = (($468) + 3)|0;
    HEAP32[$467>>2] = $469;
    break;
   }
   case 37:  {
    $470 = $19;
    $471 = HEAP32[$470>>2]|0;
    $472 = $12;
    $473 = $14;
    $474 = $18;
    $475 = HEAP32[$474>>2]|0;
    $476 = (_swapTest($471,$13,$472,$473,$475)|0);
    HEAP32[$34>>2] = $476;
    $477 = $19;
    $478 = HEAP32[$477>>2]|0;
    $479 = (($478) + 5)|0;
    HEAP32[$477>>2] = $479;
    break;
   }
   default: {
    $525 = $18;
    $526 = HEAP32[$525>>2]|0;
    $527 = $19;
    $528 = (__lou_handlePassVariableTest($526,$527,$34)|0);
    $529 = ($528|0)!=(0);
    if (!($529)) {
     label = 69;
     break L4;
    }
   }
   }
  } while(0);
  $530 = $26;
  $531 = ($530|0)!=(0);
  $532 = HEAP32[$34>>2]|0;
  $533 = ($532|0)!=(0);
  $or$cond7 = $531 | $533;
  if (!($or$cond7)) {
   label = 72;
   break;
  }
  $534 = $26;
  $535 = ($534|0)!=(0);
  $536 = HEAP32[$34>>2]|0;
  $537 = ($536|0)!=(0);
  $or$cond9 = $535 & $537;
  if ($or$cond9) {
   label = 72;
   break;
  }
  $26 = 0;
 }
 do {
  if ((label|0) == 6) {
   $11 = 0;
   $538 = $11;
   STACKTOP = sp;return ($538|0);
  }
  else if ((label|0) == 59) {
   $480 = $12;
   $481 = $14;
   $482 = $16;
   $483 = $17;
   $484 = HEAP32[$483>>2]|0;
   $485 = HEAP32[$13>>2]|0;
   $486 = $18;
   $487 = HEAP32[$486>>2]|0;
   $488 = $19;
   $489 = HEAP32[$488>>2]|0;
   $490 = $21;
   $491 = HEAP32[$490>>2]|0;
   $492 = $22;
   $493 = HEAP16[$492>>1]|0;
   $494 = (_doPassSearch($480,$481,$482,$484,$485,$487,$489,$23,$24,$491,$493)|0);
   HEAP32[$34>>2] = $494;
   $495 = $26;
   $496 = ($495|0)!=(0);
   $497 = HEAP32[$34>>2]|0;
   $498 = ($497|0)!=(0);
   $or$cond3 = $496 | $498;
   if ($or$cond3) {
    $499 = $26;
    $500 = ($499|0)!=(0);
    $501 = HEAP32[$34>>2]|0;
    $502 = ($501|0)!=(0);
    $or$cond5 = $500 & $502;
    if (!($or$cond5)) {
     $503 = HEAP32[$23>>2]|0;
     $504 = $19;
     HEAP32[$504>>2] = $503;
     $505 = HEAP32[$24>>2]|0;
     HEAP32[$13>>2] = $505;
     break;
    }
   }
   $11 = 0;
   $538 = $11;
   STACKTOP = sp;return ($538|0);
  }
  else if ((label|0) == 69) {
   $11 = 0;
   $538 = $11;
   STACKTOP = sp;return ($538|0);
  }
  else if ((label|0) == 72) {
   $11 = 0;
   $538 = $11;
   STACKTOP = sp;return ($538|0);
  }
  else if ((label|0) == 74) {
   $11 = 0;
   $538 = $11;
   STACKTOP = sp;return ($538|0);
  }
 } while(0);
 $506 = $19;
 $507 = HEAP32[$506>>2]|0;
 $508 = (($507) + 1)|0;
 HEAP32[$506>>2] = $508;
 $509 = HEAP32[$13>>2]|0;
 $31 = $509;
 $510 = $32;
 $511 = ($510|0)==(-1);
 if ($511) {
  $512 = $30;
  $32 = $512;
  $513 = $31;
  $33 = $513;
 }
 $514 = $32;
 $515 = $30;
 $516 = ($514|0)<($515|0);
 if ($516) {
  $11 = 0;
  $538 = $11;
  STACKTOP = sp;return ($538|0);
 } else {
  $517 = $20;
  $518 = $30;
  HEAP32[$35>>2] = $518;
  $519 = ((($35)) + 4|0);
  $520 = $32;
  HEAP32[$519>>2] = $520;
  $521 = ((($35)) + 8|0);
  $522 = $33;
  HEAP32[$521>>2] = $522;
  $523 = ((($35)) + 12|0);
  $524 = $31;
  HEAP32[$523>>2] = $524;
  ;HEAP32[$517>>2]=HEAP32[$35>>2]|0;HEAP32[$517+4>>2]=HEAP32[$35+4>>2]|0;HEAP32[$517+8>>2]=HEAP32[$35+8>>2]|0;HEAP32[$517+12>>2]=HEAP32[$35+12>>2]|0;
  $11 = 1;
  $538 = $11;
  STACKTOP = sp;return ($538|0);
 }
 return (0)|0;
}
function _matchCurrentInput($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $6;
 $10 = $11;
 $12 = $8;
 $13 = (($12) + 2)|0;
 $9 = $13;
 while(1) {
  $14 = $9;
  $15 = $8;
  $16 = (($15) + 2)|0;
  $17 = $8;
  $18 = (($17) + 1)|0;
  $19 = $7;
  $20 = (($19) + ($18<<1)|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21&65535;
  $23 = (($16) + ($22))|0;
  $24 = ($14|0)<($23|0);
  if (!($24)) {
   label = 8;
   break;
  }
  $25 = $10;
  $26 = $5;
  $27 = ((($26)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($25|0)<($28|0);
  if (!($29)) {
   label = 8;
   break;
  }
  $30 = $10;
  $31 = $5;
  $32 = ((($31)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + ($30<<1)|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = $35&65535;
  $37 = ($36|0)==(65535);
  if ($37) {
   label = 6;
   break;
  }
  $38 = $9;
  $39 = $7;
  $40 = (($39) + ($38<<1)|0);
  $41 = HEAP16[$40>>1]|0;
  $42 = $41&65535;
  $43 = $10;
  $44 = (($43) + 1)|0;
  $10 = $44;
  $45 = $5;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + ($43<<1)|0);
  $49 = HEAP16[$48>>1]|0;
  $50 = $49&65535;
  $51 = ($42|0)!=($50|0);
  if ($51) {
   label = 6;
   break;
  }
  $52 = $9;
  $53 = (($52) + 1)|0;
  $9 = $53;
 }
 if ((label|0) == 6) {
  $4 = 0;
  $54 = $4;
  STACKTOP = sp;return ($54|0);
 }
 else if ((label|0) == 8) {
  $4 = 1;
  $54 = $4;
  STACKTOP = sp;return ($54|0);
 }
 return (0)|0;
}
function _swapTest($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $16 = $7;
 $17 = HEAP32[$16>>2]|0;
 $11 = $17;
 $18 = $6;
 $19 = (($18) + 1)|0;
 $20 = $10;
 $21 = (($20) + ($19<<1)|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = $22&65535;
 $24 = $23 << 16;
 $25 = $6;
 $26 = (($25) + 2)|0;
 $27 = $10;
 $28 = (($27) + ($26<<1)|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = $29&65535;
 $31 = $24 | $30;
 $12 = $31;
 $32 = $12;
 $33 = $8;
 $34 = ((($33)) + 31168|0);
 $35 = (($34) + ($32<<3)|0);
 $13 = $35;
 while(1) {
  $36 = $11;
  $37 = $7;
  $38 = HEAP32[$37>>2]|0;
  $39 = (($36) - ($38))|0;
  $40 = $6;
  $41 = (($40) + 3)|0;
  $42 = $10;
  $43 = (($42) + ($41<<1)|0);
  $44 = HEAP16[$43>>1]|0;
  $45 = $44&65535;
  $46 = ($39|0)<($45|0);
  if (!($46)) {
   label = 17;
   break;
  }
  $47 = $11;
  $48 = $9;
  $49 = ((($48)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($47|0)>=($50|0);
  if ($51) {
   label = 4;
   break;
  }
  $52 = $13;
  $53 = ((($52)) + 36|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($54|0)==(60);
  L5: do {
   if ($55) {
    $14 = 1;
    while(1) {
     $56 = $14;
     $57 = $13;
     $58 = ((($57)) + 42|0);
     $59 = HEAP16[$58>>1]|0;
     $60 = $59 << 16 >> 16;
     $61 = ($56|0)<($60|0);
     if (!($61)) {
      break L5;
     }
     $62 = $11;
     $63 = $9;
     $64 = ((($63)) + 4|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = (($65) + ($62<<1)|0);
     $67 = HEAP16[$66>>1]|0;
     $68 = $67&65535;
     $69 = $14;
     $70 = $13;
     $71 = ((($70)) + 46|0);
     $72 = (($71) + ($69<<1)|0);
     $73 = HEAP16[$72>>1]|0;
     $74 = $73&65535;
     $75 = ($68|0)==($74|0);
     if ($75) {
      break L5;
     }
     $76 = $14;
     $77 = (($76) + 2)|0;
     $14 = $77;
    }
   } else {
    $14 = 0;
    while(1) {
     $78 = $14;
     $79 = $13;
     $80 = ((($79)) + 42|0);
     $81 = HEAP16[$80>>1]|0;
     $82 = $81 << 16 >> 16;
     $83 = ($78|0)<($82|0);
     if (!($83)) {
      break L5;
     }
     $84 = $11;
     $85 = $9;
     $86 = ((($85)) + 4|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = (($87) + ($84<<1)|0);
     $89 = HEAP16[$88>>1]|0;
     $90 = $89&65535;
     $91 = $14;
     $92 = $13;
     $93 = ((($92)) + 46|0);
     $94 = (($93) + ($91<<1)|0);
     $95 = HEAP16[$94>>1]|0;
     $96 = $95&65535;
     $97 = ($90|0)==($96|0);
     if ($97) {
      break L5;
     }
     $98 = $14;
     $99 = (($98) + 1)|0;
     $14 = $99;
    }
   }
  } while(0);
  $100 = $14;
  $101 = $13;
  $102 = ((($101)) + 42|0);
  $103 = HEAP16[$102>>1]|0;
  $104 = $103 << 16 >> 16;
  $105 = ($100|0)>=($104|0);
  if ($105) {
   label = 15;
   break;
  }
  $106 = $11;
  $107 = (($106) + 1)|0;
  $11 = $107;
 }
 if ((label|0) == 4) {
  $5 = 0;
  $199 = $5;
  STACKTOP = sp;return ($199|0);
 }
 else if ((label|0) == 15) {
  $5 = 0;
  $199 = $5;
  STACKTOP = sp;return ($199|0);
 }
 else if ((label|0) == 17) {
  $108 = $6;
  $109 = (($108) + 3)|0;
  $110 = $10;
  $111 = (($110) + ($109<<1)|0);
  $112 = HEAP16[$111>>1]|0;
  $113 = $112&65535;
  $114 = $6;
  $115 = (($114) + 4)|0;
  $116 = $10;
  $117 = (($116) + ($115<<1)|0);
  $118 = HEAP16[$117>>1]|0;
  $119 = $118&65535;
  $120 = ($113|0)==($119|0);
  if ($120) {
   $121 = $11;
   $122 = $7;
   HEAP32[$122>>2] = $121;
   $5 = 1;
   $199 = $5;
   STACKTOP = sp;return ($199|0);
  }
  while(1) {
   $123 = $11;
   $124 = $7;
   $125 = HEAP32[$124>>2]|0;
   $126 = (($123) - ($125))|0;
   $127 = $6;
   $128 = (($127) + 4)|0;
   $129 = $10;
   $130 = (($129) + ($128<<1)|0);
   $131 = HEAP16[$130>>1]|0;
   $132 = $131&65535;
   $133 = ($126|0)<($132|0);
   $134 = $11;
   if (!($133)) {
    label = 34;
    break;
   }
   $135 = $9;
   $136 = ((($135)) + 8|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = ($134|0)>=($137|0);
   if ($138) {
    label = 21;
    break;
   }
   $141 = $13;
   $142 = ((($141)) + 36|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = ($143|0)==(60);
   L27: do {
    if ($144) {
     $15 = 1;
     while(1) {
      $145 = $15;
      $146 = $13;
      $147 = ((($146)) + 42|0);
      $148 = HEAP16[$147>>1]|0;
      $149 = $148 << 16 >> 16;
      $150 = ($145|0)<($149|0);
      if (!($150)) {
       break L27;
      }
      $151 = $11;
      $152 = $9;
      $153 = ((($152)) + 4|0);
      $154 = HEAP32[$153>>2]|0;
      $155 = (($154) + ($151<<1)|0);
      $156 = HEAP16[$155>>1]|0;
      $157 = $156&65535;
      $158 = $15;
      $159 = $13;
      $160 = ((($159)) + 46|0);
      $161 = (($160) + ($158<<1)|0);
      $162 = HEAP16[$161>>1]|0;
      $163 = $162&65535;
      $164 = ($157|0)==($163|0);
      if ($164) {
       break L27;
      }
      $165 = $15;
      $166 = (($165) + 2)|0;
      $15 = $166;
     }
    } else {
     $15 = 0;
     while(1) {
      $167 = $15;
      $168 = $13;
      $169 = ((($168)) + 42|0);
      $170 = HEAP16[$169>>1]|0;
      $171 = $170 << 16 >> 16;
      $172 = ($167|0)<($171|0);
      if (!($172)) {
       break L27;
      }
      $173 = $11;
      $174 = $9;
      $175 = ((($174)) + 4|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = (($176) + ($173<<1)|0);
      $178 = HEAP16[$177>>1]|0;
      $179 = $178&65535;
      $180 = $15;
      $181 = $13;
      $182 = ((($181)) + 46|0);
      $183 = (($182) + ($180<<1)|0);
      $184 = HEAP16[$183>>1]|0;
      $185 = $184&65535;
      $186 = ($179|0)==($185|0);
      if ($186) {
       break L27;
      }
      $187 = $15;
      $188 = (($187) + 1)|0;
      $15 = $188;
     }
    }
   } while(0);
   $189 = $15;
   $190 = $13;
   $191 = ((($190)) + 42|0);
   $192 = HEAP16[$191>>1]|0;
   $193 = $192 << 16 >> 16;
   $194 = ($189|0)>=($193|0);
   $195 = $11;
   if ($194) {
    label = 32;
    break;
   }
   $197 = (($195) + 1)|0;
   $11 = $197;
  }
  if ((label|0) == 21) {
   $139 = $11;
   $140 = $7;
   HEAP32[$140>>2] = $139;
   $5 = 1;
   $199 = $5;
   STACKTOP = sp;return ($199|0);
  }
  else if ((label|0) == 32) {
   $196 = $7;
   HEAP32[$196>>2] = $195;
   $5 = 1;
   $199 = $5;
   STACKTOP = sp;return ($199|0);
  }
  else if ((label|0) == 34) {
   $198 = $7;
   HEAP32[$198>>2] = $134;
   $5 = 1;
   $199 = $5;
   STACKTOP = sp;return ($199|0);
  }
 }
 return (0)|0;
}
function _doPassSearch($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0;
 var $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond$not = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $29 = sp;
 $30 = sp + 8|0;
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $23 = 0;
 $26 = 0;
 L1: while(1) {
  $31 = $16;
  $32 = $13;
  $33 = ((($32)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($31|0)<($34|0);
  if (!($35)) {
   label = 66;
   break;
  }
  $36 = $18;
  $37 = (($36) + 1)|0;
  $38 = $19;
  HEAP32[$38>>2] = $37;
  $39 = $16;
  $40 = $20;
  HEAP32[$40>>2] = $39;
  L4: while(1) {
   $41 = $19;
   $42 = HEAP32[$41>>2]|0;
   $43 = $14;
   $44 = ((($43)) + 44|0);
   $45 = HEAP16[$44>>1]|0;
   $46 = $45 << 16 >> 16;
   $47 = ($42|0)<($46|0);
   if (!($47)) {
    break;
   }
   HEAP32[$30>>2] = 1;
   $48 = $20;
   $49 = HEAP32[$48>>2]|0;
   $50 = $13;
   $51 = ((($50)) + 8|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($49|0)>($52|0);
   if ($53) {
    label = 6;
    break L1;
   }
   $54 = $19;
   $55 = HEAP32[$54>>2]|0;
   $56 = $17;
   $57 = (($56) + ($55<<1)|0);
   $58 = HEAP16[$57>>1]|0;
   $59 = $58&65535;
   do {
    switch ($59|0) {
    case 95:  {
     $60 = $19;
     $61 = HEAP32[$60>>2]|0;
     $62 = (($61) + 1)|0;
     $63 = $17;
     $64 = (($63) + ($62<<1)|0);
     $65 = HEAP16[$64>>1]|0;
     $66 = $65&65535;
     $67 = $20;
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) - ($66))|0;
     HEAP32[$67>>2] = $69;
     $70 = $20;
     $71 = HEAP32[$70>>2]|0;
     $72 = ($71|0)<(0);
     if ($72) {
      $73 = $20;
      HEAP32[$73>>2] = 0;
      HEAP32[$30>>2] = 0;
     }
     $74 = $19;
     $75 = HEAP32[$74>>2]|0;
     $76 = (($75) + 2)|0;
     HEAP32[$74>>2] = $76;
     break;
    }
    case 33:  {
     $77 = $26;
     $78 = ($77|0)!=(0);
     $79 = $78 ^ 1;
     $80 = $79&1;
     $26 = $80;
     $81 = $19;
     $82 = HEAP32[$81>>2]|0;
     $83 = (($82) + 1)|0;
     HEAP32[$81>>2] = $83;
     continue L4;
     break;
    }
    case 64: case 34:  {
     $84 = $20;
     $85 = HEAP32[$84>>2]|0;
     $25 = $85;
     $86 = $19;
     $87 = HEAP32[$86>>2]|0;
     $88 = (($87) + 2)|0;
     $24 = $88;
     while(1) {
      $89 = $24;
      $90 = $19;
      $91 = HEAP32[$90>>2]|0;
      $92 = (($91) + 2)|0;
      $93 = $19;
      $94 = HEAP32[$93>>2]|0;
      $95 = (($94) + 1)|0;
      $96 = $17;
      $97 = (($96) + ($95<<1)|0);
      $98 = HEAP16[$97>>1]|0;
      $99 = $98&65535;
      $100 = (($92) + ($99))|0;
      $101 = ($89|0)<($100|0);
      if (!($101)) {
       break;
      }
      $102 = $25;
      $103 = $13;
      $104 = ((($103)) + 4|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = (($105) + ($102<<1)|0);
      $107 = HEAP16[$106>>1]|0;
      $108 = $107&65535;
      $109 = ($108|0)==(65535);
      if ($109) {
       label = 16;
       break;
      }
      $110 = $24;
      $111 = $17;
      $112 = (($111) + ($110<<1)|0);
      $113 = HEAP16[$112>>1]|0;
      $114 = $113&65535;
      $115 = $25;
      $116 = (($115) + 1)|0;
      $25 = $116;
      $117 = $13;
      $118 = ((($117)) + 4|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = (($119) + ($115<<1)|0);
      $121 = HEAP16[$120>>1]|0;
      $122 = $121&65535;
      $123 = ($114|0)!=($122|0);
      if ($123) {
       label = 16;
       break;
      }
      $124 = $24;
      $125 = (($124) + 1)|0;
      $24 = $125;
     }
     if ((label|0) == 16) {
      label = 0;
      HEAP32[$30>>2] = 0;
     }
     $126 = $19;
     $127 = HEAP32[$126>>2]|0;
     $128 = (($127) + 1)|0;
     $129 = $17;
     $130 = (($129) + ($128<<1)|0);
     $131 = HEAP16[$130>>1]|0;
     $132 = $131&65535;
     $133 = $20;
     $134 = HEAP32[$133>>2]|0;
     $135 = (($134) + ($132))|0;
     HEAP32[$133>>2] = $135;
     $136 = $19;
     $137 = HEAP32[$136>>2]|0;
     $138 = (($137) + 1)|0;
     $139 = $17;
     $140 = (($139) + ($138<<1)|0);
     $141 = HEAP16[$140>>1]|0;
     $142 = $141&65535;
     $143 = (($142) + 2)|0;
     $144 = $19;
     $145 = HEAP32[$144>>2]|0;
     $146 = (($145) + ($143))|0;
     HEAP32[$144>>2] = $146;
     break;
    }
    case 91:  {
     $147 = $19;
     $148 = HEAP32[$147>>2]|0;
     $149 = (($148) + 1)|0;
     HEAP32[$147>>2] = $149;
     break;
    }
    case 93:  {
     $150 = $19;
     $151 = HEAP32[$150>>2]|0;
     $152 = (($151) + 1)|0;
     HEAP32[$150>>2] = $152;
     break;
    }
    case 36:  {
     $153 = $19;
     $154 = HEAP32[$153>>2]|0;
     $155 = (($154) + 1)|0;
     $156 = $17;
     $157 = (($156) + ($155<<1)|0);
     $158 = HEAP16[$157>>1]|0;
     $159 = $158&65535;
     $160 = $29;
     $161 = $160;
     HEAP32[$161>>2] = $159;
     $162 = (($160) + 4)|0;
     $163 = $162;
     HEAP32[$163>>2] = 0;
     $164 = $29;
     $165 = $164;
     $166 = HEAP32[$165>>2]|0;
     $167 = (($164) + 4)|0;
     $168 = $167;
     $169 = HEAP32[$168>>2]|0;
     $170 = (_bitshift64Shl(($166|0),($169|0),16)|0);
     $171 = tempRet0;
     $172 = $29;
     $173 = $172;
     HEAP32[$173>>2] = $170;
     $174 = (($172) + 4)|0;
     $175 = $174;
     HEAP32[$175>>2] = $171;
     $176 = $19;
     $177 = HEAP32[$176>>2]|0;
     $178 = (($177) + 2)|0;
     $179 = $17;
     $180 = (($179) + ($178<<1)|0);
     $181 = HEAP16[$180>>1]|0;
     $182 = $181&65535;
     $183 = $29;
     $184 = $183;
     $185 = HEAP32[$184>>2]|0;
     $186 = (($183) + 4)|0;
     $187 = $186;
     $188 = HEAP32[$187>>2]|0;
     $189 = $185 | $182;
     $190 = $29;
     $191 = $190;
     HEAP32[$191>>2] = $189;
     $192 = (($190) + 4)|0;
     $193 = $192;
     HEAP32[$193>>2] = $188;
     $194 = $29;
     $195 = $194;
     $196 = HEAP32[$195>>2]|0;
     $197 = (($194) + 4)|0;
     $198 = $197;
     $199 = HEAP32[$198>>2]|0;
     $200 = (_bitshift64Shl(($196|0),($199|0),16)|0);
     $201 = tempRet0;
     $202 = $29;
     $203 = $202;
     HEAP32[$203>>2] = $200;
     $204 = (($202) + 4)|0;
     $205 = $204;
     HEAP32[$205>>2] = $201;
     $206 = $19;
     $207 = HEAP32[$206>>2]|0;
     $208 = (($207) + 3)|0;
     $209 = $17;
     $210 = (($209) + ($208<<1)|0);
     $211 = HEAP16[$210>>1]|0;
     $212 = $211&65535;
     $213 = $29;
     $214 = $213;
     $215 = HEAP32[$214>>2]|0;
     $216 = (($213) + 4)|0;
     $217 = $216;
     $218 = HEAP32[$217>>2]|0;
     $219 = $215 | $212;
     $220 = $29;
     $221 = $220;
     HEAP32[$221>>2] = $219;
     $222 = (($220) + 4)|0;
     $223 = $222;
     HEAP32[$223>>2] = $218;
     $224 = $29;
     $225 = $224;
     $226 = HEAP32[$225>>2]|0;
     $227 = (($224) + 4)|0;
     $228 = $227;
     $229 = HEAP32[$228>>2]|0;
     $230 = (_bitshift64Shl(($226|0),($229|0),16)|0);
     $231 = tempRet0;
     $232 = $29;
     $233 = $232;
     HEAP32[$233>>2] = $230;
     $234 = (($232) + 4)|0;
     $235 = $234;
     HEAP32[$235>>2] = $231;
     $236 = $19;
     $237 = HEAP32[$236>>2]|0;
     $238 = (($237) + 4)|0;
     $239 = $17;
     $240 = (($239) + ($238<<1)|0);
     $241 = HEAP16[$240>>1]|0;
     $242 = $241&65535;
     $243 = $29;
     $244 = $243;
     $245 = HEAP32[$244>>2]|0;
     $246 = (($243) + 4)|0;
     $247 = $246;
     $248 = HEAP32[$247>>2]|0;
     $249 = $245 | $242;
     $250 = $29;
     $251 = $250;
     HEAP32[$251>>2] = $249;
     $252 = (($250) + 4)|0;
     $253 = $252;
     HEAP32[$253>>2] = $248;
     $24 = 0;
     while(1) {
      $254 = $24;
      $255 = $19;
      $256 = HEAP32[$255>>2]|0;
      $257 = (($256) + 5)|0;
      $258 = $17;
      $259 = (($258) + ($257<<1)|0);
      $260 = HEAP16[$259>>1]|0;
      $261 = $260&65535;
      $262 = ($254|0)<($261|0);
      if (!($262)) {
       break;
      }
      $263 = $20;
      $264 = HEAP32[$263>>2]|0;
      $265 = $13;
      $266 = ((($265)) + 4|0);
      $267 = HEAP32[$266>>2]|0;
      $268 = (($267) + ($264<<1)|0);
      $269 = HEAP16[$268>>1]|0;
      $270 = $269&65535;
      $271 = ($270|0)==(65535);
      if ($271) {
       HEAP32[$30>>2] = 0;
      } else {
       $272 = $15;
       $273 = ($272|0)!=(0);
       $274 = $20;
       $275 = HEAP32[$274>>2]|0;
       $276 = (($275) + 1)|0;
       HEAP32[$274>>2] = $276;
       $277 = $13;
       $278 = ((($277)) + 4|0);
       $279 = HEAP32[$278>>2]|0;
       $280 = (($279) + ($275<<1)|0);
       $281 = HEAP16[$280>>1]|0;
       $282 = $12;
       if ($273) {
        $283 = (_getDots_341($281,$282)|0);
        $286 = $283;
       } else {
        $284 = (_getChar_2($281,$282)|0);
        $286 = $284;
       }
       $285 = ((($286)) + 24|0);
       $287 = $285;
       $288 = $287;
       $289 = HEAP32[$288>>2]|0;
       $290 = (($287) + 4)|0;
       $291 = $290;
       $292 = HEAP32[$291>>2]|0;
       $293 = $29;
       $294 = $293;
       $295 = HEAP32[$294>>2]|0;
       $296 = (($293) + 4)|0;
       $297 = $296;
       $298 = HEAP32[$297>>2]|0;
       $299 = $289 & $295;
       $292 & $298;
       HEAP32[$30>>2] = $299;
       $300 = $26;
       $301 = ($300|0)!=(0);
       if ($301) {
        $302 = HEAP32[$30>>2]|0;
        $303 = ($302|0)!=(0);
        $304 = $303 ^ 1;
        $305 = $304&1;
        HEAP32[$30>>2] = $305;
       }
      }
      $306 = HEAP32[$30>>2]|0;
      $307 = ($306|0)!=(0);
      if (!($307)) {
       break;
      }
      $308 = $24;
      $309 = (($308) + 1)|0;
      $24 = $309;
     }
     $310 = HEAP32[$30>>2]|0;
     $311 = ($310|0)!=(0);
     L41: do {
      if ($311) {
       $312 = $19;
       $313 = HEAP32[$312>>2]|0;
       $314 = (($313) + 5)|0;
       $315 = $17;
       $316 = (($315) + ($314<<1)|0);
       $317 = HEAP16[$316>>1]|0;
       $318 = $317&65535;
       $24 = $318;
       while(1) {
        $319 = $24;
        $320 = $19;
        $321 = HEAP32[$320>>2]|0;
        $322 = (($321) + 6)|0;
        $323 = $17;
        $324 = (($323) + ($322<<1)|0);
        $325 = HEAP16[$324>>1]|0;
        $326 = $325&65535;
        $327 = ($319|0)<($326|0);
        if (!($327)) {
         break L41;
        }
        $328 = $20;
        $329 = HEAP32[$328>>2]|0;
        $330 = $13;
        $331 = ((($330)) + 4|0);
        $332 = HEAP32[$331>>2]|0;
        $333 = (($332) + ($329<<1)|0);
        $334 = HEAP16[$333>>1]|0;
        $335 = $334&65535;
        $336 = ($335|0)==(65535);
        if ($336) {
         break;
        }
        $337 = $15;
        $338 = ($337|0)!=(0);
        $339 = $20;
        $340 = HEAP32[$339>>2]|0;
        $341 = $13;
        $342 = ((($341)) + 4|0);
        $343 = HEAP32[$342>>2]|0;
        $344 = (($343) + ($340<<1)|0);
        $345 = HEAP16[$344>>1]|0;
        $346 = $12;
        if ($338) {
         $347 = (_getDots_341($345,$346)|0);
         $350 = $347;
        } else {
         $348 = (_getChar_2($345,$346)|0);
         $350 = $348;
        }
        $349 = ((($350)) + 24|0);
        $351 = $349;
        $352 = $351;
        $353 = HEAP32[$352>>2]|0;
        $354 = (($351) + 4)|0;
        $355 = $354;
        $356 = HEAP32[$355>>2]|0;
        $357 = $29;
        $358 = $357;
        $359 = HEAP32[$358>>2]|0;
        $360 = (($357) + 4)|0;
        $361 = $360;
        $362 = HEAP32[$361>>2]|0;
        $363 = $353 & $359;
        $364 = $356 & $362;
        $365 = ($363|0)!=(0);
        $366 = ($364|0)!=(0);
        $367 = $365 | $366;
        $368 = $26;
        $369 = ($368|0)!=(0);
        if ($367) {
         if ($369) {
          break L41;
         }
        } else {
         if (!($369)) {
          break L41;
         }
        }
        $370 = $20;
        $371 = HEAP32[$370>>2]|0;
        $372 = (($371) + 1)|0;
        HEAP32[$370>>2] = $372;
        $373 = $24;
        $374 = (($373) + 1)|0;
        $24 = $374;
       }
       HEAP32[$30>>2] = 0;
      }
     } while(0);
     $26 = 0;
     $375 = $19;
     $376 = HEAP32[$375>>2]|0;
     $377 = (($376) + 7)|0;
     HEAP32[$375>>2] = $377;
     break;
    }
    case 125: case 123:  {
     $378 = $19;
     $379 = HEAP32[$378>>2]|0;
     $380 = (($379) + 1)|0;
     $381 = $17;
     $382 = (($381) + ($380<<1)|0);
     $383 = HEAP16[$382>>1]|0;
     $384 = $383&65535;
     $385 = $384 << 16;
     $386 = $19;
     $387 = HEAP32[$386>>2]|0;
     $388 = (($387) + 2)|0;
     $389 = $17;
     $390 = (($389) + ($388<<1)|0);
     $391 = HEAP16[$390>>1]|0;
     $392 = $391&65535;
     $393 = $385 | $392;
     $27 = $393;
     $394 = $27;
     $395 = $12;
     $396 = ((($395)) + 31168|0);
     $397 = (($396) + ($394<<3)|0);
     $28 = $397;
     $398 = $19;
     $399 = HEAP32[$398>>2]|0;
     $400 = $17;
     $401 = (($400) + ($399<<1)|0);
     $402 = HEAP16[$401>>1]|0;
     $403 = $402&65535;
     $404 = ($403|0)==(123);
     $405 = $20;
     $406 = HEAP32[$405>>2]|0;
     $407 = $13;
     $408 = ((($407)) + 4|0);
     $409 = HEAP32[$408>>2]|0;
     $410 = (($409) + ($406<<1)|0);
     $411 = HEAP16[$410>>1]|0;
     $412 = $411&65535;
     $413 = $15;
     $414 = $413<<1;
     if ($404) {
      $415 = $28;
      $416 = ((($415)) + 46|0);
      $417 = (($416) + ($414<<1)|0);
      $418 = HEAP16[$417>>1]|0;
      $419 = $418&65535;
      $420 = ($412|0)==($419|0);
      $421 = $420 ? 1 : 0;
      HEAP32[$30>>2] = $421;
     } else {
      $422 = (($414) + 1)|0;
      $423 = $28;
      $424 = ((($423)) + 46|0);
      $425 = (($424) + ($422<<1)|0);
      $426 = HEAP16[$425>>1]|0;
      $427 = $426&65535;
      $428 = ($412|0)==($427|0);
      $429 = $428 ? 1 : 0;
      HEAP32[$30>>2] = $429;
     }
     $430 = $21;
     $431 = ($430|0)!=(0|0);
     do {
      if ($431) {
       $432 = $22;
       $433 = $432&65535;
       $434 = ($433|0)==(123);
       if ($434) {
        $435 = $28;
        $436 = $21;
        $437 = ($435|0)==($436|0);
        if ($437) {
         $438 = $20;
         $439 = HEAP32[$438>>2]|0;
         $440 = $13;
         $441 = ((($440)) + 4|0);
         $442 = HEAP32[$441>>2]|0;
         $443 = (($442) + ($439<<1)|0);
         $444 = HEAP16[$443>>1]|0;
         $445 = $444&65535;
         $446 = $15;
         $447 = $446<<1;
         $448 = $28;
         $449 = ((($448)) + 46|0);
         $450 = (($449) + ($447<<1)|0);
         $451 = HEAP16[$450>>1]|0;
         $452 = $451&65535;
         $453 = ($445|0)==($452|0);
         if ($453) {
          $454 = $23;
          $455 = (($454) + -1)|0;
          $23 = $455;
          break;
         }
         $456 = $20;
         $457 = HEAP32[$456>>2]|0;
         $458 = $13;
         $459 = ((($458)) + 4|0);
         $460 = HEAP32[$459>>2]|0;
         $461 = (($460) + ($457<<1)|0);
         $462 = HEAP16[$461>>1]|0;
         $463 = $462&65535;
         $464 = $15;
         $465 = $464<<1;
         $466 = (($465) + 1)|0;
         $467 = $28;
         $468 = ((($467)) + 46|0);
         $469 = (($468) + ($466<<1)|0);
         $470 = HEAP16[$469>>1]|0;
         $471 = $470&65535;
         $472 = ($463|0)==($471|0);
         if ($472) {
          $473 = $23;
          $474 = (($473) + 1)|0;
          $23 = $474;
         }
        }
       }
      }
     } while(0);
     $475 = $20;
     $476 = HEAP32[$475>>2]|0;
     $477 = (($476) + 1)|0;
     HEAP32[$475>>2] = $477;
     $478 = $19;
     $479 = HEAP32[$478>>2]|0;
     $480 = (($479) + 3)|0;
     HEAP32[$478>>2] = $480;
     break;
    }
    case 37:  {
     $481 = $19;
     $482 = HEAP32[$481>>2]|0;
     $483 = $20;
     $484 = $12;
     $485 = $13;
     $486 = $17;
     $487 = (_swapTest($482,$483,$484,$485,$486)|0);
     HEAP32[$30>>2] = $487;
     $488 = $19;
     $489 = HEAP32[$488>>2]|0;
     $490 = (($489) + 5)|0;
     HEAP32[$488>>2] = $490;
     break;
    }
    case 32:  {
     $491 = HEAP32[$30>>2]|0;
     $492 = ($491|0)!=(0);
     if ($492) {
      $493 = $21;
      $494 = ($493|0)!=(0|0);
      $495 = $23;
      $496 = ($495|0)==(1);
      $or$cond = $494 & $496;
      $or$cond$not = $or$cond ^ 1;
      $497 = $21;
      $498 = ($497|0)!=(0|0);
      $or$cond3 = $or$cond$not & $498;
      if (!($or$cond3)) {
       label = 59;
       break L1;
      }
     }
     $499 = $14;
     $500 = ((($499)) + 44|0);
     $501 = HEAP16[$500>>1]|0;
     $502 = $501 << 16 >> 16;
     $503 = $19;
     HEAP32[$503>>2] = $502;
     break;
    }
    default: {
     $504 = $17;
     $505 = $19;
     (__lou_handlePassVariableTest($504,$505,$30)|0);
    }
    }
   } while(0);
   $506 = $26;
   $507 = ($506|0)!=(0);
   $508 = HEAP32[$30>>2]|0;
   $509 = ($508|0)!=(0);
   $or$cond5 = $507 | $509;
   if (!($or$cond5)) {
    break;
   }
   $510 = $26;
   $511 = ($510|0)!=(0);
   $512 = HEAP32[$30>>2]|0;
   $513 = ($512|0)!=(0);
   $or$cond7 = $511 & $513;
   if ($or$cond7) {
    break;
   }
   $26 = 0;
  }
  $514 = $16;
  $515 = (($514) + 1)|0;
  $16 = $515;
 }
 if ((label|0) == 6) {
  $11 = 0;
  $516 = $11;
  STACKTOP = sp;return ($516|0);
 }
 else if ((label|0) == 59) {
  $11 = 1;
  $516 = $11;
  STACKTOP = sp;return ($516|0);
 }
 else if ((label|0) == 66) {
  $11 = 0;
  $516 = $11;
  STACKTOP = sp;return ($516|0);
 }
 return (0)|0;
}
function _markSyllables($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$old = 0, $$old1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = 0;
 $10 = 0;
 $17 = $6;
 $18 = ($17|0)==(0|0);
 if (!($18)) {
  $19 = $4;
  $20 = ((($19)) + 528|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)!=(0);
  if ($22) {
   $7 = 0;
   L4: while(1) {
    $23 = $7;
    $24 = $5;
    $25 = ((($24)) + 8|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($23|0)<($26|0);
    if (!($27)) {
     label = 31;
     break;
    }
    $28 = $5;
    $29 = ((($28)) + 8|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = $7;
    $32 = (($30) - ($31))|0;
    $14 = $32;
    $15 = 0;
    while(1) {
     $33 = $15;
     $34 = ($33|0)<(3);
     if (!($34)) {
      break;
     }
     $16 = 0;
     $35 = $15;
     switch ($35|0) {
     case 0:  {
      $36 = $14;
      $37 = ($36|0)>=(2);
      if ($37) {
       $38 = $7;
       $39 = $5;
       $40 = ((($39)) + 4|0);
       $41 = HEAP32[$40>>2]|0;
       $42 = (($41) + ($38<<1)|0);
       $43 = $4;
       $44 = (__lou_stringHash($42,1,$43)|0);
       $45 = $4;
       $46 = ((($45)) + 22184|0);
       $47 = (($46) + ($44<<2)|0);
       $48 = HEAP32[$47>>2]|0;
       $16 = $48;
      }
      break;
     }
     case 1:  {
      $49 = $14;
      $50 = ($49|0)>=(1);
      if ($50) {
       $14 = 1;
       $51 = $7;
       $52 = $5;
       $53 = ((($52)) + 4|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = (($54) + ($51<<1)|0);
       $56 = HEAP16[$55>>1]|0;
       $57 = $4;
       $58 = (_getChar_2($56,$57)|0);
       $59 = ((($58)) + 16|0);
       $60 = HEAP32[$59>>2]|0;
       $16 = $60;
      }
      break;
     }
     case 2:  {
      $12 = 83;
      $16 = 0;
      break;
     }
     default: {
     }
     }
     while(1) {
      $61 = $16;
      $62 = ($61|0)!=(0);
      if (!($62)) {
       break;
      }
      $63 = $16;
      $64 = $4;
      $65 = ((($64)) + 31168|0);
      $66 = (($65) + ($63<<3)|0);
      $11 = $66;
      $67 = $11;
      $68 = ((($67)) + 36|0);
      $69 = HEAP32[$68>>2]|0;
      $12 = $69;
      $70 = $11;
      $71 = ((($70)) + 42|0);
      $72 = HEAP16[$71>>1]|0;
      $73 = $72 << 16 >> 16;
      $13 = $73;
      $74 = $15;
      $75 = ($74|0)==(1);
      if ($75) {
       $$old = $12;
       $$old1 = ($$old|0)==(86);
       if ($$old1) {
        label = 19;
        break;
       }
      } else {
       $76 = $13;
       $77 = $14;
       $78 = ($76|0)<=($77|0);
       if ($78) {
        $79 = $11;
        $80 = ((($79)) + 46|0);
        $81 = $7;
        $82 = $5;
        $83 = ((($82)) + 4|0);
        $84 = HEAP32[$83>>2]|0;
        $85 = (($84) + ($81<<1)|0);
        $86 = $13;
        $87 = $4;
        $88 = (_compareChars($80,$85,$86,$87)|0);
        $89 = ($88|0)!=(0);
        $90 = $12;
        $91 = ($90|0)==(86);
        $or$cond = $89 & $91;
        if ($or$cond) {
         label = 19;
         break;
        }
       }
      }
      $92 = $11;
      $93 = ((($92)) + 8|0);
      $94 = HEAP32[$93>>2]|0;
      $16 = $94;
     }
     if ((label|0) == 19) {
      label = 0;
      $15 = 4;
     }
     $95 = $15;
     $96 = (($95) + 1)|0;
     $15 = $96;
    }
    $97 = $12;
    switch ($97|0) {
    case 83:  {
     $98 = $7;
     $99 = $5;
     $100 = ((($99)) + 8|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($98|0)>=($101|0);
     if ($102) {
      label = 24;
      break L4;
     }
     $103 = $9;
     $104 = $7;
     $105 = (($104) + 1)|0;
     $7 = $105;
     $106 = $6;
     $107 = (($106) + ($104<<1)|0);
     $108 = HEAP16[$107>>1]|0;
     $109 = $108&65535;
     $110 = $109 | $103;
     $111 = $110&65535;
     HEAP16[$107>>1] = $111;
     continue L4;
     break;
    }
    case 86:  {
     break;
    }
    default: {
     continue L4;
    }
    }
    $112 = $10;
    $113 = (1484 + ($112<<2)|0);
    $114 = HEAP32[$113>>2]|0;
    $9 = $114;
    $115 = $10;
    $116 = (($115) + 1)|0;
    $117 = (($116|0) % 2)&-1;
    $10 = $117;
    $118 = $7;
    $119 = $13;
    $120 = (($118) + ($119))|0;
    $121 = $5;
    $122 = ((($121)) + 8|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = ($120|0)>($123|0);
    if ($124) {
     label = 27;
     break;
    }
    $8 = 0;
    while(1) {
     $125 = $8;
     $126 = $13;
     $127 = ($125|0)<($126|0);
     if (!($127)) {
      continue L4;
     }
     $128 = $9;
     $129 = $7;
     $130 = (($129) + 1)|0;
     $7 = $130;
     $131 = $6;
     $132 = (($131) + ($129<<1)|0);
     $133 = HEAP16[$132>>1]|0;
     $134 = $133&65535;
     $135 = $134 | $128;
     $136 = $135&65535;
     HEAP16[$132>>1] = $136;
     $137 = $8;
     $138 = (($137) + 1)|0;
     $8 = $138;
    }
   }
   if ((label|0) == 24) {
    $3 = 0;
    $139 = $3;
    STACKTOP = sp;return ($139|0);
   }
   else if ((label|0) == 27) {
    $3 = 0;
    $139 = $3;
    STACKTOP = sp;return ($139|0);
   }
   else if ((label|0) == 31) {
    $3 = 1;
    $139 = $3;
    STACKTOP = sp;return ($139|0);
   }
  }
 }
 $3 = 1;
 $139 = $3;
 STACKTOP = sp;return ($139|0);
}
function _capsletterDefined($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 1512|0);
 $4 = ((($3)) + 360|0);
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function _markEmphases($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $17 = $5;
 $18 = ((($17)) + 516|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0);
 L1: do {
  if ($20) {
   $10 = 0;
   $11 = 0;
   while(1) {
    $21 = $11;
    $22 = $6;
    $23 = ((($22)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($21|0)<($24|0);
    if (!($25)) {
     break L1;
    }
    $26 = $11;
    $27 = $6;
    $28 = ((($27)) + 4|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (($29) + ($26<<1)|0);
    $31 = HEAP16[$30>>1]|0;
    $32 = $5;
    $33 = (_checkCharAttr($31,16,0,$32)|0);
    $34 = ($33|0)!=(0);
    if ($34) {
     $35 = $10;
     $36 = (($35) + 1)|0;
     $10 = $36;
     $37 = $10;
     $38 = ($37|0)>=(2);
     if ($38) {
      $39 = $11;
      $40 = $7;
      $41 = (($40) + ($39<<1)|0);
      $42 = HEAP16[$41>>1]|0;
      $43 = $42&65535;
      $44 = $43 | 4096;
      $45 = $44&65535;
      HEAP16[$41>>1] = $45;
      $46 = $10;
      $47 = ($46|0)==(2);
      if ($47) {
       $48 = $11;
       $49 = (($48) - 1)|0;
       $50 = $7;
       $51 = (($50) + ($49<<1)|0);
       $52 = HEAP16[$51>>1]|0;
       $53 = $52&65535;
       $54 = $53 | 4096;
       $55 = $54&65535;
       HEAP16[$51>>1] = $55;
      }
     }
    } else {
     $10 = 0;
    }
    $56 = $11;
    $57 = (($56) + 1)|0;
    $11 = $57;
   }
  }
 } while(0);
 $12 = 0;
 while(1) {
  $58 = $12;
  $59 = ($58|0)<(16);
  if (!($59)) {
   break;
  }
  $60 = $12;
  $61 = ($60|0)<(10);
  $62 = $12;
  if ($61) {
   $63 = $5;
   $64 = ((($63)) + 864|0);
   $65 = (($64) + (($62*24)|0)|0);
   $70 = $65;
  } else {
   $66 = (($62) - 10)|0;
   $67 = $5;
   $68 = ((($67)) + 1104|0);
   $69 = (($68) + (($66*24)|0)|0);
   $70 = $69;
  }
  $13 = $70;
  $71 = $13;
  $72 = ((($71)) + 16|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ($73|0)!=(0);
  L20: do {
   if ($74) {
    $75 = $13;
    $76 = ((($75)) + 20|0);
    $77 = HEAP16[$76>>1]|0;
    $78 = $77&65535;
    $79 = $5;
    $80 = ((($79)) + 1512|0);
    $81 = (($80) + (($78*36)|0)|0);
    $14 = $81;
    $15 = 0;
    while(1) {
     $82 = $15;
     $83 = $6;
     $84 = ((($83)) + 8|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = ($82|0)<($85|0);
     if (!($86)) {
      break;
     }
     $87 = $15;
     $88 = $6;
     $89 = ((($88)) + 4|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = (($90) + ($87<<1)|0);
     $92 = HEAP16[$91>>1]|0;
     $93 = $5;
     $94 = $13;
     $95 = (_isEmphSpace($92,$93,$94)|0);
     $96 = ($95|0)!=(0);
     $97 = $15;
     $98 = $8;
     $99 = (($98) + ($97<<2)|0);
     $100 = HEAP32[$99>>2]|0;
     if ($96) {
      $101 = $100 & -2;
      HEAP32[$99>>2] = $101;
     } else {
      $102 = $100 | 1;
      HEAP32[$99>>2] = $102;
     }
     $103 = $15;
     $104 = $8;
     $105 = (($104) + ($103<<2)|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = $106 & -5;
     HEAP32[$105>>2] = $107;
     $108 = $15;
     $109 = (($108) + 1)|0;
     $15 = $109;
    }
    $110 = $9;
    $111 = $13;
    $112 = $5;
    $113 = $6;
    $114 = $7;
    $115 = $8;
    _resolveEmphasisBeginEnd($110,$111,$112,$113,$114,$115);
    $116 = $14;
    $117 = ((($116)) + 24|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = ($118|0)!=(0);
    do {
     if ($119) {
      $120 = $9;
      $121 = $13;
      $122 = $5;
      $123 = $6;
      $124 = $8;
      _resolveEmphasisWords($120,$121,$122,$123,$124);
      $125 = $14;
      $126 = ((($125)) + 32|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = ($127|0)!=(0);
      if ($128) {
       $129 = $9;
       $130 = $13;
       $131 = $5;
       $132 = $6;
       $133 = $8;
       _resolveEmphasisPassages($129,$130,$131,$132,$133);
      }
      $134 = $9;
      $135 = $13;
      $136 = $5;
      $137 = $6;
      $138 = $8;
      _resolveEmphasisResets($134,$135,$136,$137,$138);
      $139 = $14;
      $140 = ((($139)) + 28|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = ($141|0)!=(0);
      if (!($142)) {
       $143 = $9;
       $144 = $13;
       $145 = $5;
       $146 = $7;
       $147 = $6;
       $148 = $8;
       _resolveEmphasisAllSymbols($143,$144,$145,$146,$147,$148);
      }
     } else {
      $149 = $14;
      $150 = ((($149)) + 20|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = ($151|0)!=(0);
      if ($152) {
       $153 = $14;
       $154 = ((($153)) + 12|0);
       $155 = HEAP32[$154>>2]|0;
       $156 = ($155|0)!=(0);
       $157 = $9;
       $158 = $13;
       if ($156) {
        $159 = $6;
        _resolveEmphasisSingleSymbols($157,$158,$159);
        break;
       } else {
        $160 = $5;
        $161 = $7;
        $162 = $6;
        $163 = $8;
        _resolveEmphasisAllSymbols($157,$158,$160,$161,$162,$163);
        break;
       }
      }
     }
    } while(0);
    $164 = $13;
    $165 = ((($164)) + 8|0);
    $166 = $165;
    $167 = $166;
    $168 = HEAP32[$167>>2]|0;
    $169 = (($166) + 4)|0;
    $170 = $169;
    $171 = HEAP32[$170>>2]|0;
    $172 = ($168|0)!=(0);
    $173 = ($171|0)!=(0);
    $174 = $172 | $173;
    if ($174) {
     $16 = 0;
     while(1) {
      $175 = $16;
      $176 = $6;
      $177 = ((($176)) + 8|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = ($175|0)<($178|0);
      if (!($179)) {
       break L20;
      }
      $180 = $16;
      $181 = $9;
      $182 = (($181) + ($180<<3)|0);
      $183 = $182;
      $184 = $183;
      $185 = HEAP32[$184>>2]|0;
      $186 = (($183) + 4)|0;
      $187 = $186;
      $188 = HEAP32[$187>>2]|0;
      $189 = (_bitshift64Lshr(($185|0),($188|0),48)|0);
      $190 = tempRet0;
      $191 = $13;
      $192 = ((($191)) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = $189 & $193;
      $195 = ($194|0)!=(0);
      do {
       if ($195) {
        $196 = $13;
        $197 = ((($196)) + 8|0);
        $198 = $197;
        $199 = $198;
        $200 = HEAP32[$199>>2]|0;
        $201 = (($198) + 4)|0;
        $202 = $201;
        $203 = HEAP32[$202>>2]|0;
        $204 = ($200|0)==(16);
        $205 = ($203|0)==(0);
        $206 = $204 & $205;
        $207 = $16;
        if ($206) {
         $208 = $7;
         $209 = (($208) + ($207<<1)|0);
         $210 = HEAP16[$209>>1]|0;
         $211 = $210&65535;
         $212 = $211 & 32768;
         $213 = ($212|0)!=(0);
         if ($213) {
          break;
         }
         $214 = $13;
         $215 = ((($214)) + 16|0);
         $216 = HEAP32[$215>>2]|0;
         $217 = $216 ^ -1;
         $218 = $16;
         $219 = $9;
         $220 = (($219) + ($218<<3)|0);
         $221 = $220;
         $222 = $221;
         $223 = HEAP32[$222>>2]|0;
         $224 = (($221) + 4)|0;
         $225 = $224;
         $226 = HEAP32[$225>>2]|0;
         $227 = (_bitshift64Lshr(($223|0),($226|0),48)|0);
         $228 = tempRet0;
         $229 = $227 & $217;
         $230 = $220;
         $231 = $230;
         $232 = HEAP32[$231>>2]|0;
         $233 = (($230) + 4)|0;
         $234 = $233;
         $235 = HEAP32[$234>>2]|0;
         $236 = $229 & 65535;
         $237 = (_bitshift64Shl(($236|0),0,48)|0);
         $238 = tempRet0;
         $239 = $235 & 65535;
         $240 = $232 | $237;
         $241 = $239 | $238;
         $242 = $220;
         $243 = $242;
         HEAP32[$243>>2] = $240;
         $244 = (($242) + 4)|0;
         $245 = $244;
         HEAP32[$245>>2] = $241;
         break;
        } else {
         $246 = $6;
         $247 = ((($246)) + 4|0);
         $248 = HEAP32[$247>>2]|0;
         $249 = (($248) + ($207<<1)|0);
         $250 = HEAP16[$249>>1]|0;
         $251 = $13;
         $252 = ((($251)) + 8|0);
         $253 = $252;
         $254 = $253;
         $255 = HEAP32[$254>>2]|0;
         $256 = (($253) + 4)|0;
         $257 = $256;
         $258 = HEAP32[$257>>2]|0;
         $259 = $5;
         $260 = (_checkCharAttr($250,$255,$258,$259)|0);
         $261 = ($260|0)!=(0);
         if ($261) {
          break;
         }
         $262 = $13;
         $263 = ((($262)) + 16|0);
         $264 = HEAP32[$263>>2]|0;
         $265 = $264 ^ -1;
         $266 = $16;
         $267 = $9;
         $268 = (($267) + ($266<<3)|0);
         $269 = $268;
         $270 = $269;
         $271 = HEAP32[$270>>2]|0;
         $272 = (($269) + 4)|0;
         $273 = $272;
         $274 = HEAP32[$273>>2]|0;
         $275 = (_bitshift64Lshr(($271|0),($274|0),48)|0);
         $276 = tempRet0;
         $277 = $275 & $265;
         $278 = $268;
         $279 = $278;
         $280 = HEAP32[$279>>2]|0;
         $281 = (($278) + 4)|0;
         $282 = $281;
         $283 = HEAP32[$282>>2]|0;
         $284 = $277 & 65535;
         $285 = (_bitshift64Shl(($284|0),0,48)|0);
         $286 = tempRet0;
         $287 = $283 & 65535;
         $288 = $280 | $285;
         $289 = $287 | $286;
         $290 = $268;
         $291 = $290;
         HEAP32[$291>>2] = $288;
         $292 = (($290) + 4)|0;
         $293 = $292;
         HEAP32[$293>>2] = $289;
         break;
        }
       }
      } while(0);
      $294 = $16;
      $295 = (($294) + 1)|0;
      $16 = $295;
     }
    }
   }
  } while(0);
  $296 = $12;
  $297 = (($296) + 1)|0;
  $12 = $297;
 }
 STACKTOP = sp;return;
}
function _doCompTrans($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $25 = sp + 20|0;
 $29 = sp;
 $30 = sp + 76|0;
 $13 = $0;
 $14 = $1;
 $15 = $2;
 $16 = $3;
 $17 = $4;
 $18 = $5;
 $19 = $6;
 $20 = $7;
 $21 = $8;
 $22 = $9;
 $23 = $10;
 $24 = $11;
 $27 = 0;
 $31 = $23;
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(2);
 if ($33) {
  $34 = $15;
  $35 = ((($34)) + 2088|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $15;
  $38 = (_brailleIndicatorDefined($36,$37,$25)|0);
  $39 = ($38|0)!=(0);
  if ($39) {
   $40 = HEAP32[$25>>2]|0;
   $41 = ((($40)) + 46|0);
   $42 = HEAP32[$25>>2]|0;
   $43 = ((($42)) + 44|0);
   $44 = HEAP16[$43>>1]|0;
   $45 = $44 << 16 >> 16;
   $46 = $16;
   $47 = HEAP32[$46>>2]|0;
   $48 = $17;
   $49 = $18;
   $50 = $19;
   $51 = $22;
   $52 = $23;
   $53 = (_for_updatePositions($41,0,$45,0,$47,$48,$49,$50,$51,$52)|0);
   $54 = ($53|0)!=(0);
   if (!($54)) {
    $12 = 0;
    $217 = $12;
    STACKTOP = sp;return ($217|0);
   }
  }
 }
 $55 = $13;
 $26 = $55;
 L7: while(1) {
  $56 = $26;
  $57 = $14;
  $58 = ($56|0)<($57|0);
  if (!($58)) {
   label = 15;
   break;
  }
  $28 = 0;
  $59 = $26;
  $60 = $20;
  $61 = (($60) + ($59<<3)|0);
  $62 = $29;
  $63 = $62;
  $64 = HEAP32[$63>>2]|0;
  $65 = (($62) + 4)|0;
  $66 = $65;
  $67 = HEAP32[$66>>2]|0;
  $68 = $64 & -65536;
  $69 = $29;
  $70 = $69;
  HEAP32[$70>>2] = $68;
  $71 = (($69) + 4)|0;
  $72 = $71;
  HEAP32[$72>>2] = $67;
  $73 = $29;
  $74 = $73;
  $75 = HEAP32[$74>>2]|0;
  $76 = (($73) + 4)|0;
  $77 = $76;
  $78 = HEAP32[$77>>2]|0;
  $79 = $75 & 65535;
  $80 = $29;
  $81 = $80;
  HEAP32[$81>>2] = $79;
  $82 = (($80) + 4)|0;
  $83 = $82;
  HEAP32[$83>>2] = $78;
  $84 = $29;
  $85 = $84;
  $86 = HEAP32[$85>>2]|0;
  $87 = (($84) + 4)|0;
  $88 = $87;
  $89 = HEAP32[$88>>2]|0;
  $90 = $89 & -65536;
  $91 = $29;
  $92 = $91;
  HEAP32[$92>>2] = $86;
  $93 = (($91) + 4)|0;
  $94 = $93;
  HEAP32[$94>>2] = $90;
  $95 = $29;
  $96 = $95;
  $97 = HEAP32[$96>>2]|0;
  $98 = (($95) + 4)|0;
  $99 = $98;
  $100 = HEAP32[$99>>2]|0;
  $101 = $100 & 65535;
  $102 = $29;
  $103 = $102;
  HEAP32[$103>>2] = $97;
  $104 = (($102) + 4)|0;
  $105 = $104;
  HEAP32[$105>>2] = $101;
  ;HEAP32[$61>>2]=HEAP32[$29>>2]|0;HEAP32[$61+4>>2]=HEAP32[$29+4>>2]|0;
  $106 = $26;
  $107 = $17;
  $108 = ((($107)) + 4|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = (($109) + ($106<<1)|0);
  $111 = HEAP16[$110>>1]|0;
  $112 = $111&65535;
  $113 = ($112|0)==(65535);
  do {
   if ($113) {
    $27 = 1;
   } else {
    $114 = $26;
    $115 = $16;
    HEAP32[$115>>2] = $114;
    $116 = $26;
    $117 = $17;
    $118 = ((($117)) + 4|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = (($119) + ($116<<1)|0);
    $121 = HEAP16[$120>>1]|0;
    $122 = $15;
    $123 = (_getChar_2($121,$122)|0);
    $124 = ((($123)) + 40|0);
    $125 = HEAP32[$124>>2]|0;
    $28 = $125;
    $126 = $28;
    $127 = ($126|0)!=(0);
    if ($127) {
     $128 = $28;
     $129 = $15;
     $130 = ((($129)) + 31168|0);
     $131 = (($130) + ($128<<3)|0);
     $132 = $21;
     HEAP32[$132>>2] = $131;
     $133 = $21;
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($134)) + 42|0);
     $136 = HEAP16[$135>>1]|0;
     $137 = $136 << 16 >> 16;
     $138 = $21;
     $139 = HEAP32[$138>>2]|0;
     $140 = ((($139)) + 46|0);
     $141 = (($140) + ($137<<1)|0);
     $142 = $21;
     $143 = HEAP32[$142>>2]|0;
     $144 = ((($143)) + 42|0);
     $145 = HEAP16[$144>>1]|0;
     $146 = $145 << 16 >> 16;
     $147 = $21;
     $148 = HEAP32[$147>>2]|0;
     $149 = ((($148)) + 44|0);
     $150 = HEAP16[$149>>1]|0;
     $151 = $150 << 16 >> 16;
     $152 = $16;
     $153 = HEAP32[$152>>2]|0;
     $154 = $17;
     $155 = $18;
     $156 = $19;
     $157 = $22;
     $158 = $23;
     $159 = (_for_updatePositions($141,$146,$151,0,$153,$154,$155,$156,$157,$158)|0);
     $160 = ($159|0)!=(0);
     if ($160) {
      break;
     } else {
      label = 11;
      break L7;
     }
    } else {
     $161 = $26;
     $162 = $17;
     $163 = ((($162)) + 4|0);
     $164 = HEAP32[$163>>2]|0;
     $165 = (($164) + ($161<<1)|0);
     $166 = HEAP16[$165>>1]|0;
     $167 = $15;
     $168 = $16;
     $169 = HEAP32[$168>>2]|0;
     $170 = $17;
     $171 = $18;
     $172 = $19;
     $173 = $22;
     $174 = $23;
     $175 = $24;
     $176 = (_putCharacter($166,$167,$169,$170,$171,$172,$173,$174,$175)|0);
     $177 = ($176|0)!=(0);
     if ($177) {
      break;
     } else {
      label = 13;
      break L7;
     }
    }
   }
  } while(0);
  $178 = $26;
  $179 = (($178) + 1)|0;
  $26 = $179;
 }
 if ((label|0) == 11) {
  $12 = 0;
  $217 = $12;
  STACKTOP = sp;return ($217|0);
 }
 else if ((label|0) == 13) {
  $12 = 0;
  $217 = $12;
  STACKTOP = sp;return ($217|0);
 }
 else if ((label|0) == 15) {
  $180 = $23;
  $181 = HEAP32[$180>>2]|0;
  $182 = ($181|0)!=(2);
  if ($182) {
   $183 = $15;
   $184 = ((($183)) + 2092|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = $15;
   $187 = (_brailleIndicatorDefined($185,$186,$25)|0);
   $188 = ($187|0)!=(0);
   if ($188) {
    $189 = HEAP32[$25>>2]|0;
    $190 = ((($189)) + 46|0);
    $191 = HEAP32[$25>>2]|0;
    $192 = ((($191)) + 44|0);
    $193 = HEAP16[$192>>1]|0;
    $194 = $193 << 16 >> 16;
    $195 = $16;
    $196 = HEAP32[$195>>2]|0;
    $197 = $17;
    $198 = $18;
    $199 = $19;
    $200 = $22;
    $201 = $23;
    $202 = (_for_updatePositions($190,0,$194,0,$196,$197,$198,$199,$200,$201)|0);
    $203 = ($202|0)!=(0);
    if (!($203)) {
     $12 = 0;
     $217 = $12;
     STACKTOP = sp;return ($217|0);
    }
   }
  }
  $204 = $14;
  $205 = $16;
  HEAP32[$205>>2] = $204;
  $206 = $27;
  $207 = ($206|0)!=(0);
  if ($207) {
   HEAP16[$30>>1] = -1;
   $208 = $16;
   $209 = HEAP32[$208>>2]|0;
   $210 = $17;
   $211 = $18;
   $212 = $19;
   $213 = $22;
   $214 = $23;
   $215 = (_for_updatePositions($30,0,1,0,$209,$210,$211,$212,$213,$214)|0);
   $216 = ($215|0)!=(0);
   if (!($216)) {
    $12 = 0;
    $217 = $12;
    STACKTOP = sp;return ($217|0);
   }
  }
  $12 = 1;
  $217 = $12;
  STACKTOP = sp;return ($217|0);
 }
 return (0)|0;
}
function _setBefore($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $5;
 $10 = ($9|0)>=(2);
 if ($10) {
  $11 = $5;
  $12 = (($11) - 1)|0;
  $13 = $6;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($12<<1)|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17&65535;
  $19 = ($18|0)==(65535);
  if ($19) {
   $20 = $5;
   $21 = (($20) - 2)|0;
   $22 = $6;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($24) + ($21<<1)|0);
   $26 = HEAP16[$25>>1]|0;
   $8 = $26;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $27 = $5;
  $28 = ($27|0)==(0);
  if ($28) {
   $38 = 32;
  } else {
   $29 = $5;
   $30 = (($29) - 1)|0;
   $31 = $6;
   $32 = ((($31)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($33) + ($30<<1)|0);
   $35 = HEAP16[$34>>1]|0;
   $36 = $35&65535;
   $38 = $36;
  }
  $37 = $38&65535;
  $8 = $37;
 }
 $39 = $8;
 $40 = $4;
 $41 = (_getChar_2($39,$40)|0);
 $42 = ((($41)) + 24|0);
 $43 = $42;
 $44 = $43;
 $45 = HEAP32[$44>>2]|0;
 $46 = (($43) + 4)|0;
 $47 = $46;
 $48 = HEAP32[$47>>2]|0;
 $49 = $7;
 $50 = $49;
 $51 = $50;
 HEAP32[$51>>2] = $45;
 $52 = (($50) + 4)|0;
 $53 = $52;
 HEAP32[$53>>2] = $48;
 STACKTOP = sp;return;
}
function _for_selectRule($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 $15 = $15|0;
 $16 = $16|0;
 $17 = $17|0;
 $18 = $18|0;
 $19 = $19|0;
 $20 = $20|0;
 $21 = $21|0;
 $22 = $22|0;
 $23 = $23|0;
 $24 = $24|0;
 $25 = $25|0;
 $26 = $26|0;
 var $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0;
 var $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0;
 var $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0;
 var $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0;
 var $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0;
 var $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0;
 var $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0;
 var $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0;
 var $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0;
 var $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0;
 var $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0;
 var $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0;
 var $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0;
 var $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0;
 var $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0;
 var $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0;
 var $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0;
 var $899 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0;
 var $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0;
 var $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0;
 var $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0;
 var $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0;
 var $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $48 = sp + 8|0;
 $56 = sp;
 $27 = $0;
 $28 = $1;
 $29 = $3;
 $30 = $4;
 $31 = $5;
 $32 = $6;
 $33 = $7;
 $34 = $8;
 $35 = $9;
 $36 = $10;
 $37 = $11;
 $38 = $12;
 $39 = $13;
 $40 = $14;
 $41 = $15;
 $42 = $16;
 $43 = $17;
 $44 = $18;
 $45 = $19;
 $46 = $20;
 $47 = $21;
 $60 = $48;
 $61 = $60;
 HEAP32[$61>>2] = $22;
 $62 = (($60) + 4)|0;
 $63 = $62;
 HEAP32[$63>>2] = $23;
 $49 = $24;
 $50 = $25;
 $51 = $26;
 $64 = $28;
 $65 = $46;
 $66 = ($64|0)<($65|0);
 if ($66) {
  $67 = $46;
  $73 = $67;
 } else {
  $68 = $31;
  $69 = ((($68)) + 8|0);
  $70 = HEAP32[$69>>2]|0;
  $73 = $70;
 }
 $71 = $28;
 $72 = (($73) - ($71))|0;
 $52 = $72;
 $55 = 0;
 $74 = $28;
 $75 = $31;
 $76 = ((($75)) + 4|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = (($77) + ($74<<1)|0);
 $79 = HEAP16[$78>>1]|0;
 $80 = $27;
 $81 = (_getChar_2($79,$80)|0);
 $82 = $49;
 HEAP32[$82>>2] = $81;
 $53 = 0;
 L5: while(1) {
  $83 = $53;
  $84 = ($83|0)<(3);
  if (!($84)) {
   label = 149;
   break;
  }
  $85 = $53;
  switch ($85|0) {
  case 2:  {
   label = 11;
   break L5;
   break;
  }
  case 0:  {
   $86 = $52;
   $87 = ($86|0)>=(2);
   if ($87) {
    $88 = $28;
    $89 = $31;
    $90 = ((($89)) + 4|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = (($91) + ($88<<1)|0);
    $93 = $27;
    $94 = (__lou_stringHash($92,1,$93)|0);
    $95 = $27;
    $96 = ((($95)) + 22184|0);
    $97 = (($96) + ($94<<2)|0);
    $98 = HEAP32[$97>>2]|0;
    $55 = $98;
   }
   break;
  }
  case 1:  {
   $99 = $52;
   $100 = ($99|0)>=(1);
   if ($100) {
    $52 = 1;
    $101 = $49;
    $102 = HEAP32[$101>>2]|0;
    $103 = ((($102)) + 16|0);
    $104 = HEAP32[$103>>2]|0;
    $55 = $104;
   }
   break;
  }
  default: {
  }
  }
  L13: while(1) {
   $114 = $55;
   $115 = ($114|0)!=(0);
   if (!($115)) {
    break;
   }
   $116 = $55;
   $117 = $27;
   $118 = ((($117)) + 31168|0);
   $119 = (($118) + ($116<<3)|0);
   $120 = $36;
   HEAP32[$120>>2] = $119;
   $121 = $36;
   $122 = HEAP32[$121>>2]|0;
   $123 = ((($122)) + 36|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = $34;
   HEAP32[$125>>2] = $124;
   $126 = $36;
   $127 = HEAP32[$126>>2]|0;
   $128 = ((($127)) + 42|0);
   $129 = HEAP16[$128>>1]|0;
   $130 = $129 << 16 >> 16;
   $131 = $37;
   HEAP32[$131>>2] = $130;
   $132 = $53;
   $133 = ($132|0)==(1);
   if ($133) {
    label = 16;
   } else {
    $134 = $37;
    $135 = HEAP32[$134>>2]|0;
    $136 = $52;
    $137 = ($135|0)<=($136|0);
    if ($137) {
     $138 = $27;
     $139 = $28;
     $140 = $31;
     $141 = $32;
     $142 = $36;
     $143 = HEAP32[$142>>2]|0;
     $144 = $37;
     $145 = HEAP32[$144>>2]|0;
     $146 = (_validMatch($138,$139,$140,$141,$143,$145)|0);
     $147 = ($146|0)!=(0);
     if ($147) {
      label = 16;
     }
    }
   }
   L19: do {
    if ((label|0) == 16) {
     label = 0;
     $148 = $36;
     $149 = HEAP32[$148>>2]|0;
     $150 = ((($149)) + 24|0);
     $151 = $150;
     $152 = $151;
     $153 = HEAP32[$152>>2]|0;
     $154 = (($151) + 4)|0;
     $155 = $154;
     $156 = HEAP32[$155>>2]|0;
     $157 = $153 & 33554432;
     $158 = ($157|0)!=(0);
     $159 = (0)!=(0);
     $160 = $158 | $159;
     if ($160) {
      $161 = $28;
      $162 = $33;
      $163 = (($162) + ($161<<3)|0);
      $164 = $163;
      $165 = $164;
      $166 = HEAP32[$165>>2]|0;
      $167 = (($164) + 4)|0;
      $168 = $167;
      $169 = HEAP32[$168>>2]|0;
      $170 = $166 & 65535;
      $171 = ($170|0)!=(0);
      if ($171) {
       break L13;
      }
      $172 = $28;
      $173 = $33;
      $174 = (($173) + ($172<<3)|0);
      $175 = $174;
      $176 = $175;
      $177 = HEAP32[$176>>2]|0;
      $178 = (($175) + 4)|0;
      $179 = $178;
      $180 = HEAP32[$179>>2]|0;
      $181 = (_bitshift64Lshr(($177|0),($180|0),16)|0);
      $182 = tempRet0;
      $183 = $181 & 65535;
      $184 = ($183|0)!=(0);
      if ($184) {
       break L13;
      }
      $185 = $28;
      $186 = $33;
      $187 = (($186) + ($185<<3)|0);
      $188 = $187;
      $189 = $188;
      $190 = HEAP32[$189>>2]|0;
      $191 = (($188) + 4)|0;
      $192 = $191;
      $193 = HEAP32[$192>>2]|0;
      $194 = $193 & 65535;
      $195 = ($194|0)!=(0);
      if ($195) {
       break L13;
      }
      $196 = $28;
      $197 = $33;
      $198 = (($197) + ($196<<3)|0);
      $199 = $198;
      $200 = $199;
      $201 = HEAP32[$200>>2]|0;
      $202 = (($199) + 4)|0;
      $203 = $202;
      $204 = HEAP32[$203>>2]|0;
      $205 = (_bitshift64Lshr(($201|0),($204|0),48)|0);
      $206 = tempRet0;
      $207 = ($205|0)!=(0);
      if ($207) {
       break L13;
      }
     }
     $208 = $36;
     $209 = HEAP32[$208>>2]|0;
     $210 = ((($209)) + 16|0);
     $211 = $210;
     $212 = $211;
     $213 = HEAP32[$212>>2]|0;
     $214 = (($211) + 4)|0;
     $215 = $214;
     $216 = HEAP32[$215>>2]|0;
     $217 = $213 & 33554432;
     $218 = ($217|0)!=(0);
     $219 = (0)!=(0);
     $220 = $218 | $219;
     if ($220) {
      $221 = $28;
      $222 = $37;
      $223 = HEAP32[$222>>2]|0;
      $224 = (($221) + ($223))|0;
      $225 = $33;
      $226 = (($225) + ($224<<3)|0);
      $227 = $226;
      $228 = $227;
      $229 = HEAP32[$228>>2]|0;
      $230 = (($227) + 4)|0;
      $231 = $230;
      $232 = HEAP32[$231>>2]|0;
      $233 = $229 & 65535;
      $234 = ($233|0)!=(0);
      if ($234) {
       break L13;
      }
      $235 = $28;
      $236 = $37;
      $237 = HEAP32[$236>>2]|0;
      $238 = (($235) + ($237))|0;
      $239 = $33;
      $240 = (($239) + ($238<<3)|0);
      $241 = $240;
      $242 = $241;
      $243 = HEAP32[$242>>2]|0;
      $244 = (($241) + 4)|0;
      $245 = $244;
      $246 = HEAP32[$245>>2]|0;
      $247 = (_bitshift64Lshr(($243|0),($246|0),16)|0);
      $248 = tempRet0;
      $249 = $247 & 65535;
      $250 = ($249|0)!=(0);
      if ($250) {
       break L13;
      }
      $251 = $28;
      $252 = $37;
      $253 = HEAP32[$252>>2]|0;
      $254 = (($251) + ($253))|0;
      $255 = $33;
      $256 = (($255) + ($254<<3)|0);
      $257 = $256;
      $258 = $257;
      $259 = HEAP32[$258>>2]|0;
      $260 = (($257) + 4)|0;
      $261 = $260;
      $262 = HEAP32[$261>>2]|0;
      $263 = $262 & 65535;
      $264 = ($263|0)!=(0);
      if ($264) {
       break L13;
      }
      $265 = $28;
      $266 = $37;
      $267 = HEAP32[$266>>2]|0;
      $268 = (($265) + ($267))|0;
      $269 = $33;
      $270 = (($269) + ($268<<3)|0);
      $271 = $270;
      $272 = $271;
      $273 = HEAP32[$272>>2]|0;
      $274 = (($271) + 4)|0;
      $275 = $274;
      $276 = HEAP32[$275>>2]|0;
      $277 = (_bitshift64Lshr(($273|0),($276|0),48)|0);
      $278 = tempRet0;
      $279 = ($277|0)!=(0);
      if ($279) {
       break L13;
      }
     }
     $280 = $37;
     $281 = HEAP32[$280>>2]|0;
     $282 = $27;
     $283 = $28;
     $284 = $31;
     _setAfter($281,$282,$283,$284,$56);
     $285 = $36;
     $286 = HEAP32[$285>>2]|0;
     $287 = ((($286)) + 16|0);
     $288 = $287;
     $289 = $288;
     $290 = HEAP32[$289>>2]|0;
     $291 = (($288) + 4)|0;
     $292 = $291;
     $293 = HEAP32[$292>>2]|0;
     $294 = $290 & -33554433;
     $295 = ($294|0)!=(0);
     $296 = ($293|0)!=(0);
     $297 = $295 | $296;
     if ($297) {
      $298 = $48;
      $299 = $298;
      $300 = HEAP32[$299>>2]|0;
      $301 = (($298) + 4)|0;
      $302 = $301;
      $303 = HEAP32[$302>>2]|0;
      $304 = $36;
      $305 = HEAP32[$304>>2]|0;
      $306 = ((($305)) + 16|0);
      $307 = $306;
      $308 = $307;
      $309 = HEAP32[$308>>2]|0;
      $310 = (($307) + 4)|0;
      $311 = $310;
      $312 = HEAP32[$311>>2]|0;
      $313 = $300 & $309;
      $314 = $303 & $312;
      $315 = ($313|0)!=(0);
      $316 = ($314|0)!=(0);
      $317 = $315 | $316;
      if (!($317)) {
       break;
      }
     }
     $318 = $36;
     $319 = HEAP32[$318>>2]|0;
     $320 = ((($319)) + 24|0);
     $321 = $320;
     $322 = $321;
     $323 = HEAP32[$322>>2]|0;
     $324 = (($321) + 4)|0;
     $325 = $324;
     $326 = HEAP32[$325>>2]|0;
     $327 = $323 & -33554433;
     $328 = ($327|0)!=(0);
     $329 = ($326|0)!=(0);
     $330 = $328 | $329;
     if ($330) {
      $331 = $56;
      $332 = $331;
      $333 = HEAP32[$332>>2]|0;
      $334 = (($331) + 4)|0;
      $335 = $334;
      $336 = HEAP32[$335>>2]|0;
      $337 = $36;
      $338 = HEAP32[$337>>2]|0;
      $339 = ((($338)) + 24|0);
      $340 = $339;
      $341 = $340;
      $342 = HEAP32[$341>>2]|0;
      $343 = (($340) + 4)|0;
      $344 = $343;
      $345 = HEAP32[$344>>2]|0;
      $346 = $333 & $342;
      $347 = $336 & $345;
      $348 = ($346|0)!=(0);
      $349 = ($347|0)!=(0);
      $350 = $348 | $349;
      if (!($350)) {
       break;
      }
     }
     $351 = $36;
     $352 = HEAP32[$351>>2]|0;
     $353 = ((($352)) + 40|0);
     $354 = HEAP8[$353>>0]|0;
     $355 = $354 << 24 >> 24;
     $356 = ($355|0)!=(0);
     if ($356) {
      $357 = $27;
      $358 = $28;
      $359 = $31;
      $360 = $37;
      $361 = HEAP32[$360>>2]|0;
      $362 = (_syllableBreak($357,$358,$359,$361)|0);
      $363 = ($362|0)!=(0);
      if ($363) {
       break;
      }
     }
     $364 = $34;
     $365 = HEAP32[$364>>2]|0;
     do {
      switch ($365|0) {
      case 84: case 89: case 88: case 73: case 110: case 65: case 64: case 63: case 71: case 62: case 68: case 67: case 66: case 61:  {
       label = 149;
       break L5;
       break;
      }
      case 79:  {
       $366 = $45;
       $367 = ($366|0)!=(0);
       if ($367) {
        break L19;
       }
       $368 = $30;
       $369 = $368 & 1;
       $370 = ($369|0)!=(0);
       if ($370) {
        break L19;
       }
       $371 = $30;
       $372 = $371 & 34;
       $373 = ($372|0)!=(0);
       if (!($373)) {
        label = 149;
        break L5;
       }
       $374 = $28;
       $375 = $46;
       $376 = ($374|0)>=($375|0);
       if (!($376)) {
        label = 149;
        break L5;
       }
       $377 = $28;
       $378 = $47;
       $379 = ($377|0)<=($378|0);
       if ($379) {
        break L19;
       } else {
        label = 149;
        break L5;
       }
       break;
      }
      case 81: case 80:  {
       $380 = $45;
       $381 = ($380|0)!=(0);
       if ($381) {
        break L19;
       }
       $382 = $30;
       $383 = $382 & 1;
       $384 = ($383|0)!=(0);
       if ($384) {
        break L19;
       }
       $385 = $27;
       $386 = $28;
       $387 = $31;
       $388 = $33;
       $389 = ((($2)) + 12|0);
       $390 = HEAP32[$389>>2]|0;
       $391 = $29;
       $392 = $37;
       $393 = HEAP32[$392>>2]|0;
       $394 = $44;
       $395 = (_isRepeatedWord($385,$386,$387,$388,$390,$391,$393,$394)|0);
       $396 = ($395|0)!=(0);
       if (!($396)) {
        break L19;
       }
       $397 = $28;
       $398 = $44;
       $399 = HEAP32[$398>>2]|0;
       $400 = ($397|0)>($399|0);
       if ($400) {
        $401 = $28;
        $402 = $44;
        $403 = HEAP32[$402>>2]|0;
        $404 = (($401) - ($403))|0;
        $405 = (($404) - 1)|0;
        $406 = $31;
        $407 = ((($406)) + 4|0);
        $408 = HEAP32[$407>>2]|0;
        $409 = (($408) + ($405<<1)|0);
        $410 = HEAP16[$409>>1]|0;
        $411 = $27;
        $412 = (_checkCharAttr($410,2,0,$411)|0);
        $413 = ($412|0)!=(0);
        $415 = $413;
       } else {
        $415 = 0;
       }
       $414 = $415&1;
       $416 = $34;
       $417 = HEAP32[$416>>2]|0;
       $418 = ($417|0)==(81);
       $419 = $418&1;
       $420 = ($414|0)==($419|0);
       if ($420) {
        label = 149;
        break L5;
       } else {
        break L19;
       }
       break;
      }
      case 87:  {
       $421 = $45;
       $422 = ($421|0)!=(0);
       if ($422) {
        break L19;
       }
       $423 = $30;
       $424 = $423 & 1;
       $425 = ($424|0)!=(0);
       if ($425) {
        break L19;
       } else {
        label = 149;
        break L5;
       }
       break;
      }
      case 86:  {
       $426 = $34;
       HEAP32[$426>>2] = 83;
       label = 47;
       break;
      }
      case 83:  {
       label = 47;
       break;
      }
      case 74:  {
       $438 = $42;
       $439 = ($438|0)!=(0);
       if (!($439)) {
        break L19;
       }
       $440 = $27;
       $441 = $28;
       $442 = $31;
       $443 = $34;
       $444 = HEAP32[$443>>2]|0;
       $445 = $36;
       $446 = HEAP32[$445>>2]|0;
       $447 = $38;
       $448 = $39;
       $449 = $40;
       $450 = $41;
       $451 = $50;
       $452 = $51;
       $453 = (_passDoTest($440,$441,$442,$444,$446,$447,$448,$449,$450,$451,$452)|0);
       $454 = ($453|0)!=(0);
       if ($454) {
        label = 149;
        break L5;
       } else {
        break L19;
       }
       break;
      }
      case 90:  {
       $455 = $45;
       $456 = ($455|0)!=(0);
       if ($456) {
        break L19;
       }
       $457 = $30;
       $458 = $457 & 1;
       $459 = ($458|0)!=(0);
       if ($459) {
        break L19;
       } else {
        label = 53;
        break L5;
       }
       break;
      }
      case 91:  {
       $515 = $45;
       $516 = ($515|0)!=(0);
       if ($516) {
        break L19;
       }
       $517 = $30;
       $518 = $517 & 1;
       $519 = ($518|0)!=(0);
       if ($519) {
        break L19;
       }
       $520 = $28;
       $521 = $37;
       $522 = HEAP32[$521>>2]|0;
       $523 = $33;
       $524 = (_checkEmphasisChange($520,$522,$523)|0);
       $525 = ($524|0)!=(0);
       if ($525) {
        break L19;
       }
       break;
      }
      case 96:  {
       break;
      }
      case 92:  {
       $557 = $45;
       $558 = ($557|0)!=(0);
       if ($558) {
        break L19;
       }
       $559 = $30;
       $560 = $559 & 1;
       $561 = ($560|0)!=(0);
       if ($561) {
        break L19;
       }
       $562 = $48;
       $563 = $562;
       $564 = HEAP32[$563>>2]|0;
       $565 = (($562) + 4)|0;
       $566 = $565;
       $567 = HEAP32[$566>>2]|0;
       $568 = $564 & 2;
       $569 = ($568|0)!=(0);
       $570 = (0)!=(0);
       $571 = $569 | $570;
       if ($571) {
        label = 149;
        break L5;
       }
       $572 = $56;
       $573 = $572;
       $574 = HEAP32[$573>>2]|0;
       $575 = (($572) + 4)|0;
       $576 = $575;
       $577 = HEAP32[$576>>2]|0;
       $578 = $574 & 2;
       $579 = ($578|0)!=(0);
       $580 = (0)!=(0);
       $581 = $579 | $580;
       if ($581) {
        label = 149;
        break L5;
       } else {
        break L19;
       }
       break;
      }
      case 93:  {
       $582 = $45;
       $583 = ($582|0)!=(0);
       if ($583) {
        break L19;
       }
       $584 = $30;
       $585 = $584 & 1;
       $586 = ($585|0)!=(0);
       if ($586) {
        break L19;
       }
       $587 = $48;
       $588 = $587;
       $589 = HEAP32[$588>>2]|0;
       $590 = (($587) + 4)|0;
       $591 = $590;
       $592 = HEAP32[$591>>2]|0;
       $593 = $589 & 9;
       $594 = ($593|0)!=(0);
       $595 = (0)!=(0);
       $596 = $594 | $595;
       if (!($596)) {
        break L19;
       }
       $597 = $56;
       $598 = $597;
       $599 = HEAP32[$598>>2]|0;
       $600 = (($597) + 4)|0;
       $601 = $600;
       $602 = HEAP32[$601>>2]|0;
       $603 = $599 & 1;
       $604 = ($603|0)!=(0);
       $605 = (0)!=(0);
       $606 = $604 | $605;
       if (!($606)) {
        break L19;
       }
       $607 = ((($2)) + 12|0);
       $608 = HEAP32[$607>>2]|0;
       $609 = $36;
       $610 = HEAP32[$609>>2]|0;
       $611 = ((($610)) + 44|0);
       $612 = HEAP16[$611>>1]|0;
       $613 = $612 << 16 >> 16;
       $614 = (($608) + ($613))|0;
       $615 = ((($2)) + 8|0);
       $616 = HEAP32[$615>>2]|0;
       $617 = ($614|0)<($616|0);
       if (!($617)) {
        break L19;
       }
       $618 = $28;
       $619 = $37;
       $620 = HEAP32[$619>>2]|0;
       $621 = (($618) + ($620))|0;
       $622 = (($621) + 1)|0;
       $57 = $622;
       while(1) {
        $623 = $57;
        $624 = $31;
        $625 = ((($624)) + 8|0);
        $626 = HEAP32[$625>>2]|0;
        $627 = ($623|0)<($626|0);
        if (!($627)) {
         break L19;
        }
        $628 = $57;
        $629 = $31;
        $630 = ((($629)) + 4|0);
        $631 = HEAP32[$630>>2]|0;
        $632 = (($631) + ($628<<1)|0);
        $633 = HEAP16[$632>>1]|0;
        $634 = $27;
        $635 = (_checkCharAttr($633,1,0,$634)|0);
        $636 = ($635|0)!=(0);
        $637 = $57;
        if (!($636)) {
         break;
        }
        $646 = (($637) + 1)|0;
        $57 = $646;
       }
       $638 = $31;
       $639 = ((($638)) + 4|0);
       $640 = HEAP32[$639>>2]|0;
       $641 = (($640) + ($637<<1)|0);
       $642 = HEAP16[$641>>1]|0;
       $643 = $27;
       $644 = (_checkCharAttr($642,4,0,$643)|0);
       $645 = ($644|0)!=(0);
       if ($645) {
        label = 149;
        break L5;
       } else {
        break L19;
       }
       break;
      }
      case 95:  {
       $647 = $45;
       $648 = ($647|0)!=(0);
       if ($648) {
        break L19;
       }
       $649 = $30;
       $650 = $649 & 1;
       $651 = ($650|0)!=(0);
       if ($651) {
        break L19;
       }
       $652 = $48;
       $653 = $652;
       $654 = HEAP32[$653>>2]|0;
       $655 = (($652) + 4)|0;
       $656 = $655;
       $657 = HEAP32[$656>>2]|0;
       $658 = $654 & 1;
       $659 = ($658|0)!=(0);
       $660 = (0)!=(0);
       $661 = $659 | $660;
       if (!($661)) {
        break L19;
       }
       $662 = $56;
       $663 = $662;
       $664 = HEAP32[$663>>2]|0;
       $665 = (($662) + 4)|0;
       $666 = $665;
       $667 = HEAP32[$666>>2]|0;
       $668 = $664 & 1;
       $669 = ($668|0)!=(0);
       $670 = (0)!=(0);
       $671 = $669 | $670;
       $672 = $35;
       $673 = ($672|0)!=(94);
       $or$cond3 = $671 & $673;
       if ($or$cond3) {
        label = 149;
        break L5;
       } else {
        break L19;
       }
       break;
      }
      case 94:  {
       $674 = $45;
       $675 = ($674|0)!=(0);
       if ($675) {
        break L19;
       }
       $676 = $30;
       $677 = $676 & 1;
       $678 = ($677|0)!=(0);
       if ($678) {
        break L19;
       }
       $679 = $48;
       $680 = $679;
       $681 = HEAP32[$680>>2]|0;
       $682 = (($679) + 4)|0;
       $683 = $682;
       $684 = HEAP32[$683>>2]|0;
       $685 = $681 & 9;
       $686 = ($685|0)!=(0);
       $687 = (0)!=(0);
       $688 = $686 | $687;
       if (!($688)) {
        break L19;
       }
       $689 = $27;
       $690 = $28;
       $691 = $31;
       $692 = $37;
       $693 = HEAP32[$692>>2]|0;
       $694 = $56;
       $695 = $694;
       $696 = HEAP32[$695>>2]|0;
       $697 = (($694) + 4)|0;
       $698 = $697;
       $699 = HEAP32[$698>>2]|0;
       $700 = (_onlyLettersAhead($689,$690,$691,$693,$696,$699)|0);
       $701 = ($700|0)!=(0);
       if (!($701)) {
        break L19;
       }
       $702 = $27;
       $703 = $28;
       $704 = $30;
       $705 = $31;
       $706 = $34;
       $707 = HEAP32[$706>>2]|0;
       $708 = $37;
       $709 = HEAP32[$708>>2]|0;
       $710 = $43;
       $711 = (_noCompbrlAhead($702,$703,$704,$705,$707,$709,$710)|0);
       $712 = ($711|0)!=(0);
       if ($712) {
        label = 149;
        break L5;
       } else {
        break L19;
       }
       break;
      }
      case 97:  {
       $713 = $45;
       $714 = ($713|0)!=(0);
       if ($714) {
        break L19;
       }
       $715 = $30;
       $716 = $715 & 1;
       $717 = ($716|0)!=(0);
       if ($717) {
        break L19;
       }
       $718 = $48;
       $719 = $718;
       $720 = HEAP32[$719>>2]|0;
       $721 = (($718) + 4)|0;
       $722 = $721;
       $723 = HEAP32[$722>>2]|0;
       $724 = $720 & 9;
       $725 = ($724|0)!=(0);
       $726 = (0)!=(0);
       $727 = $725 | $726;
       if (!($727)) {
        break L19;
       }
       $728 = $56;
       $729 = $728;
       $730 = HEAP32[$729>>2]|0;
       $731 = (($728) + 4)|0;
       $732 = $731;
       $733 = HEAP32[$732>>2]|0;
       $734 = $730 & 11;
       $735 = ($734|0)!=(0);
       $736 = (0)!=(0);
       $737 = $735 | $736;
       if ($737) {
        label = 149;
        break L5;
       } else {
        break L19;
       }
       break;
      }
      case 98:  {
       $738 = $45;
       $739 = ($738|0)!=(0);
       if ($739) {
        break L19;
       }
       $740 = $30;
       $741 = $740 & 1;
       $742 = ($741|0)!=(0);
       if ($742) {
        break L19;
       }
       $743 = $48;
       $744 = $743;
       $745 = HEAP32[$744>>2]|0;
       $746 = (($743) + 4)|0;
       $747 = $746;
       $748 = HEAP32[$747>>2]|0;
       $749 = $745 & 11;
       $750 = ($749|0)!=(0);
       $751 = (0)!=(0);
       $752 = $750 | $751;
       if (!($752)) {
        break L19;
       }
       $753 = $56;
       $754 = $753;
       $755 = HEAP32[$754>>2]|0;
       $756 = (($753) + 4)|0;
       $757 = $756;
       $758 = HEAP32[$757>>2]|0;
       $759 = $755 & 9;
       $760 = ($759|0)!=(0);
       $761 = (0)!=(0);
       $762 = $760 | $761;
       if ($762) {
        label = 149;
        break L5;
       } else {
        break L19;
       }
       break;
      }
      case 99:  {
       $763 = $45;
       $764 = ($763|0)!=(0);
       if ($764) {
        break L19;
       }
       $765 = $30;
       $766 = $765 & 1;
       $767 = ($766|0)!=(0);
       if ($767) {
        break L19;
       }
       $768 = $48;
       $769 = $768;
       $770 = HEAP32[$769>>2]|0;
       $771 = (($768) + 4)|0;
       $772 = $771;
       $773 = HEAP32[$772>>2]|0;
       $774 = $770 & 9;
       $775 = ($774|0)!=(0);
       $776 = (0)!=(0);
       $777 = $775 | $776;
       if (!($777)) {
        break L19;
       }
       $778 = $56;
       $779 = $778;
       $780 = HEAP32[$779>>2]|0;
       $781 = (($778) + 4)|0;
       $782 = $781;
       $783 = HEAP32[$782>>2]|0;
       $784 = $780 & 2;
       $785 = ($784|0)!=(0);
       $786 = (0)!=(0);
       $787 = $785 | $786;
       if ($787) {
        label = 149;
        break L5;
       } else {
        break L19;
       }
       break;
      }
      case 100:  {
       $788 = $45;
       $789 = ($788|0)!=(0);
       if ($789) {
        break L19;
       }
       $790 = $30;
       $791 = $790 & 1;
       $792 = ($791|0)!=(0);
       if ($792) {
        break L19;
       }
       $793 = $48;
       $794 = $793;
       $795 = HEAP32[$794>>2]|0;
       $796 = (($793) + 4)|0;
       $797 = $796;
       $798 = HEAP32[$797>>2]|0;
       $799 = $795 & 11;
       $800 = ($799|0)!=(0);
       $801 = (0)!=(0);
       $802 = $800 | $801;
       if (!($802)) {
        break L19;
       }
       $803 = $56;
       $804 = $803;
       $805 = HEAP32[$804>>2]|0;
       $806 = (($803) + 4)|0;
       $807 = $806;
       $808 = HEAP32[$807>>2]|0;
       $809 = $805 & 2;
       $810 = ($809|0)!=(0);
       $811 = (0)!=(0);
       $812 = $810 | $811;
       if ($812) {
        label = 149;
        break L5;
       } else {
        break L19;
       }
       break;
      }
      case 101:  {
       $813 = $45;
       $814 = ($813|0)!=(0);
       if ($814) {
        break L19;
       }
       $815 = $30;
       $816 = $815 & 1;
       $817 = ($816|0)!=(0);
       if ($817) {
        break L19;
       }
       $818 = $48;
       $819 = $818;
       $820 = HEAP32[$819>>2]|0;
       $821 = (($818) + 4)|0;
       $822 = $821;
       $823 = HEAP32[$822>>2]|0;
       $824 = $820 & 2;
       $825 = ($824|0)!=(0);
       $826 = (0)!=(0);
       $827 = $825 | $826;
       if (!($827)) {
        break L19;
       }
       $828 = $56;
       $829 = $828;
       $830 = HEAP32[$829>>2]|0;
       $831 = (($828) + 4)|0;
       $832 = $831;
       $833 = HEAP32[$832>>2]|0;
       $834 = $830 & 2;
       $835 = ($834|0)!=(0);
       $836 = (0)!=(0);
       $837 = $835 | $836;
       if ($837) {
        label = 149;
        break L5;
       } else {
        break L19;
       }
       break;
      }
      case 102:  {
       $838 = $45;
       $839 = ($838|0)!=(0);
       if ($839) {
        break L19;
       }
       $840 = $30;
       $841 = $840 & 1;
       $842 = ($841|0)!=(0);
       if ($842) {
        break L19;
       }
       $843 = $48;
       $844 = $843;
       $845 = HEAP32[$844>>2]|0;
       $846 = (($843) + 4)|0;
       $847 = $846;
       $848 = HEAP32[$847>>2]|0;
       $849 = $845 & 2;
       $850 = ($849|0)!=(0);
       $851 = (0)!=(0);
       $852 = $850 | $851;
       if (!($852)) {
        break L19;
       }
       $853 = $56;
       $854 = $853;
       $855 = HEAP32[$854>>2]|0;
       $856 = (($853) + 4)|0;
       $857 = $856;
       $858 = HEAP32[$857>>2]|0;
       $859 = $855 & 11;
       $860 = ($859|0)!=(0);
       $861 = (0)!=(0);
       $862 = $860 | $861;
       if ($862) {
        label = 149;
        break L5;
       } else {
        break L19;
       }
       break;
      }
      case 103:  {
       $863 = $45;
       $864 = ($863|0)!=(0);
       if ($864) {
        break L19;
       }
       $865 = $30;
       $866 = $865 & 1;
       $867 = ($866|0)!=(0);
       if ($867) {
        break L19;
       }
       $868 = $48;
       $869 = $868;
       $870 = HEAP32[$869>>2]|0;
       $871 = (($868) + 4)|0;
       $872 = $871;
       $873 = HEAP32[$872>>2]|0;
       $874 = $870 & 2;
       $875 = ($874|0)!=(0);
       $876 = (0)!=(0);
       $877 = $875 | $876;
       if (!($877)) {
        break L19;
       }
       $878 = $56;
       $879 = $878;
       $880 = HEAP32[$879>>2]|0;
       $881 = (($878) + 4)|0;
       $882 = $881;
       $883 = HEAP32[$882>>2]|0;
       $884 = $880 & 9;
       $885 = ($884|0)!=(0);
       $886 = (0)!=(0);
       $887 = $885 | $886;
       if ($887) {
        label = 149;
        break L5;
       } else {
        break L19;
       }
       break;
      }
      case 106:  {
       $888 = $48;
       $889 = $888;
       $890 = HEAP32[$889>>2]|0;
       $891 = (($888) + 4)|0;
       $892 = $891;
       $893 = HEAP32[$892>>2]|0;
       $894 = $890 & 9;
       $895 = ($894|0)!=(0);
       $896 = (0)!=(0);
       $897 = $895 | $896;
       if (!($897)) {
        break L19;
       }
       $898 = $56;
       $899 = $898;
       $900 = HEAP32[$899>>2]|0;
       $901 = (($898) + 4)|0;
       $902 = $901;
       $903 = HEAP32[$902>>2]|0;
       $904 = $900 & 4;
       $905 = ($904|0)!=(0);
       $906 = (0)!=(0);
       $907 = $905 | $906;
       if ($907) {
        label = 149;
        break L5;
       } else {
        break L19;
       }
       break;
      }
      case 107:  {
       $908 = $35;
       $909 = ($908|0)!=(84);
       if (!($909)) {
        break L19;
       }
       $910 = $48;
       $911 = $910;
       $912 = HEAP32[$911>>2]|0;
       $913 = (($910) + 4)|0;
       $914 = $913;
       $915 = HEAP32[$914>>2]|0;
       $916 = $912 & 4;
       $917 = ($916|0)!=(0);
       $918 = (0)!=(0);
       $919 = $917 | $918;
       if (!($919)) {
        break L19;
       }
       $920 = $56;
       $921 = $920;
       $922 = HEAP32[$921>>2]|0;
       $923 = (($920) + 4)|0;
       $924 = $923;
       $925 = HEAP32[$924>>2]|0;
       $926 = $922 & 4;
       $927 = ($926|0)!=(0);
       $928 = (0)!=(0);
       $929 = $927 | $928;
       if ($929) {
        label = 149;
        break L5;
       } else {
        break L19;
       }
       break;
      }
      case 108:  {
       $930 = $48;
       $931 = $930;
       $932 = HEAP32[$931>>2]|0;
       $933 = (($930) + 4)|0;
       $934 = $933;
       $935 = HEAP32[$934>>2]|0;
       $936 = $932 & 4;
       $937 = ($936|0)!=(0);
       $938 = (0)!=(0);
       $939 = $937 | $938;
       $940 = $35;
       $941 = ($940|0)!=(84);
       $or$cond5 = $939 & $941;
       if ($or$cond5) {
        label = 149;
        break L5;
       } else {
        break L19;
       }
       break;
      }
      case 109:  {
       $942 = $56;
       $943 = $942;
       $944 = HEAP32[$943>>2]|0;
       $945 = (($942) + 4)|0;
       $946 = $945;
       $947 = HEAP32[$946>>2]|0;
       $948 = $944 & 4;
       $949 = ($948|0)!=(0);
       $950 = (0)!=(0);
       $951 = $949 | $950;
       if ($951) {
        label = 124;
        break L5;
       } else {
        break L19;
       }
       break;
      }
      case 104:  {
       $963 = $28;
       $964 = $31;
       $965 = ((($964)) + 4|0);
       $966 = HEAP32[$965>>2]|0;
       $967 = (($966) + ($963<<1)|0);
       $968 = HEAP16[$967>>1]|0;
       $969 = $27;
       $970 = (_checkCharAttr($968,8,0,$969)|0);
       $971 = ($970|0)!=(0);
       if (!($971)) {
        break L19;
       }
       $972 = $28;
       $973 = ($972|0)>(0);
       if ($973) {
        $974 = $28;
        $975 = (($974) - 1)|0;
        $976 = $31;
        $977 = ((($976)) + 4|0);
        $978 = HEAP32[$977>>2]|0;
        $979 = (($978) + ($975<<1)|0);
        $980 = HEAP16[$979>>1]|0;
        $981 = $27;
        $982 = (_checkCharAttr($980,2,0,$981)|0);
        $983 = ($982|0)!=(0);
        if ($983) {
         break L19;
        }
       }
       $984 = $28;
       $985 = $37;
       $986 = HEAP32[$985>>2]|0;
       $987 = (($984) + ($986))|0;
       $54 = $987;
       while(1) {
        $988 = $54;
        $989 = $31;
        $990 = ((($989)) + 8|0);
        $991 = HEAP32[$990>>2]|0;
        $992 = ($988|0)<($991|0);
        if (!($992)) {
         break L19;
        }
        $993 = $54;
        $994 = $31;
        $995 = ((($994)) + 4|0);
        $996 = HEAP32[$995>>2]|0;
        $997 = (($996) + ($993<<1)|0);
        $998 = HEAP16[$997>>1]|0;
        $999 = $27;
        $1000 = (_checkCharAttr($998,6,0,$999)|0);
        $1001 = ($1000|0)!=(0);
        if ($1001) {
         label = 149;
         break L5;
        }
        $1002 = $54;
        $1003 = $31;
        $1004 = ((($1003)) + 4|0);
        $1005 = HEAP32[$1004>>2]|0;
        $1006 = (($1005) + ($1002<<1)|0);
        $1007 = HEAP16[$1006>>1]|0;
        $1008 = $27;
        $1009 = (_checkCharAttr($1007,1,0,$1008)|0);
        $1010 = ($1009|0)!=(0);
        if ($1010) {
         break L19;
        }
        $1011 = $54;
        $1012 = (($1011) + 1)|0;
        $54 = $1012;
       }
       break;
      }
      case 105:  {
       $1013 = $28;
       $1014 = $31;
       $1015 = ((($1014)) + 4|0);
       $1016 = HEAP32[$1015>>2]|0;
       $1017 = (($1016) + ($1013<<1)|0);
       $1018 = HEAP16[$1017>>1]|0;
       $1019 = $27;
       $1020 = (_checkCharAttr($1018,8,0,$1019)|0);
       $1021 = ($1020|0)!=(0);
       if (!($1021)) {
        break L19;
       }
       $1022 = $28;
       $1023 = $31;
       $1024 = ((($1023)) + 8|0);
       $1025 = HEAP32[$1024>>2]|0;
       $1026 = (($1025) - 1)|0;
       $1027 = ($1022|0)<($1026|0);
       if ($1027) {
        $1028 = $28;
        $1029 = (($1028) + 1)|0;
        $1030 = $31;
        $1031 = ((($1030)) + 4|0);
        $1032 = HEAP32[$1031>>2]|0;
        $1033 = (($1032) + ($1029<<1)|0);
        $1034 = HEAP16[$1033>>1]|0;
        $1035 = $27;
        $1036 = (_checkCharAttr($1034,2,0,$1035)|0);
        $1037 = ($1036|0)!=(0);
        if ($1037) {
         break L19;
        }
       }
       $1038 = $28;
       $54 = $1038;
       while(1) {
        $1039 = $54;
        $1040 = ($1039|0)>=(0);
        if (!($1040)) {
         break L19;
        }
        $1041 = $54;
        $1042 = $31;
        $1043 = ((($1042)) + 4|0);
        $1044 = HEAP32[$1043>>2]|0;
        $1045 = (($1044) + ($1041<<1)|0);
        $1046 = HEAP16[$1045>>1]|0;
        $1047 = $27;
        $1048 = (_checkCharAttr($1046,6,0,$1047)|0);
        $1049 = ($1048|0)!=(0);
        if ($1049) {
         label = 149;
         break L5;
        }
        $1050 = $54;
        $1051 = $31;
        $1052 = ((($1051)) + 4|0);
        $1053 = HEAP32[$1052>>2]|0;
        $1054 = (($1053) + ($1050<<1)|0);
        $1055 = HEAP16[$1054>>1]|0;
        $1056 = $27;
        $1057 = (_checkCharAttr($1055,1,0,$1056)|0);
        $1058 = ($1057|0)!=(0);
        if ($1058) {
         break L19;
        }
        $1059 = $54;
        $1060 = (($1059) + -1)|0;
        $54 = $1060;
       }
       break;
      }
      case 112:  {
       $1061 = $45;
       $1062 = ($1061|0)!=(0);
       if ($1062) {
        break L19;
       }
       $1063 = $30;
       $1064 = $1063 & 1;
       $1065 = ($1064|0)!=(0);
       if ($1065) {
        break L19;
       }
       $1066 = $28;
       $1067 = $37;
       $1068 = HEAP32[$1067>>2]|0;
       $1069 = $33;
       $1070 = (_checkEmphasisChange($1066,$1068,$1069)|0);
       $1071 = ($1070|0)!=(0);
       if ($1071) {
        break L19;
       }
       $1072 = $36;
       $1073 = HEAP32[$1072>>2]|0;
       $1074 = ((($1073)) + 32|0);
       $1075 = HEAP32[$1074>>2]|0;
       $1076 = $27;
       $1077 = ((($1076)) + 31168|0);
       $1078 = (($1077) + ($1075<<3)|0);
       $58 = $1078;
       $1079 = $58;
       $1080 = ((($1079)) + 2|0);
       $59 = $1080;
       $1081 = $31;
       $1082 = ((($1081)) + 4|0);
       $1083 = HEAP32[$1082>>2]|0;
       $1084 = $28;
       $1085 = (($1084) - 1)|0;
       $1086 = $59;
       $1087 = $27;
       $1088 = (__lou_pattern_check($1083,$1085,-1,-1,$1086,$1087)|0);
       $1089 = ($1088|0)!=(0);
       if (!($1089)) {
        break L19;
       }
       $1090 = $58;
       $1091 = HEAP16[$1090>>1]|0;
       $1092 = $1091&65535;
       $1093 = $58;
       $1094 = (($1093) + ($1092<<1)|0);
       $59 = $1094;
       $1095 = $31;
       $1096 = ((($1095)) + 4|0);
       $1097 = HEAP32[$1096>>2]|0;
       $1098 = $28;
       $1099 = $36;
       $1100 = HEAP32[$1099>>2]|0;
       $1101 = ((($1100)) + 42|0);
       $1102 = HEAP16[$1101>>1]|0;
       $1103 = $1102 << 16 >> 16;
       $1104 = (($1098) + ($1103))|0;
       $1105 = $31;
       $1106 = ((($1105)) + 8|0);
       $1107 = HEAP32[$1106>>2]|0;
       $1108 = $59;
       $1109 = $27;
       $1110 = (__lou_pattern_check($1097,$1104,$1107,1,$1108,$1109)|0);
       $1111 = ($1110|0)!=(0);
       if ($1111) {
        label = 149;
        break L5;
       } else {
        break L19;
       }
       break;
      }
      default: {
       break L19;
      }
      }
     } while(0);
     if ((label|0) == 47) {
      label = 0;
      $427 = $28;
      $428 = $37;
      $429 = HEAP32[$428>>2]|0;
      $430 = $33;
      $431 = (_checkEmphasisChange($427,$429,$430)|0);
      $432 = ($431|0)!=(0);
      $433 = $45;
      $434 = ($433|0)!=(0);
      $or$cond7 = $432 | $434;
      if ($or$cond7) {
       break;
      }
      $435 = $30;
      $436 = $435 & 1;
      $437 = ($436|0)!=(0);
      if ($437) {
       break;
      } else {
       label = 149;
       break L5;
      }
     }
     $526 = $27;
     $527 = ((($526)) + 532|0);
     $528 = HEAP32[$527>>2]|0;
     $529 = ($528|0)!=(0);
     if ($529) {
      $530 = $27;
      $531 = $28;
      $532 = $31;
      $533 = $36;
      $534 = HEAP32[$533>>2]|0;
      $535 = (_inSequence($530,$531,$532,$534)|0);
      $536 = ($535|0)!=(0);
      if ($536) {
       label = 149;
       break L5;
      } else {
       break;
      }
     }
     $537 = $48;
     $538 = $537;
     $539 = HEAP32[$538>>2]|0;
     $540 = (($537) + 4)|0;
     $541 = $540;
     $542 = HEAP32[$541>>2]|0;
     $543 = $539 & 9;
     $544 = ($543|0)!=(0);
     $545 = (0)!=(0);
     $546 = $544 | $545;
     if ($546) {
      $547 = $56;
      $548 = $547;
      $549 = HEAP32[$548>>2]|0;
      $550 = (($547) + 4)|0;
      $551 = $550;
      $552 = HEAP32[$551>>2]|0;
      $553 = $549 & 9;
      $554 = ($553|0)!=(0);
      $555 = (0)!=(0);
      $556 = $554 | $555;
      if ($556) {
       label = 149;
       break L5;
      }
     }
    }
   } while(0);
   $1112 = $36;
   $1113 = HEAP32[$1112>>2]|0;
   $1114 = ((($1113)) + 8|0);
   $1115 = HEAP32[$1114>>2]|0;
   $55 = $1115;
  }
  $1116 = $53;
  $1117 = (($1116) + 1)|0;
  $53 = $1117;
 }
 if ((label|0) == 11) {
  $105 = $36;
  HEAP32[$105>>2] = 12792;
  HEAP32[(12828)>>2] = 117;
  $106 = $34;
  HEAP32[$106>>2] = 117;
  HEAP16[(12834)>>1] = 1;
  $107 = $37;
  HEAP32[$107>>2] = 1;
  $108 = $28;
  $109 = $31;
  $110 = ((($109)) + 4|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (($111) + ($108<<1)|0);
  $113 = HEAP16[$112>>1]|0;
  HEAP16[(12838)>>1] = $113;
  HEAP16[(12836)>>1] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 53) {
  $460 = $48;
  $461 = $460;
  $462 = HEAP32[$461>>2]|0;
  $463 = (($460) + 4)|0;
  $464 = $463;
  $465 = HEAP32[$464>>2]|0;
  $466 = $462 & 9;
  $467 = ($466|0)!=(0);
  $468 = (0)!=(0);
  $469 = $467 | $468;
  if ($469) {
   label = 55;
  } else {
   $470 = $27;
   $471 = $28;
   $472 = $31;
   $473 = $48;
   $474 = $473;
   $475 = HEAP32[$474>>2]|0;
   $476 = (($473) + 4)|0;
   $477 = $476;
   $478 = HEAP32[$477>>2]|0;
   $479 = (_onlyLettersBehind($470,$471,$472,$475,$478)|0);
   $480 = ($479|0)!=(0);
   if ($480) {
    label = 55;
   }
  }
  if ((label|0) == 55) {
   $481 = $56;
   $482 = $481;
   $483 = HEAP32[$482>>2]|0;
   $484 = (($481) + 4)|0;
   $485 = $484;
   $486 = HEAP32[$485>>2]|0;
   $487 = $483 & 1;
   $488 = ($487|0)!=(0);
   $489 = (0)!=(0);
   $490 = $488 | $489;
   $491 = $35;
   $492 = ($491|0)==(90);
   $or$cond = $490 | $492;
   if ($or$cond) {
    $493 = $56;
    $494 = $493;
    $495 = HEAP32[$494>>2]|0;
    $496 = (($493) + 4)|0;
    $497 = $496;
    $498 = HEAP32[$497>>2]|0;
    $499 = $495 & 2;
    $500 = ($499|0)!=(0);
    $501 = (0)!=(0);
    $502 = $500 | $501;
    if (!($502)) {
     $503 = $27;
     $504 = $28;
     $505 = $30;
     $506 = $31;
     $507 = $34;
     $508 = HEAP32[$507>>2]|0;
     $509 = $37;
     $510 = HEAP32[$509>>2]|0;
     $511 = $43;
     $512 = (_noCompbrlAhead($503,$504,$505,$506,$508,$510,$511)|0);
     $513 = ($512|0)!=(0);
     if ($513) {
      STACKTOP = sp;return;
     }
    }
   }
  }
  $514 = $34;
  HEAP32[$514>>2] = 83;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 124) {
  $952 = $48;
  $953 = $952;
  $954 = HEAP32[$953>>2]|0;
  $955 = (($952) + 4)|0;
  $956 = $955;
  $957 = HEAP32[$956>>2]|0;
  $958 = $954 & 4;
  $959 = ($958|0)!=(0);
  $960 = (0)!=(0);
  $961 = $959 | $960;
  if (!($961)) {
   STACKTOP = sp;return;
  }
  $962 = $34;
  HEAP32[$962>>2] = 107;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 149) {
  STACKTOP = sp;return;
 }
}
function _doCompbrl($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $13 = $0;
 $14 = $1;
 $15 = $2;
 $16 = $3;
 $17 = $4;
 $18 = $5;
 $19 = $6;
 $20 = $7;
 $21 = $8;
 $22 = $9;
 $23 = $10;
 $24 = $11;
 $27 = $14;
 $28 = HEAP32[$27>>2]|0;
 $29 = $15;
 $30 = ((($29)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + ($28<<1)|0);
 $33 = HEAP16[$32>>1]|0;
 $34 = $13;
 $35 = (_checkCharAttr($33,1,0,$34)|0);
 $36 = ($35|0)!=(0);
 if ($36) {
  $12 = 1;
  $87 = $12;
  STACKTOP = sp;return ($87|0);
 }
 $37 = $22;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)!=(0);
 if ($40) {
  $41 = $22;
  $42 = HEAP32[$41>>2]|0;
  $43 = $42;
 } else {
  $43 = 0;
 }
 $25 = $43;
 $44 = $14;
 $45 = HEAP32[$44>>2]|0;
 $26 = $45;
 while(1) {
  $46 = $26;
  $47 = $15;
  $48 = ((($47)) + 8|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($46|0)<($49|0);
  if (!($50)) {
   break;
  }
  $51 = $26;
  $52 = $15;
  $53 = ((($52)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + ($51<<1)|0);
  $56 = HEAP16[$55>>1]|0;
  $57 = $13;
  $58 = (_checkCharAttr($56,1,0,$57)|0);
  $59 = ($58|0)!=(0);
  $60 = $59 ^ 1;
  if (!($60)) {
   break;
  }
  $61 = $26;
  $62 = (($61) + 1)|0;
  $26 = $62;
 }
 $63 = $25;
 $64 = $14;
 HEAP32[$64>>2] = $63;
 $65 = $22;
 $66 = ((($65)) + 4|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = $16;
 $69 = ((($68)) + 12|0);
 HEAP32[$69>>2] = $67;
 $70 = $22;
 $71 = ((($70)) + 8|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = $23;
 HEAP32[$73>>2] = $72;
 $74 = $25;
 $75 = $26;
 $76 = $13;
 $77 = $14;
 $78 = $15;
 $79 = $16;
 $80 = $17;
 $81 = $18;
 $82 = $19;
 $83 = $20;
 $84 = $21;
 $85 = $24;
 $86 = (_doCompTrans($74,$75,$76,$77,$78,$79,$80,$81,$82,$83,$84,$85)|0);
 $12 = $86;
 $87 = $12;
 STACKTOP = sp;return ($87|0);
}
function _insertEmphasesAt($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $28 = sp + 88|0;
 $33 = sp + 32|0;
 $13 = $0;
 $14 = $1;
 $15 = $2;
 $16 = $3;
 $17 = $4;
 $18 = $5;
 $19 = $6;
 $20 = $7;
 $21 = $8;
 $22 = $9;
 $23 = $10;
 $24 = $11;
 $25 = $12;
 $41 = $14;
 $42 = ($41|0)!=(0);
 $43 = $15;
 $44 = ($43|0)!=(0);
 $or$cond = $42 & $44;
 L1: do {
  if ($or$cond) {
   $26 = 0;
   while(1) {
    $45 = $26;
    $46 = ($45|0)<(6);
    if (!($46)) {
     break L1;
    }
    $47 = $26;
    $48 = $18;
    $49 = ((($48)) + 1104|0);
    $50 = (($49) + (($47*24)|0)|0);
    $27 = $50;
    $51 = $27;
    $52 = ((($51)) + 16|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)!=(0);
    if ($54) {
     $55 = $17;
     $56 = $23;
     $57 = (($56) + ($55<<3)|0);
     $58 = $57;
     $59 = $58;
     $60 = HEAP32[$59>>2]|0;
     $61 = (($58) + 4)|0;
     $62 = $61;
     $63 = HEAP32[$62>>2]|0;
     $64 = $60 & 65535;
     $65 = $17;
     $66 = $23;
     $67 = (($66) + ($65<<3)|0);
     $68 = $67;
     $69 = $68;
     $70 = HEAP32[$69>>2]|0;
     $71 = (($68) + 4)|0;
     $72 = $71;
     $73 = HEAP32[$72>>2]|0;
     $74 = (_bitshift64Lshr(($70|0),($73|0),16)|0);
     $75 = tempRet0;
     $76 = $74 & 65535;
     $77 = $64 | $76;
     $78 = $17;
     $79 = $23;
     $80 = (($79) + ($78<<3)|0);
     $81 = $80;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $84 = (($81) + 4)|0;
     $85 = $84;
     $86 = HEAP32[$85>>2]|0;
     $87 = $86 & 65535;
     $88 = $77 | $87;
     $89 = $17;
     $90 = $23;
     $91 = (($90) + ($89<<3)|0);
     $92 = $91;
     $93 = $92;
     $94 = HEAP32[$93>>2]|0;
     $95 = (($92) + 4)|0;
     $96 = $95;
     $97 = HEAP32[$96>>2]|0;
     $98 = (_bitshift64Lshr(($94|0),($97|0),48)|0);
     $99 = tempRet0;
     $100 = $88 | $98;
     $101 = $27;
     $102 = ((($101)) + 16|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = $100 & $103;
     $105 = ($104|0)!=(0);
     if ($105) {
      $106 = $23;
      $107 = $17;
      $108 = $27;
      $109 = $18;
      $110 = $19;
      $111 = $20;
      $112 = $21;
      $113 = $22;
      $114 = $24;
      $115 = $25;
      _insertEmphasisEnd($106,$107,$108,$109,$110,$111,$112,$113,$114,$115);
     }
    }
    $116 = $26;
    $117 = (($116) + 1)|0;
    $26 = $117;
   }
  }
 } while(0);
 $118 = $14;
 $119 = ($118|0)!=(0);
 $120 = $16;
 $121 = ($120|0)!=(0);
 $or$cond3 = $119 & $121;
 L11: do {
  if ($or$cond3) {
   $29 = 0;
   while(1) {
    $122 = $29;
    $123 = ($122|0)<(10);
    if (!($123)) {
     break;
    }
    $124 = $29;
    $125 = $18;
    $126 = ((($125)) + 864|0);
    $127 = (($126) + (($124*24)|0)|0);
    $30 = $127;
    $128 = $30;
    $129 = ((($128)) + 16|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = ($130|0)!=(0);
    if ($131) {
     $134 = $23;
     $135 = $17;
     $136 = $30;
     $137 = (_endCount($134,$135,$136)|0);
     $138 = $29;
     $139 = (($28) + ($138<<2)|0);
     HEAP32[$139>>2] = $137;
    } else {
     $132 = $29;
     $133 = (($28) + ($132<<2)|0);
     HEAP32[$133>>2] = 0;
    }
    $140 = $29;
    $141 = (($140) + 1)|0;
    $29 = $141;
   }
   while(1) {
    $31 = -1;
    $32 = 0;
    while(1) {
     $142 = $32;
     $143 = ($142|0)<(10);
     if (!($143)) {
      break;
     }
     $144 = $32;
     $145 = (($28) + ($144<<2)|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)>(0);
     do {
      if ($147) {
       $148 = $31;
       $149 = ($148|0)<(0);
       if (!($149)) {
        $150 = $32;
        $151 = (($28) + ($150<<2)|0);
        $152 = HEAP32[$151>>2]|0;
        $153 = $31;
        $154 = (($28) + ($153<<2)|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = ($152|0)<($155|0);
        if (!($156)) {
         break;
        }
       }
       $157 = $32;
       $31 = $157;
      }
     } while(0);
     $158 = $32;
     $159 = (($158) + 1)|0;
     $32 = $159;
    }
    $160 = $31;
    $161 = ($160|0)<(0);
    if ($161) {
     break L11;
    }
    $162 = $31;
    $163 = (($28) + ($162<<2)|0);
    HEAP32[$163>>2] = 0;
    $164 = $23;
    $165 = $17;
    $166 = $31;
    $167 = $18;
    $168 = ((($167)) + 864|0);
    $169 = (($168) + (($166*24)|0)|0);
    $170 = $18;
    $171 = $19;
    $172 = $20;
    $173 = $21;
    $174 = $22;
    $175 = $24;
    $176 = $25;
    _insertEmphasisEnd($164,$165,$169,$170,$171,$172,$173,$174,$175,$176);
   }
  }
 } while(0);
 $177 = $13;
 $178 = ($177|0)!=(0);
 $179 = $16;
 $180 = ($179|0)!=(0);
 $or$cond5 = $178 & $180;
 L34: do {
  if ($or$cond5) {
   $34 = 0;
   while(1) {
    $181 = $34;
    $182 = ($181|0)<(10);
    if (!($182)) {
     break;
    }
    $183 = $34;
    $184 = $18;
    $185 = ((($184)) + 864|0);
    $186 = (($185) + (($183*24)|0)|0);
    $35 = $186;
    $187 = $35;
    $188 = ((($187)) + 16|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = ($189|0)!=(0);
    if ($190) {
     $193 = $23;
     $194 = $17;
     $195 = $35;
     $196 = $18;
     $197 = $20;
     $198 = (_beginCount($193,$194,$195,$196,$197)|0);
     $199 = $34;
     $200 = (($33) + ($199<<2)|0);
     HEAP32[$200>>2] = $198;
    } else {
     $191 = $34;
     $192 = (($33) + ($191<<2)|0);
     HEAP32[$192>>2] = 0;
    }
    $201 = $34;
    $202 = (($201) + 1)|0;
    $34 = $202;
   }
   while(1) {
    $36 = 9;
    $37 = 9;
    while(1) {
     $203 = $37;
     $204 = ($203|0)>=(0);
     $205 = $36;
     $206 = (($33) + ($205<<2)|0);
     $207 = HEAP32[$206>>2]|0;
     if (!($204)) {
      break;
     }
     $208 = $37;
     $209 = (($33) + ($208<<2)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($207|0)<($210|0);
     if ($211) {
      $212 = $37;
      $36 = $212;
     }
     $213 = $37;
     $214 = (($213) + -1)|0;
     $37 = $214;
    }
    $215 = ($207|0)!=(0);
    if (!($215)) {
     break;
    }
    $216 = $36;
    $217 = (($33) + ($216<<2)|0);
    HEAP32[$217>>2] = 0;
    $218 = $23;
    $219 = $17;
    $220 = $36;
    $221 = $18;
    $222 = ((($221)) + 864|0);
    $223 = (($222) + (($220*24)|0)|0);
    $224 = $18;
    $225 = $19;
    $226 = $20;
    $227 = $21;
    $228 = $22;
    $229 = $24;
    $230 = $25;
    _insertEmphasisBegin($218,$219,$223,$224,$225,$226,$227,$228,$229,$230);
   }
   $38 = 9;
   while(1) {
    $231 = $38;
    $232 = ($231|0)>=(0);
    if (!($232)) {
     break L34;
    }
    $233 = $17;
    $234 = $23;
    $235 = (($234) + ($233<<3)|0);
    $236 = $235;
    $237 = $236;
    $238 = HEAP32[$237>>2]|0;
    $239 = (($236) + 4)|0;
    $240 = $239;
    $241 = HEAP32[$240>>2]|0;
    $242 = $238 & 65535;
    $243 = $17;
    $244 = $23;
    $245 = (($244) + ($243<<3)|0);
    $246 = $245;
    $247 = $246;
    $248 = HEAP32[$247>>2]|0;
    $249 = (($246) + 4)|0;
    $250 = $249;
    $251 = HEAP32[$250>>2]|0;
    $252 = (_bitshift64Lshr(($248|0),($251|0),16)|0);
    $253 = tempRet0;
    $254 = $252 & 65535;
    $255 = $242 | $254;
    $256 = $17;
    $257 = $23;
    $258 = (($257) + ($256<<3)|0);
    $259 = $258;
    $260 = $259;
    $261 = HEAP32[$260>>2]|0;
    $262 = (($259) + 4)|0;
    $263 = $262;
    $264 = HEAP32[$263>>2]|0;
    $265 = $264 & 65535;
    $266 = $255 | $265;
    $267 = $17;
    $268 = $23;
    $269 = (($268) + ($267<<3)|0);
    $270 = $269;
    $271 = $270;
    $272 = HEAP32[$271>>2]|0;
    $273 = (($270) + 4)|0;
    $274 = $273;
    $275 = HEAP32[$274>>2]|0;
    $276 = (_bitshift64Lshr(($272|0),($275|0),48)|0);
    $277 = tempRet0;
    $278 = $266 | $276;
    $279 = $38;
    $280 = $18;
    $281 = ((($280)) + 864|0);
    $282 = (($281) + (($279*24)|0)|0);
    $283 = ((($282)) + 16|0);
    $284 = HEAP32[$283>>2]|0;
    $285 = $278 & $284;
    $286 = ($285|0)!=(0);
    if ($286) {
     $287 = $23;
     $288 = $17;
     $289 = $38;
     $290 = $18;
     $291 = ((($290)) + 864|0);
     $292 = (($291) + (($289*24)|0)|0);
     $293 = $18;
     $294 = $19;
     $295 = $20;
     $296 = $21;
     $297 = $22;
     $298 = $24;
     $299 = $25;
     _insertEmphasisSymbol($287,$288,$292,$293,$294,$295,$296,$297,$298,$299);
    }
    $300 = $38;
    $301 = (($300) + -1)|0;
    $38 = $301;
   }
  }
 } while(0);
 $302 = $13;
 $303 = ($302|0)!=(0);
 $304 = $15;
 $305 = ($304|0)!=(0);
 $or$cond7 = $303 & $305;
 if (!($or$cond7)) {
  STACKTOP = sp;return;
 }
 $39 = 5;
 while(1) {
  $306 = $39;
  $307 = ($306|0)>=(0);
  if (!($307)) {
   break;
  }
  $308 = $39;
  $309 = $18;
  $310 = ((($309)) + 1104|0);
  $311 = (($310) + (($308*24)|0)|0);
  $40 = $311;
  $312 = $40;
  $313 = ((($312)) + 16|0);
  $314 = HEAP32[$313>>2]|0;
  $315 = ($314|0)!=(0);
  if ($315) {
   $316 = $17;
   $317 = $23;
   $318 = (($317) + ($316<<3)|0);
   $319 = $318;
   $320 = $319;
   $321 = HEAP32[$320>>2]|0;
   $322 = (($319) + 4)|0;
   $323 = $322;
   $324 = HEAP32[$323>>2]|0;
   $325 = $321 & 65535;
   $326 = $17;
   $327 = $23;
   $328 = (($327) + ($326<<3)|0);
   $329 = $328;
   $330 = $329;
   $331 = HEAP32[$330>>2]|0;
   $332 = (($329) + 4)|0;
   $333 = $332;
   $334 = HEAP32[$333>>2]|0;
   $335 = (_bitshift64Lshr(($331|0),($334|0),16)|0);
   $336 = tempRet0;
   $337 = $335 & 65535;
   $338 = $325 | $337;
   $339 = $17;
   $340 = $23;
   $341 = (($340) + ($339<<3)|0);
   $342 = $341;
   $343 = $342;
   $344 = HEAP32[$343>>2]|0;
   $345 = (($342) + 4)|0;
   $346 = $345;
   $347 = HEAP32[$346>>2]|0;
   $348 = $347 & 65535;
   $349 = $338 | $348;
   $350 = $17;
   $351 = $23;
   $352 = (($351) + ($350<<3)|0);
   $353 = $352;
   $354 = $353;
   $355 = HEAP32[$354>>2]|0;
   $356 = (($353) + 4)|0;
   $357 = $356;
   $358 = HEAP32[$357>>2]|0;
   $359 = (_bitshift64Lshr(($355|0),($358|0),48)|0);
   $360 = tempRet0;
   $361 = $349 | $359;
   $362 = $40;
   $363 = ((($362)) + 16|0);
   $364 = HEAP32[$363>>2]|0;
   $365 = $361 & $364;
   $366 = ($365|0)!=(0);
   if ($366) {
    $367 = $23;
    $368 = $17;
    $369 = $40;
    $370 = $18;
    $371 = $19;
    $372 = $20;
    $373 = $21;
    $374 = $22;
    $375 = $24;
    $376 = $25;
    _insertEmphasisBegin($367,$368,$369,$370,$371,$372,$373,$374,$375,$376);
    $377 = $23;
    $378 = $17;
    $379 = $40;
    $380 = $18;
    $381 = $19;
    $382 = $20;
    $383 = $21;
    $384 = $22;
    $385 = $24;
    $386 = $25;
    _insertEmphasisSymbol($377,$378,$379,$380,$381,$382,$383,$384,$385,$386);
   }
  }
  $387 = $39;
  $388 = (($387) + -1)|0;
  $39 = $388;
 }
 STACKTOP = sp;return;
}
function _brailleIndicatorDefined($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $4;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $4;
  $10 = $5;
  $11 = ((($10)) + 31168|0);
  $12 = (($11) + ($9<<3)|0);
  $13 = $6;
  HEAP32[$13>>2] = $12;
  $3 = 1;
  $14 = $3;
  STACKTOP = sp;return ($14|0);
 } else {
  $3 = 0;
  $14 = $3;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _insertLetterSign($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $19 = sp;
 $20 = sp + 8|0;
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $21 = $19;
 $22 = $21;
 HEAP32[$22>>2] = $8;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $9;
 $25 = $11;
 $26 = ((($25)) + 548|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $11;
 $29 = (_brailleIndicatorDefined($27,$28,$20)|0);
 $30 = ($29|0)!=(0);
 do {
  if ($30) {
   $31 = $16;
   $32 = ($31|0)==(96);
   if ($32) {
    $33 = HEAP32[$20>>2]|0;
    $34 = ((($33)) + 46|0);
    $35 = HEAP32[$20>>2]|0;
    $36 = ((($35)) + 44|0);
    $37 = HEAP16[$36>>1]|0;
    $38 = $37 << 16 >> 16;
    $39 = $12;
    $40 = $13;
    $41 = $14;
    $42 = $15;
    $43 = $17;
    $44 = $18;
    $45 = (_for_updatePositions($34,0,$38,0,$39,$40,$41,$42,$43,$44)|0);
    $46 = ($45|0)!=(0);
    if ($46) {
     break;
    }
    $10 = 0;
    $129 = $10;
    STACKTOP = sp;return ($129|0);
   }
   $47 = $13;
   $48 = $12;
   $49 = $11;
   $50 = (_checkCharAttr_safe($47,$48,2,0,$49)|0);
   $51 = ($50|0)!=(0);
   if ($51) {
    $52 = $19;
    $53 = $52;
    $54 = HEAP32[$53>>2]|0;
    $55 = (($52) + 4)|0;
    $56 = $55;
    $57 = HEAP32[$56>>2]|0;
    $58 = $54 & 2;
    $59 = ($58|0)!=(0);
    $60 = (0)!=(0);
    $61 = $59 | $60;
    if (!($61)) {
     $62 = $13;
     $63 = $12;
     $64 = (($63) + 1)|0;
     $65 = $11;
     $66 = (_checkCharAttr_safe($62,$64,2,0,$65)|0);
     $67 = ($66|0)!=(0);
     if ($67) {
      $68 = $19;
      $69 = $68;
      $70 = HEAP32[$69>>2]|0;
      $71 = (($68) + 4)|0;
      $72 = $71;
      $73 = HEAP32[$72>>2]|0;
      $74 = $70 & 4;
      $75 = ($74|0)!=(0);
      $76 = (0)!=(0);
      $77 = $75 | $76;
      if (!($77)) {
       break;
      }
     }
     $78 = $12;
     $79 = ($78|0)>(0);
     if ($79) {
      $80 = $12;
      $81 = (($80) - 1)|0;
      $82 = $13;
      $83 = ((($82)) + 4|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = (($84) + ($81<<1)|0);
      $86 = HEAP16[$85>>1]|0;
      $87 = $11;
      $88 = (_isNoLetsignBefore($86,$87)|0);
      $89 = ($88|0)!=(0);
      if ($89) {
       $10 = 1;
       $129 = $10;
       STACKTOP = sp;return ($129|0);
      }
     }
     $90 = $12;
     $91 = $13;
     $92 = ((($91)) + 4|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = (($93) + ($90<<1)|0);
     $95 = HEAP16[$94>>1]|0;
     $96 = $11;
     $97 = (_isNoLetsign($95,$96)|0);
     $98 = ($97|0)!=(0);
     if ($98) {
      $10 = 1;
      $129 = $10;
      STACKTOP = sp;return ($129|0);
     }
     $99 = $12;
     $100 = (($99) + 1)|0;
     $101 = $13;
     $102 = ((($101)) + 8|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = ($100|0)<($103|0);
     if ($104) {
      $105 = $12;
      $106 = (($105) + 1)|0;
      $107 = $13;
      $108 = ((($107)) + 4|0);
      $109 = HEAP32[$108>>2]|0;
      $110 = (($109) + ($106<<1)|0);
      $111 = HEAP16[$110>>1]|0;
      $112 = $11;
      $113 = (_isNoLetsignAfter($111,$112)|0);
      $114 = ($113|0)!=(0);
      if ($114) {
       $10 = 1;
       $129 = $10;
       STACKTOP = sp;return ($129|0);
      }
     }
     $115 = HEAP32[$20>>2]|0;
     $116 = ((($115)) + 46|0);
     $117 = HEAP32[$20>>2]|0;
     $118 = ((($117)) + 44|0);
     $119 = HEAP16[$118>>1]|0;
     $120 = $119 << 16 >> 16;
     $121 = $12;
     $122 = $13;
     $123 = $14;
     $124 = $15;
     $125 = $17;
     $126 = $18;
     $127 = (_for_updatePositions($116,0,$120,0,$121,$122,$123,$124,$125,$126)|0);
     $128 = ($127|0)!=(0);
     if (!($128)) {
      $10 = 0;
      $129 = $10;
      STACKTOP = sp;return ($129|0);
     }
    }
   }
  }
 } while(0);
 $10 = 1;
 $129 = $10;
 STACKTOP = sp;return ($129|0);
}
function _insertNumberSign($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $19 = sp;
 $20 = sp + 8|0;
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $21 = $19;
 $22 = $21;
 HEAP32[$22>>2] = $8;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $9;
 $25 = $11;
 $26 = ((($25)) + 552|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $11;
 $29 = (_brailleIndicatorDefined($27,$28,$20)|0);
 $30 = ($29|0)!=(0);
 do {
  if ($30) {
   $31 = $13;
   $32 = $12;
   $33 = $11;
   $34 = (_checkCharAttr_safe($31,$32,4,0,$33)|0);
   $35 = ($34|0)!=(0);
   if ($35) {
    $36 = $16;
    $37 = ($36|0)==(84);
    if (!($37)) {
     $38 = $19;
     $39 = $38;
     $40 = HEAP32[$39>>2]|0;
     $41 = (($38) + 4)|0;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = $40 & 4;
     $45 = ($44|0)==(0);
     $46 = (0)==(0);
     $47 = $45 & $46;
     $48 = $16;
     $49 = ($48|0)!=(107);
     $or$cond = $47 & $49;
     if (!($or$cond)) {
      break;
     }
    }
    $50 = HEAP32[$20>>2]|0;
    $51 = ((($50)) + 46|0);
    $52 = HEAP32[$20>>2]|0;
    $53 = ((($52)) + 44|0);
    $54 = HEAP16[$53>>1]|0;
    $55 = $54 << 16 >> 16;
    $56 = $12;
    $57 = $13;
    $58 = $14;
    $59 = $15;
    $60 = $17;
    $61 = $18;
    $62 = (_for_updatePositions($51,0,$55,0,$56,$57,$58,$59,$60,$61)|0);
    $63 = ($62|0)!=(0);
    if (!($63)) {
     $10 = 0;
     $64 = $10;
     STACKTOP = sp;return ($64|0);
    }
   }
  }
 } while(0);
 $10 = 1;
 $64 = $10;
 STACKTOP = sp;return ($64|0);
}
function _checkNumericMode($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $19 = sp;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $20 = $9;
 $21 = ((($20)) + 552|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $9;
 $24 = (_brailleIndicatorDefined($22,$23,$19)|0);
 $25 = ($24|0)!=(0);
 if (!($25)) {
  STACKTOP = sp;return;
 }
 $26 = $17;
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0);
 $29 = $10;
 $30 = $11;
 $31 = ((($30)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + ($29<<1)|0);
 $34 = HEAP16[$33>>1]|0;
 $35 = $9;
 if ($28) {
  $110 = (_checkCharAttr($34,67111172,0,$35)|0);
  $111 = ($110|0)!=(0);
  if ($111) {
   STACKTOP = sp;return;
  }
  $112 = $17;
  HEAP32[$112>>2] = 0;
  $113 = $9;
  $114 = ((($113)) + 560|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = $9;
  $117 = (_brailleIndicatorDefined($115,$116,$19)|0);
  $118 = ($117|0)!=(0);
  if (!($118)) {
   STACKTOP = sp;return;
  }
  $119 = $10;
  $120 = $11;
  $121 = ((($120)) + 4|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (($122) + ($119<<1)|0);
  $124 = HEAP16[$123>>1]|0;
  $125 = $9;
  $126 = (_checkCharAttr($124,4096,0,$125)|0);
  $127 = ($126|0)!=(0);
  if (!($127)) {
   STACKTOP = sp;return;
  }
  $128 = HEAP32[$19>>2]|0;
  $129 = ((($128)) + 46|0);
  $130 = HEAP32[$19>>2]|0;
  $131 = ((($130)) + 44|0);
  $132 = HEAP16[$131>>1]|0;
  $133 = $132 << 16 >> 16;
  $134 = $10;
  $135 = $11;
  $136 = $12;
  $137 = $13;
  $138 = $14;
  $139 = $15;
  (_for_updatePositions($129,0,$133,0,$134,$135,$136,$137,$138,$139)|0);
  STACKTOP = sp;return;
 }
 $36 = (_checkCharAttr($34,260,0,$35)|0);
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = $17;
  HEAP32[$38>>2] = 1;
  $39 = $9;
  $40 = ((($39)) + 556|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $9;
  $43 = ((($42)) + 560|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $9;
  $46 = (_isIndicatorEqual($41,$44,$45)|0);
  $47 = ($46|0)!=(0);
  if ($47) {
   $48 = $16;
   HEAP32[$48>>2] = 1;
  }
  $49 = HEAP32[$19>>2]|0;
  $50 = ((($49)) + 46|0);
  $51 = HEAP32[$19>>2]|0;
  $52 = ((($51)) + 44|0);
  $53 = HEAP16[$52>>1]|0;
  $54 = $53 << 16 >> 16;
  $55 = $10;
  $56 = $11;
  $57 = $12;
  $58 = $13;
  $59 = $14;
  $60 = $15;
  (_for_updatePositions($50,0,$54,0,$55,$56,$57,$58,$59,$60)|0);
  STACKTOP = sp;return;
 }
 $61 = $10;
 $62 = $11;
 $63 = ((($62)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (($64) + ($61<<1)|0);
 $66 = HEAP16[$65>>1]|0;
 $67 = $9;
 $68 = (_checkCharAttr($66,2048,0,$67)|0);
 $69 = ($68|0)!=(0);
 if (!($69)) {
  STACKTOP = sp;return;
 }
 $70 = $10;
 $71 = (($70) + 1)|0;
 $18 = $71;
 while(1) {
  $72 = $18;
  $73 = $11;
  $74 = ((($73)) + 8|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($72|0)<($75|0);
  if (!($76)) {
   label = 18;
   break;
  }
  $77 = $18;
  $78 = $11;
  $79 = ((($78)) + 4|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = (($80) + ($77<<1)|0);
  $82 = HEAP16[$81>>1]|0;
  $83 = $9;
  $84 = (_checkCharAttr($82,260,0,$83)|0);
  $85 = ($84|0)!=(0);
  if ($85) {
   label = 11;
   break;
  }
  $99 = $18;
  $100 = $11;
  $101 = ((($100)) + 4|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (($102) + ($99<<1)|0);
  $104 = HEAP16[$103>>1]|0;
  $105 = $9;
  $106 = (_checkCharAttr($104,2048,0,$105)|0);
  $107 = ($106|0)!=(0);
  if (!($107)) {
   label = 18;
   break;
  }
  $108 = $18;
  $109 = (($108) + 1)|0;
  $18 = $109;
 }
 if ((label|0) == 11) {
  $86 = $17;
  HEAP32[$86>>2] = 1;
  $87 = HEAP32[$19>>2]|0;
  $88 = ((($87)) + 46|0);
  $89 = HEAP32[$19>>2]|0;
  $90 = ((($89)) + 44|0);
  $91 = HEAP16[$90>>1]|0;
  $92 = $91 << 16 >> 16;
  $93 = $10;
  $94 = $11;
  $95 = $12;
  $96 = $13;
  $97 = $14;
  $98 = $15;
  (_for_updatePositions($88,0,$92,0,$93,$94,$95,$96,$97,$98)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 18) {
  STACKTOP = sp;return;
 }
}
function _doNocont($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $10;
 $18 = HEAP32[$17>>2]|0;
 $19 = $13;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + ($18<<1)|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $9;
 $25 = (_checkCharAttr($23,1,0,$24)|0);
 $26 = ($25|0)!=(0);
 if (!($26)) {
  $27 = $15;
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)!=(0);
  if (!($29)) {
   $30 = $12;
   $31 = $30 & 1;
   $32 = ($31|0)!=(0);
   if (!($32)) {
    $33 = $14;
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($35|0)!=(0);
    if ($36) {
     $37 = $14;
     $38 = HEAP32[$37>>2]|0;
     $39 = $10;
     HEAP32[$39>>2] = $38;
     $40 = $14;
     $41 = ((($40)) + 4|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = $11;
     $44 = ((($43)) + 12|0);
     HEAP32[$44>>2] = $42;
    } else {
     $45 = $10;
     HEAP32[$45>>2] = 0;
     $46 = $11;
     $47 = ((($46)) + 12|0);
     HEAP32[$47>>2] = 0;
    }
    $48 = $14;
    $49 = ((($48)) + 8|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = $16;
    HEAP32[$51>>2] = $50;
    $52 = $15;
    HEAP32[$52>>2] = 1;
    $8 = 1;
    $53 = $8;
    STACKTOP = sp;return ($53|0);
   }
  }
 }
 $8 = 1;
 $53 = $8;
 STACKTOP = sp;return ($53|0);
}
function _putCharacters($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $21 = 0;
 while(1) {
  $22 = $21;
  $23 = $12;
  $24 = ($22|0)<($23|0);
  if (!($24)) {
   label = 6;
   break;
  }
  $25 = $21;
  $26 = $11;
  $27 = (($26) + ($25<<1)|0);
  $28 = HEAP16[$27>>1]|0;
  $29 = $13;
  $30 = $14;
  $31 = $15;
  $32 = $16;
  $33 = $17;
  $34 = $18;
  $35 = $19;
  $36 = $20;
  $37 = (_putCharacter($28,$29,$30,$31,$32,$33,$34,$35,$36)|0);
  $38 = ($37|0)!=(0);
  if (!($38)) {
   label = 4;
   break;
  }
  $39 = $21;
  $40 = (($39) + 1)|0;
  $21 = $40;
 }
 if ((label|0) == 4) {
  $10 = 0;
  $41 = $10;
  STACKTOP = sp;return ($41|0);
 }
 else if ((label|0) == 6) {
  $10 = 1;
  $41 = $10;
  STACKTOP = sp;return ($41|0);
 }
 return (0)|0;
}
function _compareChars($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $7;
 $11 = ($10|0)!=(0);
 if (!($11)) {
  $4 = 0;
  $36 = $4;
  STACKTOP = sp;return ($36|0);
 }
 $9 = 0;
 while(1) {
  $12 = $9;
  $13 = $7;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   label = 8;
   break;
  }
  $15 = $8;
  $16 = $9;
  $17 = $5;
  $18 = (($17) + ($16<<1)|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = $8;
  $21 = (_getChar_2($19,$20)|0);
  $22 = (_toLowercase_441($15,$21)|0);
  $23 = $22&65535;
  $24 = $8;
  $25 = $9;
  $26 = $6;
  $27 = (($26) + ($25<<1)|0);
  $28 = HEAP16[$27>>1]|0;
  $29 = $8;
  $30 = (_getChar_2($28,$29)|0);
  $31 = (_toLowercase_441($24,$30)|0);
  $32 = $31&65535;
  $33 = ($23|0)!=($32|0);
  if ($33) {
   label = 6;
   break;
  }
  $34 = $9;
  $35 = (($34) + 1)|0;
  $9 = $35;
 }
 if ((label|0) == 6) {
  $4 = 0;
  $36 = $4;
  STACKTOP = sp;return ($36|0);
 }
 else if ((label|0) == 8) {
  $4 = 1;
  $36 = $4;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function _checkEmphasisChange($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = (($8) + 1)|0;
 $7 = $9;
 while(1) {
  $10 = $7;
  $11 = $4;
  $12 = $5;
  $13 = (($11) + ($12))|0;
  $14 = ($10|0)<($13|0);
  if (!($14)) {
   label = 9;
   break;
  }
  $15 = $7;
  $16 = $6;
  $17 = (($16) + ($15<<3)|0);
  $18 = $17;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($18) + 4)|0;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = $20 & 65535;
  $25 = ($24|0)!=(0);
  if ($25) {
   label = 7;
   break;
  }
  $26 = $7;
  $27 = $6;
  $28 = (($27) + ($26<<3)|0);
  $29 = $28;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $32 = (($29) + 4)|0;
  $33 = $32;
  $34 = HEAP32[$33>>2]|0;
  $35 = (_bitshift64Lshr(($31|0),($34|0),16)|0);
  $36 = tempRet0;
  $37 = $35 & 65535;
  $38 = ($37|0)!=(0);
  if ($38) {
   label = 7;
   break;
  }
  $39 = $7;
  $40 = $6;
  $41 = (($40) + ($39<<3)|0);
  $42 = $41;
  $43 = $42;
  $44 = HEAP32[$43>>2]|0;
  $45 = (($42) + 4)|0;
  $46 = $45;
  $47 = HEAP32[$46>>2]|0;
  $48 = $47 & 65535;
  $49 = ($48|0)!=(0);
  if ($49) {
   label = 7;
   break;
  }
  $50 = $7;
  $51 = $6;
  $52 = (($51) + ($50<<3)|0);
  $53 = $52;
  $54 = $53;
  $55 = HEAP32[$54>>2]|0;
  $56 = (($53) + 4)|0;
  $57 = $56;
  $58 = HEAP32[$57>>2]|0;
  $59 = (_bitshift64Lshr(($55|0),($58|0),48)|0);
  $60 = tempRet0;
  $61 = ($59|0)!=(0);
  if ($61) {
   label = 7;
   break;
  }
  $62 = $7;
  $63 = (($62) + 1)|0;
  $7 = $63;
 }
 if ((label|0) == 7) {
  $3 = 1;
  $64 = $3;
  STACKTOP = sp;return ($64|0);
 }
 else if ((label|0) == 9) {
  $3 = 0;
  $64 = $3;
  STACKTOP = sp;return ($64|0);
 }
 return (0)|0;
}
function _isIndicatorEqual($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp + 4|0;
 $8 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4;
 $10 = $6;
 $11 = (_brailleIndicatorDefined($9,$10,$7)|0);
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $5;
  $14 = $6;
  $15 = (_brailleIndicatorDefined($13,$14,$8)|0);
  $16 = ($15|0)!=(0);
  if ($16) {
   $17 = HEAP32[$7>>2]|0;
   $18 = ((($17)) + 44|0);
   $19 = HEAP16[$18>>1]|0;
   $20 = $19 << 16 >> 16;
   $21 = HEAP32[$8>>2]|0;
   $22 = ((($21)) + 44|0);
   $23 = HEAP16[$22>>1]|0;
   $24 = $23 << 16 >> 16;
   $25 = ($20|0)==($24|0);
   if ($25) {
    $26 = HEAP32[$7>>2]|0;
    $27 = ((($26)) + 46|0);
    $28 = HEAP32[$8>>2]|0;
    $29 = ((($28)) + 46|0);
    $30 = HEAP32[$7>>2]|0;
    $31 = ((($30)) + 44|0);
    $32 = HEAP16[$31>>1]|0;
    $33 = $32 << 16 >> 16;
    $34 = $33<<1;
    $35 = (_memcmp($27,$29,$34)|0);
    $36 = ($35|0)!=(0);
    if (!($36)) {
     $3 = 1;
     $37 = $3;
     STACKTOP = sp;return ($37|0);
    }
   }
  }
 }
 $3 = 0;
 $37 = $3;
 STACKTOP = sp;return ($37|0);
}
function _checkCharAttr_safe($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp;
 $5 = $0;
 $6 = $1;
 $9 = $7;
 $10 = $9;
 HEAP32[$10>>2] = $2;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $3;
 $8 = $4;
 $13 = $6;
 $14 = $5;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)<($16|0);
 if (!($17)) {
  $32 = 0;
  STACKTOP = sp;return ($32|0);
 }
 $18 = $6;
 $19 = $5;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + ($18<<1)|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $7;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = $8;
 $31 = (_checkCharAttr($23,$26,$29,$30)|0);
 $32 = $31;
 STACKTOP = sp;return ($32|0);
}
function _isNoLetsignBefore($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 while(1) {
  $6 = $5;
  $7 = $4;
  $8 = ((($7)) + 2228|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6|0)<($9|0);
  if (!($10)) {
   label = 6;
   break;
  }
  $11 = $3;
  $12 = $11&65535;
  $13 = $5;
  $14 = $4;
  $15 = ((($14)) + 2100|0);
  $16 = (($15) + ($13<<1)|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17&65535;
  $19 = ($12|0)==($18|0);
  if ($19) {
   label = 4;
   break;
  }
  $20 = $5;
  $21 = (($20) + 1)|0;
  $5 = $21;
 }
 if ((label|0) == 4) {
  $2 = 1;
  $22 = $2;
  STACKTOP = sp;return ($22|0);
 }
 else if ((label|0) == 6) {
  $2 = 0;
  $22 = $2;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _isNoLetsign($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 while(1) {
  $6 = $5;
  $7 = $4;
  $8 = ((($7)) + 2744|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6|0)<($9|0);
  if (!($10)) {
   label = 6;
   break;
  }
  $11 = $3;
  $12 = $11&65535;
  $13 = $5;
  $14 = $4;
  $15 = ((($14)) + 2232|0);
  $16 = (($15) + ($13<<1)|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17&65535;
  $19 = ($12|0)==($18|0);
  if ($19) {
   label = 4;
   break;
  }
  $20 = $5;
  $21 = (($20) + 1)|0;
  $5 = $21;
 }
 if ((label|0) == 4) {
  $2 = 1;
  $22 = $2;
  STACKTOP = sp;return ($22|0);
 }
 else if ((label|0) == 6) {
  $2 = 0;
  $22 = $2;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _isNoLetsignAfter($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 while(1) {
  $6 = $5;
  $7 = $4;
  $8 = ((($7)) + 2876|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6|0)<($9|0);
  if (!($10)) {
   label = 6;
   break;
  }
  $11 = $3;
  $12 = $11&65535;
  $13 = $5;
  $14 = $4;
  $15 = ((($14)) + 2748|0);
  $16 = (($15) + ($13<<1)|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17&65535;
  $19 = ($12|0)==($18|0);
  if ($19) {
   label = 4;
   break;
  }
  $20 = $5;
  $21 = (($20) + 1)|0;
  $5 = $21;
 }
 if ((label|0) == 4) {
  $2 = 1;
  $22 = $2;
  STACKTOP = sp;return ($22|0);
 }
 else if ((label|0) == 6) {
  $2 = 0;
  $22 = $2;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _insertEmphasisEnd($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $21 = sp;
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $19 = $9;
 $22 = $12;
 $23 = ((($22)) + 20|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = $24&65535;
 $26 = $13;
 $27 = ((($26)) + 1512|0);
 $28 = (($27) + (($25*36)|0)|0);
 $20 = $28;
 $29 = $11;
 $30 = $10;
 $31 = (($30) + ($29<<3)|0);
 $32 = $31;
 $33 = $32;
 $34 = HEAP32[$33>>2]|0;
 $35 = (($32) + 4)|0;
 $36 = $35;
 $37 = HEAP32[$36>>2]|0;
 $38 = (_bitshift64Lshr(($34|0),($37|0),16)|0);
 $39 = tempRet0;
 $40 = $38 & 65535;
 $41 = $12;
 $42 = ((($41)) + 16|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $40 & $43;
 $45 = ($44|0)!=(0);
 if (!($45)) {
  STACKTOP = sp;return;
 }
 $46 = $11;
 $47 = $10;
 $48 = (($47) + ($46<<3)|0);
 $49 = $48;
 $50 = $49;
 $51 = HEAP32[$50>>2]|0;
 $52 = (($49) + 4)|0;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = $54 & 65535;
 $56 = $12;
 $57 = ((($56)) + 16|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $55 & $58;
 $60 = ($59|0)!=(0);
 $61 = $20;
 if ($60) {
  $62 = ((($61)) + 28|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $13;
  $65 = (_brailleIndicatorDefined($63,$64,$21)|0);
  $66 = ($65|0)!=(0);
  if (!($66)) {
   STACKTOP = sp;return;
  }
  $67 = HEAP32[$21>>2]|0;
  $68 = ((($67)) + 46|0);
  $69 = HEAP32[$21>>2]|0;
  $70 = ((($69)) + 44|0);
  $71 = HEAP16[$70>>1]|0;
  $72 = $71 << 16 >> 16;
  $73 = $14;
  $74 = $15;
  $75 = $16;
  $76 = $17;
  $77 = $18;
  $78 = $19;
  (_for_updatePositions($68,0,$72,-1,$73,$74,$75,$76,$77,$78)|0);
  STACKTOP = sp;return;
 }
 $79 = ((($61)) + 16|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = $13;
 $82 = (_brailleIndicatorDefined($80,$81,$21)|0);
 $83 = ($82|0)!=(0);
 if ($83) {
  $84 = HEAP32[$21>>2]|0;
  $85 = ((($84)) + 46|0);
  $86 = HEAP32[$21>>2]|0;
  $87 = ((($86)) + 44|0);
  $88 = HEAP16[$87>>1]|0;
  $89 = $88 << 16 >> 16;
  $90 = $14;
  $91 = $15;
  $92 = $16;
  $93 = $17;
  $94 = $18;
  $95 = $19;
  (_for_updatePositions($85,0,$89,-1,$90,$91,$92,$93,$94,$95)|0);
  STACKTOP = sp;return;
 }
 $96 = $20;
 $97 = ((($96)) + 8|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = $13;
 $100 = (_brailleIndicatorDefined($98,$99,$21)|0);
 $101 = ($100|0)!=(0);
 if ($101) {
  $102 = HEAP32[$21>>2]|0;
  $103 = ((($102)) + 46|0);
  $104 = HEAP32[$21>>2]|0;
  $105 = ((($104)) + 44|0);
  $106 = HEAP16[$105>>1]|0;
  $107 = $106 << 16 >> 16;
  $108 = $14;
  $109 = $15;
  $110 = $16;
  $111 = $17;
  $112 = $18;
  $113 = $19;
  (_for_updatePositions($103,0,$107,-1,$108,$109,$110,$111,$112,$113)|0);
  STACKTOP = sp;return;
 }
 $114 = $20;
 $115 = ((($114)) + 4|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = $13;
 $118 = (_brailleIndicatorDefined($116,$117,$21)|0);
 $119 = ($118|0)!=(0);
 if (!($119)) {
  STACKTOP = sp;return;
 }
 $120 = HEAP32[$21>>2]|0;
 $121 = ((($120)) + 46|0);
 $122 = HEAP32[$21>>2]|0;
 $123 = ((($122)) + 44|0);
 $124 = HEAP16[$123>>1]|0;
 $125 = $124 << 16 >> 16;
 $126 = $14;
 $127 = $15;
 $128 = $16;
 $129 = $17;
 $130 = $18;
 $131 = $19;
 (_for_updatePositions($121,0,$125,0,$126,$127,$128,$129,$130,$131)|0);
 STACKTOP = sp;return;
}
function _endCount($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = 1;
 $9 = $5;
 $10 = $4;
 $11 = (($10) + ($9<<3)|0);
 $12 = $11;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (_bitshift64Lshr(($14|0),($17|0),16)|0);
 $19 = tempRet0;
 $20 = $18 & 65535;
 $21 = $6;
 $22 = ((($21)) + 16|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $20 & $23;
 $25 = ($24|0)!=(0);
 if (!($25)) {
  $3 = 0;
  $65 = $3;
  STACKTOP = sp;return ($65|0);
 }
 $26 = $5;
 $27 = (($26) - 1)|0;
 $7 = $27;
 while(1) {
  $28 = $7;
  $29 = ($28|0)>=(0);
  if (!($29)) {
   break;
  }
  $30 = $7;
  $31 = $4;
  $32 = (($31) + ($30<<3)|0);
  $33 = $32;
  $34 = $33;
  $35 = HEAP32[$34>>2]|0;
  $36 = (($33) + 4)|0;
  $37 = $36;
  $38 = HEAP32[$37>>2]|0;
  $39 = $35 & 65535;
  $40 = $6;
  $41 = ((($40)) + 16|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $39 & $42;
  $44 = ($43|0)!=(0);
  if ($44) {
   break;
  }
  $45 = $7;
  $46 = $4;
  $47 = (($46) + ($45<<3)|0);
  $48 = $47;
  $49 = $48;
  $50 = HEAP32[$49>>2]|0;
  $51 = (($48) + 4)|0;
  $52 = $51;
  $53 = HEAP32[$52>>2]|0;
  $54 = $53 & 65535;
  $55 = $6;
  $56 = ((($55)) + 16|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $54 & $57;
  $59 = ($58|0)!=(0);
  if ($59) {
   break;
  }
  $60 = $8;
  $61 = (($60) + 1)|0;
  $8 = $61;
  $62 = $7;
  $63 = (($62) + -1)|0;
  $7 = $63;
 }
 $64 = $8;
 $3 = $64;
 $65 = $3;
 STACKTOP = sp;return ($65|0);
}
function _beginCount($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $15 = $7;
 $16 = $6;
 $17 = (($16) + ($15<<3)|0);
 $18 = $17;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = $20 & 65535;
 $25 = $8;
 $26 = ((($25)) + 16|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $24 & $27;
 $29 = ($28|0)!=(0);
 if ($29) {
  $12 = 1;
  $30 = $7;
  $31 = (($30) + 1)|0;
  $11 = $31;
  while(1) {
   $32 = $11;
   $33 = $10;
   $34 = ((($33)) + 8|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($32|0)<($35|0);
   if (!($36)) {
    break;
   }
   $37 = $11;
   $38 = $6;
   $39 = (($38) + ($37<<3)|0);
   $40 = $39;
   $41 = $40;
   $42 = HEAP32[$41>>2]|0;
   $43 = (($40) + 4)|0;
   $44 = $43;
   $45 = HEAP32[$44>>2]|0;
   $46 = (_bitshift64Lshr(($42|0),($45|0),16)|0);
   $47 = tempRet0;
   $48 = $46 & 65535;
   $49 = $8;
   $50 = ((($49)) + 16|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = $48 & $51;
   $53 = ($52|0)!=(0);
   if ($53) {
    break;
   }
   $54 = $12;
   $55 = (($54) + 1)|0;
   $12 = $55;
   $56 = $11;
   $57 = (($56) + 1)|0;
   $11 = $57;
  }
  $58 = $12;
  $5 = $58;
  $122 = $5;
  STACKTOP = sp;return ($122|0);
 }
 $59 = $7;
 $60 = $6;
 $61 = (($60) + ($59<<3)|0);
 $62 = $61;
 $63 = $62;
 $64 = HEAP32[$63>>2]|0;
 $65 = (($62) + 4)|0;
 $66 = $65;
 $67 = HEAP32[$66>>2]|0;
 $68 = $67 & 65535;
 $69 = $8;
 $70 = ((($69)) + 16|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = $68 & $71;
 $73 = ($72|0)!=(0);
 if (!($73)) {
  $5 = 0;
  $122 = $5;
  STACKTOP = sp;return ($122|0);
 }
 $14 = 1;
 $74 = $7;
 $75 = (($74) + 1)|0;
 $13 = $75;
 while(1) {
  $76 = $13;
  $77 = $10;
  $78 = ((($77)) + 8|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = ($76|0)<($79|0);
  if (!($80)) {
   break;
  }
  $81 = $13;
  $82 = $6;
  $83 = (($82) + ($81<<3)|0);
  $84 = $83;
  $85 = $84;
  $86 = HEAP32[$85>>2]|0;
  $87 = (($84) + 4)|0;
  $88 = $87;
  $89 = HEAP32[$88>>2]|0;
  $90 = (_bitshift64Lshr(($86|0),($89|0),16)|0);
  $91 = tempRet0;
  $92 = $90 & 65535;
  $93 = $8;
  $94 = ((($93)) + 16|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $92 & $95;
  $97 = ($96|0)!=(0);
  if ($97) {
   break;
  }
  $98 = $13;
  $99 = $10;
  $100 = ((($99)) + 4|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (($101) + ($98<<1)|0);
  $103 = HEAP16[$102>>1]|0;
  $104 = $9;
  $105 = (_checkCharAttr($103,8192,0,$104)|0);
  $106 = ($105|0)!=(0);
  if ($106) {
   break;
  }
  $107 = $13;
  $108 = $10;
  $109 = ((($108)) + 4|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = (($110) + ($107<<1)|0);
  $112 = HEAP16[$111>>1]|0;
  $113 = $9;
  $114 = $8;
  $115 = (_isEmphSpace($112,$113,$114)|0);
  $116 = ($115|0)!=(0);
  if ($116) {
   break;
  }
  $117 = $14;
  $118 = (($117) + 1)|0;
  $14 = $118;
  $119 = $13;
  $120 = (($119) + 1)|0;
  $13 = $120;
 }
 $121 = $14;
 $5 = $121;
 $122 = $5;
 STACKTOP = sp;return ($122|0);
}
function _insertEmphasisBegin($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $21 = sp;
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $19 = $9;
 $22 = $12;
 $23 = ((($22)) + 20|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = $24&65535;
 $26 = $13;
 $27 = ((($26)) + 1512|0);
 $28 = (($27) + (($25*36)|0)|0);
 $20 = $28;
 $29 = $11;
 $30 = $10;
 $31 = (($30) + ($29<<3)|0);
 $32 = $31;
 $33 = $32;
 $34 = HEAP32[$33>>2]|0;
 $35 = (($32) + 4)|0;
 $36 = $35;
 $37 = HEAP32[$36>>2]|0;
 $38 = $34 & 65535;
 $39 = $12;
 $40 = ((($39)) + 16|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $38 & $41;
 $43 = ($42|0)!=(0);
 do {
  if ($43) {
   $44 = $20;
   $45 = HEAP32[$44>>2]|0;
   $46 = $13;
   $47 = (_brailleIndicatorDefined($45,$46,$21)|0);
   $48 = ($47|0)!=(0);
   if ($48) {
    $49 = HEAP32[$21>>2]|0;
    $50 = ((($49)) + 46|0);
    $51 = HEAP32[$21>>2]|0;
    $52 = ((($51)) + 44|0);
    $53 = HEAP16[$52>>1]|0;
    $54 = $53 << 16 >> 16;
    $55 = $14;
    $56 = $15;
    $57 = $16;
    $58 = $17;
    $59 = $18;
    $60 = $19;
    (_for_updatePositions($50,0,$54,0,$55,$56,$57,$58,$59,$60)|0);
    break;
   }
   $61 = $20;
   $62 = ((($61)) + 12|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $13;
   $65 = (_brailleIndicatorDefined($63,$64,$21)|0);
   $66 = ($65|0)!=(0);
   if ($66) {
    $67 = HEAP32[$21>>2]|0;
    $68 = ((($67)) + 46|0);
    $69 = HEAP32[$21>>2]|0;
    $70 = ((($69)) + 44|0);
    $71 = HEAP16[$70>>1]|0;
    $72 = $71 << 16 >> 16;
    $73 = $14;
    $74 = $15;
    $75 = $16;
    $76 = $17;
    $77 = $18;
    $78 = $19;
    (_for_updatePositions($68,0,$72,0,$73,$74,$75,$76,$77,$78)|0);
   }
  }
 } while(0);
 $79 = $11;
 $80 = $10;
 $81 = (($80) + ($79<<3)|0);
 $82 = $81;
 $83 = $82;
 $84 = HEAP32[$83>>2]|0;
 $85 = (($82) + 4)|0;
 $86 = $85;
 $87 = HEAP32[$86>>2]|0;
 $88 = $87 & 65535;
 $89 = $12;
 $90 = ((($89)) + 16|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = $88 & $91;
 $93 = ($92|0)!=(0);
 if (!($93)) {
  STACKTOP = sp;return;
 }
 $94 = $11;
 $95 = $10;
 $96 = (($95) + ($94<<3)|0);
 $97 = $96;
 $98 = $97;
 $99 = HEAP32[$98>>2]|0;
 $100 = (($97) + 4)|0;
 $101 = $100;
 $102 = HEAP32[$101>>2]|0;
 $103 = (_bitshift64Lshr(($99|0),($102|0),16)|0);
 $104 = tempRet0;
 $105 = $103 & 65535;
 $106 = $12;
 $107 = ((($106)) + 16|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = $105 & $108;
 $110 = ($109|0)!=(0);
 if ($110) {
  STACKTOP = sp;return;
 }
 $111 = $20;
 $112 = ((($111)) + 24|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = $13;
 $115 = (_brailleIndicatorDefined($113,$114,$21)|0);
 $116 = ($115|0)!=(0);
 if (!($116)) {
  STACKTOP = sp;return;
 }
 $117 = HEAP32[$21>>2]|0;
 $118 = ((($117)) + 46|0);
 $119 = HEAP32[$21>>2]|0;
 $120 = ((($119)) + 44|0);
 $121 = HEAP16[$120>>1]|0;
 $122 = $121 << 16 >> 16;
 $123 = $14;
 $124 = $15;
 $125 = $16;
 $126 = $17;
 $127 = $18;
 $128 = $19;
 (_for_updatePositions($118,0,$122,0,$123,$124,$125,$126,$127,$128)|0);
 STACKTOP = sp;return;
}
function _insertEmphasisSymbol($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $20 = sp;
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $19 = $9;
 $21 = $11;
 $22 = $10;
 $23 = (($22) + ($21<<3)|0);
 $24 = $23;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (_bitshift64Lshr(($26|0),($29|0),48)|0);
 $31 = tempRet0;
 $32 = $12;
 $33 = ((($32)) + 16|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $30 & $34;
 $36 = ($35|0)!=(0);
 if (!($36)) {
  STACKTOP = sp;return;
 }
 $37 = $12;
 $38 = ((($37)) + 20|0);
 $39 = HEAP16[$38>>1]|0;
 $40 = $39&65535;
 $41 = $13;
 $42 = ((($41)) + 1512|0);
 $43 = (($42) + (($40*36)|0)|0);
 $44 = ((($43)) + 20|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $13;
 $47 = (_brailleIndicatorDefined($45,$46,$20)|0);
 $48 = ($47|0)!=(0);
 if (!($48)) {
  STACKTOP = sp;return;
 }
 $49 = HEAP32[$20>>2]|0;
 $50 = ((($49)) + 46|0);
 $51 = HEAP32[$20>>2]|0;
 $52 = ((($51)) + 44|0);
 $53 = HEAP16[$52>>1]|0;
 $54 = $53 << 16 >> 16;
 $55 = $14;
 $56 = $15;
 $57 = $16;
 $58 = $17;
 $59 = $18;
 $60 = $19;
 (_for_updatePositions($50,0,$54,0,$55,$56,$57,$58,$59,$60)|0);
 STACKTOP = sp;return;
}
function _isEmphSpace($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $6;
 $9 = ((($8)) + 20|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = $5;
 $13 = ((($12)) + 1512|0);
 $14 = (($13) + (($11*36)|0)|0);
 $15 = ((($14)) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 $7 = $16;
 $17 = $6;
 $18 = ((($17)) + 8|0);
 $19 = $18;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + 4)|0;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = ($21|0)==(16);
 $26 = ($24|0)==(0);
 $27 = $25 & $26;
 do {
  if ($27) {
   $28 = $7;
   $29 = ($28|0)!=(0);
   if ($29) {
    $30 = $5;
    $31 = ((($30)) + 540|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($32|0)!=(0);
    if ($33) {
     break;
    }
   }
   $34 = $4;
   $35 = $5;
   $36 = (_checkCharAttr($34,1,0,$35)|0);
   $3 = $36;
   $51 = $3;
   STACKTOP = sp;return ($51|0);
  }
 } while(0);
 $37 = $4;
 $38 = $5;
 $39 = $6;
 $40 = (_isEmphasizable($37,$38,$39)|0);
 $41 = ($40|0)!=(0);
 if ($41) {
  $50 = 0;
 } else {
  $42 = $7;
  $43 = ($42|0)!=(0);
  if ($43) {
   $44 = $4;
   $45 = $5;
   $46 = $6;
   $47 = (_resetsEmphMode($44,$45,$46)|0);
   $48 = ($47|0)!=(0);
   $50 = $48;
  } else {
   $50 = 1;
  }
 }
 $49 = $50&1;
 $3 = $49;
 $51 = $3;
 STACKTOP = sp;return ($51|0);
}
function _isEmphasizable($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $6;
 $11 = ((($10)) + 8|0);
 $12 = $11;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = ($14|0)!=(0);
 $19 = ($17|0)!=(0);
 $20 = $18 | $19;
 if ($20) {
  $21 = $4;
  $22 = $5;
  $23 = (_getChar_2($21,$22)|0);
  $7 = $23;
  $24 = $7;
  $25 = ((($24)) + 48|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)!=(0);
  if ($27) {
   $28 = $7;
   $29 = ((($28)) + 48|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $5;
   $32 = ((($31)) + 31168|0);
   $33 = (($32) + ($30<<3)|0);
   $7 = $33;
  }
  $34 = $7;
  $35 = ((($34)) + 24|0);
  $36 = $35;
  $37 = $36;
  $38 = HEAP32[$37>>2]|0;
  $39 = (($36) + 4)|0;
  $40 = $39;
  $41 = HEAP32[$40>>2]|0;
  $42 = $6;
  $43 = ((($42)) + 8|0);
  $44 = $43;
  $45 = $44;
  $46 = HEAP32[$45>>2]|0;
  $47 = (($44) + 4)|0;
  $48 = $47;
  $49 = HEAP32[$48>>2]|0;
  $50 = $38 & $46;
  $51 = $41 & $49;
  $52 = ($50|0)!=(0);
  $53 = ($51|0)!=(0);
  $54 = $52 | $53;
  if ($54) {
   $3 = 1;
   $117 = $3;
   STACKTOP = sp;return ($117|0);
  }
  while(1) {
   $55 = $7;
   $56 = ((($55)) + 52|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ($57|0)!=(0);
   if (!($58)) {
    label = 9;
    break;
   }
   $59 = $7;
   $60 = ((($59)) + 52|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $5;
   $63 = ((($62)) + 31168|0);
   $64 = (($63) + ($61<<3)|0);
   $7 = $64;
   $65 = $7;
   $66 = ((($65)) + 24|0);
   $67 = $66;
   $68 = $67;
   $69 = HEAP32[$68>>2]|0;
   $70 = (($67) + 4)|0;
   $71 = $70;
   $72 = HEAP32[$71>>2]|0;
   $73 = $6;
   $74 = ((($73)) + 8|0);
   $75 = $74;
   $76 = $75;
   $77 = HEAP32[$76>>2]|0;
   $78 = (($75) + 4)|0;
   $79 = $78;
   $80 = HEAP32[$79>>2]|0;
   $81 = $69 & $77;
   $82 = $72 & $80;
   $83 = ($81|0)!=(0);
   $84 = ($82|0)!=(0);
   $85 = $83 | $84;
   if ($85) {
    label = 8;
    break;
   }
  }
  if ((label|0) == 8) {
   $3 = 1;
   $117 = $3;
   STACKTOP = sp;return ($117|0);
  }
  else if ((label|0) == 9) {
   $3 = 0;
   $117 = $3;
   STACKTOP = sp;return ($117|0);
  }
 } else {
  $86 = $6;
  $87 = ((($86)) + 20|0);
  $88 = HEAP16[$87>>1]|0;
  $89 = $88&65535;
  $90 = $5;
  $91 = ((($90)) + 8020|0);
  $92 = (($91) + (($89*514)|0)|0);
  $8 = $92;
  $93 = $8;
  $94 = HEAP16[$93>>1]|0;
  $95 = ($94<<16>>16)!=(0);
  if (!($95)) {
   $96 = $4;
   $97 = $5;
   $98 = (_checkCharAttr($96,1,0,$97)|0);
   $99 = ($98|0)!=(0);
   $100 = $99 ^ 1;
   $101 = $100&1;
   $3 = $101;
   $117 = $3;
   STACKTOP = sp;return ($117|0);
  }
  $9 = 0;
  while(1) {
   $102 = $9;
   $103 = $8;
   $104 = (($103) + ($102<<1)|0);
   $105 = HEAP16[$104>>1]|0;
   $106 = ($105<<16>>16)!=(0);
   if (!($106)) {
    label = 17;
    break;
   }
   $107 = $4;
   $108 = $107&65535;
   $109 = $9;
   $110 = $8;
   $111 = (($110) + ($109<<1)|0);
   $112 = HEAP16[$111>>1]|0;
   $113 = $112&65535;
   $114 = ($108|0)==($113|0);
   if ($114) {
    label = 15;
    break;
   }
   $115 = $9;
   $116 = (($115) + 1)|0;
   $9 = $116;
  }
  if ((label|0) == 15) {
   $3 = 0;
   $117 = $3;
   STACKTOP = sp;return ($117|0);
  }
  else if ((label|0) == 17) {
   $3 = 1;
   $117 = $3;
   STACKTOP = sp;return ($117|0);
  }
 }
 return (0)|0;
}
function _resetsEmphMode($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $11 = $6;
 $12 = ((($11)) + 8|0);
 $13 = $12;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = ($15|0)!=(0);
 $20 = ($18|0)!=(0);
 $21 = $19 | $20;
 $22 = $4;
 $23 = $5;
 if (!($21)) {
  $155 = (_checkCharAttr($22,2,0,$23)|0);
  $156 = ($155|0)!=(0);
  if ($156) {
   $3 = 0;
   $185 = $3;
   STACKTOP = sp;return ($185|0);
  }
  $157 = $6;
  $158 = ((($157)) + 20|0);
  $159 = HEAP16[$158>>1]|0;
  $160 = $159&65535;
  $161 = $5;
  $162 = ((($161)) + 2880|0);
  $163 = (($162) + (($160*514)|0)|0);
  $9 = $163;
  $164 = $9;
  $165 = HEAP16[$164>>1]|0;
  $166 = ($165<<16>>16)!=(0);
  if (!($166)) {
   $167 = $4;
   $168 = $5;
   $169 = (_checkCharAttr($167,1,0,$168)|0);
   $3 = $169;
   $185 = $3;
   STACKTOP = sp;return ($185|0);
  }
  $10 = 0;
  while(1) {
   $170 = $10;
   $171 = $9;
   $172 = (($171) + ($170<<1)|0);
   $173 = HEAP16[$172>>1]|0;
   $174 = ($173<<16>>16)!=(0);
   if (!($174)) {
    label = 24;
    break;
   }
   $175 = $4;
   $176 = $175&65535;
   $177 = $10;
   $178 = $9;
   $179 = (($178) + ($177<<1)|0);
   $180 = HEAP16[$179>>1]|0;
   $181 = $180&65535;
   $182 = ($176|0)==($181|0);
   if ($182) {
    label = 22;
    break;
   }
   $183 = $10;
   $184 = (($183) + 1)|0;
   $10 = $184;
  }
  if ((label|0) == 22) {
   $3 = 0;
   $185 = $3;
   STACKTOP = sp;return ($185|0);
  }
  else if ((label|0) == 24) {
   $3 = 1;
   $185 = $3;
   STACKTOP = sp;return ($185|0);
  }
 }
 $24 = (_getChar_2($22,$23)|0);
 $7 = $24;
 $25 = $7;
 $26 = ((($25)) + 24|0);
 $27 = $26;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 4)|0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = $6;
 $34 = ((($33)) + 8|0);
 $35 = $34;
 $36 = $35;
 $37 = HEAP32[$36>>2]|0;
 $38 = (($35) + 4)|0;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = $29 & $37;
 $42 = $32 & $40;
 $43 = ($41|0)!=(0);
 $44 = ($42|0)!=(0);
 $45 = $43 | $44;
 if ($45) {
  $3 = 0;
  $185 = $3;
  STACKTOP = sp;return ($185|0);
 }
 $46 = $7;
 $8 = $46;
 $47 = $8;
 $48 = ((($47)) + 48|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)!=(0);
 if ($50) {
  $51 = $8;
  $52 = ((($51)) + 48|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $5;
  $55 = ((($54)) + 31168|0);
  $56 = (($55) + ($53<<3)|0);
  $8 = $56;
 }
 while(1) {
  $57 = $8;
  $58 = ((($57)) + 52|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($59|0)!=(0);
  if (!($60)) {
   break;
  }
  $61 = $8;
  $62 = ((($61)) + 52|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $5;
  $65 = ((($64)) + 31168|0);
  $66 = (($65) + ($63<<3)|0);
  $8 = $66;
  $67 = $8;
  $68 = ((($67)) + 32|0);
  $69 = $68;
  $70 = $69;
  $71 = HEAP32[$70>>2]|0;
  $72 = (($69) + 4)|0;
  $73 = $72;
  $74 = HEAP32[$73>>2]|0;
  $75 = $7;
  $76 = ((($75)) + 32|0);
  $77 = $76;
  $78 = $77;
  $79 = HEAP32[$78>>2]|0;
  $80 = (($77) + 4)|0;
  $81 = $80;
  $82 = HEAP32[$81>>2]|0;
  $83 = $71 & $79;
  $84 = $74 & $82;
  $85 = $7;
  $86 = ((($85)) + 32|0);
  $87 = $86;
  $88 = $87;
  $89 = HEAP32[$88>>2]|0;
  $90 = (($87) + 4)|0;
  $91 = $90;
  $92 = HEAP32[$91>>2]|0;
  $93 = ($83|0)==($89|0);
  $94 = ($84|0)==($92|0);
  $95 = $93 & $94;
  if (!($95)) {
   continue;
  }
  $96 = $8;
  $97 = ((($96)) + 24|0);
  $98 = $97;
  $99 = $98;
  $100 = HEAP32[$99>>2]|0;
  $101 = (($98) + 4)|0;
  $102 = $101;
  $103 = HEAP32[$102>>2]|0;
  $104 = $6;
  $105 = ((($104)) + 8|0);
  $106 = $105;
  $107 = $106;
  $108 = HEAP32[$107>>2]|0;
  $109 = (($106) + 4)|0;
  $110 = $109;
  $111 = HEAP32[$110>>2]|0;
  $112 = $100 & $108;
  $113 = $103 & $111;
  $114 = ($112|0)!=(0);
  $115 = ($113|0)!=(0);
  $116 = $114 | $115;
  if ($116) {
   label = 9;
   break;
  }
 }
 if ((label|0) == 9) {
  $3 = 0;
  $185 = $3;
  STACKTOP = sp;return ($185|0);
 }
 $117 = $6;
 $118 = ((($117)) + 8|0);
 $119 = $118;
 $120 = $119;
 $121 = HEAP32[$120>>2]|0;
 $122 = (($119) + 4)|0;
 $123 = $122;
 $124 = HEAP32[$123>>2]|0;
 $125 = ($121|0)==(16);
 $126 = ($124|0)==(0);
 $127 = $125 & $126;
 if ($127) {
  $128 = $4;
  $129 = $5;
  $130 = (_checkCharAttr($128,514,0,$129)|0);
  $131 = ($130|0)!=(0);
  $132 = $131 ^ 1;
  $133 = $132&1;
  $3 = $133;
  $185 = $3;
  STACKTOP = sp;return ($185|0);
 }
 $134 = $6;
 $135 = ((($134)) + 8|0);
 $136 = $135;
 $137 = $136;
 $138 = HEAP32[$137>>2]|0;
 $139 = (($136) + 4)|0;
 $140 = $139;
 $141 = HEAP32[$140>>2]|0;
 $142 = ($138|0)==(4);
 $143 = ($141|0)==(0);
 $144 = $142 & $143;
 $145 = $4;
 $146 = $5;
 if ($144) {
  $147 = (_checkCharAttr($145,67111172,0,$146)|0);
  $148 = ($147|0)!=(0);
  $149 = $148 ^ 1;
  $150 = $149&1;
  $3 = $150;
  $185 = $3;
  STACKTOP = sp;return ($185|0);
 } else {
  $151 = (_checkCharAttr($145,2,0,$146)|0);
  $152 = ($151|0)!=(0);
  $153 = $152 ^ 1;
  $154 = $153&1;
  $3 = $154;
  $185 = $3;
  STACKTOP = sp;return ($185|0);
 }
 return (0)|0;
}
function _validMatch($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $15 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $18 = $15;
 $19 = $18;
 HEAP32[$19>>2] = 0;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = 0;
 $17 = 0;
 $22 = $12;
 $23 = ($22|0)!=(0);
 if (!($23)) {
  $6 = 0;
  $178 = $6;
  STACKTOP = sp;return ($178|0);
 }
 $24 = $8;
 $16 = $24;
 while(1) {
  $25 = $16;
  $26 = $8;
  $27 = $12;
  $28 = (($26) + ($27))|0;
  $29 = ($25|0)<($28|0);
  if (!($29)) {
   label = 24;
   break;
  }
  $30 = $16;
  $31 = $9;
  $32 = ((($31)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + ($30<<1)|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = $35&65535;
  $37 = ($36|0)==(65535);
  $38 = $16;
  if ($37) {
   label = 6;
   break;
  }
  $43 = $9;
  $44 = ((($43)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + ($38<<1)|0);
  $47 = HEAP16[$46>>1]|0;
  $48 = $7;
  $49 = (_getChar_2($47,$48)|0);
  $13 = $49;
  $50 = $16;
  $51 = $8;
  $52 = ($50|0)==($51|0);
  if ($52) {
   $53 = $13;
   $54 = ((($53)) + 24|0);
   $55 = $54;
   $56 = $55;
   $57 = HEAP32[$56>>2]|0;
   $58 = (($55) + 4)|0;
   $59 = $58;
   $60 = HEAP32[$59>>2]|0;
   $61 = $15;
   $62 = $61;
   HEAP32[$62>>2] = $57;
   $63 = (($61) + 4)|0;
   $64 = $63;
   HEAP32[$64>>2] = $60;
  }
  $65 = $17;
  $66 = (($65) + 1)|0;
  $17 = $66;
  $67 = $11;
  $68 = ((($67)) + 46|0);
  $69 = (($68) + ($65<<1)|0);
  $70 = HEAP16[$69>>1]|0;
  $71 = $7;
  $72 = (_getChar_2($70,$71)|0);
  $14 = $72;
  $73 = $7;
  $74 = $13;
  $75 = (_toLowercase_441($73,$74)|0);
  $76 = $75&65535;
  $77 = $7;
  $78 = $14;
  $79 = (_toLowercase_441($77,$78)|0);
  $80 = $79&65535;
  $81 = ($76|0)!=($80|0);
  if ($81) {
   label = 12;
   break;
  }
  $82 = $10;
  $83 = ($82|0)!=(0|0);
  if ($83) {
   $84 = $8;
   $85 = $10;
   $86 = (($85) + ($84<<1)|0);
   $87 = HEAP16[$86>>1]|0;
   $88 = $87&65535;
   $89 = $88 & 32768;
   $90 = ($89|0)==(0);
   if ($90) {
    $91 = $16;
    $92 = $10;
    $93 = (($92) + ($91<<1)|0);
    $94 = HEAP16[$93>>1]|0;
    $95 = $94&65535;
    $96 = $8;
    $97 = $10;
    $98 = (($97) + ($96<<1)|0);
    $99 = HEAP16[$98>>1]|0;
    $100 = $99&65535;
    $101 = $95 | $100;
    $102 = $8;
    $103 = $10;
    $104 = (($103) + ($102<<1)|0);
    $105 = HEAP16[$104>>1]|0;
    $106 = $105&65535;
    $107 = ($101|0)!=($106|0);
    if ($107) {
     label = 16;
     break;
    }
   }
  }
  $108 = $13;
  $109 = ((($108)) + 24|0);
  $110 = $109;
  $111 = $110;
  $112 = HEAP32[$111>>2]|0;
  $113 = (($110) + 4)|0;
  $114 = $113;
  $115 = HEAP32[$114>>2]|0;
  $116 = ($112|0)!=(2);
  $117 = ($115|0)!=(0);
  $118 = $116 | $117;
  if ($118) {
   $119 = $16;
   $120 = $8;
   $121 = (($120) + 1)|0;
   $122 = ($119|0)!=($121|0);
   if ($122) {
    $123 = $15;
    $124 = $123;
    $125 = HEAP32[$124>>2]|0;
    $126 = (($123) + 4)|0;
    $127 = $126;
    $128 = HEAP32[$127>>2]|0;
    $129 = $125 & 2;
    $130 = ($129|0)!=(0);
    $131 = (0)!=(0);
    $132 = $130 | $131;
    if ($132) {
     $133 = $13;
     $134 = ((($133)) + 24|0);
     $135 = $134;
     $136 = $135;
     $137 = HEAP32[$136>>2]|0;
     $138 = (($135) + 4)|0;
     $139 = $138;
     $140 = HEAP32[$139>>2]|0;
     $141 = $137 & 2;
     $142 = ($141|0)!=(0);
     $143 = (0)!=(0);
     $144 = $142 | $143;
     if ($144) {
      $145 = $13;
      $146 = ((($145)) + 24|0);
      $147 = $146;
      $148 = $147;
      $149 = HEAP32[$148>>2]|0;
      $150 = (($147) + 4)|0;
      $151 = $150;
      $152 = HEAP32[$151>>2]|0;
      $153 = $149 & 50;
      $154 = $15;
      $155 = $154;
      $156 = HEAP32[$155>>2]|0;
      $157 = (($154) + 4)|0;
      $158 = $157;
      $159 = HEAP32[$158>>2]|0;
      $160 = $156 & 50;
      $161 = ($153|0)!=($160|0);
      $162 = (0)!=(0);
      $163 = $161 | $162;
      if ($163) {
       label = 22;
       break;
      }
     }
    }
   }
  }
  $164 = $13;
  $165 = ((($164)) + 24|0);
  $166 = $165;
  $167 = $166;
  $168 = HEAP32[$167>>2]|0;
  $169 = (($166) + 4)|0;
  $170 = $169;
  $171 = HEAP32[$170>>2]|0;
  $172 = $15;
  $173 = $172;
  HEAP32[$173>>2] = $168;
  $174 = (($172) + 4)|0;
  $175 = $174;
  HEAP32[$175>>2] = $171;
  $176 = $16;
  $177 = (($176) + 1)|0;
  $16 = $177;
 }
 if ((label|0) == 6) {
  $39 = $8;
  $40 = ($38|0)==($39|0);
  $41 = $12;
  $42 = ($41|0)==(1);
  $or$cond = $40 & $42;
  if ($or$cond) {
   $6 = 1;
   $178 = $6;
   STACKTOP = sp;return ($178|0);
  } else {
   $6 = 0;
   $178 = $6;
   STACKTOP = sp;return ($178|0);
  }
 }
 else if ((label|0) == 12) {
  $6 = 0;
  $178 = $6;
  STACKTOP = sp;return ($178|0);
 }
 else if ((label|0) == 16) {
  $6 = 0;
  $178 = $6;
  STACKTOP = sp;return ($178|0);
 }
 else if ((label|0) == 22) {
  $6 = 0;
  $178 = $6;
  STACKTOP = sp;return ($178|0);
 }
 else if ((label|0) == 24) {
  $6 = 1;
  $178 = $6;
  STACKTOP = sp;return ($178|0);
 }
 return (0)|0;
}
function _setAfter($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $7;
 $12 = $5;
 $13 = (($11) + ($12))|0;
 $14 = (($13) + 2)|0;
 $15 = $8;
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($14|0)<($17|0);
 if ($18) {
  $19 = $7;
  $20 = (($19) + 1)|0;
  $21 = $8;
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + ($20<<1)|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $25&65535;
  $27 = ($26|0)==(65535);
  if ($27) {
   $28 = $7;
   $29 = (($28) + 2)|0;
   $30 = $8;
   $31 = ((($30)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + ($29<<1)|0);
   $34 = HEAP16[$33>>1]|0;
   $10 = $34;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $35 = $7;
  $36 = $5;
  $37 = (($35) + ($36))|0;
  $38 = $8;
  $39 = ((($38)) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($37|0)<($40|0);
  if ($41) {
   $42 = $7;
   $43 = $5;
   $44 = (($42) + ($43))|0;
   $45 = $8;
   $46 = ((($45)) + 4|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($47) + ($44<<1)|0);
   $49 = HEAP16[$48>>1]|0;
   $50 = $49&65535;
   $52 = $50;
  } else {
   $52 = 32;
  }
  $51 = $52&65535;
  $10 = $51;
 }
 $53 = $10;
 $54 = $6;
 $55 = (_getChar_2($53,$54)|0);
 $56 = ((($55)) + 24|0);
 $57 = $56;
 $58 = $57;
 $59 = HEAP32[$58>>2]|0;
 $60 = (($57) + 4)|0;
 $61 = $60;
 $62 = HEAP32[$61>>2]|0;
 $63 = $9;
 $64 = $63;
 $65 = $64;
 HEAP32[$65>>2] = $59;
 $66 = (($64) + 4)|0;
 $67 = $66;
 HEAP32[$67>>2] = $62;
 STACKTOP = sp;return;
}
function _syllableBreak($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = 0;
 $10 = 0;
 $11 = 0;
 $12 = 0;
 $13 = 0;
 $14 = $6;
 $9 = $14;
 while(1) {
  $15 = $9;
  $16 = ($15|0)>=(0);
  if (!($16)) {
   break;
  }
  $17 = $9;
  $18 = $7;
  $19 = ((($18)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($17<<1)|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $5;
  $24 = (_getChar_2($22,$23)|0);
  $25 = ((($24)) + 24|0);
  $26 = $25;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + 4)|0;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $32 = $28 & 2;
  $33 = ($32|0)!=(0);
  $34 = (0)!=(0);
  $35 = $33 | $34;
  $36 = $9;
  if (!($35)) {
   label = 4;
   break;
  }
  $38 = (($36) + -1)|0;
  $9 = $38;
 }
 if ((label|0) == 4) {
  $37 = (($36) + 1)|0;
  $9 = $37;
 }
 $39 = $9;
 $40 = ($39|0)<(0);
 if ($40) {
  $9 = 0;
 }
 $41 = $6;
 $10 = $41;
 while(1) {
  $42 = $10;
  $43 = $7;
  $44 = ((($43)) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($42|0)<($45|0);
  if (!($46)) {
   break;
  }
  $47 = $10;
  $48 = $7;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + ($47<<1)|0);
  $52 = HEAP16[$51>>1]|0;
  $53 = $5;
  $54 = (_getChar_2($52,$53)|0);
  $55 = ((($54)) + 24|0);
  $56 = $55;
  $57 = $56;
  $58 = HEAP32[$57>>2]|0;
  $59 = (($56) + 4)|0;
  $60 = $59;
  $61 = HEAP32[$60>>2]|0;
  $62 = $58 & 2;
  $63 = ($62|0)!=(0);
  $64 = (0)!=(0);
  $65 = $63 | $64;
  $66 = $10;
  if (!($65)) {
   label = 11;
   break;
  }
  $68 = (($66) + 1)|0;
  $10 = $68;
 }
 if ((label|0) == 11) {
  $67 = (($66) + -1)|0;
  $10 = $67;
 }
 $69 = $10;
 $70 = $7;
 $71 = ((($70)) + 8|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ($69|0)==($72|0);
 if ($73) {
  $74 = $10;
  $75 = (($74) + -1)|0;
  $10 = $75;
 }
 $76 = $10;
 $77 = $9;
 $78 = (($76) - ($77))|0;
 $79 = (($78) + 1)|0;
 $11 = $79;
 $80 = $11;
 $81 = (($80) + 1)|0;
 $82 = (_calloc($81,1)|0);
 $13 = $82;
 $83 = $9;
 $84 = $7;
 $85 = ((($84)) + 4|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = (($86) + ($83<<1)|0);
 $88 = $11;
 $89 = $13;
 $90 = $5;
 $91 = (_hyphenateWord($87,$88,$89,$90)|0);
 $92 = ($91|0)!=(0);
 if (!($92)) {
  $93 = $13;
  _rpl_free($93);
  $4 = 0;
  $116 = $4;
  STACKTOP = sp;return ($116|0);
 }
 $94 = $6;
 $95 = $9;
 $96 = (($94) - ($95))|0;
 $97 = (($96) + 1)|0;
 $12 = $97;
 while(1) {
  $98 = $12;
  $99 = $6;
  $100 = $9;
  $101 = (($99) - ($100))|0;
  $102 = $8;
  $103 = (($101) + ($102))|0;
  $104 = ($98|0)<($103|0);
  if (!($104)) {
   label = 22;
   break;
  }
  $105 = $12;
  $106 = $13;
  $107 = (($106) + ($105)|0);
  $108 = HEAP8[$107>>0]|0;
  $109 = $108 << 24 >> 24;
  $110 = $109 & 1;
  $111 = ($110|0)!=(0);
  if ($111) {
   label = 20;
   break;
  }
  $113 = $12;
  $114 = (($113) + 1)|0;
  $12 = $114;
 }
 if ((label|0) == 20) {
  $112 = $13;
  _rpl_free($112);
  $4 = 1;
  $116 = $4;
  STACKTOP = sp;return ($116|0);
 }
 else if ((label|0) == 22) {
  $115 = $13;
  _rpl_free($115);
  $4 = 0;
  $116 = $4;
  STACKTOP = sp;return ($116|0);
 }
 return (0)|0;
}
function _isRepeatedWord($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = 1;
 while(1) {
  $20 = $10;
  $21 = $17;
  $22 = (($20) - ($21))|0;
  $23 = ($22|0)>=(0);
  if (!($23)) {
   break;
  }
  $24 = $10;
  $25 = $15;
  $26 = (($24) + ($25))|0;
  $27 = $17;
  $28 = (($26) + ($27))|0;
  $29 = (($28) - 1)|0;
  $30 = $11;
  $31 = ((($30)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($29|0)<($32|0);
  if (!($33)) {
   break;
  }
  $34 = $10;
  $35 = $17;
  $36 = (($34) - ($35))|0;
  $37 = $11;
  $38 = ((($37)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + ($36<<1)|0);
  $41 = HEAP16[$40>>1]|0;
  $42 = $9;
  $43 = (_checkCharAttr($41,2,0,$42)|0);
  $44 = ($43|0)!=(0);
  if (!($44)) {
   break;
  }
  $45 = $10;
  $46 = $15;
  $47 = (($45) + ($46))|0;
  $48 = $17;
  $49 = (($47) + ($48))|0;
  $50 = (($49) - 1)|0;
  $51 = $11;
  $52 = ((($51)) + 4|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + ($50<<1)|0);
  $55 = HEAP16[$54>>1]|0;
  $56 = $9;
  $57 = (_checkCharAttr($55,2,0,$56)|0);
  $58 = ($57|0)!=(0);
  if (!($58)) {
   break;
  }
  $59 = $17;
  $60 = (($59) + 1)|0;
  $17 = $60;
 }
 $61 = $17;
 $62 = (($61) + -1)|0;
 $17 = $62;
 while(1) {
  $63 = $17;
  $64 = ($63|0)>(0);
  if (!($64)) {
   label = 21;
   break;
  }
  $65 = $10;
  $66 = $17;
  $67 = (($65) - ($66))|0;
  $18 = $67;
  $68 = $18;
  $69 = $11;
  $70 = ((($69)) + 4|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + ($68<<1)|0);
  $73 = $10;
  $74 = $15;
  $75 = (($73) + ($74))|0;
  $76 = $11;
  $77 = ((($76)) + 4|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (($78) + ($75<<1)|0);
  $80 = $17;
  $81 = $9;
  $82 = (_compareChars($72,$79,$80,$81)|0);
  $83 = ($82|0)!=(0);
  if ($83) {
   break;
  }
  $118 = $17;
  $119 = (($118) + -1)|0;
  $17 = $119;
 }
 if ((label|0) == 21) {
  $8 = 0;
  $120 = $8;
  STACKTOP = sp;return ($120|0);
 }
 $84 = $13;
 $85 = (($84) - 1)|0;
 $19 = $85;
 while(1) {
  $86 = $19;
  $87 = ($86|0)>=(0);
  if (!($87)) {
   break;
  }
  $88 = $19;
  $89 = $14;
  $90 = (($89) + ($88<<2)|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = $18;
  $93 = ($91|0)==($92|0);
  if ($93) {
   break;
  }
  $94 = $19;
  $95 = $14;
  $96 = (($95) + ($94<<2)|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = $18;
  $99 = ($97|0)<($98|0);
  if ($99) {
   label = 14;
   break;
  }
  $100 = $19;
  $101 = (($100) + -1)|0;
  $19 = $101;
 }
 if ((label|0) == 14) {
  $8 = 0;
  $120 = $8;
  STACKTOP = sp;return ($120|0);
 }
 $102 = $18;
 $103 = $17;
 $104 = $15;
 $105 = (($103) + ($104))|0;
 $106 = $12;
 $107 = (_checkEmphasisChange($102,$105,$106)|0);
 $108 = ($107|0)!=(0);
 if (!($108)) {
  $109 = $10;
  $110 = $15;
  $111 = (($109) + ($110))|0;
  $112 = $17;
  $113 = $12;
  $114 = (_checkEmphasisChange($111,$112,$113)|0);
  $115 = ($114|0)!=(0);
  if (!($115)) {
   $116 = $17;
   $117 = $16;
   HEAP32[$117>>2] = $116;
   $8 = 1;
   $120 = $8;
   STACKTOP = sp;return ($120|0);
  }
 }
 $8 = 0;
 $120 = $8;
 STACKTOP = sp;return ($120|0);
}
function _onlyLettersBehind($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = sp + 8|0;
 $11 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $12 = $9;
 $13 = $12;
 HEAP32[$13>>2] = $3;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $4;
 $16 = $9;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = $18 & 1;
 $23 = ($22|0)!=(0);
 $24 = (0)!=(0);
 $25 = $23 | $24;
 if (!($25)) {
  $5 = 0;
  $71 = $5;
  STACKTOP = sp;return ($71|0);
 }
 $26 = $7;
 $27 = (($26) - 2)|0;
 $10 = $27;
 while(1) {
  $28 = $10;
  $29 = ($28|0)>=(0);
  if (!($29)) {
   label = 10;
   break;
  }
  $30 = $10;
  $31 = $8;
  $32 = ((($31)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + ($30<<1)|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = $6;
  $37 = (_getChar_2($35,$36)|0);
  $38 = ((($37)) + 24|0);
  $39 = $38;
  $40 = $39;
  $41 = HEAP32[$40>>2]|0;
  $42 = (($39) + 4)|0;
  $43 = $42;
  $44 = HEAP32[$43>>2]|0;
  $45 = $11;
  $46 = $45;
  HEAP32[$46>>2] = $41;
  $47 = (($45) + 4)|0;
  $48 = $47;
  HEAP32[$48>>2] = $44;
  $49 = $11;
  $50 = $49;
  $51 = HEAP32[$50>>2]|0;
  $52 = (($49) + 4)|0;
  $53 = $52;
  $54 = HEAP32[$53>>2]|0;
  $55 = $51 & 1;
  $56 = ($55|0)!=(0);
  $57 = (0)!=(0);
  $58 = $56 | $57;
  if (!($58)) {
   break;
  }
  $69 = $10;
  $70 = (($69) + -1)|0;
  $10 = $70;
 }
 if ((label|0) == 10) {
  $5 = 1;
  $71 = $5;
  STACKTOP = sp;return ($71|0);
 }
 $59 = $11;
 $60 = $59;
 $61 = HEAP32[$60>>2]|0;
 $62 = (($59) + 4)|0;
 $63 = $62;
 $64 = HEAP32[$63>>2]|0;
 $65 = $61 & 2;
 $66 = ($65|0)!=(0);
 $67 = (0)!=(0);
 $68 = $66 | $67;
 if ($68) {
  $5 = 1;
  $71 = $5;
  STACKTOP = sp;return ($71|0);
 } else {
  $5 = 0;
  $71 = $5;
  STACKTOP = sp;return ($71|0);
 }
 return (0)|0;
}
function _noCompbrlAhead($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $25 = $9;
 $26 = $13;
 $27 = (($25) + ($26))|0;
 $15 = $27;
 $28 = $15;
 $29 = $11;
 $30 = ((($29)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($28|0)>=($31|0);
 if ($32) {
  $7 = 1;
  $204 = $7;
  STACKTOP = sp;return ($204|0);
 }
 while(1) {
  $33 = $15;
  $34 = $11;
  $35 = ((($34)) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($33|0)<($36|0);
  if ($37) {
   $38 = $15;
   $39 = $11;
   $40 = ((($39)) + 4|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($41) + ($38<<1)|0);
   $43 = HEAP16[$42>>1]|0;
   $44 = $8;
   $45 = (_checkCharAttr($43,1,0,$44)|0);
   $46 = ($45|0)!=(0);
   $205 = $46;
  } else {
   $205 = 0;
  }
  $47 = $15;
  if (!($205)) {
   break;
  }
  $48 = (($47) + 1)|0;
  $15 = $48;
 }
 $49 = $11;
 $50 = ((($49)) + 8|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($47|0)==($51|0);
 do {
  if (!($52)) {
   $53 = $12;
   $54 = ($53|0)==(94);
   if ($54) {
    $55 = $15;
    $56 = $11;
    $57 = ((($56)) + 4|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = (($58) + ($55<<1)|0);
    $60 = HEAP16[$59>>1]|0;
    $61 = $8;
    $62 = (_checkCharAttr($60,6,0,$61)|0);
    $63 = ($62|0)!=(0);
    if (!($63)) {
     break;
    }
    $64 = $15;
    $65 = (($64) - 1)|0;
    $66 = $11;
    $67 = ((($66)) + 4|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (($68) + ($65<<1)|0);
    $70 = HEAP16[$69>>1]|0;
    $71 = $8;
    $72 = (_checkCharAttr($70,1,0,$71)|0);
    $73 = ($72|0)!=(0);
    if (!($73)) {
     break;
    }
   }
   $74 = $15;
   $16 = $74;
   while(1) {
    $75 = $16;
    $76 = $11;
    $77 = ((($76)) + 8|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = ($75|0)<($78|0);
    if (!($79)) {
     break;
    }
    $80 = $16;
    $81 = $11;
    $82 = ((($81)) + 4|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = (($83) + ($80<<1)|0);
    $85 = HEAP16[$84>>1]|0;
    $86 = $8;
    $87 = (_checkCharAttr($85,1,0,$86)|0);
    $88 = ($87|0)!=(0);
    $89 = $88 ^ 1;
    if (!($89)) {
     break;
    }
    $90 = $16;
    $91 = (($90) + 1)|0;
    $16 = $91;
   }
   $92 = $10;
   $93 = $92 & 34;
   $94 = ($93|0)!=(0);
   if ($94) {
    $95 = $14;
    $96 = $15;
    $97 = ($95|0)>=($96|0);
    if ($97) {
     $98 = $14;
     $99 = $16;
     $100 = ($98|0)<($99|0);
     if ($100) {
      $7 = 0;
      $204 = $7;
      STACKTOP = sp;return ($204|0);
     }
    }
   }
   $101 = $15;
   $17 = $101;
   L28: while(1) {
    $102 = $17;
    $103 = $16;
    $104 = ($102|0)<($103|0);
    if (!($104)) {
     label = 43;
     break;
    }
    $105 = $11;
    $106 = ((($105)) + 8|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = $17;
    $109 = (($107) - ($108))|0;
    $18 = $109;
    $19 = 0;
    while(1) {
     $110 = $19;
     $111 = ($110|0)<(2);
     if (!($111)) {
      break;
     }
     $21 = 0;
     $112 = $19;
     switch ($112|0) {
     case 0:  {
      $113 = $18;
      $114 = ($113|0)>=(2);
      if ($114) {
       $115 = $17;
       $116 = $11;
       $117 = ((($116)) + 4|0);
       $118 = HEAP32[$117>>2]|0;
       $119 = (($118) + ($115<<1)|0);
       $120 = $8;
       $121 = (__lou_stringHash($119,1,$120)|0);
       $122 = $8;
       $123 = ((($122)) + 22184|0);
       $124 = (($123) + ($121<<2)|0);
       $125 = HEAP32[$124>>2]|0;
       $21 = $125;
      }
      break;
     }
     case 1:  {
      $126 = $18;
      $127 = ($126|0)>=(1);
      if ($127) {
       $18 = 1;
       $128 = $17;
       $129 = $11;
       $130 = ((($129)) + 4|0);
       $131 = HEAP32[$130>>2]|0;
       $132 = (($131) + ($128<<1)|0);
       $133 = HEAP16[$132>>1]|0;
       $134 = $8;
       $135 = (_getChar_2($133,$134)|0);
       $136 = ((($135)) + 16|0);
       $137 = HEAP32[$136>>2]|0;
       $21 = $137;
      }
      break;
     }
     default: {
     }
     }
     while(1) {
      $138 = $21;
      $139 = ($138|0)!=(0);
      if (!($139)) {
       break;
      }
      $140 = $21;
      $141 = $8;
      $142 = ((($141)) + 31168|0);
      $143 = (($142) + ($140<<3)|0);
      $22 = $143;
      $20 = 0;
      while(1) {
       $144 = $20;
       $145 = $22;
       $146 = ((($145)) + 42|0);
       $147 = HEAP16[$146>>1]|0;
       $148 = $147 << 16 >> 16;
       $149 = ($144|0)<($148|0);
       if (!($149)) {
        break;
       }
       $150 = $20;
       $151 = $18;
       $152 = ($150|0)<($151|0);
       if (!($152)) {
        break;
       }
       $153 = $20;
       $154 = $22;
       $155 = ((($154)) + 46|0);
       $156 = (($155) + ($153<<1)|0);
       $157 = HEAP16[$156>>1]|0;
       $158 = $8;
       $159 = (_getChar_2($157,$158)|0);
       $23 = $159;
       $160 = $17;
       $161 = $20;
       $162 = (($160) + ($161))|0;
       $163 = $11;
       $164 = ((($163)) + 4|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = (($165) + ($162<<1)|0);
       $167 = HEAP16[$166>>1]|0;
       $168 = $8;
       $169 = (_getChar_2($167,$168)|0);
       $24 = $169;
       $170 = $8;
       $171 = $23;
       $172 = (_toLowercase_441($170,$171)|0);
       $173 = $172&65535;
       $174 = $8;
       $175 = $24;
       $176 = (_toLowercase_441($174,$175)|0);
       $177 = $176&65535;
       $178 = ($173|0)!=($177|0);
       if ($178) {
        break;
       }
       $179 = $20;
       $180 = (($179) + 1)|0;
       $20 = $180;
      }
      $181 = $19;
      $182 = ($181|0)==(1);
      if ($182) {
       label = 37;
      } else {
       $183 = $20;
       $184 = $22;
       $185 = ((($184)) + 42|0);
       $186 = HEAP16[$185>>1]|0;
       $187 = $186 << 16 >> 16;
       $188 = ($183|0)==($187|0);
       if ($188) {
        label = 37;
       }
      }
      if ((label|0) == 37) {
       label = 0;
       $189 = $22;
       $190 = ((($189)) + 36|0);
       $191 = HEAP32[$190>>2]|0;
       $192 = ($191|0)==(88);
       if ($192) {
        label = 39;
        break L28;
       }
       $193 = $22;
       $194 = ((($193)) + 36|0);
       $195 = HEAP32[$194>>2]|0;
       $196 = ($195|0)==(89);
       if ($196) {
        label = 39;
        break L28;
       }
      }
      $197 = $22;
      $198 = ((($197)) + 8|0);
      $199 = HEAP32[$198>>2]|0;
      $21 = $199;
     }
     $200 = $19;
     $201 = (($200) + 1)|0;
     $19 = $201;
    }
    $202 = $17;
    $203 = (($202) + 1)|0;
    $17 = $203;
   }
   if ((label|0) == 39) {
    $7 = 0;
    $204 = $7;
    STACKTOP = sp;return ($204|0);
   }
   else if ((label|0) == 43) {
    $7 = 1;
    $204 = $7;
    STACKTOP = sp;return ($204|0);
   }
  }
 } while(0);
 $7 = 1;
 $204 = $7;
 STACKTOP = sp;return ($204|0);
}
function _inSequence($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $13 = $6;
 $14 = (($13) - 1)|0;
 $9 = $14;
 while(1) {
  $15 = $9;
  $16 = ($15|0)>=(0);
  if (!($16)) {
   break;
  }
  $17 = $9;
  $18 = $7;
  $19 = ((($18)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($17<<1)|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $5;
  $24 = (_checkCharAttr($22,16384,0,$23)|0);
  $25 = ($24|0)!=(0);
  $26 = $9;
  if (!($25)) {
   label = 4;
   break;
  }
  $35 = (($26) + -1)|0;
  $9 = $35;
 }
 if ((label|0) == 4) {
  $27 = $7;
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + ($26<<1)|0);
  $31 = HEAP16[$30>>1]|0;
  $32 = $5;
  $33 = (_checkCharAttr($31,8193,0,$32)|0);
  $34 = ($33|0)!=(0);
  if (!($34)) {
   $4 = 0;
   $147 = $4;
   STACKTOP = sp;return ($147|0);
  }
 }
 $36 = $6;
 $37 = $8;
 $38 = ((($37)) + 42|0);
 $39 = HEAP16[$38>>1]|0;
 $40 = $39 << 16 >> 16;
 $41 = (($36) + ($40))|0;
 $9 = $41;
 L10: while(1) {
  $42 = $9;
  $43 = $7;
  $44 = ((($43)) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($42|0)<($45|0);
  if (!($46)) {
   break;
  }
  $47 = $5;
  $48 = ((($47)) + 1248|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($49|0)!=(0);
  L13: do {
   if ($50) {
    $12 = 0;
    $51 = $9;
    $10 = $51;
    $11 = 0;
    L15: while(1) {
     $52 = $10;
     $53 = $7;
     $54 = ((($53)) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($52|0)<=($55|0);
     if (!($56)) {
      break L13;
     }
     $57 = $11;
     $58 = $5;
     $59 = ((($58)) + 1248|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($57|0)<($60|0);
     if (!($61)) {
      break L13;
     }
     $62 = $12;
     $63 = ($62|0)==(1);
     do {
      if ($63) {
       $64 = $11;
       $65 = $5;
       $66 = ((($65)) + 564|0);
       $67 = (($66) + ($64<<1)|0);
       $68 = HEAP16[$67>>1]|0;
       $69 = ($68<<16>>16)!=(0);
       $70 = $10;
       $71 = $7;
       if (!($69)) {
        break L15;
       }
       $72 = ((($71)) + 4|0);
       $73 = HEAP32[$72>>2]|0;
       $74 = (($73) + ($70<<1)|0);
       $75 = HEAP16[$74>>1]|0;
       $76 = $75&65535;
       $77 = $11;
       $78 = $5;
       $79 = ((($78)) + 564|0);
       $80 = (($79) + ($77<<1)|0);
       $81 = HEAP16[$80>>1]|0;
       $82 = $81&65535;
       $83 = ($76|0)==($82|0);
       if ($83) {
        $12 = 1;
        break;
       } else {
        $12 = -1;
        $84 = $9;
        $85 = (($84) - 1)|0;
        $10 = $85;
        break;
       }
      } else {
       $90 = $12;
       $91 = ($90|0)==(0);
       if (!($91)) {
        $114 = $12;
        $115 = ($114|0)==(-1);
        if (!($115)) {
         break;
        }
        $116 = $11;
        $117 = $5;
        $118 = ((($117)) + 564|0);
        $119 = (($118) + ($116<<1)|0);
        $120 = HEAP16[$119>>1]|0;
        $121 = ($120<<16>>16)!=(0);
        if ($121) {
         break;
        }
        $12 = 0;
        $122 = $9;
        $123 = (($122) - 1)|0;
        $10 = $123;
        break;
       }
       $92 = $11;
       $93 = $5;
       $94 = ((($93)) + 564|0);
       $95 = (($94) + ($92<<1)|0);
       $96 = HEAP16[$95>>1]|0;
       $97 = ($96<<16>>16)!=(0);
       if ($97) {
        $98 = $10;
        $99 = $7;
        $100 = ((($99)) + 4|0);
        $101 = HEAP32[$100>>2]|0;
        $102 = (($101) + ($98<<1)|0);
        $103 = HEAP16[$102>>1]|0;
        $104 = $103&65535;
        $105 = $11;
        $106 = $5;
        $107 = ((($106)) + 564|0);
        $108 = (($107) + ($105<<1)|0);
        $109 = HEAP16[$108>>1]|0;
        $110 = $109&65535;
        $111 = ($104|0)==($110|0);
        if ($111) {
         $12 = 1;
         break;
        } else {
         $12 = -1;
         $112 = $9;
         $113 = (($112) - 1)|0;
         $10 = $113;
         break;
        }
       }
      }
     } while(0);
     $124 = $10;
     $125 = (($124) + 1)|0;
     $10 = $125;
     $126 = $11;
     $127 = (($126) + 1)|0;
     $11 = $127;
    }
    $86 = ((($71)) + 8|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($70|0)>=($87|0);
    if ($88) {
     label = 19;
     break L10;
    }
    $89 = $10;
    $9 = $89;
   }
  } while(0);
  $128 = $9;
  $129 = $7;
  $130 = ((($129)) + 4|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = (($131) + ($128<<1)|0);
  $133 = HEAP16[$132>>1]|0;
  $134 = $5;
  $135 = (_checkCharAttr($133,32768,0,$134)|0);
  $136 = ($135|0)!=(0);
  $137 = $9;
  if (!($136)) {
   label = 31;
   break;
  }
  $146 = (($137) + 1)|0;
  $9 = $146;
 }
 if ((label|0) == 19) {
  $4 = 1;
  $147 = $4;
  STACKTOP = sp;return ($147|0);
 }
 if ((label|0) == 31) {
  $138 = $7;
  $139 = ((($138)) + 4|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = (($140) + ($137<<1)|0);
  $142 = HEAP16[$141>>1]|0;
  $143 = $5;
  $144 = (_checkCharAttr($142,8193,0,$143)|0);
  $145 = ($144|0)!=(0);
  if (!($145)) {
   $4 = 0;
   $147 = $4;
   STACKTOP = sp;return ($147|0);
  }
 }
 $4 = 1;
 $147 = $4;
 STACKTOP = sp;return ($147|0);
}
function _onlyLettersAhead($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $11 = sp + 8|0;
 $13 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $14 = $11;
 $15 = $14;
 HEAP32[$15>>2] = $4;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = $5;
 $18 = $11;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = $20 & 1;
 $25 = ($24|0)!=(0);
 $26 = (0)!=(0);
 $27 = $25 | $26;
 if (!($27)) {
  $6 = 0;
  $78 = $6;
  STACKTOP = sp;return ($78|0);
 }
 $28 = $8;
 $29 = $10;
 $30 = (($28) + ($29))|0;
 $31 = (($30) + 1)|0;
 $12 = $31;
 while(1) {
  $32 = $12;
  $33 = $9;
  $34 = ((($33)) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($32|0)<($35|0);
  if (!($36)) {
   label = 10;
   break;
  }
  $37 = $12;
  $38 = $9;
  $39 = ((($38)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (($40) + ($37<<1)|0);
  $42 = HEAP16[$41>>1]|0;
  $43 = $7;
  $44 = (_getChar_2($42,$43)|0);
  $45 = ((($44)) + 24|0);
  $46 = $45;
  $47 = $46;
  $48 = HEAP32[$47>>2]|0;
  $49 = (($46) + 4)|0;
  $50 = $49;
  $51 = HEAP32[$50>>2]|0;
  $52 = $13;
  $53 = $52;
  HEAP32[$53>>2] = $48;
  $54 = (($52) + 4)|0;
  $55 = $54;
  HEAP32[$55>>2] = $51;
  $56 = $13;
  $57 = $56;
  $58 = HEAP32[$57>>2]|0;
  $59 = (($56) + 4)|0;
  $60 = $59;
  $61 = HEAP32[$60>>2]|0;
  $62 = $58 & 1;
  $63 = ($62|0)!=(0);
  $64 = (0)!=(0);
  $65 = $63 | $64;
  if (!($65)) {
   break;
  }
  $76 = $12;
  $77 = (($76) + 1)|0;
  $12 = $77;
 }
 if ((label|0) == 10) {
  $6 = 0;
  $78 = $6;
  STACKTOP = sp;return ($78|0);
 }
 $66 = $13;
 $67 = $66;
 $68 = HEAP32[$67>>2]|0;
 $69 = (($66) + 4)|0;
 $70 = $69;
 $71 = HEAP32[$70>>2]|0;
 $72 = $68 & 258;
 $73 = ($72|0)!=(0);
 $74 = (0)!=(0);
 $75 = $73 | $74;
 if ($75) {
  $6 = 1;
  $78 = $6;
  STACKTOP = sp;return ($78|0);
 } else {
  $6 = 0;
  $78 = $6;
  STACKTOP = sp;return ($78|0);
 }
 return (0)|0;
}
function _resolveEmphasisBeginEnd($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = -1;
 $13 = -1;
 $14 = -1;
 $15 = 0;
 $19 = $7;
 $20 = ((($19)) + 20|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21&65535;
 $23 = $8;
 $24 = ((($23)) + 1512|0);
 $25 = (($24) + (($22*36)|0)|0);
 $26 = HEAP32[$25>>2]|0;
 $16 = $26;
 $17 = 0;
 while(1) {
  $27 = $17;
  $28 = $9;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($27|0)<($30|0);
  if (!($31)) {
   break;
  }
  $32 = $17;
  $33 = $11;
  $34 = (($33) + ($32<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 & 1;
  $37 = ($36|0)!=(0);
  $38 = $37 ^ 1;
  $39 = $38&1;
  $18 = $39;
  $40 = $18;
  $41 = ($40|0)!=(0);
  if ($41) {
   $42 = $17;
   $12 = $42;
   $43 = $15;
   $44 = ($43|0)!=(0);
   if ($44) {
    $45 = $17;
    $14 = $45;
    $15 = 0;
   }
  }
  $46 = $18;
  $47 = ($46|0)!=(0);
  if ($47) {
   label = 11;
  } else {
   $48 = $17;
   $49 = $9;
   $50 = ((($49)) + 4|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($51) + ($48<<1)|0);
   $53 = HEAP16[$52>>1]|0;
   $54 = $8;
   $55 = $7;
   $56 = $17;
   $57 = $10;
   $58 = (($57) + ($56<<1)|0);
   $59 = HEAP16[$58>>1]|0;
   $60 = (_isEmphasized($53,$54,$55,$59)|0);
   $61 = ($60|0)!=(0);
   if ($61) {
    $62 = $13;
    $63 = ($62|0)<(0);
    if ($63) {
     $64 = $17;
     $13 = $64;
    }
    $15 = 1;
   } else {
    label = 11;
   }
  }
  do {
   if ((label|0) == 11) {
    label = 0;
    $65 = $18;
    $66 = ($65|0)!=(0);
    if (!($66)) {
     $67 = $17;
     $68 = $9;
     $69 = ((($68)) + 4|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = (($70) + ($67<<1)|0);
     $72 = HEAP16[$71>>1]|0;
     $73 = $8;
     $74 = $7;
     $75 = (_isEmphasizable($72,$73,$74)|0);
     $76 = ($75|0)!=(0);
     $77 = $13;
     $78 = ($77|0)>=(0);
     $or$cond = $76 & $78;
     if ($or$cond) {
      $79 = $7;
      $80 = ((($79)) + 16|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = $13;
      $83 = $6;
      $84 = (($83) + ($82<<3)|0);
      $85 = $84;
      $86 = $85;
      $87 = HEAP32[$86>>2]|0;
      $88 = (($85) + 4)|0;
      $89 = $88;
      $90 = HEAP32[$89>>2]|0;
      $91 = $87 & 65535;
      $92 = $91 | $81;
      $93 = $84;
      $94 = $93;
      $95 = HEAP32[$94>>2]|0;
      $96 = (($93) + 4)|0;
      $97 = $96;
      $98 = HEAP32[$97>>2]|0;
      $99 = $92 & 65535;
      $100 = $95 & -65536;
      $101 = $100 | $99;
      $102 = $84;
      $103 = $102;
      HEAP32[$103>>2] = $101;
      $104 = (($102) + 4)|0;
      $105 = $104;
      HEAP32[$105>>2] = $98;
      $106 = $15;
      $107 = ($106|0)!=(0);
      if ($107) {
       $108 = $16;
       $109 = ($108|0)!=(0);
       if ($109) {
        $110 = $13;
        $111 = $12;
        $112 = ($110|0)<($111|0);
        if ($112) {
         $113 = $7;
         $114 = ((($113)) + 16|0);
         $115 = HEAP32[$114>>2]|0;
         $116 = $14;
         $117 = $6;
         $118 = (($117) + ($116<<3)|0);
         $119 = $118;
         $120 = $119;
         $121 = HEAP32[$120>>2]|0;
         $122 = (($119) + 4)|0;
         $123 = $122;
         $124 = HEAP32[$123>>2]|0;
         $125 = (_bitshift64Lshr(($121|0),($124|0),16)|0);
         $126 = tempRet0;
         $127 = $125 & 65535;
         $128 = $127 | $115;
         $129 = $118;
         $130 = $129;
         $131 = HEAP32[$130>>2]|0;
         $132 = (($129) + 4)|0;
         $133 = $132;
         $134 = HEAP32[$133>>2]|0;
         $135 = $128 & 65535;
         $136 = (_bitshift64Shl(($135|0),0,16)|0);
         $137 = tempRet0;
         $138 = $131 & 65535;
         $139 = $138 | $136;
         $140 = $134 | $137;
         $141 = $118;
         $142 = $141;
         HEAP32[$142>>2] = $139;
         $143 = (($141) + 4)|0;
         $144 = $143;
         HEAP32[$144>>2] = $140;
         $13 = -1;
         $14 = -1;
         $15 = 0;
         $145 = $12;
         $17 = $145;
         break;
        }
       }
       $146 = $7;
       $147 = ((($146)) + 16|0);
       $148 = HEAP32[$147>>2]|0;
       $149 = $17;
       $150 = $6;
       $151 = (($150) + ($149<<3)|0);
       $152 = $151;
       $153 = $152;
       $154 = HEAP32[$153>>2]|0;
       $155 = (($152) + 4)|0;
       $156 = $155;
       $157 = HEAP32[$156>>2]|0;
       $158 = (_bitshift64Lshr(($154|0),($157|0),16)|0);
       $159 = tempRet0;
       $160 = $158 & 65535;
       $161 = $160 | $148;
       $162 = $151;
       $163 = $162;
       $164 = HEAP32[$163>>2]|0;
       $165 = (($162) + 4)|0;
       $166 = $165;
       $167 = HEAP32[$166>>2]|0;
       $168 = $161 & 65535;
       $169 = (_bitshift64Shl(($168|0),0,16)|0);
       $170 = tempRet0;
       $171 = $164 & 65535;
       $172 = $171 | $169;
       $173 = $167 | $170;
       $174 = $151;
       $175 = $174;
       HEAP32[$175>>2] = $172;
       $176 = (($174) + 4)|0;
       $177 = $176;
       HEAP32[$177>>2] = $173;
      } else {
       $178 = $7;
       $179 = ((($178)) + 16|0);
       $180 = HEAP32[$179>>2]|0;
       $181 = $14;
       $182 = $6;
       $183 = (($182) + ($181<<3)|0);
       $184 = $183;
       $185 = $184;
       $186 = HEAP32[$185>>2]|0;
       $187 = (($184) + 4)|0;
       $188 = $187;
       $189 = HEAP32[$188>>2]|0;
       $190 = (_bitshift64Lshr(($186|0),($189|0),16)|0);
       $191 = tempRet0;
       $192 = $190 & 65535;
       $193 = $192 | $180;
       $194 = $183;
       $195 = $194;
       $196 = HEAP32[$195>>2]|0;
       $197 = (($194) + 4)|0;
       $198 = $197;
       $199 = HEAP32[$198>>2]|0;
       $200 = $193 & 65535;
       $201 = (_bitshift64Shl(($200|0),0,16)|0);
       $202 = tempRet0;
       $203 = $196 & 65535;
       $204 = $203 | $201;
       $205 = $199 | $202;
       $206 = $183;
       $207 = $206;
       HEAP32[$207>>2] = $204;
       $208 = (($206) + 4)|0;
       $209 = $208;
       HEAP32[$209>>2] = $205;
      }
      $13 = -1;
      $14 = -1;
      $15 = 0;
     }
    }
   }
  } while(0);
  $210 = $17;
  $211 = (($210) + 1)|0;
  $17 = $211;
 }
 $212 = $13;
 $213 = ($212|0)>=(0);
 if (!($213)) {
  STACKTOP = sp;return;
 }
 $214 = $7;
 $215 = ((($214)) + 16|0);
 $216 = HEAP32[$215>>2]|0;
 $217 = $13;
 $218 = $6;
 $219 = (($218) + ($217<<3)|0);
 $220 = $219;
 $221 = $220;
 $222 = HEAP32[$221>>2]|0;
 $223 = (($220) + 4)|0;
 $224 = $223;
 $225 = HEAP32[$224>>2]|0;
 $226 = $222 & 65535;
 $227 = $226 | $216;
 $228 = $219;
 $229 = $228;
 $230 = HEAP32[$229>>2]|0;
 $231 = (($228) + 4)|0;
 $232 = $231;
 $233 = HEAP32[$232>>2]|0;
 $234 = $227 & 65535;
 $235 = $230 & -65536;
 $236 = $235 | $234;
 $237 = $219;
 $238 = $237;
 HEAP32[$238>>2] = $236;
 $239 = (($237) + 4)|0;
 $240 = $239;
 HEAP32[$240>>2] = $233;
 $241 = $15;
 $242 = ($241|0)!=(0);
 $243 = $7;
 $244 = ((($243)) + 16|0);
 $245 = HEAP32[$244>>2]|0;
 if ($242) {
  $246 = $9;
  $247 = ((($246)) + 8|0);
  $248 = HEAP32[$247>>2]|0;
  $249 = $6;
  $250 = (($249) + ($248<<3)|0);
  $251 = $250;
  $252 = $251;
  $253 = HEAP32[$252>>2]|0;
  $254 = (($251) + 4)|0;
  $255 = $254;
  $256 = HEAP32[$255>>2]|0;
  $257 = (_bitshift64Lshr(($253|0),($256|0),16)|0);
  $258 = tempRet0;
  $259 = $257 & 65535;
  $260 = $259 | $245;
  $261 = $250;
  $262 = $261;
  $263 = HEAP32[$262>>2]|0;
  $264 = (($261) + 4)|0;
  $265 = $264;
  $266 = HEAP32[$265>>2]|0;
  $267 = $260 & 65535;
  $268 = (_bitshift64Shl(($267|0),0,16)|0);
  $269 = tempRet0;
  $270 = $263 & 65535;
  $271 = $270 | $268;
  $272 = $266 | $269;
  $273 = $250;
  $274 = $273;
  HEAP32[$274>>2] = $271;
  $275 = (($273) + 4)|0;
  $276 = $275;
  HEAP32[$276>>2] = $272;
  STACKTOP = sp;return;
 } else {
  $277 = $14;
  $278 = $6;
  $279 = (($278) + ($277<<3)|0);
  $280 = $279;
  $281 = $280;
  $282 = HEAP32[$281>>2]|0;
  $283 = (($280) + 4)|0;
  $284 = $283;
  $285 = HEAP32[$284>>2]|0;
  $286 = (_bitshift64Lshr(($282|0),($285|0),16)|0);
  $287 = tempRet0;
  $288 = $286 & 65535;
  $289 = $288 | $245;
  $290 = $279;
  $291 = $290;
  $292 = HEAP32[$291>>2]|0;
  $293 = (($290) + 4)|0;
  $294 = $293;
  $295 = HEAP32[$294>>2]|0;
  $296 = $289 & 65535;
  $297 = (_bitshift64Shl(($296|0),0,16)|0);
  $298 = tempRet0;
  $299 = $292 & 65535;
  $300 = $299 | $297;
  $301 = $295 | $298;
  $302 = $279;
  $303 = $302;
  HEAP32[$303>>2] = $300;
  $304 = (($302) + 4)|0;
  $305 = $304;
  HEAP32[$305>>2] = $301;
  STACKTOP = sp;return;
 }
}
function _resolveEmphasisWords($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0;
 var $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 $11 = 0;
 $12 = -1;
 $13 = 0;
 $14 = -1;
 $24 = $6;
 $25 = ((($24)) + 20|0);
 $26 = HEAP16[$25>>1]|0;
 $27 = $26&65535;
 $28 = $7;
 $29 = ((($28)) + 1512|0);
 $30 = (($29) + (($27*36)|0)|0);
 $15 = $30;
 $31 = $15;
 $32 = ((($31)) + 20|0);
 $33 = HEAP32[$32>>2]|0;
 $16 = $33;
 $34 = $15;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)!=(0);
 if ($36) {
  $37 = $15;
  $38 = ((($37)) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)!=(0);
  if ($40) {
   $46 = 1;
  } else {
   $41 = $15;
   $42 = ((($41)) + 16|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($43|0)!=(0);
   $46 = $44;
  }
 } else {
  $46 = 0;
 }
 $45 = $46&1;
 $17 = $45;
 $18 = 0;
 while(1) {
  $47 = $18;
  $48 = $8;
  $49 = ((($48)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($47|0)<($50|0);
  $52 = $11;
  $53 = ($52|0)!=(0);
  if (!($51)) {
   break;
  }
  if (!($53)) {
   $54 = $18;
   $55 = $5;
   $56 = (($55) + ($54<<3)|0);
   $57 = $56;
   $58 = $57;
   $59 = HEAP32[$58>>2]|0;
   $60 = (($57) + 4)|0;
   $61 = $60;
   $62 = HEAP32[$61>>2]|0;
   $63 = $59 & 65535;
   $64 = $6;
   $65 = ((($64)) + 16|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $63 & $66;
   $68 = ($67|0)!=(0);
   if ($68) {
    $11 = 1;
    $69 = $6;
    $70 = ((($69)) + 16|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = $71 ^ -1;
    $73 = $18;
    $74 = $5;
    $75 = (($74) + ($73<<3)|0);
    $76 = $75;
    $77 = $76;
    $78 = HEAP32[$77>>2]|0;
    $79 = (($76) + 4)|0;
    $80 = $79;
    $81 = HEAP32[$80>>2]|0;
    $82 = $78 & 65535;
    $83 = $82 & $72;
    $84 = $75;
    $85 = $84;
    $86 = HEAP32[$85>>2]|0;
    $87 = (($84) + 4)|0;
    $88 = $87;
    $89 = HEAP32[$88>>2]|0;
    $90 = $86 & -65536;
    $91 = $90 | $83;
    $92 = $75;
    $93 = $92;
    HEAP32[$93>>2] = $91;
    $94 = (($92) + 4)|0;
    $95 = $94;
    HEAP32[$95>>2] = $89;
    $96 = $10;
    $97 = ($96|0)!=(0);
    if ($97) {
     $98 = $18;
     $12 = $98;
    }
    $99 = $18;
    $100 = $9;
    $101 = (($100) + ($99<<2)|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = $102 & 1;
    $104 = ($103|0)!=(0);
    if (!($104)) {
     $12 = -1;
    }
   }
  }
  $105 = $11;
  $106 = ($105|0)!=(0);
  do {
   if ($106) {
    $107 = $18;
    $108 = $5;
    $109 = (($108) + ($107<<3)|0);
    $110 = $109;
    $111 = $110;
    $112 = HEAP32[$111>>2]|0;
    $113 = (($110) + 4)|0;
    $114 = $113;
    $115 = HEAP32[$114>>2]|0;
    $116 = (_bitshift64Lshr(($112|0),($115|0),16)|0);
    $117 = tempRet0;
    $118 = $116 & 65535;
    $119 = $6;
    $120 = ((($119)) + 16|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = $118 & $121;
    $123 = ($122|0)!=(0);
    if ($123) {
     $11 = 0;
     $124 = $6;
     $125 = ((($124)) + 16|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $126 ^ -1;
     $128 = $18;
     $129 = $5;
     $130 = (($129) + ($128<<3)|0);
     $131 = $130;
     $132 = $131;
     $133 = HEAP32[$132>>2]|0;
     $134 = (($131) + 4)|0;
     $135 = $134;
     $136 = HEAP32[$135>>2]|0;
     $137 = (_bitshift64Lshr(($133|0),($136|0),16)|0);
     $138 = tempRet0;
     $139 = $137 & 65535;
     $140 = $139 & $127;
     $141 = $130;
     $142 = $141;
     $143 = HEAP32[$142>>2]|0;
     $144 = (($141) + 4)|0;
     $145 = $144;
     $146 = HEAP32[$145>>2]|0;
     $147 = (_bitshift64Shl(($140|0),0,16)|0);
     $148 = tempRet0;
     $149 = $143 & 65535;
     $150 = $149 | $147;
     $151 = $146 | $148;
     $152 = $130;
     $153 = $152;
     HEAP32[$153>>2] = $150;
     $154 = (($152) + 4)|0;
     $155 = $154;
     HEAP32[$155>>2] = $151;
     $156 = $10;
     $157 = ($156|0)!=(0);
     $158 = $12;
     $159 = ($158|0)>=(0);
     $or$cond = $157 & $159;
     if ($or$cond) {
      $160 = $16;
      $161 = ($160|0)!=(0);
      $162 = $13;
      $163 = ($162|0)==(1);
      $or$cond3 = $161 & $163;
      $164 = $6;
      $165 = ((($164)) + 16|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = $12;
      $168 = $5;
      $169 = (($168) + ($167<<3)|0);
      $170 = $169;
      $171 = $170;
      $172 = HEAP32[$171>>2]|0;
      $173 = (($170) + 4)|0;
      $174 = $173;
      $175 = HEAP32[$174>>2]|0;
      if ($or$cond3) {
       $176 = (_bitshift64Lshr(($172|0),($175|0),48)|0);
       $177 = tempRet0;
       $178 = $176 | $166;
       $179 = $169;
       $180 = $179;
       $181 = HEAP32[$180>>2]|0;
       $182 = (($179) + 4)|0;
       $183 = $182;
       $184 = HEAP32[$183>>2]|0;
       $185 = $178 & 65535;
       $186 = (_bitshift64Shl(($185|0),0,48)|0);
       $187 = tempRet0;
       $188 = $184 & 65535;
       $189 = $181 | $186;
       $190 = $188 | $187;
       $191 = $169;
       $192 = $191;
       HEAP32[$192>>2] = $189;
       $193 = (($191) + 4)|0;
       $194 = $193;
       HEAP32[$194>>2] = $190;
       break;
      }
      $195 = $175 & 65535;
      $196 = $195 | $166;
      $197 = $169;
      $198 = $197;
      $199 = HEAP32[$198>>2]|0;
      $200 = (($197) + 4)|0;
      $201 = $200;
      $202 = HEAP32[$201>>2]|0;
      $203 = $196 & 65535;
      $204 = $202 & -65536;
      $205 = $204 | $203;
      $206 = $169;
      $207 = $206;
      HEAP32[$207>>2] = $199;
      $208 = (($206) + 4)|0;
      $209 = $208;
      HEAP32[$209>>2] = $205;
      $210 = $18;
      $211 = $9;
      $212 = (($211) + ($210<<2)|0);
      $213 = HEAP32[$212>>2]|0;
      $214 = $213 & 1;
      $215 = ($214|0)!=(0);
      if ($215) {
       $216 = $6;
       $217 = ((($216)) + 16|0);
       $218 = HEAP32[$217>>2]|0;
       $219 = $18;
       $220 = $5;
       $221 = (($220) + ($219<<3)|0);
       $222 = $221;
       $223 = $222;
       $224 = HEAP32[$223>>2]|0;
       $225 = (($222) + 4)|0;
       $226 = $225;
       $227 = HEAP32[$226>>2]|0;
       $228 = (_bitshift64Lshr(($224|0),($227|0),16)|0);
       $229 = tempRet0;
       $230 = $228 & 65535;
       $231 = $230 | $218;
       $232 = $221;
       $233 = $232;
       $234 = HEAP32[$233>>2]|0;
       $235 = (($232) + 4)|0;
       $236 = $235;
       $237 = HEAP32[$236>>2]|0;
       $238 = $231 & 65535;
       $239 = (_bitshift64Shl(($238|0),0,16)|0);
       $240 = tempRet0;
       $241 = $234 & 65535;
       $242 = $241 | $239;
       $243 = $237 | $240;
       $244 = $221;
       $245 = $244;
       HEAP32[$245>>2] = $242;
       $246 = (($244) + 4)|0;
       $247 = $246;
       HEAP32[$247>>2] = $243;
       $248 = $6;
       $249 = ((($248)) + 16|0);
       $250 = HEAP32[$249>>2]|0;
       $251 = $18;
       $252 = $5;
       $253 = (($252) + ($251<<3)|0);
       $254 = $253;
       $255 = $254;
       $256 = HEAP32[$255>>2]|0;
       $257 = (($254) + 4)|0;
       $258 = $257;
       $259 = HEAP32[$258>>2]|0;
       $260 = $259 & 65535;
       $261 = $260 | $250;
       $262 = $253;
       $263 = $262;
       $264 = HEAP32[$263>>2]|0;
       $265 = (($262) + 4)|0;
       $266 = $265;
       $267 = HEAP32[$266>>2]|0;
       $268 = $261 & 65535;
       $269 = $267 & -65536;
       $270 = $269 | $268;
       $271 = $253;
       $272 = $271;
       HEAP32[$272>>2] = $264;
       $273 = (($271) + 4)|0;
       $274 = $273;
       HEAP32[$274>>2] = $270;
      }
     }
    }
   }
  } while(0);
  $275 = $10;
  $276 = ($275|0)!=(0);
  L25: do {
   if (!($276)) {
    $277 = $18;
    $278 = $9;
    $279 = (($278) + ($277<<2)|0);
    $280 = HEAP32[$279>>2]|0;
    $281 = $280 & 1;
    $282 = ($281|0)!=(0);
    if ($282) {
     $283 = $18;
     $284 = $8;
     $285 = ((($284)) + 4|0);
     $286 = HEAP32[$285>>2]|0;
     $287 = (($286) + ($283<<1)|0);
     $288 = HEAP16[$287>>1]|0;
     $289 = $7;
     $290 = $6;
     $291 = (_isEmphasizable($288,$289,$290)|0);
     $292 = ($291|0)!=(0);
     if ($292) {
      $10 = 1;
      $293 = $11;
      $294 = ($293|0)!=(0);
      if ($294) {
       $295 = $18;
       $12 = $295;
      }
      $296 = $14;
      $297 = (($296) + 1)|0;
      $19 = $297;
      while(1) {
       $298 = $19;
       $299 = $18;
       $300 = ($298|0)<($299|0);
       if (!($300)) {
        break;
       }
       $301 = $19;
       $302 = $9;
       $303 = (($302) + ($301<<2)|0);
       $304 = HEAP32[$303>>2]|0;
       $305 = $304 & -2;
       HEAP32[$303>>2] = $305;
       $306 = $19;
       $307 = (($306) + 1)|0;
       $19 = $307;
      }
      $308 = $14;
      $309 = ($308|0)>=(0);
      if ($309) {
       $310 = $14;
       $311 = $5;
       $312 = (($311) + ($310<<3)|0);
       $313 = $312;
       $314 = $313;
       $315 = HEAP32[$314>>2]|0;
       $316 = (($313) + 4)|0;
       $317 = $316;
       $318 = HEAP32[$317>>2]|0;
       $319 = (_bitshift64Lshr(($315|0),($318|0),48)|0);
       $320 = tempRet0;
       $321 = $6;
       $322 = ((($321)) + 16|0);
       $323 = HEAP32[$322>>2]|0;
       $324 = $319 & $323;
       $325 = ($324|0)!=(0);
       if (!($325)) {
        $326 = $14;
        $327 = $5;
        $328 = (($327) + ($326<<3)|0);
        $329 = $328;
        $330 = $329;
        $331 = HEAP32[$330>>2]|0;
        $332 = (($329) + 4)|0;
        $333 = $332;
        $334 = HEAP32[$333>>2]|0;
        $335 = $334 & 65535;
        $336 = $6;
        $337 = ((($336)) + 16|0);
        $338 = HEAP32[$337>>2]|0;
        $339 = $335 & $338;
        $340 = ($339|0)!=(0);
        if ($340) {
         $341 = $14;
         $342 = $5;
         $343 = (($342) + ($341<<3)|0);
         $344 = $343;
         $345 = $344;
         $346 = HEAP32[$345>>2]|0;
         $347 = (($344) + 4)|0;
         $348 = $347;
         $349 = HEAP32[$348>>2]|0;
         $350 = (_bitshift64Lshr(($346|0),($349|0),16)|0);
         $351 = tempRet0;
         $352 = $350 & 65535;
         $353 = $6;
         $354 = ((($353)) + 16|0);
         $355 = HEAP32[$354>>2]|0;
         $356 = $352 & $355;
         $357 = ($356|0)!=(0);
         if (!($357)) {
          $358 = $6;
          $359 = ((($358)) + 16|0);
          $360 = HEAP32[$359>>2]|0;
          $361 = $14;
          $362 = $5;
          $363 = (($362) + ($361<<3)|0);
          $364 = $363;
          $365 = $364;
          $366 = HEAP32[$365>>2]|0;
          $367 = (($364) + 4)|0;
          $368 = $367;
          $369 = HEAP32[$368>>2]|0;
          $370 = (_bitshift64Lshr(($366|0),($369|0),48)|0);
          $371 = tempRet0;
          $372 = $370 | $360;
          $373 = $363;
          $374 = $373;
          $375 = HEAP32[$374>>2]|0;
          $376 = (($373) + 4)|0;
          $377 = $376;
          $378 = HEAP32[$377>>2]|0;
          $379 = $372 & 65535;
          $380 = (_bitshift64Shl(($379|0),0,48)|0);
          $381 = tempRet0;
          $382 = $378 & 65535;
          $383 = $375 | $380;
          $384 = $382 | $381;
          $385 = $363;
          $386 = $385;
          HEAP32[$386>>2] = $383;
          $387 = (($385) + 4)|0;
          $388 = $387;
          HEAP32[$388>>2] = $384;
         }
        }
        $389 = $14;
        $20 = $389;
        while(1) {
         $390 = $20;
         $391 = $18;
         $392 = (($391) - 1)|0;
         $393 = ($390|0)<($392|0);
         if (!($393)) {
          break L25;
         }
         $394 = $20;
         $395 = (($394) + 1)|0;
         $396 = $5;
         $397 = (($396) + ($395<<3)|0);
         $398 = $397;
         $399 = $398;
         $400 = HEAP32[$399>>2]|0;
         $401 = (($398) + 4)|0;
         $402 = $401;
         $403 = HEAP32[$402>>2]|0;
         $404 = (_bitshift64Lshr(($400|0),($403|0),16)|0);
         $405 = tempRet0;
         $406 = $404 & 65535;
         $407 = $6;
         $408 = ((($407)) + 16|0);
         $409 = HEAP32[$408>>2]|0;
         $410 = $406 & $409;
         $411 = ($410|0)!=(0);
         if ($411) {
          break;
         }
         $473 = $20;
         $474 = (($473) + 1)|0;
         $20 = $474;
        }
        $412 = $6;
        $413 = ((($412)) + 16|0);
        $414 = HEAP32[$413>>2]|0;
        $415 = $414 ^ -1;
        $416 = $20;
        $417 = (($416) + 1)|0;
        $418 = $5;
        $419 = (($418) + ($417<<3)|0);
        $420 = $419;
        $421 = $420;
        $422 = HEAP32[$421>>2]|0;
        $423 = (($420) + 4)|0;
        $424 = $423;
        $425 = HEAP32[$424>>2]|0;
        $426 = (_bitshift64Lshr(($422|0),($425|0),16)|0);
        $427 = tempRet0;
        $428 = $426 & 65535;
        $429 = $428 & $415;
        $430 = $419;
        $431 = $430;
        $432 = HEAP32[$431>>2]|0;
        $433 = (($430) + 4)|0;
        $434 = $433;
        $435 = HEAP32[$434>>2]|0;
        $436 = (_bitshift64Shl(($429|0),0,16)|0);
        $437 = tempRet0;
        $438 = $432 & 65535;
        $439 = $438 | $436;
        $440 = $435 | $437;
        $441 = $419;
        $442 = $441;
        HEAP32[$442>>2] = $439;
        $443 = (($441) + 4)|0;
        $444 = $443;
        HEAP32[$444>>2] = $440;
        $445 = $6;
        $446 = ((($445)) + 16|0);
        $447 = HEAP32[$446>>2]|0;
        $448 = $447 ^ -1;
        $449 = $20;
        $450 = (($449) + 1)|0;
        $451 = $5;
        $452 = (($451) + ($450<<3)|0);
        $453 = $452;
        $454 = $453;
        $455 = HEAP32[$454>>2]|0;
        $456 = (($453) + 4)|0;
        $457 = $456;
        $458 = HEAP32[$457>>2]|0;
        $459 = $458 & 65535;
        $460 = $459 & $448;
        $461 = $452;
        $462 = $461;
        $463 = HEAP32[$462>>2]|0;
        $464 = (($461) + 4)|0;
        $465 = $464;
        $466 = HEAP32[$465>>2]|0;
        $467 = $466 & -65536;
        $468 = $467 | $460;
        $469 = $452;
        $470 = $469;
        HEAP32[$470>>2] = $463;
        $471 = (($469) + 4)|0;
        $472 = $471;
        HEAP32[$472>>2] = $468;
       }
      }
     }
    }
   }
  } while(0);
  $475 = $10;
  $476 = ($475|0)!=(0);
  if ($476) {
   $477 = $18;
   $478 = $9;
   $479 = (($478) + ($477<<2)|0);
   $480 = HEAP32[$479>>2]|0;
   $481 = $480 & 1;
   $482 = ($481|0)!=(0);
   if (!($482)) {
    $483 = $11;
    $484 = ($483|0)!=(0);
    $485 = $12;
    $486 = ($485|0)>=(0);
    $or$cond5 = $484 & $486;
    do {
     if ($or$cond5) {
      $487 = $16;
      $488 = ($487|0)!=(0);
      $489 = $13;
      $490 = ($489|0)==(1);
      $or$cond7 = $488 & $490;
      $491 = $6;
      $492 = ((($491)) + 16|0);
      $493 = HEAP32[$492>>2]|0;
      $494 = $12;
      $495 = $5;
      $496 = (($495) + ($494<<3)|0);
      $497 = $496;
      $498 = $497;
      $499 = HEAP32[$498>>2]|0;
      $500 = (($497) + 4)|0;
      $501 = $500;
      $502 = HEAP32[$501>>2]|0;
      if ($or$cond7) {
       $503 = (_bitshift64Lshr(($499|0),($502|0),48)|0);
       $504 = tempRet0;
       $505 = $503 | $493;
       $506 = $496;
       $507 = $506;
       $508 = HEAP32[$507>>2]|0;
       $509 = (($506) + 4)|0;
       $510 = $509;
       $511 = HEAP32[$510>>2]|0;
       $512 = $505 & 65535;
       $513 = (_bitshift64Shl(($512|0),0,48)|0);
       $514 = tempRet0;
       $515 = $511 & 65535;
       $516 = $508 | $513;
       $517 = $515 | $514;
       $518 = $496;
       $519 = $518;
       HEAP32[$519>>2] = $516;
       $520 = (($518) + 4)|0;
       $521 = $520;
       HEAP32[$521>>2] = $517;
       break;
      } else {
       $522 = $502 & 65535;
       $523 = $522 | $493;
       $524 = $496;
       $525 = $524;
       $526 = HEAP32[$525>>2]|0;
       $527 = (($524) + 4)|0;
       $528 = $527;
       $529 = HEAP32[$528>>2]|0;
       $530 = $523 & 65535;
       $531 = $529 & -65536;
       $532 = $531 | $530;
       $533 = $496;
       $534 = $533;
       HEAP32[$534>>2] = $526;
       $535 = (($533) + 4)|0;
       $536 = $535;
       HEAP32[$536>>2] = $532;
       break;
      }
     }
    } while(0);
    $10 = 0;
    $12 = -1;
   }
  }
  $537 = $18;
  $538 = $12;
  $539 = ($537|0)==($538|0);
  do {
   if ($539) {
    $540 = $18;
    $14 = $540;
    $13 = 1;
   } else {
    $541 = $10;
    $542 = ($541|0)!=(0);
    if ($542) {
     $543 = $17;
     $544 = ($543|0)!=(0);
     if (!($544)) {
      $545 = $18;
      $546 = $8;
      $547 = ((($546)) + 4|0);
      $548 = HEAP32[$547>>2]|0;
      $549 = (($548) + ($545<<1)|0);
      $550 = HEAP16[$549>>1]|0;
      $551 = $7;
      $552 = $6;
      $553 = (_isEmphasizable($550,$551,$552)|0);
      $554 = ($553|0)!=(0);
      if (!($554)) {
       break;
      }
     }
     $555 = $18;
     $14 = $555;
     $556 = $11;
     $557 = ($556|0)!=(0);
     if ($557) {
      $558 = $13;
      $559 = (($558) + 1)|0;
      $13 = $559;
     }
    }
   }
  } while(0);
  $560 = $18;
  $561 = (($560) + 1)|0;
  $18 = $561;
 }
 do {
  if ($53) {
   $562 = $6;
   $563 = ((($562)) + 16|0);
   $564 = HEAP32[$563>>2]|0;
   $565 = $564 ^ -1;
   $566 = $8;
   $567 = ((($566)) + 8|0);
   $568 = HEAP32[$567>>2]|0;
   $569 = $5;
   $570 = (($569) + ($568<<3)|0);
   $571 = $570;
   $572 = $571;
   $573 = HEAP32[$572>>2]|0;
   $574 = (($571) + 4)|0;
   $575 = $574;
   $576 = HEAP32[$575>>2]|0;
   $577 = (_bitshift64Lshr(($573|0),($576|0),16)|0);
   $578 = tempRet0;
   $579 = $577 & 65535;
   $580 = $579 & $565;
   $581 = $570;
   $582 = $581;
   $583 = HEAP32[$582>>2]|0;
   $584 = (($581) + 4)|0;
   $585 = $584;
   $586 = HEAP32[$585>>2]|0;
   $587 = (_bitshift64Shl(($580|0),0,16)|0);
   $588 = tempRet0;
   $589 = $583 & 65535;
   $590 = $589 | $587;
   $591 = $586 | $588;
   $592 = $570;
   $593 = $592;
   HEAP32[$593>>2] = $590;
   $594 = (($592) + 4)|0;
   $595 = $594;
   HEAP32[$595>>2] = $591;
   $596 = $10;
   $597 = ($596|0)!=(0);
   $598 = $12;
   $599 = ($598|0)>=(0);
   $or$cond11 = $597 & $599;
   if ($or$cond11) {
    $600 = $16;
    $601 = ($600|0)!=(0);
    $602 = $13;
    $603 = ($602|0)==(1);
    $or$cond9 = $601 & $603;
    $604 = $6;
    $605 = ((($604)) + 16|0);
    $606 = HEAP32[$605>>2]|0;
    $607 = $12;
    $608 = $5;
    $609 = (($608) + ($607<<3)|0);
    $610 = $609;
    $611 = $610;
    $612 = HEAP32[$611>>2]|0;
    $613 = (($610) + 4)|0;
    $614 = $613;
    $615 = HEAP32[$614>>2]|0;
    if ($or$cond9) {
     $616 = (_bitshift64Lshr(($612|0),($615|0),48)|0);
     $617 = tempRet0;
     $618 = $616 | $606;
     $619 = $609;
     $620 = $619;
     $621 = HEAP32[$620>>2]|0;
     $622 = (($619) + 4)|0;
     $623 = $622;
     $624 = HEAP32[$623>>2]|0;
     $625 = $618 & 65535;
     $626 = (_bitshift64Shl(($625|0),0,48)|0);
     $627 = tempRet0;
     $628 = $624 & 65535;
     $629 = $621 | $626;
     $630 = $628 | $627;
     $631 = $609;
     $632 = $631;
     HEAP32[$632>>2] = $629;
     $633 = (($631) + 4)|0;
     $634 = $633;
     HEAP32[$634>>2] = $630;
     break;
    } else {
     $635 = $615 & 65535;
     $636 = $635 | $606;
     $637 = $609;
     $638 = $637;
     $639 = HEAP32[$638>>2]|0;
     $640 = (($637) + 4)|0;
     $641 = $640;
     $642 = HEAP32[$641>>2]|0;
     $643 = $636 & 65535;
     $644 = $642 & -65536;
     $645 = $644 | $643;
     $646 = $609;
     $647 = $646;
     HEAP32[$647>>2] = $639;
     $648 = (($646) + 4)|0;
     $649 = $648;
     HEAP32[$649>>2] = $645;
     break;
    }
   }
  }
 } while(0);
 $650 = $14;
 $651 = (($650) + 1)|0;
 $21 = $651;
 while(1) {
  $652 = $21;
  $653 = $8;
  $654 = ((($653)) + 8|0);
  $655 = HEAP32[$654>>2]|0;
  $656 = ($652|0)<($655|0);
  if (!($656)) {
   break;
  }
  $657 = $21;
  $658 = $9;
  $659 = (($658) + ($657<<2)|0);
  $660 = HEAP32[$659>>2]|0;
  $661 = $660 & -2;
  HEAP32[$659>>2] = $661;
  $662 = $21;
  $663 = (($662) + 1)|0;
  $21 = $663;
 }
 $664 = $14;
 $665 = ($664|0)>=(0);
 L79: do {
  if ($665) {
   $666 = $14;
   $667 = $5;
   $668 = (($667) + ($666<<3)|0);
   $669 = $668;
   $670 = $669;
   $671 = HEAP32[$670>>2]|0;
   $672 = (($669) + 4)|0;
   $673 = $672;
   $674 = HEAP32[$673>>2]|0;
   $675 = (_bitshift64Lshr(($671|0),($674|0),48)|0);
   $676 = tempRet0;
   $677 = $6;
   $678 = ((($677)) + 16|0);
   $679 = HEAP32[$678>>2]|0;
   $680 = $675 & $679;
   $681 = ($680|0)!=(0);
   if (!($681)) {
    $682 = $14;
    $683 = $5;
    $684 = (($683) + ($682<<3)|0);
    $685 = $684;
    $686 = $685;
    $687 = HEAP32[$686>>2]|0;
    $688 = (($685) + 4)|0;
    $689 = $688;
    $690 = HEAP32[$689>>2]|0;
    $691 = $690 & 65535;
    $692 = $6;
    $693 = ((($692)) + 16|0);
    $694 = HEAP32[$693>>2]|0;
    $695 = $691 & $694;
    $696 = ($695|0)!=(0);
    if ($696) {
     $697 = $14;
     $698 = $5;
     $699 = (($698) + ($697<<3)|0);
     $700 = $699;
     $701 = $700;
     $702 = HEAP32[$701>>2]|0;
     $703 = (($700) + 4)|0;
     $704 = $703;
     $705 = HEAP32[$704>>2]|0;
     $706 = (_bitshift64Lshr(($702|0),($705|0),16)|0);
     $707 = tempRet0;
     $708 = $706 & 65535;
     $709 = $6;
     $710 = ((($709)) + 16|0);
     $711 = HEAP32[$710>>2]|0;
     $712 = $708 & $711;
     $713 = ($712|0)!=(0);
     if (!($713)) {
      $714 = $6;
      $715 = ((($714)) + 16|0);
      $716 = HEAP32[$715>>2]|0;
      $717 = $14;
      $718 = $5;
      $719 = (($718) + ($717<<3)|0);
      $720 = $719;
      $721 = $720;
      $722 = HEAP32[$721>>2]|0;
      $723 = (($720) + 4)|0;
      $724 = $723;
      $725 = HEAP32[$724>>2]|0;
      $726 = (_bitshift64Lshr(($722|0),($725|0),48)|0);
      $727 = tempRet0;
      $728 = $726 | $716;
      $729 = $719;
      $730 = $729;
      $731 = HEAP32[$730>>2]|0;
      $732 = (($729) + 4)|0;
      $733 = $732;
      $734 = HEAP32[$733>>2]|0;
      $735 = $728 & 65535;
      $736 = (_bitshift64Shl(($735|0),0,48)|0);
      $737 = tempRet0;
      $738 = $734 & 65535;
      $739 = $731 | $736;
      $740 = $738 | $737;
      $741 = $719;
      $742 = $741;
      HEAP32[$742>>2] = $739;
      $743 = (($741) + 4)|0;
      $744 = $743;
      HEAP32[$744>>2] = $740;
     }
    }
    $745 = $14;
    $22 = $745;
    while(1) {
     $746 = $22;
     $747 = $8;
     $748 = ((($747)) + 8|0);
     $749 = HEAP32[$748>>2]|0;
     $750 = (($749) - 1)|0;
     $751 = ($746|0)<($750|0);
     if (!($751)) {
      break L79;
     }
     $752 = $22;
     $753 = (($752) + 1)|0;
     $754 = $5;
     $755 = (($754) + ($753<<3)|0);
     $756 = $755;
     $757 = $756;
     $758 = HEAP32[$757>>2]|0;
     $759 = (($756) + 4)|0;
     $760 = $759;
     $761 = HEAP32[$760>>2]|0;
     $762 = (_bitshift64Lshr(($758|0),($761|0),16)|0);
     $763 = tempRet0;
     $764 = $762 & 65535;
     $765 = $6;
     $766 = ((($765)) + 16|0);
     $767 = HEAP32[$766>>2]|0;
     $768 = $764 & $767;
     $769 = ($768|0)!=(0);
     if ($769) {
      break;
     }
     $831 = $22;
     $832 = (($831) + 1)|0;
     $22 = $832;
    }
    $770 = $6;
    $771 = ((($770)) + 16|0);
    $772 = HEAP32[$771>>2]|0;
    $773 = $772 ^ -1;
    $774 = $22;
    $775 = (($774) + 1)|0;
    $776 = $5;
    $777 = (($776) + ($775<<3)|0);
    $778 = $777;
    $779 = $778;
    $780 = HEAP32[$779>>2]|0;
    $781 = (($778) + 4)|0;
    $782 = $781;
    $783 = HEAP32[$782>>2]|0;
    $784 = (_bitshift64Lshr(($780|0),($783|0),16)|0);
    $785 = tempRet0;
    $786 = $784 & 65535;
    $787 = $786 & $773;
    $788 = $777;
    $789 = $788;
    $790 = HEAP32[$789>>2]|0;
    $791 = (($788) + 4)|0;
    $792 = $791;
    $793 = HEAP32[$792>>2]|0;
    $794 = (_bitshift64Shl(($787|0),0,16)|0);
    $795 = tempRet0;
    $796 = $790 & 65535;
    $797 = $796 | $794;
    $798 = $793 | $795;
    $799 = $777;
    $800 = $799;
    HEAP32[$800>>2] = $797;
    $801 = (($799) + 4)|0;
    $802 = $801;
    HEAP32[$802>>2] = $798;
    $803 = $6;
    $804 = ((($803)) + 16|0);
    $805 = HEAP32[$804>>2]|0;
    $806 = $805 ^ -1;
    $807 = $22;
    $808 = (($807) + 1)|0;
    $809 = $5;
    $810 = (($809) + ($808<<3)|0);
    $811 = $810;
    $812 = $811;
    $813 = HEAP32[$812>>2]|0;
    $814 = (($811) + 4)|0;
    $815 = $814;
    $816 = HEAP32[$815>>2]|0;
    $817 = $816 & 65535;
    $818 = $817 & $806;
    $819 = $810;
    $820 = $819;
    $821 = HEAP32[$820>>2]|0;
    $822 = (($819) + 4)|0;
    $823 = $822;
    $824 = HEAP32[$823>>2]|0;
    $825 = $824 & -65536;
    $826 = $825 | $818;
    $827 = $810;
    $828 = $827;
    HEAP32[$828>>2] = $821;
    $829 = (($827) + 4)|0;
    $830 = $829;
    HEAP32[$830>>2] = $826;
   }
  }
 } while(0);
 $12 = -1;
 $23 = 0;
 while(1) {
  $833 = $23;
  $834 = $8;
  $835 = ((($834)) + 8|0);
  $836 = HEAP32[$835>>2]|0;
  $837 = ($833|0)<($836|0);
  if (!($837)) {
   break;
  }
  $838 = $23;
  $839 = $5;
  $840 = (($839) + ($838<<3)|0);
  $841 = $840;
  $842 = $841;
  $843 = HEAP32[$842>>2]|0;
  $844 = (($841) + 4)|0;
  $845 = $844;
  $846 = HEAP32[$845>>2]|0;
  $847 = (_bitshift64Lshr(($843|0),($846|0),48)|0);
  $848 = tempRet0;
  $849 = $6;
  $850 = ((($849)) + 16|0);
  $851 = HEAP32[$850>>2]|0;
  $852 = $847 & $851;
  $853 = ($852|0)!=(0);
  $854 = $23;
  do {
   if ($853) {
    $855 = ($854|0)==(0);
    if (!($855)) {
     $856 = $23;
     $857 = (($856) - 1)|0;
     $858 = $9;
     $859 = (($858) + ($857<<2)|0);
     $860 = HEAP32[$859>>2]|0;
     $861 = $860 & 1;
     $862 = ($861|0)!=(0);
     if ($862) {
      break;
     }
    }
    $863 = $23;
    $864 = (($863) + 1)|0;
    $865 = $8;
    $866 = ((($865)) + 8|0);
    $867 = HEAP32[$866>>2]|0;
    $868 = ($864|0)==($867|0);
    if (!($868)) {
     $869 = $23;
     $870 = (($869) + 1)|0;
     $871 = $9;
     $872 = (($871) + ($870<<2)|0);
     $873 = HEAP32[$872>>2]|0;
     $874 = $873 & 1;
     $875 = ($874|0)!=(0);
     if ($875) {
      break;
     }
    }
    $876 = $23;
    $877 = $9;
    $878 = (($877) + ($876<<2)|0);
    $879 = HEAP32[$878>>2]|0;
    $880 = $879 | 4;
    HEAP32[$878>>2] = $880;
   } else {
    $881 = $5;
    $882 = (($881) + ($854<<3)|0);
    $883 = $882;
    $884 = $883;
    $885 = HEAP32[$884>>2]|0;
    $886 = (($883) + 4)|0;
    $887 = $886;
    $888 = HEAP32[$887>>2]|0;
    $889 = $888 & 65535;
    $890 = $6;
    $891 = ((($890)) + 16|0);
    $892 = HEAP32[$891>>2]|0;
    $893 = $889 & $892;
    $894 = ($893|0)!=(0);
    if ($894) {
     $895 = $23;
     $896 = $5;
     $897 = (($896) + ($895<<3)|0);
     $898 = $897;
     $899 = $898;
     $900 = HEAP32[$899>>2]|0;
     $901 = (($898) + 4)|0;
     $902 = $901;
     $903 = HEAP32[$902>>2]|0;
     $904 = (_bitshift64Lshr(($900|0),($903|0),16)|0);
     $905 = tempRet0;
     $906 = $904 & 65535;
     $907 = $6;
     $908 = ((($907)) + 16|0);
     $909 = HEAP32[$908>>2]|0;
     $910 = $906 & $909;
     $911 = ($910|0)!=(0);
     if ($911) {
      $912 = $12;
      $913 = ($912|0)>=(0);
      if ($913) {
       $914 = $23;
       $915 = $9;
       $916 = (($915) + ($914<<2)|0);
       $917 = HEAP32[$916>>2]|0;
       $918 = $917 & 1;
       $919 = ($918|0)!=(0);
       if ($919) {
        $920 = $12;
        $921 = $9;
        $922 = (($921) + ($920<<2)|0);
        $923 = HEAP32[$922>>2]|0;
        $924 = $923 & -5;
        HEAP32[$922>>2] = $924;
       }
      }
      $12 = -1;
      break;
     } else {
      $925 = $23;
      $926 = ($925|0)==(0);
      if ($926) {
       label = 86;
      } else {
       $927 = $23;
       $928 = (($927) - 1)|0;
       $929 = $9;
       $930 = (($929) + ($928<<2)|0);
       $931 = HEAP32[$930>>2]|0;
       $932 = $931 & 1;
       $933 = ($932|0)!=(0);
       if (!($933)) {
        label = 86;
       }
      }
      if ((label|0) == 86) {
       label = 0;
       $934 = $23;
       $935 = $9;
       $936 = (($935) + ($934<<2)|0);
       $937 = HEAP32[$936>>2]|0;
       $938 = $937 | 4;
       HEAP32[$936>>2] = $938;
      }
      $939 = $23;
      $12 = $939;
      break;
     }
    }
   }
  } while(0);
  $940 = $23;
  $941 = (($940) + 1)|0;
  $23 = $941;
 }
 STACKTOP = sp;return;
}
function _resolveEmphasisPassages($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $18 = $6;
 $19 = ((($18)) + 20|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 $22 = $7;
 $23 = ((($22)) + 1512|0);
 $24 = (($23) + (($21*36)|0)|0);
 $10 = $24;
 $11 = 0;
 $12 = -1;
 $13 = -1;
 $14 = -1;
 $15 = 0;
 $16 = 0;
 $17 = 0;
 while(1) {
  $25 = $17;
  $26 = $8;
  $27 = ((($26)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($25|0)<($28|0);
  if (!($29)) {
   break;
  }
  $30 = $15;
  $31 = ($30|0)!=(0);
  do {
   if ($31) {
    label = 14;
   } else {
    $32 = $17;
    $33 = $9;
    $34 = (($33) + ($32<<2)|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 & 1;
    $37 = ($36|0)!=(0);
    if ($37) {
     $15 = 1;
     $38 = $17;
     $39 = $9;
     $40 = (($39) + ($38<<2)|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = $41 & 4;
     $43 = ($42|0)!=(0);
     $44 = $16;
     $45 = ($44|0)!=(0);
     if ($43) {
      if ($45) {
       $47 = $11;
       $48 = (($47) + 1)|0;
       $11 = $48;
      } else {
       $16 = 1;
       $46 = $17;
       $12 = $46;
       $13 = -1;
       $11 = 1;
      }
      $49 = $17;
      $14 = $49;
      break;
     } else {
      if (!($45)) {
       label = 14;
       break;
      }
      $50 = $11;
      $51 = $10;
      $52 = ((($51)) + 32|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = ($50>>>0)>=($53>>>0);
      $55 = $13;
      $56 = ($55|0)>=(0);
      $or$cond = $54 & $56;
      if ($or$cond) {
       $57 = $12;
       $58 = $13;
       $59 = $14;
       $60 = $5;
       $61 = $6;
       $62 = $7;
       $63 = $9;
       _convertToPassage($57,$58,$59,$60,$61,$62,$63);
      }
      $16 = 0;
      label = 14;
      break;
     }
    } else {
     label = 14;
    }
   }
  } while(0);
  if ((label|0) == 14) {
   label = 0;
   $64 = $15;
   $65 = ($64|0)!=(0);
   if ($65) {
    $66 = $17;
    $67 = $9;
    $68 = (($67) + ($66<<2)|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $69 & 1;
    $71 = ($70|0)!=(0);
    if (!($71)) {
     $15 = 0;
     $72 = $16;
     $73 = ($72|0)!=(0);
     if ($73) {
      $74 = $17;
      $13 = $74;
     }
    }
   }
   $75 = $16;
   $76 = ($75|0)!=(0);
   if ($76) {
    $77 = $17;
    $78 = $5;
    $79 = (($78) + ($77<<3)|0);
    $80 = $79;
    $81 = $80;
    $82 = HEAP32[$81>>2]|0;
    $83 = (($80) + 4)|0;
    $84 = $83;
    $85 = HEAP32[$84>>2]|0;
    $86 = $82 & 65535;
    $87 = $17;
    $88 = $5;
    $89 = (($88) + ($87<<3)|0);
    $90 = $89;
    $91 = $90;
    $92 = HEAP32[$91>>2]|0;
    $93 = (($90) + 4)|0;
    $94 = $93;
    $95 = HEAP32[$94>>2]|0;
    $96 = (_bitshift64Lshr(($92|0),($95|0),16)|0);
    $97 = tempRet0;
    $98 = $96 & 65535;
    $99 = $86 | $98;
    $100 = $17;
    $101 = $5;
    $102 = (($101) + ($100<<3)|0);
    $103 = $102;
    $104 = $103;
    $105 = HEAP32[$104>>2]|0;
    $106 = (($103) + 4)|0;
    $107 = $106;
    $108 = HEAP32[$107>>2]|0;
    $109 = $108 & 65535;
    $110 = $99 | $109;
    $111 = $17;
    $112 = $5;
    $113 = (($112) + ($111<<3)|0);
    $114 = $113;
    $115 = $114;
    $116 = HEAP32[$115>>2]|0;
    $117 = (($114) + 4)|0;
    $118 = $117;
    $119 = HEAP32[$118>>2]|0;
    $120 = (_bitshift64Lshr(($116|0),($119|0),48)|0);
    $121 = tempRet0;
    $122 = $110 | $120;
    $123 = $6;
    $124 = ((($123)) + 16|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = $122 & $125;
    $127 = ($126|0)!=(0);
    if ($127) {
     $128 = $11;
     $129 = $10;
     $130 = ((($129)) + 32|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($128>>>0)>=($131>>>0);
     $133 = $13;
     $134 = ($133|0)>=(0);
     $or$cond3 = $132 & $134;
     if ($or$cond3) {
      $135 = $12;
      $136 = $13;
      $137 = $14;
      $138 = $5;
      $139 = $6;
      $140 = $7;
      $141 = $9;
      _convertToPassage($135,$136,$137,$138,$139,$140,$141);
     }
     $16 = 0;
    }
   }
  }
  $142 = $17;
  $143 = (($142) + 1)|0;
  $17 = $143;
 }
 $144 = $16;
 $145 = ($144|0)!=(0);
 if (!($145)) {
  STACKTOP = sp;return;
 }
 $146 = $11;
 $147 = $10;
 $148 = ((($147)) + 32|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = ($146>>>0)>=($149>>>0);
 $151 = $13;
 $152 = ($151|0)>=(0);
 $or$cond5 = $150 & $152;
 if (!($or$cond5)) {
  STACKTOP = sp;return;
 }
 $153 = $15;
 $154 = ($153|0)!=(0);
 $155 = $12;
 if ($154) {
  $156 = $17;
  $157 = $14;
  $158 = $5;
  $159 = $6;
  $160 = $7;
  $161 = $9;
  _convertToPassage($155,$156,$157,$158,$159,$160,$161);
  STACKTOP = sp;return;
 } else {
  $162 = $13;
  $163 = $14;
  $164 = $5;
  $165 = $6;
  $166 = $7;
  $167 = $9;
  _convertToPassage($155,$162,$163,$164,$165,$166,$167);
  STACKTOP = sp;return;
 }
}
function _resolveEmphasisResets($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$old = 0, $$old6 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0;
 var $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0;
 var $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0;
 var $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0;
 var $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0;
 var $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0;
 var $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0;
 var $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0;
 var $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0;
 var $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0;
 var $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0;
 var $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0;
 var $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0;
 var $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0;
 var $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0;
 var $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0;
 var $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0;
 var $999 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 $11 = 0;
 $12 = -1;
 $13 = 0;
 $14 = 0;
 $15 = -1;
 $18 = $6;
 $19 = ((($18)) + 20|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 $22 = $7;
 $23 = ((($22)) + 1512|0);
 $24 = (($23) + (($21*36)|0)|0);
 $25 = ((($24)) + 20|0);
 $26 = HEAP32[$25>>2]|0;
 $17 = $26;
 $16 = 0;
 while(1) {
  $27 = $16;
  $28 = $8;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($27|0)<($30|0);
  if (!($31)) {
   break;
  }
  $32 = $11;
  $33 = ($32|0)!=(0);
  do {
   if ($33) {
    $34 = $16;
    $35 = $5;
    $36 = (($35) + ($34<<3)|0);
    $37 = $36;
    $38 = $37;
    $39 = HEAP32[$38>>2]|0;
    $40 = (($37) + 4)|0;
    $41 = $40;
    $42 = HEAP32[$41>>2]|0;
    $43 = (_bitshift64Lshr(($39|0),($42|0),16)|0);
    $44 = tempRet0;
    $45 = $43 & 65535;
    $46 = $6;
    $47 = ((($46)) + 16|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = $45 & $48;
    $50 = ($49|0)!=(0);
    if ($50) {
     $11 = 0;
     break;
    }
    $51 = $16;
    $52 = $5;
    $53 = (($52) + ($51<<3)|0);
    $54 = $53;
    $55 = $54;
    $56 = HEAP32[$55>>2]|0;
    $57 = (($54) + 4)|0;
    $58 = $57;
    $59 = HEAP32[$58>>2]|0;
    $60 = $59 & 65535;
    $61 = $6;
    $62 = ((($61)) + 16|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = $60 & $63;
    $65 = ($64|0)!=(0);
    if ($65) {
     $11 = 0;
     $66 = $16;
     $15 = $66;
    }
   }
  } while(0);
  $67 = $11;
  $68 = ($67|0)!=(0);
  L11: do {
   if (!($68)) {
    $69 = $16;
    $70 = $5;
    $71 = (($70) + ($69<<3)|0);
    $72 = $71;
    $73 = $72;
    $74 = HEAP32[$73>>2]|0;
    $75 = (($72) + 4)|0;
    $76 = $75;
    $77 = HEAP32[$76>>2]|0;
    $78 = $74 & 65535;
    $79 = $6;
    $80 = ((($79)) + 16|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = $78 & $81;
    $83 = ($82|0)!=(0);
    if ($83) {
     $11 = 1;
     break;
    }
    $84 = $10;
    $85 = ($84|0)!=(0);
    do {
     if (!($85)) {
      $86 = $16;
      $87 = $5;
      $88 = (($87) + ($86<<3)|0);
      $89 = $88;
      $90 = $89;
      $91 = HEAP32[$90>>2]|0;
      $92 = (($89) + 4)|0;
      $93 = $92;
      $94 = HEAP32[$93>>2]|0;
      $95 = $94 & 65535;
      $96 = $6;
      $97 = ((($96)) + 16|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = $95 & $98;
      $100 = ($99|0)!=(0);
      $101 = $16;
      if (!($100)) {
       $238 = $5;
       $239 = (($238) + ($101<<3)|0);
       $240 = $239;
       $241 = $240;
       $242 = HEAP32[$241>>2]|0;
       $243 = (($240) + 4)|0;
       $244 = $243;
       $245 = HEAP32[$244>>2]|0;
       $246 = (_bitshift64Lshr(($242|0),($245|0),48)|0);
       $247 = tempRet0;
       $248 = $6;
       $249 = ((($248)) + 16|0);
       $250 = HEAP32[$249>>2]|0;
       $251 = $246 & $250;
       $252 = ($251|0)!=(0);
       if (!($252)) {
        break;
       }
       $253 = $16;
       $254 = $9;
       $255 = (($254) + ($253<<2)|0);
       $256 = HEAP32[$255>>2]|0;
       $257 = $256 & 2;
       $258 = ($257|0)!=(0);
       if (!($258)) {
        $259 = $16;
        $260 = $8;
        $261 = ((($260)) + 4|0);
        $262 = HEAP32[$261>>2]|0;
        $263 = (($262) + ($259<<1)|0);
        $264 = HEAP16[$263>>1]|0;
        $265 = $7;
        $266 = $6;
        $267 = (_resetsEmphMode($264,$265,$266)|0);
        $268 = ($267|0)!=(0);
        if (!($268)) {
         break;
        }
       }
       $269 = $6;
       $270 = ((($269)) + 16|0);
       $271 = HEAP32[$270>>2]|0;
       $272 = $271 ^ -1;
       $273 = $16;
       $274 = $5;
       $275 = (($274) + ($273<<3)|0);
       $276 = $275;
       $277 = $276;
       $278 = HEAP32[$277>>2]|0;
       $279 = (($276) + 4)|0;
       $280 = $279;
       $281 = HEAP32[$280>>2]|0;
       $282 = (_bitshift64Lshr(($278|0),($281|0),48)|0);
       $283 = tempRet0;
       $284 = $282 & $272;
       $285 = $275;
       $286 = $285;
       $287 = HEAP32[$286>>2]|0;
       $288 = (($285) + 4)|0;
       $289 = $288;
       $290 = HEAP32[$289>>2]|0;
       $291 = $284 & 65535;
       $292 = (_bitshift64Shl(($291|0),0,48)|0);
       $293 = tempRet0;
       $294 = $290 & 65535;
       $295 = $287 | $292;
       $296 = $294 | $293;
       $297 = $275;
       $298 = $297;
       HEAP32[$298>>2] = $295;
       $299 = (($297) + 4)|0;
       $300 = $299;
       HEAP32[$300>>2] = $296;
       break;
      }
      $102 = $9;
      $103 = (($102) + ($101<<2)|0);
      $104 = HEAP32[$103>>2]|0;
      $105 = $104 & 2;
      $106 = ($105|0)!=(0);
      if ($106) {
       $$old = $17;
       $$old6 = ($$old|0)!=(0);
       if ($$old6) {
        label = 16;
       }
      } else {
       $107 = $16;
       $108 = $8;
       $109 = ((($108)) + 4|0);
       $110 = HEAP32[$109>>2]|0;
       $111 = (($110) + ($107<<1)|0);
       $112 = HEAP16[$111>>1]|0;
       $113 = $7;
       $114 = $6;
       $115 = (_resetsEmphMode($112,$113,$114)|0);
       $116 = ($115|0)!=(0);
       $117 = $17;
       $118 = ($117|0)!=(0);
       $or$cond7 = $116 & $118;
       if ($or$cond7) {
        label = 16;
       }
      }
      if ((label|0) == 16) {
       label = 0;
       $119 = $15;
       $120 = $16;
       $121 = ($119|0)==($120|0);
       if (!($121)) {
        $122 = $6;
        $123 = ((($122)) + 16|0);
        $124 = HEAP32[$123>>2]|0;
        $125 = $16;
        $126 = $5;
        $127 = (($126) + ($125<<3)|0);
        $128 = $127;
        $129 = $128;
        $130 = HEAP32[$129>>2]|0;
        $131 = (($128) + 4)|0;
        $132 = $131;
        $133 = HEAP32[$132>>2]|0;
        $134 = (_bitshift64Lshr(($130|0),($133|0),48)|0);
        $135 = tempRet0;
        $136 = $134 | $124;
        $137 = $127;
        $138 = $137;
        $139 = HEAP32[$138>>2]|0;
        $140 = (($137) + 4)|0;
        $141 = $140;
        $142 = HEAP32[$141>>2]|0;
        $143 = $136 & 65535;
        $144 = (_bitshift64Shl(($143|0),0,48)|0);
        $145 = tempRet0;
        $146 = $142 & 65535;
        $147 = $139 | $144;
        $148 = $146 | $145;
        $149 = $127;
        $150 = $149;
        HEAP32[$150>>2] = $147;
        $151 = (($149) + 4)|0;
        $152 = $151;
        HEAP32[$152>>2] = $148;
        $153 = $16;
        $154 = (($153) + 1)|0;
        $155 = $9;
        $156 = (($155) + ($154<<2)|0);
        $157 = HEAP32[$156>>2]|0;
        $158 = $157 & 1;
        $159 = ($158|0)!=(0);
        if ($159) {
         $160 = $6;
         $161 = ((($160)) + 16|0);
         $162 = HEAP32[$161>>2]|0;
         $163 = $16;
         $164 = (($163) + 1)|0;
         $165 = $5;
         $166 = (($165) + ($164<<3)|0);
         $167 = $166;
         $168 = $167;
         $169 = HEAP32[$168>>2]|0;
         $170 = (($167) + 4)|0;
         $171 = $170;
         $172 = HEAP32[$171>>2]|0;
         $173 = $172 & 65535;
         $174 = $173 | $162;
         $175 = $166;
         $176 = $175;
         $177 = HEAP32[$176>>2]|0;
         $178 = (($175) + 4)|0;
         $179 = $178;
         $180 = HEAP32[$179>>2]|0;
         $181 = $174 & 65535;
         $182 = $180 & -65536;
         $183 = $182 | $181;
         $184 = $166;
         $185 = $184;
         HEAP32[$185>>2] = $177;
         $186 = (($184) + 4)|0;
         $187 = $186;
         HEAP32[$187>>2] = $183;
         $188 = $16;
         $189 = $9;
         $190 = (($189) + ($188<<2)|0);
         $191 = HEAP32[$190>>2]|0;
         $192 = $191 & 4;
         $193 = ($192|0)!=(0);
         if ($193) {
          $194 = $16;
          $195 = (($194) + 1)|0;
          $196 = $9;
          $197 = (($196) + ($195<<2)|0);
          $198 = HEAP32[$197>>2]|0;
          $199 = $198 | 4;
          HEAP32[$197>>2] = $199;
         }
         $200 = $15;
         $201 = $16;
         $202 = ($200|0)==($201|0);
         if ($202) {
          $203 = $15;
          $204 = (($203) + 1)|0;
          $15 = $204;
         }
        }
        $205 = $6;
        $206 = ((($205)) + 16|0);
        $207 = HEAP32[$206>>2]|0;
        $208 = $207 ^ -1;
        $209 = $16;
        $210 = $5;
        $211 = (($210) + ($209<<3)|0);
        $212 = $211;
        $213 = $212;
        $214 = HEAP32[$213>>2]|0;
        $215 = (($212) + 4)|0;
        $216 = $215;
        $217 = HEAP32[$216>>2]|0;
        $218 = $217 & 65535;
        $219 = $218 & $208;
        $220 = $211;
        $221 = $220;
        $222 = HEAP32[$221>>2]|0;
        $223 = (($220) + 4)|0;
        $224 = $223;
        $225 = HEAP32[$224>>2]|0;
        $226 = $225 & -65536;
        $227 = $226 | $219;
        $228 = $211;
        $229 = $228;
        HEAP32[$229>>2] = $222;
        $230 = (($228) + 4)|0;
        $231 = $230;
        HEAP32[$231>>2] = $227;
        $232 = $16;
        $233 = $9;
        $234 = (($233) + ($232<<2)|0);
        $235 = HEAP32[$234>>2]|0;
        $236 = $235 & -5;
        HEAP32[$234>>2] = $236;
        break L11;
       }
      }
      $10 = 1;
      $237 = $16;
      $12 = $237;
      $14 = 0;
      $13 = 0;
     }
    } while(0);
    $301 = $10;
    $302 = ($301|0)!=(0);
    if ($302) {
     $303 = $16;
     $304 = $9;
     $305 = (($304) + ($303<<2)|0);
     $306 = HEAP32[$305>>2]|0;
     $307 = $306 & 1;
     $308 = ($307|0)!=(0);
     do {
      if ($308) {
       $309 = $16;
       $310 = $5;
       $311 = (($310) + ($309<<3)|0);
       $312 = $311;
       $313 = $312;
       $314 = HEAP32[$313>>2]|0;
       $315 = (($312) + 4)|0;
       $316 = $315;
       $317 = HEAP32[$316>>2]|0;
       $318 = $317 & 65535;
       $319 = $6;
       $320 = ((($319)) + 16|0);
       $321 = HEAP32[$320>>2]|0;
       $322 = $318 & $321;
       $323 = ($322|0)!=(0);
       if ($323) {
        $324 = $16;
        $325 = $5;
        $326 = (($325) + ($324<<3)|0);
        $327 = $326;
        $328 = $327;
        $329 = HEAP32[$328>>2]|0;
        $330 = (($327) + 4)|0;
        $331 = $330;
        $332 = HEAP32[$331>>2]|0;
        $333 = (_bitshift64Lshr(($329|0),($332|0),16)|0);
        $334 = tempRet0;
        $335 = $333 & 65535;
        $336 = $6;
        $337 = ((($336)) + 16|0);
        $338 = HEAP32[$337>>2]|0;
        $339 = $335 & $338;
        $340 = ($339|0)!=(0);
        if ($340) {
         break;
        }
       }
       $614 = $16;
       $615 = $9;
       $616 = (($615) + ($614<<2)|0);
       $617 = HEAP32[$616>>2]|0;
       $618 = $617 & 2;
       $619 = ($618|0)!=(0);
       if (!($619)) {
        $620 = $16;
        $621 = $8;
        $622 = ((($621)) + 4|0);
        $623 = HEAP32[$622>>2]|0;
        $624 = (($623) + ($620<<1)|0);
        $625 = HEAP16[$624>>1]|0;
        $626 = $7;
        $627 = $6;
        $628 = (_resetsEmphMode($625,$626,$627)|0);
        $629 = ($628|0)!=(0);
        if (!($629)) {
         $768 = $13;
         $769 = ($768|0)!=(0);
         if ($769) {
          $770 = $12;
          $771 = $15;
          $772 = ($770|0)==($771|0);
          if ($772) {
           $773 = $6;
           $774 = ((($773)) + 16|0);
           $775 = HEAP32[$774>>2]|0;
           $776 = $775 ^ -1;
           $777 = $15;
           $778 = $5;
           $779 = (($778) + ($777<<3)|0);
           $780 = $779;
           $781 = $780;
           $782 = HEAP32[$781>>2]|0;
           $783 = (($780) + 4)|0;
           $784 = $783;
           $785 = HEAP32[$784>>2]|0;
           $786 = $785 & 65535;
           $787 = $786 & $776;
           $788 = $779;
           $789 = $788;
           $790 = HEAP32[$789>>2]|0;
           $791 = (($788) + 4)|0;
           $792 = $791;
           $793 = HEAP32[$792>>2]|0;
           $794 = $793 & -65536;
           $795 = $794 | $787;
           $796 = $779;
           $797 = $796;
           HEAP32[$797>>2] = $790;
           $798 = (($796) + 4)|0;
           $799 = $798;
           HEAP32[$799>>2] = $795;
          }
          $15 = -1;
          $13 = 0;
          $800 = $16;
          $12 = $800;
          $14 = 0;
          $801 = $6;
          $802 = ((($801)) + 16|0);
          $803 = HEAP32[$802>>2]|0;
          $804 = $16;
          $805 = $5;
          $806 = (($805) + ($804<<3)|0);
          $807 = $806;
          $808 = $807;
          $809 = HEAP32[$808>>2]|0;
          $810 = (($807) + 4)|0;
          $811 = $810;
          $812 = HEAP32[$811>>2]|0;
          $813 = $812 & 65535;
          $814 = $813 | $803;
          $815 = $806;
          $816 = $815;
          $817 = HEAP32[$816>>2]|0;
          $818 = (($815) + 4)|0;
          $819 = $818;
          $820 = HEAP32[$819>>2]|0;
          $821 = $814 & 65535;
          $822 = $820 & -65536;
          $823 = $822 | $821;
          $824 = $806;
          $825 = $824;
          HEAP32[$825>>2] = $817;
          $826 = (($824) + 4)|0;
          $827 = $826;
          HEAP32[$827>>2] = $823;
         }
         $828 = $14;
         $829 = (($828) + 1)|0;
         $14 = $829;
         break L11;
        }
       }
       $630 = $17;
       $631 = ($630|0)!=(0);
       $632 = $14;
       $633 = ($632|0)==(1);
       $or$cond3 = $631 & $633;
       if ($or$cond3) {
        $634 = $12;
        $635 = $15;
        $636 = ($634|0)!=($635|0);
        if ($636) {
         $637 = $6;
         $638 = ((($637)) + 16|0);
         $639 = HEAP32[$638>>2]|0;
         $640 = $12;
         $641 = $5;
         $642 = (($641) + ($640<<3)|0);
         $643 = $642;
         $644 = $643;
         $645 = HEAP32[$644>>2]|0;
         $646 = (($643) + 4)|0;
         $647 = $646;
         $648 = HEAP32[$647>>2]|0;
         $649 = (_bitshift64Lshr(($645|0),($648|0),48)|0);
         $650 = tempRet0;
         $651 = $649 | $639;
         $652 = $642;
         $653 = $652;
         $654 = HEAP32[$653>>2]|0;
         $655 = (($652) + 4)|0;
         $656 = $655;
         $657 = HEAP32[$656>>2]|0;
         $658 = $651 & 65535;
         $659 = (_bitshift64Shl(($658|0),0,48)|0);
         $660 = tempRet0;
         $661 = $657 & 65535;
         $662 = $654 | $659;
         $663 = $661 | $660;
         $664 = $642;
         $665 = $664;
         HEAP32[$665>>2] = $662;
         $666 = (($664) + 4)|0;
         $667 = $666;
         HEAP32[$667>>2] = $663;
         $668 = $6;
         $669 = ((($668)) + 16|0);
         $670 = HEAP32[$669>>2]|0;
         $671 = $670 ^ -1;
         $672 = $12;
         $673 = $5;
         $674 = (($673) + ($672<<3)|0);
         $675 = $674;
         $676 = $675;
         $677 = HEAP32[$676>>2]|0;
         $678 = (($675) + 4)|0;
         $679 = $678;
         $680 = HEAP32[$679>>2]|0;
         $681 = $680 & 65535;
         $682 = $681 & $671;
         $683 = $674;
         $684 = $683;
         $685 = HEAP32[$684>>2]|0;
         $686 = (($683) + 4)|0;
         $687 = $686;
         $688 = HEAP32[$687>>2]|0;
         $689 = $688 & -65536;
         $690 = $689 | $682;
         $691 = $674;
         $692 = $691;
         HEAP32[$692>>2] = $685;
         $693 = (($691) + 4)|0;
         $694 = $693;
         HEAP32[$694>>2] = $690;
         $695 = $12;
         $696 = $9;
         $697 = (($696) + ($695<<2)|0);
         $698 = HEAP32[$697>>2]|0;
         $699 = $698 & -5;
         HEAP32[$697>>2] = $699;
        }
       }
       $700 = $16;
       $701 = $8;
       $702 = ((($701)) + 4|0);
       $703 = HEAP32[$702>>2]|0;
       $704 = (($703) + ($700<<1)|0);
       $705 = HEAP16[$704>>1]|0;
       $706 = $7;
       $707 = $6;
       $708 = (_resetsEmphMode($705,$706,$707)|0);
       $709 = ($708|0)!=(0);
       if ($709) {
        $13 = 1;
        break L11;
       }
       $710 = $12;
       $711 = $15;
       $712 = ($710|0)==($711|0);
       if ($712) {
        $713 = $6;
        $714 = ((($713)) + 16|0);
        $715 = HEAP32[$714>>2]|0;
        $716 = $715 ^ -1;
        $717 = $15;
        $718 = $5;
        $719 = (($718) + ($717<<3)|0);
        $720 = $719;
        $721 = $720;
        $722 = HEAP32[$721>>2]|0;
        $723 = (($720) + 4)|0;
        $724 = $723;
        $725 = HEAP32[$724>>2]|0;
        $726 = $725 & 65535;
        $727 = $726 & $716;
        $728 = $719;
        $729 = $728;
        $730 = HEAP32[$729>>2]|0;
        $731 = (($728) + 4)|0;
        $732 = $731;
        $733 = HEAP32[$732>>2]|0;
        $734 = $733 & -65536;
        $735 = $734 | $727;
        $736 = $719;
        $737 = $736;
        HEAP32[$737>>2] = $730;
        $738 = (($736) + 4)|0;
        $739 = $738;
        HEAP32[$739>>2] = $735;
       }
       $15 = -1;
       $13 = 0;
       $740 = $16;
       $12 = $740;
       $14 = 1;
       $741 = $6;
       $742 = ((($741)) + 16|0);
       $743 = HEAP32[$742>>2]|0;
       $744 = $16;
       $745 = $5;
       $746 = (($745) + ($744<<3)|0);
       $747 = $746;
       $748 = $747;
       $749 = HEAP32[$748>>2]|0;
       $750 = (($747) + 4)|0;
       $751 = $750;
       $752 = HEAP32[$751>>2]|0;
       $753 = $752 & 65535;
       $754 = $753 | $743;
       $755 = $746;
       $756 = $755;
       $757 = HEAP32[$756>>2]|0;
       $758 = (($755) + 4)|0;
       $759 = $758;
       $760 = HEAP32[$759>>2]|0;
       $761 = $754 & 65535;
       $762 = $760 & -65536;
       $763 = $762 | $761;
       $764 = $746;
       $765 = $764;
       HEAP32[$765>>2] = $757;
       $766 = (($764) + 4)|0;
       $767 = $766;
       HEAP32[$767>>2] = $763;
       break L11;
      }
     } while(0);
     $10 = 0;
     $341 = $17;
     $342 = ($341|0)!=(0);
     $343 = $14;
     $344 = ($343|0)==(1);
     $or$cond = $342 & $344;
     if ($or$cond) {
      $345 = $12;
      $346 = $15;
      $347 = ($345|0)!=($346|0);
      if ($347) {
       $348 = $6;
       $349 = ((($348)) + 16|0);
       $350 = HEAP32[$349>>2]|0;
       $351 = $12;
       $352 = $5;
       $353 = (($352) + ($351<<3)|0);
       $354 = $353;
       $355 = $354;
       $356 = HEAP32[$355>>2]|0;
       $357 = (($354) + 4)|0;
       $358 = $357;
       $359 = HEAP32[$358>>2]|0;
       $360 = (_bitshift64Lshr(($356|0),($359|0),48)|0);
       $361 = tempRet0;
       $362 = $360 | $350;
       $363 = $353;
       $364 = $363;
       $365 = HEAP32[$364>>2]|0;
       $366 = (($363) + 4)|0;
       $367 = $366;
       $368 = HEAP32[$367>>2]|0;
       $369 = $362 & 65535;
       $370 = (_bitshift64Shl(($369|0),0,48)|0);
       $371 = tempRet0;
       $372 = $368 & 65535;
       $373 = $365 | $370;
       $374 = $372 | $371;
       $375 = $353;
       $376 = $375;
       HEAP32[$376>>2] = $373;
       $377 = (($375) + 4)|0;
       $378 = $377;
       HEAP32[$378>>2] = $374;
       $379 = $6;
       $380 = ((($379)) + 16|0);
       $381 = HEAP32[$380>>2]|0;
       $382 = $381 ^ -1;
       $383 = $12;
       $384 = $5;
       $385 = (($384) + ($383<<3)|0);
       $386 = $385;
       $387 = $386;
       $388 = HEAP32[$387>>2]|0;
       $389 = (($386) + 4)|0;
       $390 = $389;
       $391 = HEAP32[$390>>2]|0;
       $392 = $391 & 65535;
       $393 = $392 & $382;
       $394 = $385;
       $395 = $394;
       $396 = HEAP32[$395>>2]|0;
       $397 = (($394) + 4)|0;
       $398 = $397;
       $399 = HEAP32[$398>>2]|0;
       $400 = $399 & -65536;
       $401 = $400 | $393;
       $402 = $385;
       $403 = $402;
       HEAP32[$403>>2] = $396;
       $404 = (($402) + 4)|0;
       $405 = $404;
       HEAP32[$405>>2] = $401;
       $406 = $12;
       $407 = $9;
       $408 = (($407) + ($406<<2)|0);
       $409 = HEAP32[$408>>2]|0;
       $410 = $409 & -5;
       HEAP32[$408>>2] = $410;
       $411 = $6;
       $412 = ((($411)) + 16|0);
       $413 = HEAP32[$412>>2]|0;
       $414 = $413 ^ -1;
       $415 = $16;
       $416 = $5;
       $417 = (($416) + ($415<<3)|0);
       $418 = $417;
       $419 = $418;
       $420 = HEAP32[$419>>2]|0;
       $421 = (($418) + 4)|0;
       $422 = $421;
       $423 = HEAP32[$422>>2]|0;
       $424 = (_bitshift64Lshr(($420|0),($423|0),16)|0);
       $425 = tempRet0;
       $426 = $424 & 65535;
       $427 = $426 & $414;
       $428 = $417;
       $429 = $428;
       $430 = HEAP32[$429>>2]|0;
       $431 = (($428) + 4)|0;
       $432 = $431;
       $433 = HEAP32[$432>>2]|0;
       $434 = (_bitshift64Shl(($427|0),0,16)|0);
       $435 = tempRet0;
       $436 = $430 & 65535;
       $437 = $436 | $434;
       $438 = $433 | $435;
       $439 = $417;
       $440 = $439;
       HEAP32[$440>>2] = $437;
       $441 = (($439) + 4)|0;
       $442 = $441;
       HEAP32[$442>>2] = $438;
       $443 = $6;
       $444 = ((($443)) + 16|0);
       $445 = HEAP32[$444>>2]|0;
       $446 = $445 ^ -1;
       $447 = $16;
       $448 = $5;
       $449 = (($448) + ($447<<3)|0);
       $450 = $449;
       $451 = $450;
       $452 = HEAP32[$451>>2]|0;
       $453 = (($450) + 4)|0;
       $454 = $453;
       $455 = HEAP32[$454>>2]|0;
       $456 = $455 & 65535;
       $457 = $456 & $446;
       $458 = $449;
       $459 = $458;
       $460 = HEAP32[$459>>2]|0;
       $461 = (($458) + 4)|0;
       $462 = $461;
       $463 = HEAP32[$462>>2]|0;
       $464 = $463 & -65536;
       $465 = $464 | $457;
       $466 = $449;
       $467 = $466;
       HEAP32[$467>>2] = $460;
       $468 = (($466) + 4)|0;
       $469 = $468;
       HEAP32[$469>>2] = $465;
      }
     }
     $470 = $13;
     $471 = ($470|0)!=(0);
     if ($471) {
      label = 38;
     } else {
      $472 = $16;
      $473 = $9;
      $474 = (($473) + ($472<<2)|0);
      $475 = HEAP32[$474>>2]|0;
      $476 = $475 & 2;
      $477 = ($476|0)!=(0);
      if ($477) {
       label = 38;
      } else {
       $478 = $16;
       $479 = $8;
       $480 = ((($479)) + 4|0);
       $481 = HEAP32[$480>>2]|0;
       $482 = (($481) + ($478<<1)|0);
       $483 = HEAP16[$482>>1]|0;
       $484 = $7;
       $485 = $6;
       $486 = (_resetsEmphMode($483,$484,$485)|0);
       $487 = ($486|0)!=(0);
       if ($487) {
        label = 38;
       }
      }
     }
     if ((label|0) == 38) {
      label = 0;
      $488 = $6;
      $489 = ((($488)) + 16|0);
      $490 = HEAP32[$489>>2]|0;
      $491 = $490 ^ -1;
      $492 = $16;
      $493 = $5;
      $494 = (($493) + ($492<<3)|0);
      $495 = $494;
      $496 = $495;
      $497 = HEAP32[$496>>2]|0;
      $498 = (($495) + 4)|0;
      $499 = $498;
      $500 = HEAP32[$499>>2]|0;
      $501 = (_bitshift64Lshr(($497|0),($500|0),16)|0);
      $502 = tempRet0;
      $503 = $501 & 65535;
      $504 = $503 & $491;
      $505 = $494;
      $506 = $505;
      $507 = HEAP32[$506>>2]|0;
      $508 = (($505) + 4)|0;
      $509 = $508;
      $510 = HEAP32[$509>>2]|0;
      $511 = (_bitshift64Shl(($504|0),0,16)|0);
      $512 = tempRet0;
      $513 = $507 & 65535;
      $514 = $513 | $511;
      $515 = $510 | $512;
      $516 = $494;
      $517 = $516;
      HEAP32[$517>>2] = $514;
      $518 = (($516) + 4)|0;
      $519 = $518;
      HEAP32[$519>>2] = $515;
      $520 = $6;
      $521 = ((($520)) + 16|0);
      $522 = HEAP32[$521>>2]|0;
      $523 = $522 ^ -1;
      $524 = $16;
      $525 = $5;
      $526 = (($525) + ($524<<3)|0);
      $527 = $526;
      $528 = $527;
      $529 = HEAP32[$528>>2]|0;
      $530 = (($527) + 4)|0;
      $531 = $530;
      $532 = HEAP32[$531>>2]|0;
      $533 = $532 & 65535;
      $534 = $533 & $523;
      $535 = $526;
      $536 = $535;
      $537 = HEAP32[$536>>2]|0;
      $538 = (($535) + 4)|0;
      $539 = $538;
      $540 = HEAP32[$539>>2]|0;
      $541 = $540 & -65536;
      $542 = $541 | $534;
      $543 = $526;
      $544 = $543;
      HEAP32[$544>>2] = $537;
      $545 = (($543) + 4)|0;
      $546 = $545;
      HEAP32[$546>>2] = $542;
     }
     $547 = $16;
     $548 = $12;
     $549 = ($547|0)==($548|0);
     if ($549) {
      $550 = $12;
      $551 = $9;
      $552 = (($551) + ($550<<2)|0);
      $553 = HEAP32[$552>>2]|0;
      $554 = $553 & -5;
      HEAP32[$552>>2] = $554;
      $555 = $6;
      $556 = ((($555)) + 16|0);
      $557 = HEAP32[$556>>2]|0;
      $558 = $557 ^ -1;
      $559 = $16;
      $560 = $5;
      $561 = (($560) + ($559<<3)|0);
      $562 = $561;
      $563 = $562;
      $564 = HEAP32[$563>>2]|0;
      $565 = (($562) + 4)|0;
      $566 = $565;
      $567 = HEAP32[$566>>2]|0;
      $568 = (_bitshift64Lshr(($564|0),($567|0),16)|0);
      $569 = tempRet0;
      $570 = $568 & 65535;
      $571 = $570 & $558;
      $572 = $561;
      $573 = $572;
      $574 = HEAP32[$573>>2]|0;
      $575 = (($572) + 4)|0;
      $576 = $575;
      $577 = HEAP32[$576>>2]|0;
      $578 = (_bitshift64Shl(($571|0),0,16)|0);
      $579 = tempRet0;
      $580 = $574 & 65535;
      $581 = $580 | $578;
      $582 = $577 | $579;
      $583 = $561;
      $584 = $583;
      HEAP32[$584>>2] = $581;
      $585 = (($583) + 4)|0;
      $586 = $585;
      HEAP32[$586>>2] = $582;
      $587 = $6;
      $588 = ((($587)) + 16|0);
      $589 = HEAP32[$588>>2]|0;
      $590 = $589 ^ -1;
      $591 = $16;
      $592 = $5;
      $593 = (($592) + ($591<<3)|0);
      $594 = $593;
      $595 = $594;
      $596 = HEAP32[$595>>2]|0;
      $597 = (($594) + 4)|0;
      $598 = $597;
      $599 = HEAP32[$598>>2]|0;
      $600 = $599 & 65535;
      $601 = $600 & $590;
      $602 = $593;
      $603 = $602;
      $604 = HEAP32[$603>>2]|0;
      $605 = (($602) + 4)|0;
      $606 = $605;
      $607 = HEAP32[$606>>2]|0;
      $608 = $607 & -65536;
      $609 = $608 | $601;
      $610 = $593;
      $611 = $610;
      HEAP32[$611>>2] = $604;
      $612 = (($610) + 4)|0;
      $613 = $612;
      HEAP32[$613>>2] = $609;
     }
    }
   }
  } while(0);
  $830 = $16;
  $831 = (($830) + 1)|0;
  $16 = $831;
 }
 $832 = $10;
 $833 = ($832|0)!=(0);
 if (!($833)) {
  STACKTOP = sp;return;
 }
 $834 = $17;
 $835 = ($834|0)!=(0);
 $836 = $14;
 $837 = ($836|0)==(1);
 $or$cond5 = $835 & $837;
 if ($or$cond5) {
  $838 = $12;
  $839 = $15;
  $840 = ($838|0)!=($839|0);
  if ($840) {
   $841 = $6;
   $842 = ((($841)) + 16|0);
   $843 = HEAP32[$842>>2]|0;
   $844 = $12;
   $845 = $5;
   $846 = (($845) + ($844<<3)|0);
   $847 = $846;
   $848 = $847;
   $849 = HEAP32[$848>>2]|0;
   $850 = (($847) + 4)|0;
   $851 = $850;
   $852 = HEAP32[$851>>2]|0;
   $853 = (_bitshift64Lshr(($849|0),($852|0),48)|0);
   $854 = tempRet0;
   $855 = $853 | $843;
   $856 = $846;
   $857 = $856;
   $858 = HEAP32[$857>>2]|0;
   $859 = (($856) + 4)|0;
   $860 = $859;
   $861 = HEAP32[$860>>2]|0;
   $862 = $855 & 65535;
   $863 = (_bitshift64Shl(($862|0),0,48)|0);
   $864 = tempRet0;
   $865 = $861 & 65535;
   $866 = $858 | $863;
   $867 = $865 | $864;
   $868 = $846;
   $869 = $868;
   HEAP32[$869>>2] = $866;
   $870 = (($868) + 4)|0;
   $871 = $870;
   HEAP32[$871>>2] = $867;
   $872 = $6;
   $873 = ((($872)) + 16|0);
   $874 = HEAP32[$873>>2]|0;
   $875 = $874 ^ -1;
   $876 = $12;
   $877 = $5;
   $878 = (($877) + ($876<<3)|0);
   $879 = $878;
   $880 = $879;
   $881 = HEAP32[$880>>2]|0;
   $882 = (($879) + 4)|0;
   $883 = $882;
   $884 = HEAP32[$883>>2]|0;
   $885 = $884 & 65535;
   $886 = $885 & $875;
   $887 = $878;
   $888 = $887;
   $889 = HEAP32[$888>>2]|0;
   $890 = (($887) + 4)|0;
   $891 = $890;
   $892 = HEAP32[$891>>2]|0;
   $893 = $892 & -65536;
   $894 = $893 | $886;
   $895 = $878;
   $896 = $895;
   HEAP32[$896>>2] = $889;
   $897 = (($895) + 4)|0;
   $898 = $897;
   HEAP32[$898>>2] = $894;
   $899 = $12;
   $900 = $9;
   $901 = (($900) + ($899<<2)|0);
   $902 = HEAP32[$901>>2]|0;
   $903 = $902 & -5;
   HEAP32[$901>>2] = $903;
   $904 = $6;
   $905 = ((($904)) + 16|0);
   $906 = HEAP32[$905>>2]|0;
   $907 = $906 ^ -1;
   $908 = $16;
   $909 = $5;
   $910 = (($909) + ($908<<3)|0);
   $911 = $910;
   $912 = $911;
   $913 = HEAP32[$912>>2]|0;
   $914 = (($911) + 4)|0;
   $915 = $914;
   $916 = HEAP32[$915>>2]|0;
   $917 = (_bitshift64Lshr(($913|0),($916|0),16)|0);
   $918 = tempRet0;
   $919 = $917 & 65535;
   $920 = $919 & $907;
   $921 = $910;
   $922 = $921;
   $923 = HEAP32[$922>>2]|0;
   $924 = (($921) + 4)|0;
   $925 = $924;
   $926 = HEAP32[$925>>2]|0;
   $927 = (_bitshift64Shl(($920|0),0,16)|0);
   $928 = tempRet0;
   $929 = $923 & 65535;
   $930 = $929 | $927;
   $931 = $926 | $928;
   $932 = $910;
   $933 = $932;
   HEAP32[$933>>2] = $930;
   $934 = (($932) + 4)|0;
   $935 = $934;
   HEAP32[$935>>2] = $931;
   $936 = $6;
   $937 = ((($936)) + 16|0);
   $938 = HEAP32[$937>>2]|0;
   $939 = $938 ^ -1;
   $940 = $16;
   $941 = $5;
   $942 = (($941) + ($940<<3)|0);
   $943 = $942;
   $944 = $943;
   $945 = HEAP32[$944>>2]|0;
   $946 = (($943) + 4)|0;
   $947 = $946;
   $948 = HEAP32[$947>>2]|0;
   $949 = $948 & 65535;
   $950 = $949 & $939;
   $951 = $942;
   $952 = $951;
   $953 = HEAP32[$952>>2]|0;
   $954 = (($951) + 4)|0;
   $955 = $954;
   $956 = HEAP32[$955>>2]|0;
   $957 = $956 & -65536;
   $958 = $957 | $950;
   $959 = $942;
   $960 = $959;
   HEAP32[$960>>2] = $953;
   $961 = (($959) + 4)|0;
   $962 = $961;
   HEAP32[$962>>2] = $958;
  }
 }
 $963 = $13;
 $964 = ($963|0)!=(0);
 if (!($964)) {
  STACKTOP = sp;return;
 }
 $965 = $6;
 $966 = ((($965)) + 16|0);
 $967 = HEAP32[$966>>2]|0;
 $968 = $967 ^ -1;
 $969 = $16;
 $970 = $5;
 $971 = (($970) + ($969<<3)|0);
 $972 = $971;
 $973 = $972;
 $974 = HEAP32[$973>>2]|0;
 $975 = (($972) + 4)|0;
 $976 = $975;
 $977 = HEAP32[$976>>2]|0;
 $978 = (_bitshift64Lshr(($974|0),($977|0),16)|0);
 $979 = tempRet0;
 $980 = $978 & 65535;
 $981 = $980 & $968;
 $982 = $971;
 $983 = $982;
 $984 = HEAP32[$983>>2]|0;
 $985 = (($982) + 4)|0;
 $986 = $985;
 $987 = HEAP32[$986>>2]|0;
 $988 = (_bitshift64Shl(($981|0),0,16)|0);
 $989 = tempRet0;
 $990 = $984 & 65535;
 $991 = $990 | $988;
 $992 = $987 | $989;
 $993 = $971;
 $994 = $993;
 HEAP32[$994>>2] = $991;
 $995 = (($993) + 4)|0;
 $996 = $995;
 HEAP32[$996>>2] = $992;
 $997 = $6;
 $998 = ((($997)) + 16|0);
 $999 = HEAP32[$998>>2]|0;
 $1000 = $999 ^ -1;
 $1001 = $16;
 $1002 = $5;
 $1003 = (($1002) + ($1001<<3)|0);
 $1004 = $1003;
 $1005 = $1004;
 $1006 = HEAP32[$1005>>2]|0;
 $1007 = (($1004) + 4)|0;
 $1008 = $1007;
 $1009 = HEAP32[$1008>>2]|0;
 $1010 = $1009 & 65535;
 $1011 = $1010 & $1000;
 $1012 = $1003;
 $1013 = $1012;
 $1014 = HEAP32[$1013>>2]|0;
 $1015 = (($1012) + 4)|0;
 $1016 = $1015;
 $1017 = HEAP32[$1016>>2]|0;
 $1018 = $1017 & -65536;
 $1019 = $1018 | $1011;
 $1020 = $1003;
 $1021 = $1020;
 HEAP32[$1021>>2] = $1014;
 $1022 = (($1020) + 4)|0;
 $1023 = $1022;
 HEAP32[$1023>>2] = $1019;
 STACKTOP = sp;return;
}
function _resolveEmphasisAllSymbols($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $22 = $7;
 $23 = ((($22)) + 20|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = $24&65535;
 $26 = $8;
 $27 = ((($26)) + 1512|0);
 $28 = (($27) + (($25*36)|0)|0);
 $12 = $28;
 $29 = $12;
 $30 = ((($29)) + 24|0);
 $31 = HEAP32[$30>>2]|0;
 $13 = $31;
 $32 = $12;
 $33 = ((($32)) + 28|0);
 $34 = HEAP32[$33>>2]|0;
 $14 = $34;
 $35 = $13;
 $36 = ($35|0)!=(0);
 if (!($36)) {
  $15 = 0;
  $16 = 0;
  while(1) {
   $37 = $16;
   $38 = $10;
   $39 = ((($38)) + 8|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($37|0)<($40|0);
   if (!($41)) {
    break;
   }
   $42 = $15;
   $43 = ($42|0)!=(0);
   $44 = $16;
   $45 = $6;
   $46 = (($45) + ($44<<3)|0);
   $47 = $46;
   $48 = $47;
   $49 = HEAP32[$48>>2]|0;
   $50 = (($47) + 4)|0;
   $51 = $50;
   $52 = HEAP32[$51>>2]|0;
   if ($43) {
    $53 = (_bitshift64Lshr(($49|0),($52|0),16)|0);
    $54 = tempRet0;
    $55 = $53 & 65535;
    $56 = $7;
    $57 = ((($56)) + 16|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = $55 & $58;
    $60 = ($59|0)!=(0);
    if ($60) {
     $15 = 0;
     $61 = $7;
     $62 = ((($61)) + 16|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = $63 ^ -1;
     $65 = $16;
     $66 = $6;
     $67 = (($66) + ($65<<3)|0);
     $68 = $67;
     $69 = $68;
     $70 = HEAP32[$69>>2]|0;
     $71 = (($68) + 4)|0;
     $72 = $71;
     $73 = HEAP32[$72>>2]|0;
     $74 = (_bitshift64Lshr(($70|0),($73|0),16)|0);
     $75 = tempRet0;
     $76 = $74 & 65535;
     $77 = $76 & $64;
     $78 = $67;
     $79 = $78;
     $80 = HEAP32[$79>>2]|0;
     $81 = (($78) + 4)|0;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $84 = (_bitshift64Shl(($77|0),0,16)|0);
     $85 = tempRet0;
     $86 = $80 & 65535;
     $87 = $86 | $84;
     $88 = $83 | $85;
     $89 = $67;
     $90 = $89;
     HEAP32[$90>>2] = $87;
     $91 = (($89) + 4)|0;
     $92 = $91;
     HEAP32[$92>>2] = $88;
    }
   } else {
    $93 = $49 & 65535;
    $94 = $7;
    $95 = ((($94)) + 16|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = $93 & $96;
    $98 = ($97|0)!=(0);
    if ($98) {
     $15 = 1;
     $99 = $7;
     $100 = ((($99)) + 16|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = $101 ^ -1;
     $103 = $16;
     $104 = $6;
     $105 = (($104) + ($103<<3)|0);
     $106 = $105;
     $107 = $106;
     $108 = HEAP32[$107>>2]|0;
     $109 = (($106) + 4)|0;
     $110 = $109;
     $111 = HEAP32[$110>>2]|0;
     $112 = $108 & 65535;
     $113 = $112 & $102;
     $114 = $105;
     $115 = $114;
     $116 = HEAP32[$115>>2]|0;
     $117 = (($114) + 4)|0;
     $118 = $117;
     $119 = HEAP32[$118>>2]|0;
     $120 = $116 & -65536;
     $121 = $120 | $113;
     $122 = $105;
     $123 = $122;
     HEAP32[$123>>2] = $121;
     $124 = (($122) + 4)|0;
     $125 = $124;
     HEAP32[$125>>2] = $119;
    }
   }
   $126 = $15;
   $127 = ($126|0)!=(0);
   if ($127) {
    $128 = $7;
    $129 = ((($128)) + 16|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = $16;
    $132 = $6;
    $133 = (($132) + ($131<<3)|0);
    $134 = $133;
    $135 = $134;
    $136 = HEAP32[$135>>2]|0;
    $137 = (($134) + 4)|0;
    $138 = $137;
    $139 = HEAP32[$138>>2]|0;
    $140 = (_bitshift64Lshr(($136|0),($139|0),48)|0);
    $141 = tempRet0;
    $142 = $140 | $130;
    $143 = $133;
    $144 = $143;
    $145 = HEAP32[$144>>2]|0;
    $146 = (($143) + 4)|0;
    $147 = $146;
    $148 = HEAP32[$147>>2]|0;
    $149 = $142 & 65535;
    $150 = (_bitshift64Shl(($149|0),0,48)|0);
    $151 = tempRet0;
    $152 = $148 & 65535;
    $153 = $145 | $150;
    $154 = $152 | $151;
    $155 = $133;
    $156 = $155;
    HEAP32[$156>>2] = $153;
    $157 = (($155) + 4)|0;
    $158 = $157;
    HEAP32[$158>>2] = $154;
   }
   $159 = $16;
   $160 = (($159) + 1)|0;
   $16 = $160;
  }
  STACKTOP = sp;return;
 }
 $161 = $14;
 $162 = ($161|0)!=(0);
 if ($162) {
  STACKTOP = sp;return;
 }
 $17 = 0;
 $18 = 0;
 $19 = -1;
 $20 = 0;
 while(1) {
  $163 = $20;
  $164 = $10;
  $165 = ((($164)) + 8|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = ($163|0)<($166|0);
  if (!($167)) {
   break;
  }
  $168 = $17;
  $169 = ($168|0)!=(0);
  do {
   if ($169) {
    $170 = $20;
    $171 = $6;
    $172 = (($171) + ($170<<3)|0);
    $173 = $172;
    $174 = $173;
    $175 = HEAP32[$174>>2]|0;
    $176 = (($173) + 4)|0;
    $177 = $176;
    $178 = HEAP32[$177>>2]|0;
    $179 = (_bitshift64Lshr(($175|0),($178|0),16)|0);
    $180 = tempRet0;
    $181 = $179 & 65535;
    $182 = $7;
    $183 = ((($182)) + 16|0);
    $184 = HEAP32[$183>>2]|0;
    $185 = $181 & $184;
    $186 = ($185|0)!=(0);
    if (!($186)) {
     $187 = $20;
     $188 = $6;
     $189 = (($188) + ($187<<3)|0);
     $190 = $189;
     $191 = $190;
     $192 = HEAP32[$191>>2]|0;
     $193 = (($190) + 4)|0;
     $194 = $193;
     $195 = HEAP32[$194>>2]|0;
     $196 = $195 & 65535;
     $197 = $7;
     $198 = ((($197)) + 16|0);
     $199 = HEAP32[$198>>2]|0;
     $200 = $196 & $199;
     $201 = ($200|0)!=(0);
     if (!($201)) {
      break;
     }
    }
    $17 = 0;
   }
  } while(0);
  $202 = $17;
  $203 = ($202|0)!=(0);
  L29: do {
   if (!($203)) {
    $204 = $20;
    $205 = $6;
    $206 = (($205) + ($204<<3)|0);
    $207 = $206;
    $208 = $207;
    $209 = HEAP32[$208>>2]|0;
    $210 = (($207) + 4)|0;
    $211 = $210;
    $212 = HEAP32[$211>>2]|0;
    $213 = $209 & 65535;
    $214 = $7;
    $215 = ((($214)) + 16|0);
    $216 = HEAP32[$215>>2]|0;
    $217 = $213 & $216;
    $218 = ($217|0)!=(0);
    if ($218) {
     $17 = 1;
     break;
    }
    $219 = $18;
    $220 = ($219|0)!=(0);
    if (!($220)) {
     $221 = $20;
     $222 = $6;
     $223 = (($222) + ($221<<3)|0);
     $224 = $223;
     $225 = $224;
     $226 = HEAP32[$225>>2]|0;
     $227 = (($224) + 4)|0;
     $228 = $227;
     $229 = HEAP32[$228>>2]|0;
     $230 = $229 & 65535;
     $231 = $7;
     $232 = ((($231)) + 16|0);
     $233 = HEAP32[$232>>2]|0;
     $234 = $230 & $233;
     $235 = ($234|0)!=(0);
     if ($235) {
      $18 = 1;
      $236 = $20;
      $19 = $236;
     }
    }
    $237 = $18;
    $238 = ($237|0)!=(0);
    if ($238) {
     $239 = $20;
     $240 = $6;
     $241 = (($240) + ($239<<3)|0);
     $242 = $241;
     $243 = $242;
     $244 = HEAP32[$243>>2]|0;
     $245 = (($242) + 4)|0;
     $246 = $245;
     $247 = HEAP32[$246>>2]|0;
     $248 = $247 & 65535;
     $249 = $7;
     $250 = ((($249)) + 16|0);
     $251 = HEAP32[$250>>2]|0;
     $252 = $248 & $251;
     $253 = ($252|0)!=(0);
     if ($253) {
      $254 = $20;
      $255 = $6;
      $256 = (($255) + ($254<<3)|0);
      $257 = $256;
      $258 = $257;
      $259 = HEAP32[$258>>2]|0;
      $260 = (($257) + 4)|0;
      $261 = $260;
      $262 = HEAP32[$261>>2]|0;
      $263 = (_bitshift64Lshr(($259|0),($262|0),16)|0);
      $264 = tempRet0;
      $265 = $263 & 65535;
      $266 = $7;
      $267 = ((($266)) + 16|0);
      $268 = HEAP32[$267>>2]|0;
      $269 = $265 & $268;
      $270 = ($269|0)!=(0);
      if ($270) {
       $18 = 0;
       $271 = $13;
       $272 = ($271|0)==(0);
       $273 = $14;
       $274 = ($273|0)!=(0);
       $or$cond = $272 | $274;
       if ($or$cond) {
        break;
       }
       $275 = $7;
       $276 = ((($275)) + 16|0);
       $277 = HEAP32[$276>>2]|0;
       $278 = $277 ^ -1;
       $279 = $20;
       $280 = $6;
       $281 = (($280) + ($279<<3)|0);
       $282 = $281;
       $283 = $282;
       $284 = HEAP32[$283>>2]|0;
       $285 = (($282) + 4)|0;
       $286 = $285;
       $287 = HEAP32[$286>>2]|0;
       $288 = (_bitshift64Lshr(($284|0),($287|0),16)|0);
       $289 = tempRet0;
       $290 = $288 & 65535;
       $291 = $290 & $278;
       $292 = $281;
       $293 = $292;
       $294 = HEAP32[$293>>2]|0;
       $295 = (($292) + 4)|0;
       $296 = $295;
       $297 = HEAP32[$296>>2]|0;
       $298 = (_bitshift64Shl(($291|0),0,16)|0);
       $299 = tempRet0;
       $300 = $294 & 65535;
       $301 = $300 | $298;
       $302 = $297 | $299;
       $303 = $281;
       $304 = $303;
       HEAP32[$304>>2] = $301;
       $305 = (($303) + 4)|0;
       $306 = $305;
       HEAP32[$306>>2] = $302;
       $307 = $7;
       $308 = ((($307)) + 16|0);
       $309 = HEAP32[$308>>2]|0;
       $310 = $309 ^ -1;
       $311 = $20;
       $312 = $6;
       $313 = (($312) + ($311<<3)|0);
       $314 = $313;
       $315 = $314;
       $316 = HEAP32[$315>>2]|0;
       $317 = (($314) + 4)|0;
       $318 = $317;
       $319 = HEAP32[$318>>2]|0;
       $320 = $319 & 65535;
       $321 = $320 & $310;
       $322 = $313;
       $323 = $322;
       $324 = HEAP32[$323>>2]|0;
       $325 = (($322) + 4)|0;
       $326 = $325;
       $327 = HEAP32[$326>>2]|0;
       $328 = $327 & -65536;
       $329 = $328 | $321;
       $330 = $313;
       $331 = $330;
       HEAP32[$331>>2] = $324;
       $332 = (($330) + 4)|0;
       $333 = $332;
       HEAP32[$333>>2] = $329;
       $334 = $7;
       $335 = ((($334)) + 16|0);
       $336 = HEAP32[$335>>2]|0;
       $337 = $336 ^ -1;
       $338 = $19;
       $339 = $6;
       $340 = (($339) + ($338<<3)|0);
       $341 = $340;
       $342 = $341;
       $343 = HEAP32[$342>>2]|0;
       $344 = (($341) + 4)|0;
       $345 = $344;
       $346 = HEAP32[$345>>2]|0;
       $347 = $346 & 65535;
       $348 = $347 & $337;
       $349 = $340;
       $350 = $349;
       $351 = HEAP32[$350>>2]|0;
       $352 = (($349) + 4)|0;
       $353 = $352;
       $354 = HEAP32[$353>>2]|0;
       $355 = $354 & -65536;
       $356 = $355 | $348;
       $357 = $340;
       $358 = $357;
       HEAP32[$358>>2] = $351;
       $359 = (($357) + 4)|0;
       $360 = $359;
       HEAP32[$360>>2] = $356;
       $361 = $19;
       $21 = $361;
       while(1) {
        $362 = $21;
        $363 = $20;
        $364 = ($362|0)<($363|0);
        if (!($364)) {
         break L29;
        }
        $365 = $7;
        $366 = ((($365)) + 16|0);
        $367 = HEAP32[$366>>2]|0;
        $368 = $21;
        $369 = $6;
        $370 = (($369) + ($368<<3)|0);
        $371 = $370;
        $372 = $371;
        $373 = HEAP32[$372>>2]|0;
        $374 = (($371) + 4)|0;
        $375 = $374;
        $376 = HEAP32[$375>>2]|0;
        $377 = (_bitshift64Lshr(($373|0),($376|0),48)|0);
        $378 = tempRet0;
        $379 = $377 | $367;
        $380 = $370;
        $381 = $380;
        $382 = HEAP32[$381>>2]|0;
        $383 = (($380) + 4)|0;
        $384 = $383;
        $385 = HEAP32[$384>>2]|0;
        $386 = $379 & 65535;
        $387 = (_bitshift64Shl(($386|0),0,48)|0);
        $388 = tempRet0;
        $389 = $385 & 65535;
        $390 = $382 | $387;
        $391 = $389 | $388;
        $392 = $370;
        $393 = $392;
        HEAP32[$393>>2] = $390;
        $394 = (($392) + 4)|0;
        $395 = $394;
        HEAP32[$395>>2] = $391;
        $396 = $21;
        $397 = (($396) + 1)|0;
        $21 = $397;
       }
      }
     }
     $398 = $20;
     $399 = $11;
     $400 = (($399) + ($398<<2)|0);
     $401 = HEAP32[$400>>2]|0;
     $402 = $401 & 1;
     $403 = ($402|0)!=(0);
     if (!($403)) {
      $18 = 0;
     }
    }
   }
  } while(0);
  $404 = $20;
  $405 = (($404) + 1)|0;
  $20 = $405;
 }
 STACKTOP = sp;return;
}
function _resolveEmphasisSingleSymbols($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $5;
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($7|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = $6;
  $13 = $3;
  $14 = (($13) + ($12<<3)|0);
  $15 = $14;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = $17 & 65535;
  $22 = $4;
  $23 = ((($22)) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $21 & $24;
  $26 = ($25|0)!=(0);
  if ($26) {
   $27 = $6;
   $28 = (($27) + 1)|0;
   $29 = $3;
   $30 = (($29) + ($28<<3)|0);
   $31 = $30;
   $32 = $31;
   $33 = HEAP32[$32>>2]|0;
   $34 = (($31) + 4)|0;
   $35 = $34;
   $36 = HEAP32[$35>>2]|0;
   $37 = (_bitshift64Lshr(($33|0),($36|0),16)|0);
   $38 = tempRet0;
   $39 = $37 & 65535;
   $40 = $4;
   $41 = ((($40)) + 16|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $39 & $42;
   $44 = ($43|0)!=(0);
   if ($44) {
    $45 = $4;
    $46 = ((($45)) + 16|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = $47 ^ -1;
    $49 = $6;
    $50 = $3;
    $51 = (($50) + ($49<<3)|0);
    $52 = $51;
    $53 = $52;
    $54 = HEAP32[$53>>2]|0;
    $55 = (($52) + 4)|0;
    $56 = $55;
    $57 = HEAP32[$56>>2]|0;
    $58 = $54 & 65535;
    $59 = $58 & $48;
    $60 = $51;
    $61 = $60;
    $62 = HEAP32[$61>>2]|0;
    $63 = (($60) + 4)|0;
    $64 = $63;
    $65 = HEAP32[$64>>2]|0;
    $66 = $62 & -65536;
    $67 = $66 | $59;
    $68 = $51;
    $69 = $68;
    HEAP32[$69>>2] = $67;
    $70 = (($68) + 4)|0;
    $71 = $70;
    HEAP32[$71>>2] = $65;
    $72 = $4;
    $73 = ((($72)) + 16|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $74 ^ -1;
    $76 = $6;
    $77 = (($76) + 1)|0;
    $78 = $3;
    $79 = (($78) + ($77<<3)|0);
    $80 = $79;
    $81 = $80;
    $82 = HEAP32[$81>>2]|0;
    $83 = (($80) + 4)|0;
    $84 = $83;
    $85 = HEAP32[$84>>2]|0;
    $86 = (_bitshift64Lshr(($82|0),($85|0),16)|0);
    $87 = tempRet0;
    $88 = $86 & 65535;
    $89 = $88 & $75;
    $90 = $79;
    $91 = $90;
    $92 = HEAP32[$91>>2]|0;
    $93 = (($90) + 4)|0;
    $94 = $93;
    $95 = HEAP32[$94>>2]|0;
    $96 = (_bitshift64Shl(($89|0),0,16)|0);
    $97 = tempRet0;
    $98 = $92 & 65535;
    $99 = $98 | $96;
    $100 = $95 | $97;
    $101 = $79;
    $102 = $101;
    HEAP32[$102>>2] = $99;
    $103 = (($101) + 4)|0;
    $104 = $103;
    HEAP32[$104>>2] = $100;
    $105 = $4;
    $106 = ((($105)) + 16|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = $6;
    $109 = $3;
    $110 = (($109) + ($108<<3)|0);
    $111 = $110;
    $112 = $111;
    $113 = HEAP32[$112>>2]|0;
    $114 = (($111) + 4)|0;
    $115 = $114;
    $116 = HEAP32[$115>>2]|0;
    $117 = (_bitshift64Lshr(($113|0),($116|0),48)|0);
    $118 = tempRet0;
    $119 = $117 | $107;
    $120 = $110;
    $121 = $120;
    $122 = HEAP32[$121>>2]|0;
    $123 = (($120) + 4)|0;
    $124 = $123;
    $125 = HEAP32[$124>>2]|0;
    $126 = $119 & 65535;
    $127 = (_bitshift64Shl(($126|0),0,48)|0);
    $128 = tempRet0;
    $129 = $125 & 65535;
    $130 = $122 | $127;
    $131 = $129 | $128;
    $132 = $110;
    $133 = $132;
    HEAP32[$133>>2] = $130;
    $134 = (($132) + 4)|0;
    $135 = $134;
    HEAP32[$135>>2] = $131;
   }
  }
  $136 = $6;
  $137 = (($136) + 1)|0;
  $6 = $137;
 }
 STACKTOP = sp;return;
}
function _convertToPassage($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $16 = sp + 4|0;
 $17 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $18 = $11;
 $19 = ((($18)) + 20|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 $22 = $12;
 $23 = ((($22)) + 1512|0);
 $24 = (($23) + (($21*36)|0)|0);
 $15 = $24;
 $25 = $7;
 $14 = $25;
 while(1) {
  $26 = $14;
  $27 = $8;
  $28 = ($26|0)<=($27|0);
  if (!($28)) {
   break;
  }
  $29 = $14;
  $30 = $13;
  $31 = (($30) + ($29<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 & 4;
  $34 = ($33|0)!=(0);
  if ($34) {
   $35 = $11;
   $36 = ((($35)) + 16|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $37 ^ -1;
   $39 = $14;
   $40 = $10;
   $41 = (($40) + ($39<<3)|0);
   $42 = $41;
   $43 = $42;
   $44 = HEAP32[$43>>2]|0;
   $45 = (($42) + 4)|0;
   $46 = $45;
   $47 = HEAP32[$46>>2]|0;
   $48 = (_bitshift64Lshr(($44|0),($47|0),48)|0);
   $49 = tempRet0;
   $50 = $48 & $38;
   $51 = $41;
   $52 = $51;
   $53 = HEAP32[$52>>2]|0;
   $54 = (($51) + 4)|0;
   $55 = $54;
   $56 = HEAP32[$55>>2]|0;
   $57 = $50 & 65535;
   $58 = (_bitshift64Shl(($57|0),0,48)|0);
   $59 = tempRet0;
   $60 = $56 & 65535;
   $61 = $53 | $58;
   $62 = $60 | $59;
   $63 = $41;
   $64 = $63;
   HEAP32[$64>>2] = $61;
   $65 = (($63) + 4)|0;
   $66 = $65;
   HEAP32[$66>>2] = $62;
   $67 = $11;
   $68 = ((($67)) + 16|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = $69 ^ -1;
   $71 = $14;
   $72 = $10;
   $73 = (($72) + ($71<<3)|0);
   $74 = $73;
   $75 = $74;
   $76 = HEAP32[$75>>2]|0;
   $77 = (($74) + 4)|0;
   $78 = $77;
   $79 = HEAP32[$78>>2]|0;
   $80 = $79 & 65535;
   $81 = $80 & $70;
   $82 = $73;
   $83 = $82;
   $84 = HEAP32[$83>>2]|0;
   $85 = (($82) + 4)|0;
   $86 = $85;
   $87 = HEAP32[$86>>2]|0;
   $88 = $87 & -65536;
   $89 = $88 | $81;
   $90 = $73;
   $91 = $90;
   HEAP32[$91>>2] = $84;
   $92 = (($90) + 4)|0;
   $93 = $92;
   HEAP32[$93>>2] = $89;
   $94 = $14;
   $95 = $13;
   $96 = (($95) + ($94<<2)|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = $97 & -5;
   HEAP32[$96>>2] = $98;
  }
  $99 = $14;
  $100 = (($99) + 1)|0;
  $14 = $100;
 }
 $101 = $11;
 $102 = ((($101)) + 16|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = $7;
 $105 = $10;
 $106 = (($105) + ($104<<3)|0);
 $107 = $106;
 $108 = $107;
 $109 = HEAP32[$108>>2]|0;
 $110 = (($107) + 4)|0;
 $111 = $110;
 $112 = HEAP32[$111>>2]|0;
 $113 = $109 & 65535;
 $114 = $113 | $103;
 $115 = $106;
 $116 = $115;
 $117 = HEAP32[$116>>2]|0;
 $118 = (($115) + 4)|0;
 $119 = $118;
 $120 = HEAP32[$119>>2]|0;
 $121 = $114 & 65535;
 $122 = $117 & -65536;
 $123 = $122 | $121;
 $124 = $106;
 $125 = $124;
 HEAP32[$125>>2] = $123;
 $126 = (($124) + 4)|0;
 $127 = $126;
 HEAP32[$127>>2] = $120;
 $128 = $15;
 $129 = ((($128)) + 16|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = $12;
 $132 = (_brailleIndicatorDefined($130,$131,$16)|0);
 $133 = ($132|0)!=(0);
 if (!($133)) {
  $134 = $15;
  $135 = ((($134)) + 8|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = $12;
  $138 = (_brailleIndicatorDefined($136,$137,$16)|0);
  $139 = ($138|0)!=(0);
  if (!($139)) {
   $172 = $15;
   $173 = ((($172)) + 4|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = $12;
   $176 = (_brailleIndicatorDefined($174,$175,$16)|0);
   $177 = ($176|0)!=(0);
   if (!($177)) {
    STACKTOP = sp;return;
   }
   $178 = $15;
   $179 = ((($178)) + 24|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = $12;
   $182 = (_brailleIndicatorDefined($180,$181,$17)|0);
   $183 = ($182|0)!=(0);
   if ($183) {
    $184 = HEAP32[$16>>2]|0;
    $185 = ((($184)) + 44|0);
    $186 = HEAP16[$185>>1]|0;
    $187 = $186 << 16 >> 16;
    $188 = HEAP32[$17>>2]|0;
    $189 = ((($188)) + 44|0);
    $190 = HEAP16[$189>>1]|0;
    $191 = $190 << 16 >> 16;
    $192 = ($187|0)==($191|0);
    if ($192) {
     $193 = HEAP32[$16>>2]|0;
     $194 = ((($193)) + 46|0);
     $195 = HEAP32[$17>>2]|0;
     $196 = ((($195)) + 46|0);
     $197 = HEAP32[$17>>2]|0;
     $198 = ((($197)) + 44|0);
     $199 = HEAP16[$198>>1]|0;
     $200 = $199 << 16 >> 16;
     $201 = $200<<1;
     $202 = (_memcmp($194,$196,$201)|0);
     $203 = ($202|0)!=(0);
     if (!($203)) {
      $204 = $11;
      $205 = ((($204)) + 16|0);
      $206 = HEAP32[$205>>2]|0;
      $207 = $9;
      $208 = $10;
      $209 = (($208) + ($207<<3)|0);
      $210 = $209;
      $211 = $210;
      $212 = HEAP32[$211>>2]|0;
      $213 = (($210) + 4)|0;
      $214 = $213;
      $215 = HEAP32[$214>>2]|0;
      $216 = $215 & 65535;
      $217 = $216 | $206;
      $218 = $209;
      $219 = $218;
      $220 = HEAP32[$219>>2]|0;
      $221 = (($218) + 4)|0;
      $222 = $221;
      $223 = HEAP32[$222>>2]|0;
      $224 = $217 & 65535;
      $225 = $223 & -65536;
      $226 = $225 | $224;
      $227 = $209;
      $228 = $227;
      HEAP32[$228>>2] = $220;
      $229 = (($227) + 4)|0;
      $230 = $229;
      HEAP32[$230>>2] = $226;
      $231 = $9;
      $232 = $13;
      $233 = (($232) + ($231<<2)|0);
      $234 = HEAP32[$233>>2]|0;
      $235 = $234 | 4;
      HEAP32[$233>>2] = $235;
      STACKTOP = sp;return;
     }
    }
   }
   $236 = $11;
   $237 = ((($236)) + 16|0);
   $238 = HEAP32[$237>>2]|0;
   $239 = $9;
   $240 = $10;
   $241 = (($240) + ($239<<3)|0);
   $242 = $241;
   $243 = $242;
   $244 = HEAP32[$243>>2]|0;
   $245 = (($242) + 4)|0;
   $246 = $245;
   $247 = HEAP32[$246>>2]|0;
   $248 = (_bitshift64Lshr(($244|0),($247|0),16)|0);
   $249 = tempRet0;
   $250 = $248 & 65535;
   $251 = $250 | $238;
   $252 = $241;
   $253 = $252;
   $254 = HEAP32[$253>>2]|0;
   $255 = (($252) + 4)|0;
   $256 = $255;
   $257 = HEAP32[$256>>2]|0;
   $258 = $251 & 65535;
   $259 = (_bitshift64Shl(($258|0),0,16)|0);
   $260 = tempRet0;
   $261 = $254 & 65535;
   $262 = $261 | $259;
   $263 = $257 | $260;
   $264 = $241;
   $265 = $264;
   HEAP32[$265>>2] = $262;
   $266 = (($264) + 4)|0;
   $267 = $266;
   HEAP32[$267>>2] = $263;
   STACKTOP = sp;return;
  }
 }
 $140 = $11;
 $141 = ((($140)) + 16|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = $8;
 $144 = $10;
 $145 = (($144) + ($143<<3)|0);
 $146 = $145;
 $147 = $146;
 $148 = HEAP32[$147>>2]|0;
 $149 = (($146) + 4)|0;
 $150 = $149;
 $151 = HEAP32[$150>>2]|0;
 $152 = (_bitshift64Lshr(($148|0),($151|0),16)|0);
 $153 = tempRet0;
 $154 = $152 & 65535;
 $155 = $154 | $142;
 $156 = $145;
 $157 = $156;
 $158 = HEAP32[$157>>2]|0;
 $159 = (($156) + 4)|0;
 $160 = $159;
 $161 = HEAP32[$160>>2]|0;
 $162 = $155 & 65535;
 $163 = (_bitshift64Shl(($162|0),0,16)|0);
 $164 = tempRet0;
 $165 = $158 & 65535;
 $166 = $165 | $163;
 $167 = $161 | $164;
 $168 = $145;
 $169 = $168;
 HEAP32[$169>>2] = $166;
 $170 = (($168) + 4)|0;
 $171 = $170;
 HEAP32[$171>>2] = $167;
 STACKTOP = sp;return;
}
function _isEmphasized($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $5;
 $10 = $6;
 $11 = $7;
 $12 = (_isEmphasizable($9,$10,$11)|0);
 $13 = ($12|0)!=(0);
 if (!($13)) {
  $4 = 0;
  $42 = $4;
  STACKTOP = sp;return ($42|0);
 }
 $14 = $7;
 $15 = ((($14)) + 8|0);
 $16 = $15;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = ($18|0)!=(0);
 $23 = ($21|0)!=(0);
 $24 = $22 | $23;
 if ($24) {
  $25 = $5;
  $26 = $7;
  $27 = ((($26)) + 8|0);
  $28 = $27;
  $29 = $28;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($28) + 4)|0;
  $32 = $31;
  $33 = HEAP32[$32>>2]|0;
  $34 = $6;
  $35 = (_checkCharAttr($25,$30,$33,$34)|0);
  $4 = $35;
  $42 = $4;
  STACKTOP = sp;return ($42|0);
 } else {
  $36 = $8;
  $37 = $36&65535;
  $38 = $7;
  $39 = HEAP16[$38>>1]|0;
  $40 = $39&65535;
  $41 = $37 & $40;
  $4 = $41;
  $42 = $4;
  STACKTOP = sp;return ($42|0);
 }
 return (0)|0;
}
function _allocStringBuffer($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (__lou_allocMem(4,$4,0,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function _lou_backTranslateString($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = $8;
 $17 = $9;
 $18 = $10;
 $19 = $11;
 $20 = $12;
 $21 = $13;
 $22 = $14;
 $23 = $15;
 $24 = (_lou_backTranslate($16,$17,$18,$19,$20,$21,$22,0,0,0,$23)|0);
 STACKTOP = sp;return ($24|0);
}
function _lou_backTranslate($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $21 = $10;
 $22 = $11;
 $23 = $11;
 $24 = $12;
 $25 = $13;
 $26 = $14;
 $27 = $15;
 $28 = $16;
 $29 = $17;
 $30 = $18;
 $31 = $19;
 $32 = $20;
 $33 = $21;
 $34 = (__lou_backTranslate($22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,0,0)|0);
 STACKTOP = sp;return ($34|0);
}
function __lou_backTranslate($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $vararg_buffer = sp;
 $29 = sp + 192|0;
 $30 = sp + 188|0;
 $31 = sp + 176|0;
 $32 = sp + 160|0;
 $39 = sp + 128|0;
 $40 = sp + 124|0;
 $43 = sp + 112|0;
 $49 = sp + 80|0;
 $50 = sp + 64|0;
 $54 = sp + 48|0;
 $56 = sp + 32|0;
 $57 = sp + 16|0;
 $15 = $0;
 $16 = $1;
 $17 = $2;
 $18 = $3;
 $19 = $4;
 $20 = $5;
 $21 = $6;
 $22 = $7;
 $23 = $8;
 $24 = $9;
 $25 = $10;
 $26 = $11;
 $27 = $12;
 $28 = $13;
 $33 = 0;
 $35 = 0;
 $45 = 1;
 $60 = $15;
 $61 = ($60|0)==(0|0);
 $62 = $17;
 $63 = ($62|0)==(0|0);
 $or$cond = $61 | $63;
 $64 = $18;
 $65 = ($64|0)==(0|0);
 $or$cond3 = $or$cond | $65;
 $66 = $19;
 $67 = ($66|0)==(0|0);
 $or$cond5 = $or$cond3 | $67;
 $68 = $20;
 $69 = ($68|0)==(0|0);
 $or$cond7 = $or$cond5 | $69;
 if ($or$cond7) {
  $14 = 0;
  $486 = $14;
  STACKTOP = sp;return ($486|0);
 }
 $70 = $16;
 $71 = ($70|0)==(0|0);
 if ($71) {
  $72 = $15;
  $16 = $72;
 }
 $73 = $15;
 $74 = $16;
 __lou_getTable($73,$74,$29,$30);
 $75 = HEAP32[$29>>2]|0;
 $76 = ($75|0)==(0|0);
 if ($76) {
  $14 = 0;
  $486 = $14;
  STACKTOP = sp;return ($486|0);
 }
 $77 = $26;
 $78 = (__lou_isValidMode($77)|0);
 $79 = ($78|0)!=(0);
 if (!($79)) {
  $80 = $26;
  HEAP32[$vararg_buffer>>2] = $80;
  __lou_logMessage(40000,9610,$vararg_buffer);
 }
 $81 = HEAP32[4371]|0;
 $82 = ($81|0)!=(0|0);
 if (!($82)) {
  _initStringBufferPool_348();
 }
 $46 = 0;
 while(1) {
  $83 = $46;
  $84 = HEAP32[4371]|0;
  $85 = HEAP32[$84>>2]|0;
  $86 = ($83|0)<($85|0);
  if (!($86)) {
   break;
  }
  $87 = $46;
  (_releaseStringBuffer_349($87)|0);
  $88 = $46;
  $89 = (($88) + 1)|0;
  $46 = $89;
 }
 $44 = 0;
 while(1) {
  $90 = $44;
  $91 = $18;
  $92 = HEAP32[$91>>2]|0;
  $93 = ($90|0)<($92|0);
  if ($93) {
   $94 = $44;
   $95 = $17;
   $96 = (($95) + ($94<<1)|0);
   $97 = HEAP16[$96>>1]|0;
   $98 = $97&65535;
   $99 = ($98|0)!=(0);
   $487 = $99;
  } else {
   $487 = 0;
  }
  $100 = $44;
  if (!($487)) {
   break;
  }
  $101 = (($100) + 1)|0;
  $44 = $101;
 }
 $48 = $100;
 $102 = $48;
 $103 = (_getStringBuffer_350($102)|0);
 $46 = $103;
 $104 = $46;
 $105 = HEAP32[4371]|0;
 $106 = ((($105)) + 4|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = (($107) + ($104<<2)|0);
 $109 = HEAP32[$108>>2]|0;
 $47 = $109;
 $44 = 0;
 while(1) {
  $110 = $44;
  $111 = $48;
  $112 = ($110|0)<($111|0);
  if (!($112)) {
   break;
  }
  $113 = $26;
  $114 = $113 & 4;
  $115 = ($114|0)!=(0);
  $116 = $44;
  $117 = $17;
  $118 = (($117) + ($116<<1)|0);
  $119 = HEAP16[$118>>1]|0;
  if ($115) {
   $120 = $119&65535;
   $121 = $120 | 32768;
   $122 = $121&65535;
   $123 = $44;
   $124 = $47;
   $125 = (($124) + ($123<<1)|0);
   HEAP16[$125>>1] = $122;
  } else {
   $126 = HEAP32[$30>>2]|0;
   $127 = (__lou_getDotsForChar($119,$126)|0);
   $128 = $44;
   $129 = $47;
   $130 = (($129) + ($128<<1)|0);
   HEAP16[$130>>1] = $127;
  }
  $131 = $44;
  $132 = (($131) + 1)|0;
  $44 = $132;
 }
 $133 = HEAP32[$30>>2]|0;
 $134 = (__lou_getDotsForChar(32,$133)|0);
 $135 = $48;
 $136 = $47;
 $137 = (($136) + ($135<<1)|0);
 HEAP16[$137>>1] = $134;
 $138 = $46;
 HEAP32[$49>>2] = $138;
 $139 = ((($49)) + 4|0);
 $140 = $47;
 HEAP32[$139>>2] = $140;
 $141 = ((($49)) + 8|0);
 $142 = $48;
 HEAP32[$141>>2] = $142;
 ;HEAP32[$31>>2]=HEAP32[$49>>2]|0;HEAP32[$31+4>>2]=HEAP32[$49+4>>2]|0;HEAP32[$31+8>>2]=HEAP32[$49+8>>2]|0;
 $143 = $20;
 $144 = HEAP32[$143>>2]|0;
 $145 = (_getStringBuffer_350($144)|0);
 $46 = $145;
 $146 = $46;
 HEAP32[$50>>2] = $146;
 $147 = ((($50)) + 4|0);
 $148 = $46;
 $149 = HEAP32[4371]|0;
 $150 = ((($149)) + 4|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = (($151) + ($148<<2)|0);
 $153 = HEAP32[$152>>2]|0;
 HEAP32[$147>>2] = $153;
 $154 = ((($50)) + 8|0);
 $155 = $20;
 $156 = HEAP32[$155>>2]|0;
 HEAP32[$154>>2] = $156;
 $157 = ((($50)) + 12|0);
 HEAP32[$157>>2] = 0;
 ;HEAP32[$32>>2]=HEAP32[$50>>2]|0;HEAP32[$32+4>>2]=HEAP32[$50+4>>2]|0;HEAP32[$32+8>>2]=HEAP32[$50+8>>2]|0;HEAP32[$32+12>>2]=HEAP32[$50+12>>2]|0;
 $158 = $21;
 $33 = $158;
 $159 = $22;
 $34 = $159;
 $160 = $23;
 $161 = ($160|0)!=(0|0);
 L37: do {
  if ($161) {
   $44 = 0;
   while(1) {
    $162 = $44;
    $163 = ((($31)) + 8|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = ($162|0)<($164|0);
    if (!($165)) {
     break L37;
    }
    $166 = $44;
    $167 = $23;
    $168 = (($167) + ($166<<2)|0);
    HEAP32[$168>>2] = -1;
    $169 = $44;
    $170 = (($169) + 1)|0;
    $44 = $170;
   }
  }
 } while(0);
 $171 = $25;
 $172 = ($171|0)!=(0|0);
 if ($172) {
  $173 = $25;
  $174 = HEAP32[$173>>2]|0;
  HEAP32[$39>>2] = $174;
 } else {
  HEAP32[$39>>2] = -1;
 }
 HEAP32[$40>>2] = 0;
 $175 = $33;
 $176 = ($175|0)!=(0|0);
 if ($176) {
  $177 = $33;
  $178 = $20;
  $179 = HEAP32[$178>>2]|0;
  _memset(($177|0),48,($179|0))|0;
 }
 $180 = $34;
 $181 = ($180|0)!=(0|0);
 if ($181) {
  $182 = $34;
  $183 = $20;
  $184 = HEAP32[$183>>2]|0;
  _memset(($182|0),42,($184|0))|0;
 }
 $185 = ((($31)) + 8|0);
 $186 = HEAP32[$185>>2]|0;
 $187 = $20;
 $188 = HEAP32[$187>>2]|0;
 $189 = (__lou_allocMem(5,0,$186,$188)|0);
 $36 = $189;
 $190 = ($189|0)!=(0|0);
 if (!($190)) {
  $14 = 0;
  $486 = $14;
  STACKTOP = sp;return ($486|0);
 }
 $191 = HEAP32[$29>>2]|0;
 $192 = ((($191)) + 520|0);
 $193 = HEAP32[$192>>2]|0;
 $194 = ($193|0)>(1);
 if ($194) {
  label = 40;
 } else {
  $195 = HEAP32[$29>>2]|0;
  $196 = ((($195)) + 524|0);
  $197 = HEAP32[$196>>2]|0;
  $198 = ($197|0)!=(0);
  if ($198) {
   label = 40;
  }
 }
 if ((label|0) == 40) {
  $199 = ((($31)) + 8|0);
  $200 = HEAP32[$199>>2]|0;
  $201 = $20;
  $202 = HEAP32[$201>>2]|0;
  $203 = (__lou_allocMem(6,0,$200,$202)|0);
  $37 = $203;
  $204 = ($203|0)!=(0|0);
  if (!($204)) {
   $14 = 0;
   $486 = $14;
   STACKTOP = sp;return ($486|0);
  }
  $205 = ((($31)) + 8|0);
  $206 = HEAP32[$205>>2]|0;
  $207 = $20;
  $208 = HEAP32[$207>>2]|0;
  $209 = (__lou_allocMem(7,0,$206,$208)|0);
  $38 = $209;
  $210 = ($209|0)!=(0|0);
  if (!($210)) {
   $14 = 0;
   $486 = $14;
   STACKTOP = sp;return ($486|0);
  }
 }
 HEAP32[$43>>2] = 0;
 $211 = $27;
 $212 = ($211|0)!=(0|0);
 $213 = $28;
 $214 = ($213|0)!=(0|0);
 $or$cond9 = $212 & $214;
 if ($or$cond9) {
  $215 = $27;
  $41 = $215;
  $216 = $28;
  $217 = HEAP32[$216>>2]|0;
  $42 = $217;
 } else {
  $41 = 0;
  $42 = 0;
 }
 $218 = $36;
 $35 = $218;
 $219 = HEAP32[$29>>2]|0;
 $220 = ((($219)) + 520|0);
 $221 = HEAP32[$220>>2]|0;
 $51 = $221;
 $222 = HEAP32[$29>>2]|0;
 $223 = ((($222)) + 524|0);
 $224 = HEAP32[$223>>2]|0;
 $225 = ($224|0)!=(0);
 $226 = $225 ? 0 : 1;
 $52 = $226;
 $227 = $35;
 $53 = $227;
 while(1) {
  $228 = $51;
  switch ($228|0) {
  case 1:  {
   $229 = HEAP32[$29>>2]|0;
   $230 = $26;
   $231 = $51;
   $232 = $34;
   $233 = $53;
   $234 = $41;
   $235 = $42;
   $236 = (_backTranslateString($229,$230,$231,$31,$32,$232,$233,$54,$39,$40,$234,$43,$235)|0);
   $45 = $236;
   break;
  }
  case 0:  {
   $237 = HEAP32[$29>>2]|0;
   $238 = $26;
   $239 = $51;
   $240 = $53;
   $241 = $41;
   $242 = $42;
   $243 = (_makeCorrections_351($237,$238,$239,$31,$32,$240,$54,$39,$40,$241,$43,$242)|0);
   $45 = $243;
   break;
  }
  default: {
   $244 = HEAP32[$29>>2]|0;
   $245 = $26;
   $246 = $51;
   $247 = $53;
   $248 = $41;
   $249 = $42;
   $250 = (_translatePass_352($244,$245,$246,$31,$32,$247,$54,$39,$40,$248,$43,$249)|0);
   $45 = $250;
  }
  }
  $251 = ((($32)) + 12|0);
  $252 = HEAP32[$251>>2]|0;
  $253 = HEAP32[$54>>2]|0;
  $254 = $53;
  $255 = (($254) + ($253<<2)|0);
  HEAP32[$255>>2] = $252;
  $256 = $53;
  $257 = $35;
  $258 = ($256|0)==($257|0);
  L79: do {
   if ($258) {
    $259 = $37;
    $53 = $259;
    $260 = HEAP32[$54>>2]|0;
    $261 = ((($31)) + 8|0);
    $262 = HEAP32[$261>>2]|0;
    $263 = ($260|0)<($262|0);
    if ($263) {
     $264 = HEAP32[$54>>2]|0;
     $265 = $18;
     HEAP32[$265>>2] = $264;
    }
   } else {
    $266 = $38;
    $55 = $266;
    $267 = $55;
    $268 = $35;
    $269 = $18;
    $270 = HEAP32[$269>>2]|0;
    $271 = (($270) + 1)|0;
    $272 = $271<<2;
    _memcpy(($267|0),($268|0),($272|0))|0;
    $44 = 0;
    L83: while(1) {
     $273 = $44;
     $274 = $18;
     $275 = HEAP32[$274>>2]|0;
     $276 = ($273|0)<=($275|0);
     if (!($276)) {
      break L79;
     }
     $277 = $44;
     $278 = $55;
     $279 = (($278) + ($277<<2)|0);
     $280 = HEAP32[$279>>2]|0;
     $281 = ($280|0)<(0);
     do {
      if ($281) {
       $282 = $53;
       $283 = HEAP32[$282>>2]|0;
       $284 = $44;
       $285 = $35;
       $286 = (($285) + ($284<<2)|0);
       HEAP32[$286>>2] = $283;
      } else {
       $287 = $44;
       $288 = $55;
       $289 = (($288) + ($287<<2)|0);
       $290 = HEAP32[$289>>2]|0;
       $291 = HEAP32[$54>>2]|0;
       $292 = ($290|0)<($291|0);
       $293 = $44;
       $294 = $55;
       $295 = (($294) + ($293<<2)|0);
       $296 = HEAP32[$295>>2]|0;
       if ($292) {
        $297 = $53;
        $298 = (($297) + ($296<<2)|0);
        $299 = HEAP32[$298>>2]|0;
        $300 = $44;
        $301 = $35;
        $302 = (($301) + ($300<<2)|0);
        HEAP32[$302>>2] = $299;
        break;
       }
       $303 = HEAP32[$54>>2]|0;
       $304 = ($296|0)==($303|0);
       if (!($304)) {
        label = 65;
        break L83;
       }
       $305 = HEAP32[$54>>2]|0;
       $306 = ((($31)) + 8|0);
       $307 = HEAP32[$306>>2]|0;
       $308 = ($305|0)<($307|0);
       $309 = $44;
       if ($308) {
        label = 63;
        break L83;
       }
       $316 = $55;
       $317 = (($316) + ($309<<2)|0);
       $318 = HEAP32[$317>>2]|0;
       $319 = $53;
       $320 = (($319) + ($318<<2)|0);
       $321 = HEAP32[$320>>2]|0;
       $322 = $44;
       $323 = $35;
       $324 = (($323) + ($322<<2)|0);
       HEAP32[$324>>2] = $321;
      }
     } while(0);
     $332 = $44;
     $333 = (($332) + 1)|0;
     $44 = $333;
    }
    if ((label|0) == 63) {
     label = 0;
     $310 = $18;
     HEAP32[$310>>2] = $309;
     $311 = ((($32)) + 12|0);
     $312 = HEAP32[$311>>2]|0;
     $313 = $44;
     $314 = $35;
     $315 = (($314) + ($313<<2)|0);
     HEAP32[$315>>2] = $312;
     break;
    }
    else if ((label|0) == 65) {
     label = 0;
     $325 = $44;
     $326 = $18;
     HEAP32[$326>>2] = $325;
     $327 = ((($32)) + 12|0);
     $328 = HEAP32[$327>>2]|0;
     $329 = $44;
     $330 = $35;
     $331 = (($330) + ($329<<2)|0);
     HEAP32[$331>>2] = $328;
     break;
    }
   }
  } while(0);
  $334 = $51;
  $335 = (($334) + -1)|0;
  $51 = $335;
  $336 = $51;
  $337 = $52;
  $338 = ($336|0)>=($337|0);
  $339 = $45;
  $340 = ($339|0)!=(0);
  $or$cond11 = $338 & $340;
  if (!($or$cond11)) {
   break;
  }
  $341 = HEAP32[$31>>2]|0;
  (_releaseStringBuffer_349($341)|0);
  $342 = HEAP32[$32>>2]|0;
  HEAP32[$56>>2] = $342;
  $343 = ((($56)) + 4|0);
  $344 = ((($32)) + 4|0);
  $345 = HEAP32[$344>>2]|0;
  HEAP32[$343>>2] = $345;
  $346 = ((($56)) + 8|0);
  $347 = ((($32)) + 12|0);
  $348 = HEAP32[$347>>2]|0;
  HEAP32[$346>>2] = $348;
  ;HEAP32[$31>>2]=HEAP32[$56>>2]|0;HEAP32[$31+4>>2]=HEAP32[$56+4>>2]|0;HEAP32[$31+8>>2]=HEAP32[$56+8>>2]|0;
  $349 = $20;
  $350 = HEAP32[$349>>2]|0;
  $351 = (_getStringBuffer_350($350)|0);
  $46 = $351;
  $352 = $46;
  HEAP32[$57>>2] = $352;
  $353 = ((($57)) + 4|0);
  $354 = $46;
  $355 = HEAP32[4371]|0;
  $356 = ((($355)) + 4|0);
  $357 = HEAP32[$356>>2]|0;
  $358 = (($357) + ($354<<2)|0);
  $359 = HEAP32[$358>>2]|0;
  HEAP32[$353>>2] = $359;
  $360 = ((($57)) + 8|0);
  $361 = $20;
  $362 = HEAP32[$361>>2]|0;
  HEAP32[$360>>2] = $362;
  $363 = ((($57)) + 12|0);
  HEAP32[$363>>2] = 0;
  ;HEAP32[$32>>2]=HEAP32[$57>>2]|0;HEAP32[$32+4>>2]=HEAP32[$57+4>>2]|0;HEAP32[$32+8>>2]=HEAP32[$57+8>>2]|0;HEAP32[$32+12>>2]=HEAP32[$57+12>>2]|0;
 }
 $364 = $45;
 $365 = ($364|0)!=(0);
 L101: do {
  if ($365) {
   $44 = 0;
   while(1) {
    $366 = $44;
    $367 = ((($32)) + 12|0);
    $368 = HEAP32[$367>>2]|0;
    $369 = ($366|0)<($368|0);
    if (!($369)) {
     break;
    }
    $370 = $44;
    $371 = ((($32)) + 4|0);
    $372 = HEAP32[$371>>2]|0;
    $373 = (($372) + ($370<<1)|0);
    $374 = HEAP16[$373>>1]|0;
    $375 = $44;
    $376 = $19;
    $377 = (($376) + ($375<<1)|0);
    HEAP16[$377>>1] = $374;
    $378 = $44;
    $379 = (($378) + 1)|0;
    $44 = $379;
   }
   $380 = ((($32)) + 12|0);
   $381 = HEAP32[$380>>2]|0;
   $382 = $20;
   HEAP32[$382>>2] = $381;
   $383 = $24;
   $384 = ($383|0)!=(0|0);
   L107: do {
    if ($384) {
     $58 = -1;
     $59 = -1;
     $44 = 0;
     while(1) {
      $385 = $44;
      $386 = $18;
      $387 = HEAP32[$386>>2]|0;
      $388 = ($385|0)<($387|0);
      if (!($388)) {
       break;
      }
      $389 = $44;
      $390 = $35;
      $391 = (($390) + ($389<<2)|0);
      $392 = HEAP32[$391>>2]|0;
      $393 = $59;
      $394 = ($392|0)>($393|0);
      if ($394) {
       while(1) {
        $395 = $59;
        $396 = $44;
        $397 = $35;
        $398 = (($397) + ($396<<2)|0);
        $399 = HEAP32[$398>>2]|0;
        $400 = ($395|0)<($399|0);
        if (!($400)) {
         break;
        }
        $401 = $59;
        $402 = ($401|0)>=(0);
        do {
         if ($402) {
          $403 = $59;
          $404 = $20;
          $405 = HEAP32[$404>>2]|0;
          $406 = ($403|0)<($405|0);
          if (!($406)) {
           break;
          }
          $407 = $58;
          $408 = ($407|0)<(0);
          $409 = $58;
          $410 = $408 ? 0 : $409;
          $411 = $59;
          $412 = $24;
          $413 = (($412) + ($411<<2)|0);
          HEAP32[$413>>2] = $410;
         }
        } while(0);
        $414 = $59;
        $415 = (($414) + 1)|0;
        $59 = $415;
       }
       $416 = $44;
       $58 = $416;
      }
      $417 = $44;
      $418 = (($417) + 1)|0;
      $44 = $418;
     }
     $419 = $59;
     $420 = ($419|0)<(0);
     if ($420) {
      $59 = 0;
     }
     while(1) {
      $421 = $59;
      $422 = $20;
      $423 = HEAP32[$422>>2]|0;
      $424 = ($421|0)<($423|0);
      if (!($424)) {
       break L107;
      }
      $425 = $58;
      $426 = $59;
      $427 = (($426) + 1)|0;
      $59 = $427;
      $428 = $24;
      $429 = (($428) + ($426<<2)|0);
      HEAP32[$429>>2] = $425;
     }
    }
   } while(0);
   $430 = $23;
   $431 = ($430|0)!=(0|0);
   if ($431) {
    $44 = 0;
    while(1) {
     $432 = $44;
     $433 = $18;
     $434 = HEAP32[$433>>2]|0;
     $435 = ($432|0)<($434|0);
     if (!($435)) {
      break L101;
     }
     $436 = $44;
     $437 = $35;
     $438 = (($437) + ($436<<2)|0);
     $439 = HEAP32[$438>>2]|0;
     $440 = ($439|0)<(0);
     $441 = $44;
     do {
      if ($440) {
       $442 = $23;
       $443 = (($442) + ($441<<2)|0);
       HEAP32[$443>>2] = 0;
      } else {
       $444 = $35;
       $445 = (($444) + ($441<<2)|0);
       $446 = HEAP32[$445>>2]|0;
       $447 = $20;
       $448 = HEAP32[$447>>2]|0;
       $449 = (($448) - 1)|0;
       $450 = ($446|0)>($449|0);
       if ($450) {
        $451 = $20;
        $452 = HEAP32[$451>>2]|0;
        $453 = (($452) - 1)|0;
        $454 = $44;
        $455 = $23;
        $456 = (($455) + ($454<<2)|0);
        HEAP32[$456>>2] = $453;
        break;
       } else {
        $457 = $44;
        $458 = $35;
        $459 = (($458) + ($457<<2)|0);
        $460 = HEAP32[$459>>2]|0;
        $461 = $44;
        $462 = $23;
        $463 = (($462) + ($461<<2)|0);
        HEAP32[$463>>2] = $460;
        break;
       }
      }
     } while(0);
     $464 = $44;
     $465 = (($464) + 1)|0;
     $44 = $465;
    }
   }
  }
 } while(0);
 $466 = $25;
 $467 = ($466|0)!=(0|0);
 do {
  if ($467) {
   $468 = $25;
   $469 = HEAP32[$468>>2]|0;
   $470 = ($469|0)!=(-1);
   if ($470) {
    $471 = $23;
    $472 = ($471|0)!=(0|0);
    if ($472) {
     $473 = $25;
     $474 = HEAP32[$473>>2]|0;
     $475 = $23;
     $476 = (($475) + ($474<<2)|0);
     $477 = HEAP32[$476>>2]|0;
     $478 = $25;
     HEAP32[$478>>2] = $477;
     break;
    } else {
     $479 = HEAP32[$39>>2]|0;
     $480 = $25;
     HEAP32[$480>>2] = $479;
     break;
    }
   }
  }
 } while(0);
 $481 = $28;
 $482 = ($481|0)!=(0|0);
 if ($482) {
  $483 = HEAP32[$43>>2]|0;
  $484 = $28;
  HEAP32[$484>>2] = $483;
 }
 $485 = $45;
 $14 = $485;
 $486 = $14;
 STACKTOP = sp;return ($486|0);
}
function _initStringBufferPool_348() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_rpl_malloc(20)|0);
 $0 = $1;
 $2 = $0;
 HEAP32[$2>>2] = 3;
 $3 = $0;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 17488;
 $5 = $0;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = 17500;
 $7 = $0;
 $8 = ((($7)) + 12|0);
 HEAP32[$8>>2] = 12;
 $9 = $0;
 $10 = ((($9)) + 16|0);
 HEAP32[$10>>2] = 0;
 $11 = $0;
 HEAP32[4371] = $11;
 STACKTOP = sp;return;
}
function _releaseStringBuffer_349($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)>=(0);
 if ($5) {
  $6 = $2;
  $7 = HEAP32[4371]|0;
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6|0)<($8|0);
  if ($9) {
   $10 = $2;
   $11 = HEAP32[4371]|0;
   $12 = ((($11)) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($13) + ($10<<2)|0);
   $15 = HEAP32[$14>>2]|0;
   $3 = $15;
   $16 = $3;
   $17 = ($16|0)!=(0);
   if ($17) {
    $18 = HEAP32[4371]|0;
    $19 = ((($18)) + 16|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)!=(0|0);
    if ($21) {
     $22 = HEAP32[4371]|0;
     $23 = ((($22)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = $2;
     $26 = HEAP32[4371]|0;
     $27 = ((($26)) + 4|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (($28) + ($25<<2)|0);
     $30 = HEAP32[$29>>2]|0;
     FUNCTION_TABLE_vi[$24 & 31]($30);
    }
   }
   $31 = $2;
   $32 = HEAP32[4371]|0;
   $33 = ((($32)) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($34) + ($31<<2)|0);
   HEAP32[$35>>2] = 0;
   $36 = $3;
   $1 = $36;
   $37 = $1;
   STACKTOP = sp;return ($37|0);
  }
 }
 $1 = 0;
 $37 = $1;
 STACKTOP = sp;return ($37|0);
}
function _getStringBuffer_350($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = 0;
 while(1) {
  $4 = $3;
  $5 = HEAP32[4371]|0;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($4|0)<($6|0);
  if (!($7)) {
   label = 6;
   break;
  }
  $8 = $3;
  $9 = HEAP32[4371]|0;
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($8<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(0);
  if (!($14)) {
   label = 4;
   break;
  }
  $32 = $3;
  $33 = (($32) + 1)|0;
  $3 = $33;
 }
 if ((label|0) == 4) {
  $15 = HEAP32[4371]|0;
  $16 = ((($15)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $3;
  $19 = $2;
  $20 = (FUNCTION_TABLE_iii[$17 & 31]($18,$19)|0);
  $21 = $3;
  $22 = HEAP32[4371]|0;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + ($21<<2)|0);
  HEAP32[$25>>2] = $20;
  $26 = $3;
  $27 = HEAP32[4371]|0;
  $28 = ((($27)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + ($26<<2)|0);
  HEAP32[$30>>2] = 1;
  $31 = $3;
  $1 = $31;
  $34 = $1;
  STACKTOP = sp;return ($34|0);
 }
 else if ((label|0) == 6) {
  __lou_outOfMemory();
  $1 = -1;
  $34 = $1;
  STACKTOP = sp;return ($34|0);
 }
 return (0)|0;
}
function _backTranslateString($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 var $$byval_copy = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$off = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $switch = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $$byval_copy7 = sp + 192|0;
 $$byval_copy6 = sp + 176|0;
 $$byval_copy = sp + 152|0;
 $27 = sp + 92|0;
 $28 = sp + 72|0;
 $32 = sp + 56|0;
 $33 = sp + 52|0;
 $34 = sp + 48|0;
 $35 = sp + 44|0;
 $36 = sp + 40|0;
 $37 = sp;
 $38 = sp + 36|0;
 $39 = sp + 32|0;
 $40 = sp + 16|0;
 $14 = $0;
 $15 = $1;
 $16 = $2;
 $17 = $3;
 $18 = $4;
 $19 = $5;
 $20 = $6;
 $21 = $7;
 $22 = $8;
 $23 = $9;
 $24 = $10;
 $25 = $11;
 $26 = $12;
 ;HEAP32[$28>>2]=0|0;HEAP32[$28+4>>2]=0|0;HEAP32[$28+8>>2]=0|0;HEAP32[$28+12>>2]=0|0;HEAP32[$28+16>>2]=0|0;
 $29 = 0;
 $30 = 0;
 HEAP32[$32>>2] = 0;
 __lou_resetPassVariables();
 HEAP32[374] = 0;
 $31 = 117;
 $42 = $18;
 $43 = ((($42)) + 12|0);
 HEAP32[$43>>2] = 0;
 HEAP32[$27>>2] = 0;
 L1: while(1) {
  $44 = HEAP32[$27>>2]|0;
  $45 = $17;
  $46 = ((($45)) + 8|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($44|0)<($47|0);
  if (!($48)) {
   break;
  }
  $49 = $14;
  $50 = $18;
  _back_setBefore($49,$50,$37);
  $51 = ((($28)) + 4|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ($52|0)==(1);
  if ($53) {
   $54 = $37;
   $55 = $54;
   $56 = HEAP32[$55>>2]|0;
   $57 = (($54) + 4)|0;
   $58 = $57;
   $59 = HEAP32[$58>>2]|0;
   $60 = $56 & 16;
   $61 = ($60|0)!=(0);
   $62 = (0)!=(0);
   $63 = $61 | $62;
   if ($63) {
    $64 = ((($28)) + 4|0);
    HEAP32[$64>>2] = 2;
   } else {
    label = 6;
   }
  } else {
   label = 6;
  }
  if ((label|0) == 6) {
   label = 0;
   $65 = ((($28)) + 4|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ($66|0)==(2);
   if ($67) {
    $68 = $37;
    $69 = $68;
    $70 = HEAP32[$69>>2]|0;
    $71 = (($68) + 4)|0;
    $72 = $71;
    $73 = HEAP32[$72>>2]|0;
    $74 = $70 & 16;
    $75 = ($74|0)!=(0);
    $76 = (0)!=(0);
    $77 = $75 | $76;
    if (!($77)) {
     $78 = $37;
     $79 = $78;
     $80 = HEAP32[$79>>2]|0;
     $81 = (($78) + 4)|0;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $84 = $80 & 512;
     $85 = ($84|0)!=(0);
     $86 = (0)!=(0);
     $87 = $85 | $86;
     if (!($87)) {
      $88 = ((($28)) + 4|0);
      HEAP32[$88>>2] = 0;
     }
    }
   }
  }
  $89 = ((($28)) + 12|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = ($90|0)==(2);
  if ($91) {
   $92 = $18;
   $93 = ((($92)) + 12|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = ($94|0)>(0);
   if ($95) {
    $96 = $37;
    $97 = $96;
    $98 = HEAP32[$97>>2]|0;
    $99 = (($96) + 4)|0;
    $100 = $99;
    $101 = HEAP32[$100>>2]|0;
    $102 = $98 & 256;
    $103 = ($102|0)!=(0);
    $104 = (0)!=(0);
    $105 = $103 | $104;
    if (!($105)) {
     $106 = $37;
     $107 = $106;
     $108 = HEAP32[$107>>2]|0;
     $109 = (($106) + 4)|0;
     $110 = $109;
     $111 = HEAP32[$110>>2]|0;
     $112 = $108 & 2048;
     $113 = ($112|0)!=(0);
     $114 = (0)!=(0);
     $115 = $113 | $114;
     if (!($115)) {
      $116 = $37;
      $117 = $116;
      $118 = HEAP32[$117>>2]|0;
      $119 = (($116) + 4)|0;
      $120 = $119;
      $121 = HEAP32[$120>>2]|0;
      $122 = $118 & 67108864;
      $123 = ($122|0)!=(0);
      $124 = (0)!=(0);
      $125 = $123 | $124;
      if (!($125)) {
       $126 = ((($28)) + 12|0);
       HEAP32[$126>>2] = 0;
      }
     }
    }
   }
  }
  $127 = $14;
  $128 = HEAP32[$27>>2]|0;
  $129 = $15;
  $130 = $17;
  $131 = $18;
  $132 = $31;
  $133 = $37;
  $134 = $133;
  $135 = HEAP32[$134>>2]|0;
  $136 = (($133) + 4)|0;
  $137 = $136;
  $138 = HEAP32[$137>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$28>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$28+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$28+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$28+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[$28+16>>2]|0;
  _back_selectRule($127,$128,$129,$130,$131,$$byval_copy,$34,$35,$36,$132,$32,$33,$135,$138,$38,$39,$40);
  $139 = $24;
  $140 = ($139|0)!=(0|0);
  if ($140) {
   $141 = $25;
   $142 = HEAP32[$141>>2]|0;
   $143 = $26;
   $144 = ($142|0)<($143|0);
   if ($144) {
    $145 = HEAP32[$36>>2]|0;
    $146 = $25;
    $147 = HEAP32[$146>>2]|0;
    $148 = (($147) + 1)|0;
    HEAP32[$146>>2] = $148;
    $149 = $24;
    $150 = (($149) + ($147<<2)|0);
    HEAP32[$150>>2] = $145;
   }
  }
  $151 = HEAP32[$35>>2]|0;
  do {
   switch ($151|0) {
   case 90:  {
    $152 = $31;
    $153 = ($152|0)==(90);
    if ($153) {
     $154 = $14;
     $155 = HEAP32[$27>>2]|0;
     $156 = $17;
     $157 = $18;
     $158 = $19;
     $159 = $20;
     $160 = $22;
     $161 = $23;
     $162 = (_insertSpace($154,$155,$156,$157,$158,$159,$160,$161,$28)|0);
     $163 = ($162|0)!=(0);
     if (!($163)) {
      break L1;
     }
    }
    break;
   }
   case 3:  {
    HEAP32[$28>>2] = 1;
    $164 = ((($28)) + 4|0);
    HEAP32[$164>>2] = 0;
    $165 = ((($28)) + 12|0);
    HEAP32[$165>>2] = 0;
    while(1) {
     $166 = HEAP32[$34>>2]|0;
     $167 = (($166) + -1)|0;
     HEAP32[$34>>2] = $167;
     $168 = ($166|0)>(0);
     if (!($168)) {
      continue L1;
     }
     $169 = $18;
     $170 = ((($169)) + 12|0);
     $171 = HEAP32[$170>>2]|0;
     $172 = HEAP32[$27>>2]|0;
     $173 = (($172) + 1)|0;
     HEAP32[$27>>2] = $173;
     $174 = $20;
     $175 = (($174) + ($172<<2)|0);
     HEAP32[$175>>2] = $171;
    }
    break;
   }
   case 4:  {
    $176 = ((($28)) + 4|0);
    HEAP32[$176>>2] = 1;
    $177 = ((($28)) + 12|0);
    HEAP32[$177>>2] = 0;
    while(1) {
     $178 = HEAP32[$34>>2]|0;
     $179 = (($178) + -1)|0;
     HEAP32[$34>>2] = $179;
     $180 = ($178|0)>(0);
     if (!($180)) {
      continue L1;
     }
     $181 = $18;
     $182 = ((($181)) + 12|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = HEAP32[$27>>2]|0;
     $185 = (($184) + 1)|0;
     HEAP32[$27>>2] = $185;
     $186 = $20;
     $187 = (($186) + ($184<<2)|0);
     HEAP32[$187>>2] = $183;
    }
    break;
   }
   case 6:  {
    $188 = ((($28)) + 8|0);
    HEAP32[$188>>2] = 1;
    $189 = ((($28)) + 12|0);
    HEAP32[$189>>2] = 0;
    while(1) {
     $190 = HEAP32[$34>>2]|0;
     $191 = (($190) + -1)|0;
     HEAP32[$34>>2] = $191;
     $192 = ($190|0)>(0);
     if (!($192)) {
      continue L1;
     }
     $193 = $18;
     $194 = ((($193)) + 12|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = HEAP32[$27>>2]|0;
     $197 = (($196) + 1)|0;
     HEAP32[$27>>2] = $197;
     $198 = $20;
     $199 = (($198) + ($196<<2)|0);
     HEAP32[$199>>2] = $195;
    }
    break;
   }
   case 5:  {
    $200 = ((($28)) + 4|0);
    HEAP32[$200>>2] = 0;
    $201 = ((($28)) + 12|0);
    HEAP32[$201>>2] = 0;
    while(1) {
     $202 = HEAP32[$34>>2]|0;
     $203 = (($202) + -1)|0;
     HEAP32[$34>>2] = $203;
     $204 = ($202|0)>(0);
     if (!($204)) {
      continue L1;
     }
     $205 = $18;
     $206 = ((($205)) + 12|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = HEAP32[$27>>2]|0;
     $209 = (($208) + 1)|0;
     HEAP32[$27>>2] = $209;
     $210 = $20;
     $211 = (($210) + ($208<<2)|0);
     HEAP32[$211>>2] = $207;
    }
    break;
   }
   case 7:  {
    $212 = ((($28)) + 8|0);
    HEAP32[$212>>2] = 0;
    $213 = ((($28)) + 12|0);
    HEAP32[$213>>2] = 0;
    while(1) {
     $214 = HEAP32[$34>>2]|0;
     $215 = (($214) + -1)|0;
     HEAP32[$34>>2] = $215;
     $216 = ($214|0)>(0);
     if (!($216)) {
      continue L1;
     }
     $217 = $18;
     $218 = ((($217)) + 12|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = HEAP32[$27>>2]|0;
     $221 = (($220) + 1)|0;
     HEAP32[$27>>2] = $221;
     $222 = $20;
     $223 = (($222) + ($220<<2)|0);
     HEAP32[$223>>2] = $219;
    }
    break;
   }
   case 47: case 24: case 19:  {
    $224 = ((($28)) + 16|0);
    HEAP32[$224>>2] = 1;
    $225 = ((($28)) + 12|0);
    HEAP32[$225>>2] = 0;
    while(1) {
     $226 = HEAP32[$34>>2]|0;
     $227 = (($226) + -1)|0;
     HEAP32[$34>>2] = $227;
     $228 = ($226|0)>(0);
     if (!($228)) {
      continue L1;
     }
     $229 = $18;
     $230 = ((($229)) + 12|0);
     $231 = HEAP32[$230>>2]|0;
     $232 = HEAP32[$27>>2]|0;
     $233 = (($232) + 1)|0;
     HEAP32[$27>>2] = $233;
     $234 = $20;
     $235 = (($234) + ($232<<2)|0);
     HEAP32[$235>>2] = $231;
    }
    break;
   }
   case 23:  {
    $236 = ((($28)) + 12|0);
    HEAP32[$236>>2] = 1;
    $237 = ((($28)) + 4|0);
    HEAP32[$237>>2] = 0;
    while(1) {
     $238 = HEAP32[$34>>2]|0;
     $239 = (($238) + -1)|0;
     HEAP32[$34>>2] = $239;
     $240 = ($238|0)>(0);
     if (!($240)) {
      continue L1;
     }
     $241 = $18;
     $242 = ((($241)) + 12|0);
     $243 = HEAP32[$242>>2]|0;
     $244 = HEAP32[$27>>2]|0;
     $245 = (($244) + 1)|0;
     HEAP32[$27>>2] = $245;
     $246 = $20;
     $247 = (($246) + ($244<<2)|0);
     HEAP32[$247>>2] = $243;
    }
    break;
   }
   case 71:  {
    $248 = ((($28)) + 12|0);
    HEAP32[$248>>2] = 2;
    break;
   }
   case 45:  {
    $249 = ((($28)) + 12|0);
    HEAP32[$249>>2] = 0;
    label = 45;
    break;
   }
   case 46: case 38: case 37:  {
    label = 45;
    break;
   }
   default: {
   }
   }
  } while(0);
  if ((label|0) == 45) {
   while(1) {
    label = 0;
    $250 = HEAP32[$34>>2]|0;
    $251 = (($250) + -1)|0;
    HEAP32[$34>>2] = $251;
    $252 = ($250|0)>(0);
    if (!($252)) {
     continue L1;
    }
    $253 = $18;
    $254 = ((($253)) + 12|0);
    $255 = HEAP32[$254>>2]|0;
    $256 = HEAP32[$27>>2]|0;
    $257 = (($256) + 1)|0;
    HEAP32[$27>>2] = $257;
    $258 = $20;
    $259 = (($258) + ($256<<2)|0);
    HEAP32[$259>>2] = $255;
    label = 45;
   }
  }
  $260 = HEAP32[$35>>2]|0;
  switch ($260|0) {
  case 74:  {
   $261 = $14;
   $262 = $15;
   $263 = $17;
   $264 = $18;
   $265 = $20;
   $266 = $22;
   $267 = $23;
   $268 = HEAP32[$35>>2]|0;
   $269 = HEAP32[$36>>2]|0;
   $270 = HEAP32[$38>>2]|0;
   $271 = HEAP32[$39>>2]|0;
   ;HEAP32[$$byval_copy6>>2]=HEAP32[$40>>2]|0;HEAP32[$$byval_copy6+4>>2]=HEAP32[$40+4>>2]|0;HEAP32[$$byval_copy6+8>>2]=HEAP32[$40+8>>2]|0;HEAP32[$$byval_copy6+12>>2]=HEAP32[$40+12>>2]|0;
   $272 = (_back_passDoAction($261,$27,$262,$263,$264,$265,$266,$267,$28,$268,$269,$270,$271,$$byval_copy6)|0);
   $273 = ($272|0)!=(0);
   if (!($273)) {
    label = 49;
    break L1;
   }
   break;
  }
  case 73:  {
   while(1) {
    $274 = HEAP32[$34>>2]|0;
    $275 = (($274) + -1)|0;
    HEAP32[$34>>2] = $275;
    $276 = ($274|0)>(0);
    if (!($276)) {
     break;
    }
    $277 = $18;
    $278 = ((($277)) + 12|0);
    $279 = HEAP32[$278>>2]|0;
    $280 = HEAP32[$27>>2]|0;
    $281 = (($280) + 1)|0;
    HEAP32[$27>>2] = $281;
    $282 = $20;
    $283 = (($282) + ($280<<2)|0);
    HEAP32[$283>>2] = $279;
   }
   $284 = HEAP32[$36>>2]|0;
   $285 = ((($284)) + 46|0);
   $286 = HEAP32[$36>>2]|0;
   $287 = ((($286)) + 42|0);
   $288 = HEAP16[$287>>1]|0;
   $289 = $288 << 16 >> 16;
   $290 = $14;
   $291 = HEAP32[$27>>2]|0;
   $292 = $15;
   $293 = $17;
   $294 = $18;
   $295 = $20;
   $296 = $22;
   $297 = $23;
   $298 = (_putCharacters_364($285,$289,$290,$291,$292,$293,$294,$295,$296,$297,$28)|0);
   $299 = ($298|0)!=(0);
   if (!($299)) {
    break L1;
   }
   break;
  }
  case 117:  {
   $300 = HEAP32[$27>>2]|0;
   $301 = $17;
   $302 = ((($301)) + 4|0);
   $303 = HEAP32[$302>>2]|0;
   $304 = (($303) + ($300<<1)|0);
   $305 = HEAP16[$304>>1]|0;
   $306 = $15;
   $307 = $18;
   $308 = HEAP32[$27>>2]|0;
   $309 = $20;
   $310 = (_undefinedDots($305,$306,$307,$308,$309)|0);
   $311 = ($310|0)!=(0);
   if (!($311)) {
    break L1;
   }
   $312 = HEAP32[$27>>2]|0;
   $313 = (($312) + 1)|0;
   HEAP32[$27>>2] = $313;
   break;
  }
  case 106:  {
   $314 = ((($28)) + 12|0);
   HEAP32[$314>>2] = 1;
   label = 58;
   break;
  }
  case 108:  {
   $315 = ((($28)) + 12|0);
   HEAP32[$315>>2] = 0;
   label = 58;
   break;
  }
  case 61:  {
   HEAP32[$28>>2] = 0;
   $316 = ((($28)) + 4|0);
   HEAP32[$316>>2] = 0;
   $317 = ((($28)) + 12|0);
   HEAP32[$317>>2] = 0;
   $318 = ((($28)) + 16|0);
   HEAP32[$318>>2] = 0;
   label = 58;
   break;
  }
  default: {
   label = 58;
  }
  }
  do {
   if ((label|0) == 58) {
    label = 0;
    $319 = HEAP32[$36>>2]|0;
    $320 = ((($319)) + 42|0);
    $321 = HEAP16[$320>>1]|0;
    $322 = ($321<<16>>16)!=(0);
    if ($322) {
     $323 = HEAP32[$36>>2]|0;
     $324 = ((($323)) + 46|0);
     $325 = HEAP32[$36>>2]|0;
     $326 = ((($325)) + 44|0);
     $327 = HEAP16[$326>>1]|0;
     $328 = $327 << 16 >> 16;
     $329 = HEAP32[$36>>2]|0;
     $330 = ((($329)) + 42|0);
     $331 = HEAP16[$330>>1]|0;
     $332 = $331 << 16 >> 16;
     $333 = $14;
     $334 = HEAP32[$27>>2]|0;
     $335 = $17;
     $336 = $18;
     $337 = $20;
     $338 = $22;
     $339 = $23;
     $340 = (_back_updatePositions($324,$328,$332,$333,$334,$335,$336,$337,$338,$339,$28)|0);
     $341 = ($340|0)!=(0);
     if (!($341)) {
      break L1;
     }
     $342 = HEAP32[$34>>2]|0;
     $343 = HEAP32[$27>>2]|0;
     $344 = (($343) + ($342))|0;
     HEAP32[$27>>2] = $344;
     break;
    }
    $345 = HEAP32[$27>>2]|0;
    $346 = HEAP32[$34>>2]|0;
    $347 = (($345) + ($346))|0;
    $41 = $347;
    while(1) {
     $348 = HEAP32[$27>>2]|0;
     $349 = $17;
     $350 = ((($349)) + 4|0);
     $351 = HEAP32[$350>>2]|0;
     $352 = (($351) + ($348<<1)|0);
     $353 = HEAP16[$352>>1]|0;
     $354 = $14;
     $355 = HEAP32[$27>>2]|0;
     $356 = $15;
     $357 = $17;
     $358 = $18;
     $359 = $20;
     $360 = $22;
     $361 = $23;
     $362 = (_putCharacter_358($353,$354,$355,$356,$357,$358,$359,$360,$361,$28)|0);
     $363 = ($362|0)!=(0);
     if (!($363)) {
      break L1;
     }
     $364 = HEAP32[$27>>2]|0;
     $365 = (($364) + 1)|0;
     HEAP32[$27>>2] = $365;
     $366 = $41;
     $367 = ($365|0)==($366|0);
     if ($367) {
      break;
     }
    }
   }
  } while(0);
  $368 = HEAP32[$35>>2]|0;
  $$off = (($368) + -93)|0;
  $switch = ($$off>>>0)<(2);
  $369 = $14;
  $370 = HEAP32[$27>>2]|0;
  if ($switch) {
   $371 = $17;
   $372 = $18;
   $373 = $19;
   $374 = $20;
   $375 = $22;
   $376 = $23;
   $377 = (_insertSpace($369,$370,$371,$372,$373,$374,$375,$376,$28)|0);
   $378 = ($377|0)!=(0);
   if (!($378)) {
    break;
   }
  } else {
   $379 = $16;
   $380 = $17;
   _passSelectRule_353($369,$370,$379,$380,$35,$36,$38,$39,$40);
   $381 = HEAP32[$35>>2]|0;
   $382 = ($381|0)==(74);
   if ($382) {
    $383 = $14;
    $384 = $15;
    $385 = $17;
    $386 = $18;
    $387 = $20;
    $388 = $22;
    $389 = $23;
    $390 = HEAP32[$35>>2]|0;
    $391 = HEAP32[$36>>2]|0;
    $392 = HEAP32[$38>>2]|0;
    $393 = HEAP32[$39>>2]|0;
    ;HEAP32[$$byval_copy7>>2]=HEAP32[$40>>2]|0;HEAP32[$$byval_copy7+4>>2]=HEAP32[$40+4>>2]|0;HEAP32[$$byval_copy7+8>>2]=HEAP32[$40+8>>2]|0;HEAP32[$$byval_copy7+12>>2]=HEAP32[$40+12>>2]|0;
    (_back_passDoAction($383,$27,$384,$385,$386,$387,$388,$389,$28,$390,$391,$392,$393,$$byval_copy7)|0);
   }
  }
  $394 = HEAP32[$27>>2]|0;
  $395 = ($394|0)>(0);
  if ($395) {
   $396 = HEAP32[$27>>2]|0;
   $397 = (($396) - 1)|0;
   $398 = $17;
   $399 = ((($398)) + 4|0);
   $400 = HEAP32[$399>>2]|0;
   $401 = (($400) + ($397<<1)|0);
   $402 = HEAP16[$401>>1]|0;
   $403 = $14;
   $404 = (_checkDotsAttr_354($402,1,0,$403)|0);
   $405 = ($404|0)!=(0);
   $406 = HEAP32[$35>>2]|0;
   $407 = ($406|0)!=(94);
   $or$cond = $405 & $407;
   if ($or$cond) {
    $408 = HEAP32[$27>>2]|0;
    $29 = $408;
    $409 = $18;
    $410 = ((($409)) + 12|0);
    $411 = HEAP32[$410>>2]|0;
    $30 = $411;
   }
  }
  $412 = HEAP32[$35>>2]|0;
  $413 = ($412>>>0)>=(83);
  $414 = HEAP32[$35>>2]|0;
  $415 = ($414>>>0)<=(117);
  $or$cond3 = $413 & $415;
  if (!($or$cond3)) {
   $416 = HEAP32[$35>>2]|0;
   $417 = ($416>>>0)>=(62);
   $418 = HEAP32[$35>>2]|0;
   $419 = ($418>>>0)<=(71);
   $or$cond5 = $417 & $419;
   if (!($or$cond5)) {
    continue;
   }
  }
  $420 = HEAP32[$35>>2]|0;
  $31 = $420;
 }
 if ((label|0) == 49) {
  $13 = 0;
  $463 = $13;
  STACKTOP = sp;return ($463|0);
 }
 $421 = $30;
 $422 = ($421|0)!=(0);
 if ($422) {
  $423 = HEAP32[$27>>2]|0;
  $424 = $17;
  $425 = ((($424)) + 8|0);
  $426 = HEAP32[$425>>2]|0;
  $427 = ($423|0)<($426|0);
  if ($427) {
   $428 = HEAP32[$27>>2]|0;
   $429 = $17;
   $430 = ((($429)) + 4|0);
   $431 = HEAP32[$430>>2]|0;
   $432 = (($431) + ($428<<1)|0);
   $433 = HEAP16[$432>>1]|0;
   $434 = $14;
   $435 = (_checkDotsAttr_354($433,1,0,$434)|0);
   $436 = ($435|0)!=(0);
   if (!($436)) {
    $437 = $29;
    HEAP32[$27>>2] = $437;
    $438 = $30;
    $439 = $18;
    $440 = ((($439)) + 12|0);
    HEAP32[$440>>2] = $438;
   }
  }
 }
 $441 = HEAP32[$27>>2]|0;
 $442 = $17;
 $443 = ((($442)) + 8|0);
 $444 = HEAP32[$443>>2]|0;
 $445 = ($441|0)<($444|0);
 L104: do {
  if ($445) {
   while(1) {
    $446 = HEAP32[$27>>2]|0;
    $447 = $17;
    $448 = ((($447)) + 4|0);
    $449 = HEAP32[$448>>2]|0;
    $450 = (($449) + ($446<<1)|0);
    $451 = HEAP16[$450>>1]|0;
    $452 = $14;
    $453 = (_checkDotsAttr_354($451,1,0,$452)|0);
    $454 = ($453|0)!=(0);
    if (!($454)) {
     break L104;
    }
    $455 = HEAP32[$27>>2]|0;
    $456 = (($455) + 1)|0;
    HEAP32[$27>>2] = $456;
    $457 = $17;
    $458 = ((($457)) + 8|0);
    $459 = HEAP32[$458>>2]|0;
    $460 = ($456|0)==($459|0);
    if ($460) {
     break;
    }
   }
  }
 } while(0);
 $461 = HEAP32[$27>>2]|0;
 $462 = $21;
 HEAP32[$462>>2] = $461;
 $13 = 1;
 $463 = $13;
 STACKTOP = sp;return ($463|0);
}
function _makeCorrections_351($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 var $$byval_copy = 0, $$old = 0, $$old1 = 0, $$old2 = 0, $$old3 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $$byval_copy = sp + 152|0;
 $25 = sp + 92|0;
 $27 = sp + 68|0;
 $29 = sp + 60|0;
 $30 = sp + 56|0;
 $31 = sp + 52|0;
 $32 = sp + 48|0;
 $33 = sp + 32|0;
 $13 = $0;
 $14 = $1;
 $15 = $2;
 $16 = $3;
 $17 = $4;
 $18 = $5;
 $19 = $6;
 $20 = $7;
 $21 = $8;
 $22 = $9;
 $23 = $10;
 $24 = $11;
 $26 = 1;
 ;HEAP32[$27>>2]=0|0;HEAP32[$27+4>>2]=0|0;HEAP32[$27+8>>2]=0|0;HEAP32[$27+12>>2]=0|0;HEAP32[$27+16>>2]=0|0;
 $41 = $13;
 $42 = ((($41)) + 524|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)!=(0);
 if (!($44)) {
  $12 = 1;
  $214 = $12;
  STACKTOP = sp;return ($214|0);
 }
 HEAP32[$25>>2] = 0;
 $45 = $17;
 $46 = ((($45)) + 12|0);
 HEAP32[$46>>2] = 0;
 __lou_resetPassVariables();
 while(1) {
  $47 = HEAP32[$25>>2]|0;
  $48 = $16;
  $49 = ((($48)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($47|0)<($50|0);
  if (!($51)) {
   break;
  }
  $52 = HEAP32[$25>>2]|0;
  $28 = $52;
  $53 = $16;
  $54 = ((($53)) + 8|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = HEAP32[$25>>2]|0;
  $57 = (($55) - ($56))|0;
  $34 = $57;
  $58 = HEAP32[$25>>2]|0;
  $59 = $16;
  $60 = ((($59)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($61) + ($58<<1)|0);
  $63 = HEAP16[$62>>1]|0;
  $64 = $13;
  $65 = (_getChar_359($63,$64)|0);
  $35 = $65;
  $37 = 0;
  $66 = $26;
  $67 = ($66|0)!=(0);
  if ($67) {
   $68 = $13;
   $69 = HEAP32[$25>>2]|0;
   $70 = $15;
   $71 = $16;
   $72 = (_findBackPassRule($68,$69,$70,$71,$29,$30,$31,$32,$33)|0);
   $73 = ($72|0)==(0);
   $74 = $37;
   $75 = ($74|0)<(3);
   $or$cond = $73 & $75;
   if ($or$cond) {
    label = 8;
   } else {
    label = 23;
   }
  } else {
   label = 7;
  }
  L10: while(1) {
   if ((label|0) == 7) {
    label = 0;
    $$old = $37;
    $$old1 = ($$old|0)<(3);
    if ($$old1) {
     label = 8;
     continue;
    } else {
     label = 23;
     continue;
    }
   }
   else if ((label|0) == 8) {
    label = 0;
    $38 = 0;
    $39 = 0;
    $76 = $37;
    switch ($76|0) {
    case 0:  {
     $77 = $34;
     $78 = ($77|0)>=(2);
     if ($78) {
      $79 = $13;
      $80 = $35;
      $81 = (_toLowercase_362($79,$80)|0);
      $82 = $81&65535;
      $83 = $82 << 8;
      $39 = $83;
      $84 = HEAP32[$25>>2]|0;
      $85 = (($84) + 1)|0;
      $86 = $16;
      $87 = ((($86)) + 4|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = (($88) + ($85<<1)|0);
      $90 = HEAP16[$89>>1]|0;
      $91 = $13;
      $92 = (_getChar_359($90,$91)|0);
      $36 = $92;
      $93 = $13;
      $94 = $36;
      $95 = (_toLowercase_362($93,$94)|0);
      $96 = $95&65535;
      $97 = $39;
      $98 = (($97) + ($96))|0;
      $39 = $98;
      $99 = $39;
      $100 = (($99>>>0) % 1123)&-1;
      $39 = $100;
      $101 = $39;
      $102 = $13;
      $103 = ((($102)) + 22184|0);
      $104 = (($103) + ($101<<2)|0);
      $105 = HEAP32[$104>>2]|0;
      $38 = $105;
     }
     break;
    }
    case 1:  {
     $106 = $34;
     $107 = ($106|0)>=(1);
     if ($107) {
      $34 = 1;
      $108 = $35;
      $109 = ((($108)) + 16|0);
      $110 = HEAP32[$109>>2]|0;
      $38 = $110;
     }
     break;
    }
    case 2:  {
     HEAP32[$29>>2] = 83;
     $38 = 0;
     break;
    }
    default: {
    }
    }
    while(1) {
     $111 = $38;
     $112 = ($111|0)!=(0);
     if (!($112)) {
      break;
     }
     $113 = $38;
     $114 = $13;
     $115 = ((($114)) + 31168|0);
     $116 = (($115) + ($113<<3)|0);
     HEAP32[$30>>2] = $116;
     $117 = HEAP32[$30>>2]|0;
     $118 = ((($117)) + 36|0);
     $119 = HEAP32[$118>>2]|0;
     HEAP32[$29>>2] = $119;
     $120 = HEAP32[$30>>2]|0;
     $121 = ((($120)) + 42|0);
     $122 = HEAP16[$121>>1]|0;
     $123 = $122 << 16 >> 16;
     $40 = $123;
     $124 = $37;
     $125 = ($124|0)==(1);
     if ($125) {
      $$old2 = HEAP32[$29>>2]|0;
      $$old3 = ($$old2|0)==(75);
      if ($$old3) {
       label = 19;
      }
     } else {
      $126 = $40;
      $127 = $34;
      $128 = ($126|0)<=($127|0);
      if ($128) {
       $129 = HEAP32[$30>>2]|0;
       $130 = ((($129)) + 46|0);
       $131 = HEAP32[$25>>2]|0;
       $132 = $16;
       $133 = ((($132)) + 4|0);
       $134 = HEAP32[$133>>2]|0;
       $135 = (($134) + ($131<<1)|0);
       $136 = $40;
       $137 = $13;
       $138 = (_compareChars_363($130,$135,$136,$137)|0);
       $139 = ($138|0)!=(0);
       $140 = HEAP32[$29>>2]|0;
       $141 = ($140|0)==(75);
       $or$cond4 = $139 & $141;
       if ($or$cond4) {
        label = 19;
       }
      }
     }
     if ((label|0) == 19) {
      label = 0;
      $142 = $13;
      $143 = HEAP32[$25>>2]|0;
      $144 = $16;
      $145 = HEAP32[$29>>2]|0;
      $146 = HEAP32[$30>>2]|0;
      $147 = (_back_passDoTest($142,$143,$144,$145,$146,$31,$32,$33)|0);
      $148 = ($147|0)!=(0);
      if ($148) {
       label = 20;
       break;
      }
     }
     $149 = HEAP32[$30>>2]|0;
     $150 = ((($149)) + 12|0);
     $151 = HEAP32[$150>>2]|0;
     $38 = $151;
    }
    if ((label|0) == 20) {
     label = 0;
     $37 = 4;
    }
    $152 = $37;
    $153 = (($152) + 1)|0;
    $37 = $153;
    label = 7;
    continue;
   }
   else if ((label|0) == 23) {
    label = 0;
    $154 = HEAP32[$29>>2]|0;
    switch ($154|0) {
    case 83:  {
     label = 24;
     break L10;
     break;
    }
    case 75:  {
     label = 26;
     break L10;
     break;
    }
    default: {
     break L10;
    }
    }
   }
  }
  if ((label|0) == 24) {
   label = 0;
   $155 = $17;
   $156 = ((($155)) + 12|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = $17;
   $159 = ((($158)) + 8|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = ($157|0)>=($160|0);
   if ($161) {
    break;
   }
   $162 = $17;
   $163 = ((($162)) + 12|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = HEAP32[$25>>2]|0;
   $166 = $18;
   $167 = (($166) + ($165<<2)|0);
   HEAP32[$167>>2] = $164;
   $168 = HEAP32[$25>>2]|0;
   $169 = (($168) + 1)|0;
   HEAP32[$25>>2] = $169;
   $170 = $16;
   $171 = ((($170)) + 4|0);
   $172 = HEAP32[$171>>2]|0;
   $173 = (($172) + ($168<<1)|0);
   $174 = HEAP16[$173>>1]|0;
   $175 = $17;
   $176 = ((($175)) + 12|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = (($177) + 1)|0;
   HEAP32[$176>>2] = $178;
   $179 = $17;
   $180 = ((($179)) + 4|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = (($181) + ($177<<1)|0);
   HEAP16[$182>>1] = $174;
  }
  else if ((label|0) == 26) {
   label = 0;
   $183 = $22;
   $184 = ($183|0)!=(0|0);
   if ($184) {
    $185 = $23;
    $186 = HEAP32[$185>>2]|0;
    $187 = $24;
    $188 = ($186|0)<($187|0);
    if ($188) {
     $189 = HEAP32[$30>>2]|0;
     $190 = $23;
     $191 = HEAP32[$190>>2]|0;
     $192 = (($191) + 1)|0;
     HEAP32[$190>>2] = $192;
     $193 = $22;
     $194 = (($193) + ($191<<2)|0);
     HEAP32[$194>>2] = $189;
    }
   }
   $195 = $13;
   $196 = $14;
   $197 = $16;
   $198 = $17;
   $199 = $18;
   $200 = $20;
   $201 = $21;
   $202 = HEAP32[$29>>2]|0;
   $203 = HEAP32[$30>>2]|0;
   $204 = HEAP32[$31>>2]|0;
   $205 = HEAP32[$32>>2]|0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$33>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$33+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$33+12>>2]|0;
   $206 = (_back_passDoAction($195,$25,$196,$197,$198,$199,$200,$201,$27,$202,$203,$204,$205,$$byval_copy)|0);
   $207 = ($206|0)!=(0);
   if (!($207)) {
    break;
   }
  }
  $208 = HEAP32[$25>>2]|0;
  $209 = $28;
  $210 = ($208|0)>($209|0);
  $211 = $210&1;
  $26 = $211;
 }
 $212 = HEAP32[$25>>2]|0;
 $213 = $19;
 HEAP32[$213>>2] = $212;
 $12 = 1;
 $214 = $12;
 STACKTOP = sp;return ($214|0);
}
function _translatePass_352($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 var $$byval_copy = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $$byval_copy = sp + 112|0;
 $24 = sp + 60|0;
 $26 = sp + 36|0;
 $28 = sp + 28|0;
 $29 = sp + 24|0;
 $30 = sp + 20|0;
 $31 = sp + 16|0;
 $32 = sp;
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $23 = $11;
 $25 = 1;
 ;HEAP32[$26>>2]=0|0;HEAP32[$26+4>>2]=0|0;HEAP32[$26+8>>2]=0|0;HEAP32[$26+12>>2]=0|0;HEAP32[$26+16>>2]=0|0;
 $33 = $16;
 $34 = ((($33)) + 12|0);
 HEAP32[$34>>2] = 0;
 HEAP32[$24>>2] = 0;
 __lou_resetPassVariables();
 L1: while(1) {
  $35 = HEAP32[$24>>2]|0;
  $36 = $15;
  $37 = ((($36)) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($35|0)<($38|0);
  if (!($39)) {
   break;
  }
  $40 = HEAP32[$24>>2]|0;
  $27 = $40;
  $41 = $25;
  $42 = ($41|0)!=(0);
  if ($42) {
   $43 = $12;
   $44 = HEAP32[$24>>2]|0;
   $45 = $14;
   $46 = $15;
   _passSelectRule_353($43,$44,$45,$46,$28,$29,$30,$31,$32);
  } else {
   HEAP32[$28>>2] = 83;
  }
  $47 = HEAP32[$28>>2]|0;
  switch ($47|0) {
  case 78: case 77: case 76:  {
   $48 = $21;
   $49 = ($48|0)!=(0|0);
   if ($49) {
    $50 = $22;
    $51 = HEAP32[$50>>2]|0;
    $52 = $23;
    $53 = ($51|0)<($52|0);
    if ($53) {
     $54 = HEAP32[$29>>2]|0;
     $55 = $22;
     $56 = HEAP32[$55>>2]|0;
     $57 = (($56) + 1)|0;
     HEAP32[$55>>2] = $57;
     $58 = $21;
     $59 = (($58) + ($56<<2)|0);
     HEAP32[$59>>2] = $54;
    }
   }
   $60 = $12;
   $61 = $13;
   $62 = $15;
   $63 = $16;
   $64 = $17;
   $65 = $19;
   $66 = $20;
   $67 = HEAP32[$28>>2]|0;
   $68 = HEAP32[$29>>2]|0;
   $69 = HEAP32[$30>>2]|0;
   $70 = HEAP32[$31>>2]|0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$32>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$32+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$32+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$32+12>>2]|0;
   $71 = (_back_passDoAction($60,$24,$61,$62,$63,$64,$65,$66,$26,$67,$68,$69,$70,$$byval_copy)|0);
   $72 = ($71|0)!=(0);
   if (!($72)) {
    break L1;
   }
   break;
  }
  case 83:  {
   $73 = $16;
   $74 = ((($73)) + 12|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (($75) + 1)|0;
   $77 = $16;
   $78 = ((($77)) + 8|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ($76|0)>($79|0);
   if ($80) {
    break L1;
   }
   $81 = $16;
   $82 = ((($81)) + 12|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = HEAP32[$24>>2]|0;
   $85 = $17;
   $86 = (($85) + ($84<<2)|0);
   HEAP32[$86>>2] = $83;
   $87 = HEAP32[$24>>2]|0;
   $88 = (($87) + 1)|0;
   HEAP32[$24>>2] = $88;
   $89 = $15;
   $90 = ((($89)) + 4|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = (($91) + ($87<<1)|0);
   $93 = HEAP16[$92>>1]|0;
   $94 = $16;
   $95 = ((($94)) + 12|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = (($96) + 1)|0;
   HEAP32[$95>>2] = $97;
   $98 = $16;
   $99 = ((($98)) + 4|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = (($100) + ($96<<1)|0);
   HEAP16[$101>>1] = $93;
   break;
  }
  default: {
   break L1;
  }
  }
  $102 = HEAP32[$24>>2]|0;
  $103 = $27;
  $104 = ($102|0)>($103|0);
  $105 = $104&1;
  $25 = $105;
 }
 $106 = HEAP32[$24>>2]|0;
 $107 = $15;
 $108 = ((($107)) + 8|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = ($106|0)<($109|0);
 if (!($110)) {
  $126 = HEAP32[$24>>2]|0;
  $127 = $18;
  HEAP32[$127>>2] = $126;
  STACKTOP = sp;return 1;
 }
 while(1) {
  $111 = HEAP32[$24>>2]|0;
  $112 = $15;
  $113 = ((($112)) + 4|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (($114) + ($111<<1)|0);
  $116 = HEAP16[$115>>1]|0;
  $117 = $12;
  $118 = (_checkDotsAttr_354($116,1,0,$117)|0);
  $119 = ($118|0)!=(0);
  if (!($119)) {
   label = 17;
   break;
  }
  $120 = HEAP32[$24>>2]|0;
  $121 = (($120) + 1)|0;
  HEAP32[$24>>2] = $121;
  $122 = $15;
  $123 = ((($122)) + 8|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = ($121|0)==($124|0);
  if ($125) {
   label = 17;
   break;
  }
 }
 if ((label|0) == 17) {
  $126 = HEAP32[$24>>2]|0;
  $127 = $18;
  HEAP32[$127>>2] = $126;
  STACKTOP = sp;return 1;
 }
 return (0)|0;
}
function _passSelectRule_353($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $18 = $9;
 $19 = $10;
 $20 = $11;
 $21 = $12;
 $22 = $13;
 $23 = $14;
 $24 = $15;
 $25 = $16;
 $26 = $17;
 $27 = (_findBackPassRule($18,$19,$20,$21,$22,$23,$24,$25,$26)|0);
 $28 = ($27|0)!=(0);
 if ($28) {
  STACKTOP = sp;return;
 }
 $29 = $13;
 HEAP32[$29>>2] = 83;
 STACKTOP = sp;return;
}
function _back_passDoAction($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $27 = sp + 20|0;
 $15 = $0;
 $16 = $1;
 $17 = $2;
 $18 = $3;
 $19 = $4;
 $20 = $5;
 $21 = $6;
 $22 = $7;
 $23 = $8;
 $24 = $9;
 $25 = $10;
 $26 = $11;
 HEAP32[$27>>2] = $12;
 $33 = $19;
 $34 = ((($33)) + 12|0);
 $35 = HEAP32[$34>>2]|0;
 $29 = $35;
 $36 = ((($13)) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $31 = $37;
 $38 = HEAP32[$13>>2]|0;
 $39 = ((($13)) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $15;
 $42 = $17;
 $43 = $18;
 $44 = $19;
 $45 = $20;
 $46 = $21;
 $47 = $22;
 $48 = $23;
 $49 = $24;
 $50 = (_copyCharacters_357($38,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49)|0);
 $51 = ($50|0)!=(0);
 if (!($51)) {
  $14 = 0;
  $194 = $14;
  STACKTOP = sp;return ($194|0);
 }
 $52 = $19;
 $53 = ((($52)) + 12|0);
 $54 = HEAP32[$53>>2]|0;
 $30 = $54;
 $55 = ((($13)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $28 = $56;
 while(1) {
  $57 = $28;
  $58 = ((($13)) + 8|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($57|0)<($59|0);
  if (!($60)) {
   break;
  }
  $61 = $19;
  $62 = ((($61)) + 12|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $28;
  $65 = $20;
  $66 = (($65) + ($64<<2)|0);
  HEAP32[$66>>2] = $63;
  $67 = $28;
  $68 = (($67) + 1)|0;
  $28 = $68;
 }
 L8: while(1) {
  $69 = HEAP32[$27>>2]|0;
  $70 = $25;
  $71 = ((($70)) + 44|0);
  $72 = HEAP16[$71>>1]|0;
  $73 = $72 << 16 >> 16;
  $74 = ($69|0)<($73|0);
  if (!($74)) {
   label = 22;
   break;
  }
  $75 = HEAP32[$27>>2]|0;
  $76 = $26;
  $77 = (($76) + ($75<<1)|0);
  $78 = HEAP16[$77>>1]|0;
  $79 = $78&65535;
  switch ($79|0) {
  case 64: case 34:  {
   $80 = $19;
   $81 = ((($80)) + 12|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = HEAP32[$27>>2]|0;
   $84 = (($83) + 1)|0;
   $85 = $26;
   $86 = (($85) + ($84<<1)|0);
   $87 = HEAP16[$86>>1]|0;
   $88 = $87&65535;
   $89 = (($82) + ($88))|0;
   $90 = $19;
   $91 = ((($90)) + 8|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = ($89|0)>($92|0);
   if ($93) {
    label = 9;
    break L8;
   }
   $94 = $19;
   $95 = ((($94)) + 12|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = $19;
   $98 = ((($97)) + 4|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = (($99) + ($96<<1)|0);
   $101 = HEAP32[$27>>2]|0;
   $102 = (($101) + 2)|0;
   $103 = $26;
   $104 = (($103) + ($102<<1)|0);
   $105 = HEAP32[$27>>2]|0;
   $106 = (($105) + 1)|0;
   $107 = $26;
   $108 = (($107) + ($106<<1)|0);
   $109 = HEAP16[$108>>1]|0;
   $110 = $109&65535;
   $111 = $110<<1;
   _memcpy(($100|0),($104|0),($111|0))|0;
   $112 = HEAP32[$27>>2]|0;
   $113 = (($112) + 1)|0;
   $114 = $26;
   $115 = (($114) + ($113<<1)|0);
   $116 = HEAP16[$115>>1]|0;
   $117 = $116&65535;
   $118 = $19;
   $119 = ((($118)) + 12|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (($120) + ($117))|0;
   HEAP32[$119>>2] = $121;
   $122 = HEAP32[$27>>2]|0;
   $123 = (($122) + 1)|0;
   $124 = $26;
   $125 = (($124) + ($123<<1)|0);
   $126 = HEAP16[$125>>1]|0;
   $127 = $126&65535;
   $128 = (($127) + 2)|0;
   $129 = HEAP32[$27>>2]|0;
   $130 = (($129) + ($128))|0;
   HEAP32[$27>>2] = $130;
   continue L8;
   break;
  }
  case 37:  {
   $131 = ((($13)) + 4|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = ((($13)) + 8|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = $15;
   $136 = $18;
   $137 = $19;
   $138 = $20;
   $139 = $26;
   $140 = HEAP32[$27>>2]|0;
   $141 = (_back_swapReplace($132,$134,$135,$136,$137,$138,$139,$140)|0);
   $142 = ($141|0)!=(0);
   if (!($142)) {
    label = 12;
    break L8;
   }
   $143 = HEAP32[$27>>2]|0;
   $144 = (($143) + 3)|0;
   HEAP32[$27>>2] = $144;
   continue L8;
   break;
  }
  case 63:  {
   $145 = HEAP32[$27>>2]|0;
   $146 = (($145) + 1)|0;
   HEAP32[$27>>2] = $146;
   continue L8;
   break;
  }
  case 42:  {
   $147 = $30;
   $148 = $29;
   $149 = (($147) - ($148))|0;
   $32 = $149;
   $150 = $32;
   $151 = ($150|0)>(0);
   if ($151) {
    $152 = $29;
    $153 = $19;
    $154 = ((($153)) + 4|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = (($155) + ($152<<1)|0);
    $157 = $30;
    $158 = $19;
    $159 = ((($158)) + 4|0);
    $160 = HEAP32[$159>>2]|0;
    $161 = (($160) + ($157<<1)|0);
    $162 = $32;
    $163 = $162<<1;
    _memmove(($156|0),($161|0),($163|0))|0;
    $164 = $32;
    $165 = $19;
    $166 = ((($165)) + 12|0);
    $167 = HEAP32[$166>>2]|0;
    $168 = (($167) - ($164))|0;
    HEAP32[$166>>2] = $168;
    $169 = $29;
    $30 = $169;
   }
   $170 = ((($13)) + 4|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = ((($13)) + 8|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = $15;
   $175 = $17;
   $176 = $18;
   $177 = $19;
   $178 = $20;
   $179 = $21;
   $180 = $22;
   $181 = $23;
   $182 = $24;
   $183 = (_copyCharacters_357($171,$173,$174,$175,$176,$177,$178,$179,$180,$181,$182)|0);
   $184 = ($183|0)!=(0);
   if (!($184)) {
    label = 18;
    break L8;
   }
   $185 = ((($13)) + 12|0);
   $186 = HEAP32[$185>>2]|0;
   $31 = $186;
   $187 = HEAP32[$27>>2]|0;
   $188 = (($187) + 1)|0;
   HEAP32[$27>>2] = $188;
   continue L8;
   break;
  }
  default: {
   $189 = $26;
   $190 = (__lou_handlePassVariableAction($189,$27)|0);
   $191 = ($190|0)!=(0);
   if ($191) {
    continue L8;
   } else {
    label = 21;
    break L8;
   }
  }
  }
 }
 if ((label|0) == 9) {
  $14 = 0;
  $194 = $14;
  STACKTOP = sp;return ($194|0);
 }
 else if ((label|0) == 12) {
  $14 = 0;
  $194 = $14;
  STACKTOP = sp;return ($194|0);
 }
 else if ((label|0) == 18) {
  $14 = 0;
  $194 = $14;
  STACKTOP = sp;return ($194|0);
 }
 else if ((label|0) == 21) {
  $14 = 0;
  $194 = $14;
  STACKTOP = sp;return ($194|0);
 }
 else if ((label|0) == 22) {
  $192 = $31;
  $193 = $16;
  HEAP32[$193>>2] = $192;
  $14 = 1;
  $194 = $14;
  STACKTOP = sp;return ($194|0);
 }
 return (0)|0;
}
function _checkDotsAttr_354($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $4 = $0;
 $7 = $5;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $2;
 $6 = $3;
 $11 = $4;
 $12 = $11&65535;
 $13 = HEAP16[13351]|0;
 $14 = $13&65535;
 $15 = ($12|0)!=($14|0);
 if ($15) {
  $16 = $4;
  $17 = $6;
  $18 = (_getDots_355($16,$17)|0);
  $19 = ((($18)) + 24|0);
  $20 = $19;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + 4)|0;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = 12944;
  $27 = $26;
  HEAP32[$27>>2] = $22;
  $28 = (($26) + 4)|0;
  $29 = $28;
  HEAP32[$29>>2] = $25;
  $30 = $4;
  HEAP16[13351] = $30;
 }
 $31 = 12944;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = (($31) + 4)|0;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 $37 = $5;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = (($37) + 4)|0;
 $41 = $40;
 $42 = HEAP32[$41>>2]|0;
 $43 = $33 & $39;
 $44 = $36 & $42;
 $45 = ($43|0)!=(0);
 $46 = ($44|0)!=(0);
 $47 = $45 | $46;
 $48 = $47 ? 1 : 0;
 STACKTOP = sp;return ($48|0);
}
function _getDots_355($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = (__lou_charHash($8)|0);
 $5 = $9;
 $10 = $5;
 $11 = $4;
 $12 = ((($11)) + 17652|0);
 $13 = (($12) + ($10<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $6 = $14;
 while(1) {
  $15 = $6;
  $16 = ($15|0)!=(0);
  if (!($16)) {
   label = 6;
   break;
  }
  $17 = $6;
  $18 = $4;
  $19 = ((($18)) + 31168|0);
  $20 = (($19) + ($17<<3)|0);
  $7 = $20;
  $21 = $7;
  $22 = ((($21)) + 44|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23&65535;
  $25 = $3;
  $26 = $25&65535;
  $27 = ($24|0)==($26|0);
  $28 = $7;
  if ($27) {
   label = 4;
   break;
  }
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $6 = $30;
 }
 if ((label|0) == 4) {
  $2 = $28;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 }
 else if ((label|0) == 6) {
  $31 = $3;
  HEAP16[(164)>>1] = $31;
  $2 = 120;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function _copyCharacters_357($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $23 = $22;
 $24 = ($23|0)==(74);
 L1: do {
  if ($24) {
   while(1) {
    $25 = $12;
    $26 = $13;
    $27 = ($25|0)<($26|0);
    if (!($27)) {
     break L1;
    }
    $28 = $12;
    $29 = $16;
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($31) + ($28<<1)|0);
    $33 = HEAP16[$32>>1]|0;
    $34 = $14;
    $35 = $12;
    $36 = $15;
    $37 = $16;
    $38 = $17;
    $39 = $18;
    $40 = $19;
    $41 = $20;
    $42 = $21;
    $43 = (_putCharacter_358($33,$34,$35,$36,$37,$38,$39,$40,$41,$42)|0);
    $44 = ($43|0)!=(0);
    if (!($44)) {
     break;
    }
    $45 = $12;
    $46 = (($45) + 1)|0;
    $12 = $46;
   }
   $11 = 0;
   $89 = $11;
   STACKTOP = sp;return ($89|0);
  } else {
   $47 = $13;
   $48 = $12;
   $49 = ($47|0)>($48|0);
   if ($49) {
    $50 = $17;
    $51 = ((($50)) + 12|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = $13;
    $54 = (($52) + ($53))|0;
    $55 = $12;
    $56 = (($54) - ($55))|0;
    $57 = $17;
    $58 = ((($57)) + 8|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = ($56|0)>($59|0);
    if ($60) {
     $11 = 0;
     $89 = $11;
     STACKTOP = sp;return ($89|0);
    } else {
     while(1) {
      $61 = $13;
      $62 = $12;
      $63 = ($61|0)>($62|0);
      if (!($63)) {
       break L1;
      }
      $64 = $17;
      $65 = ((($64)) + 12|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = $12;
      $68 = $18;
      $69 = (($68) + ($67<<2)|0);
      HEAP32[$69>>2] = $66;
      $70 = $12;
      $71 = $16;
      $72 = ((($71)) + 4|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = (($73) + ($70<<1)|0);
      $75 = HEAP16[$74>>1]|0;
      $76 = $17;
      $77 = ((($76)) + 12|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = $17;
      $80 = ((($79)) + 4|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = (($81) + ($78<<1)|0);
      HEAP16[$82>>1] = $75;
      $83 = $17;
      $84 = ((($83)) + 12|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = (($85) + 1)|0;
      HEAP32[$84>>2] = $86;
      $87 = $12;
      $88 = (($87) + 1)|0;
      $12 = $88;
     }
    }
   }
  }
 } while(0);
 $11 = 1;
 $89 = $11;
 STACKTOP = sp;return ($89|0);
}
function _back_swapReplace($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $21 = 0;
 $22 = 0;
 $27 = $16;
 $28 = (($27) + 1)|0;
 $29 = $15;
 $30 = (($29) + ($28<<1)|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31&65535;
 $33 = $32 << 16;
 $34 = $16;
 $35 = (($34) + 2)|0;
 $36 = $15;
 $37 = (($36) + ($35<<1)|0);
 $38 = HEAP16[$37>>1]|0;
 $39 = $38&65535;
 $40 = $33 | $39;
 $17 = $40;
 $41 = $17;
 $42 = $11;
 $43 = ((($42)) + 31168|0);
 $44 = (($43) + ($41<<3)|0);
 $18 = $44;
 $45 = $18;
 $46 = ((($45)) + 42|0);
 $47 = HEAP16[$46>>1]|0;
 $48 = $47 << 16 >> 16;
 $49 = $18;
 $50 = ((($49)) + 46|0);
 $51 = (($50) + ($48<<1)|0);
 $19 = $51;
 $52 = $9;
 $20 = $52;
 while(1) {
  $53 = $20;
  $54 = $10;
  $55 = ($53|0)<($54|0);
  if (!($55)) {
   label = 19;
   break;
  }
  $24 = 0;
  while(1) {
   $56 = $24;
   $57 = $18;
   $58 = ((($57)) + 42|0);
   $59 = HEAP16[$58>>1]|0;
   $60 = $59 << 16 >> 16;
   $61 = ($56|0)<($60|0);
   if (!($61)) {
    break;
   }
   $62 = $20;
   $63 = $12;
   $64 = ((($63)) + 4|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = (($65) + ($62<<1)|0);
   $67 = HEAP16[$66>>1]|0;
   $68 = $67&65535;
   $69 = $24;
   $70 = $18;
   $71 = ((($70)) + 46|0);
   $72 = (($71) + ($69<<1)|0);
   $73 = HEAP16[$72>>1]|0;
   $74 = $73&65535;
   $75 = ($68|0)==($74|0);
   if ($75) {
    break;
   }
   $76 = $24;
   $77 = (($76) + 1)|0;
   $24 = $77;
  }
  $78 = $24;
  $79 = $18;
  $80 = ((($79)) + 42|0);
  $81 = HEAP16[$80>>1]|0;
  $82 = $81 << 16 >> 16;
  $83 = ($78|0)==($82|0);
  if ($83) {
   label = 8;
   break;
  }
  $85 = $24;
  $86 = $22;
  $87 = ($85|0)>=($86|0);
  if ($87) {
   $88 = $21;
   $25 = $88;
   $89 = $22;
   $23 = $89;
  } else {
   $25 = 0;
   $23 = 0;
  }
  while(1) {
   $90 = $25;
   $91 = $18;
   $92 = ((($91)) + 44|0);
   $93 = HEAP16[$92>>1]|0;
   $94 = $93 << 16 >> 16;
   $95 = ($90|0)<($94|0);
   if (!($95)) {
    break;
   }
   $96 = $23;
   $97 = $24;
   $98 = ($96|0)==($97|0);
   if ($98) {
    label = 14;
    break;
   }
   $140 = $23;
   $141 = (($140) + 1)|0;
   $23 = $141;
   $142 = $25;
   $143 = $19;
   $144 = (($143) + ($142<<1)|0);
   $145 = HEAP16[$144>>1]|0;
   $146 = $145&65535;
   $147 = $25;
   $148 = (($147) + ($146))|0;
   $25 = $148;
  }
  if ((label|0) == 14) {
   label = 0;
   $99 = $25;
   $100 = $19;
   $101 = (($100) + ($99<<1)|0);
   $102 = HEAP16[$101>>1]|0;
   $103 = $102&65535;
   $104 = (($103) - 1)|0;
   $26 = $104;
   $105 = $13;
   $106 = ((($105)) + 12|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $26;
   $109 = (($107) + ($108))|0;
   $110 = $13;
   $111 = ((($110)) + 8|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = ($109|0)>=($112|0);
   if ($113) {
    label = 15;
    break;
   }
   $114 = $13;
   $115 = ((($114)) + 12|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = $20;
   $118 = $14;
   $119 = (($118) + ($117<<2)|0);
   HEAP32[$119>>2] = $116;
   $120 = $13;
   $121 = ((($120)) + 12|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = $13;
   $124 = ((($123)) + 4|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = (($125) + ($122<<1)|0);
   $127 = $25;
   $128 = (($127) + 1)|0;
   $129 = $19;
   $130 = (($129) + ($128<<1)|0);
   $131 = $26;
   $132 = $131<<1;
   _memcpy(($126|0),($130|0),($132|0))|0;
   $133 = $26;
   $134 = $13;
   $135 = ((($134)) + 12|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = (($136) + ($133))|0;
   HEAP32[$135>>2] = $137;
   $138 = $25;
   $21 = $138;
   $139 = $23;
   $22 = $139;
  }
  $149 = $20;
  $150 = (($149) + 1)|0;
  $20 = $150;
 }
 if ((label|0) == 8) {
  $84 = $20;
  $8 = $84;
  $152 = $8;
  STACKTOP = sp;return ($152|0);
 }
 else if ((label|0) == 15) {
  $8 = 0;
  $152 = $8;
  STACKTOP = sp;return ($152|0);
 }
 else if ((label|0) == 19) {
  $151 = $20;
  $8 = $151;
  $152 = $8;
  STACKTOP = sp;return ($152|0);
 }
 return (0)|0;
}
function _putCharacter_358($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $23 = $11;
 $24 = $12;
 $25 = (_getDots_355($23,$24)|0);
 $26 = ((($25)) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 $21 = $27;
 $28 = $21;
 $29 = ($28|0)!=(0);
 if ($29) {
  $30 = $21;
  $31 = $12;
  $32 = ((($31)) + 31168|0);
  $33 = (($32) + ($30<<3)|0);
  $22 = $33;
  $34 = $22;
  $35 = ((($34)) + 46|0);
  $36 = $22;
  $37 = ((($36)) + 44|0);
  $38 = HEAP16[$37>>1]|0;
  $39 = $38 << 16 >> 16;
  $40 = $22;
  $41 = ((($40)) + 42|0);
  $42 = HEAP16[$41>>1]|0;
  $43 = $42 << 16 >> 16;
  $44 = $12;
  $45 = $13;
  $46 = $15;
  $47 = $16;
  $48 = $17;
  $49 = $18;
  $50 = $19;
  $51 = $20;
  $52 = (_back_updatePositions($35,$39,$43,$44,$45,$46,$47,$48,$49,$50,$51)|0);
  $10 = $52;
  $59 = $10;
  STACKTOP = sp;return ($59|0);
 } else {
  $53 = $11;
  $54 = $14;
  $55 = $16;
  $56 = $13;
  $57 = $17;
  $58 = (_undefinedDots($53,$54,$55,$56,$57)|0);
  $10 = $58;
  $59 = $10;
  STACKTOP = sp;return ($59|0);
 }
 return (0)|0;
}
function _back_updatePositions($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $24 = $18;
 $25 = ((($24)) + 12|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $14;
 $28 = (($26) + ($27))|0;
 $29 = $18;
 $30 = ((($29)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($28|0)>($31|0);
 if (!($32)) {
  $33 = $16;
  $34 = $13;
  $35 = (($33) + ($34))|0;
  $36 = $17;
  $37 = ((($36)) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($35|0)>($38|0);
  if (!($39)) {
   $40 = $21;
   $41 = HEAP32[$40>>2]|0;
   $42 = ($41|0)!=(0);
   if (!($42)) {
    $43 = $20;
    $44 = HEAP32[$43>>2]|0;
    $45 = $16;
    $46 = ($44|0)>=($45|0);
    if ($46) {
     $47 = $20;
     $48 = HEAP32[$47>>2]|0;
     $49 = $16;
     $50 = $13;
     $51 = (($49) + ($50))|0;
     $52 = ($48|0)<($51|0);
     if ($52) {
      $53 = $18;
      $54 = ((($53)) + 12|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = $14;
      $57 = (($56|0) / 2)&-1;
      $58 = (($55) + ($57))|0;
      $59 = $20;
      HEAP32[$59>>2] = $58;
      $60 = $21;
      HEAP32[$60>>2] = 1;
     }
    }
   }
   $23 = 0;
   while(1) {
    $61 = $23;
    $62 = $13;
    $63 = ($61|0)<($62|0);
    if (!($63)) {
     break;
    }
    $64 = $18;
    $65 = ((($64)) + 12|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = $16;
    $68 = $23;
    $69 = (($67) + ($68))|0;
    $70 = $19;
    $71 = (($70) + ($69<<2)|0);
    HEAP32[$71>>2] = $66;
    $72 = $23;
    $73 = (($72) + 1)|0;
    $23 = $73;
   }
   $74 = $12;
   $75 = $14;
   $76 = $15;
   $77 = $18;
   $78 = $22;
   $79 = (_putchars($74,$75,$76,$77,$78)|0);
   $11 = $79;
   $80 = $11;
   STACKTOP = sp;return ($80|0);
  }
 }
 $11 = 0;
 $80 = $11;
 STACKTOP = sp;return ($80|0);
}
function _undefinedDots($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $14 = $8;
 $15 = ((($14)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $9;
 $18 = $10;
 $19 = (($18) + ($17<<2)|0);
 HEAP32[$19>>2] = $16;
 $20 = $7;
 $21 = $20 & 128;
 $22 = ($21|0)!=(0);
 if ($22) {
  $5 = 1;
  $54 = $5;
  STACKTOP = sp;return ($54|0);
 }
 $23 = $6;
 $24 = (__lou_unknownDots($23)|0);
 $11 = $24;
 $25 = $11;
 $26 = (_strlen($25)|0);
 $12 = $26;
 $27 = $8;
 $28 = ((($27)) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $12;
 $31 = (($29) + ($30))|0;
 $32 = $8;
 $33 = ((($32)) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($31>>>0)>($34>>>0);
 if ($35) {
  $5 = 0;
  $54 = $5;
  STACKTOP = sp;return ($54|0);
 }
 $13 = 0;
 while(1) {
  $36 = $13;
  $37 = $12;
  $38 = ($36>>>0)<($37>>>0);
  if (!($38)) {
   break;
  }
  $39 = $13;
  $40 = $11;
  $41 = (($40) + ($39)|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42 << 24 >> 24;
  $44 = $8;
  $45 = ((($44)) + 12|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + 1)|0;
  HEAP32[$45>>2] = $47;
  $48 = $8;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + ($46<<1)|0);
  HEAP16[$51>>1] = $43;
  $52 = $13;
  $53 = (($52) + 1)|0;
  $13 = $53;
 }
 $5 = 1;
 $54 = $5;
 STACKTOP = sp;return ($54|0);
}
function _putchars($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = 0;
 $12 = $7;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = $9;
  $15 = ((($14)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $7;
  $18 = (($16) + ($17))|0;
  $19 = $9;
  $20 = ((($19)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($18|0)>($21|0);
  if (!($22)) {
   $23 = $10;
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)!=(0);
   if ($25) {
    $26 = $8;
    $27 = $11;
    $28 = (($27) + 1)|0;
    $11 = $28;
    $29 = $6;
    $30 = (($29) + ($27<<1)|0);
    $31 = HEAP16[$30>>1]|0;
    $32 = $8;
    $33 = (_getChar_359($31,$32)|0);
    $34 = (_toUppercase($26,$33)|0);
    $35 = $9;
    $36 = ((($35)) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($37) + 1)|0;
    HEAP32[$36>>2] = $38;
    $39 = $9;
    $40 = ((($39)) + 4|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($41) + ($37<<1)|0);
    HEAP16[$42>>1] = $34;
    $43 = $10;
    HEAP32[$43>>2] = 0;
   }
   $44 = $10;
   $45 = ((($44)) + 4|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)!=(0);
   if ($47) {
    label = 9;
   } else {
    $48 = $10;
    $49 = ((($48)) + 8|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($50|0)!=(0);
    if ($51) {
     label = 9;
    } else {
     $52 = $9;
     $53 = ((($52)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = $9;
     $56 = ((($55)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = (($57) + ($54<<1)|0);
     $59 = $11;
     $60 = $6;
     $61 = (($60) + ($59<<1)|0);
     $62 = $7;
     $63 = $11;
     $64 = (($62) - ($63))|0;
     $65 = $64<<1;
     _memcpy(($58|0),($61|0),($65|0))|0;
     $66 = $7;
     $67 = $11;
     $68 = (($66) - ($67))|0;
     $69 = $9;
     $70 = ((($69)) + 12|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = (($71) + ($68))|0;
     HEAP32[$70>>2] = $72;
    }
   }
   L10: do {
    if ((label|0) == 9) {
     while(1) {
      label = 0;
      $73 = $11;
      $74 = $7;
      $75 = ($73|0)<($74|0);
      if (!($75)) {
       break L10;
      }
      $76 = $8;
      $77 = $11;
      $78 = $6;
      $79 = (($78) + ($77<<1)|0);
      $80 = HEAP16[$79>>1]|0;
      $81 = $8;
      $82 = (_getChar_359($80,$81)|0);
      $83 = (_toUppercase($76,$82)|0);
      $84 = $9;
      $85 = ((($84)) + 12|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = (($86) + 1)|0;
      HEAP32[$85>>2] = $87;
      $88 = $9;
      $89 = ((($88)) + 4|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = (($90) + ($86<<1)|0);
      HEAP16[$91>>1] = $83;
      $92 = $11;
      $93 = (($92) + 1)|0;
      $11 = $93;
      label = 9;
     }
    }
   } while(0);
   $5 = 1;
   $94 = $5;
   STACKTOP = sp;return ($94|0);
  }
 }
 $5 = 0;
 $94 = $5;
 STACKTOP = sp;return ($94|0);
}
function _getChar_359($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = (__lou_charHash($8)|0);
 $5 = $9;
 $10 = $5;
 $11 = $4;
 $12 = ((($11)) + 13160|0);
 $13 = (($12) + ($10<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $6 = $14;
 while(1) {
  $15 = $6;
  $16 = ($15|0)!=(0);
  if (!($16)) {
   label = 6;
   break;
  }
  $17 = $6;
  $18 = $4;
  $19 = ((($18)) + 31168|0);
  $20 = (($19) + ($17<<3)|0);
  $7 = $20;
  $21 = $7;
  $22 = ((($21)) + 44|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23&65535;
  $25 = $3;
  $26 = $25&65535;
  $27 = ($24|0)==($26|0);
  $28 = $7;
  if ($27) {
   label = 4;
   break;
  }
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $6 = $30;
 }
 if ((label|0) == 4) {
  $2 = $28;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 }
 else if ((label|0) == 6) {
  $31 = $3;
  HEAP16[(220)>>1] = $31;
  $2 = 176;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function _toUppercase($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $5 = $6;
 $7 = $5;
 $8 = ((($7)) + 48|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = $5;
  $12 = ((($11)) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $3;
  $15 = ((($14)) + 31168|0);
  $16 = (($15) + ($13<<3)|0);
  $5 = $16;
 }
 while(1) {
  $17 = $5;
  $18 = ((($17)) + 52|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)!=(0);
  if (!($20)) {
   label = 6;
   break;
  }
  $21 = $5;
  $22 = ((($21)) + 52|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $3;
  $25 = ((($24)) + 31168|0);
  $26 = (($25) + ($23<<3)|0);
  $5 = $26;
  $27 = $5;
  $28 = ((($27)) + 32|0);
  $29 = $28;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $32 = (($29) + 4)|0;
  $33 = $32;
  $34 = HEAP32[$33>>2]|0;
  $35 = $4;
  $36 = ((($35)) + 32|0);
  $37 = $36;
  $38 = $37;
  $39 = HEAP32[$38>>2]|0;
  $40 = (($37) + 4)|0;
  $41 = $40;
  $42 = HEAP32[$41>>2]|0;
  $43 = $39 | 16;
  $44 = $31 & $43;
  $45 = $34 & $42;
  $46 = $4;
  $47 = ((($46)) + 32|0);
  $48 = $47;
  $49 = $48;
  $50 = HEAP32[$49>>2]|0;
  $51 = (($48) + 4)|0;
  $52 = $51;
  $53 = HEAP32[$52>>2]|0;
  $54 = $50 | 16;
  $55 = ($44|0)==($54|0);
  $56 = ($45|0)==($53|0);
  $57 = $55 & $56;
  if ($57) {
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  $58 = $5;
  $59 = ((($58)) + 44|0);
  $60 = HEAP16[$59>>1]|0;
  $2 = $60;
  $64 = $2;
  STACKTOP = sp;return ($64|0);
 }
 else if ((label|0) == 6) {
  $61 = $4;
  $62 = ((($61)) + 44|0);
  $63 = HEAP16[$62>>1]|0;
  $2 = $63;
  $64 = $2;
  STACKTOP = sp;return ($64|0);
 }
 return (0)|0;
}
function _findBackPassRule($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $20 = $12;
 $21 = $10;
 $22 = ((($21)) + 22164|0);
 $23 = (($22) + ($20<<2)|0);
 $24 = HEAP32[$23>>2]|0;
 $19 = $24;
 while(1) {
  $25 = $19;
  $26 = ($25|0)!=(0);
  if (!($26)) {
   label = 12;
   break;
  }
  $27 = $19;
  $28 = $10;
  $29 = ((($28)) + 31168|0);
  $30 = (($29) + ($27<<3)|0);
  $31 = $15;
  HEAP32[$31>>2] = $30;
  $32 = $15;
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($33)) + 36|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $14;
  HEAP32[$36>>2] = $35;
  $37 = $14;
  $38 = HEAP32[$37>>2]|0;
  switch ($38|0) {
  case 75:  {
   $39 = $12;
   $40 = ($39|0)!=(0);
   if (!($40)) {
    label = 9;
   }
   break;
  }
  case 74:  {
   $41 = $12;
   $42 = ($41|0)!=(1);
   if (!($42)) {
    label = 9;
   }
   break;
  }
  case 76:  {
   $43 = $12;
   $44 = ($43|0)!=(2);
   if (!($44)) {
    label = 9;
   }
   break;
  }
  case 77:  {
   $45 = $12;
   $46 = ($45|0)!=(3);
   if (!($46)) {
    label = 9;
   }
   break;
  }
  case 78:  {
   $47 = $12;
   $48 = ($47|0)!=(4);
   if (!($48)) {
    label = 9;
   }
   break;
  }
  default: {
  }
  }
  if ((label|0) == 9) {
   label = 0;
   $49 = $10;
   $50 = $11;
   $51 = $13;
   $52 = $14;
   $53 = HEAP32[$52>>2]|0;
   $54 = $15;
   $55 = HEAP32[$54>>2]|0;
   $56 = $16;
   $57 = $17;
   $58 = $18;
   $59 = (_back_passDoTest($49,$50,$51,$53,$55,$56,$57,$58)|0);
   $60 = ($59|0)!=(0);
   if ($60) {
    label = 10;
    break;
   }
  }
  $61 = $15;
  $62 = HEAP32[$61>>2]|0;
  $63 = ((($62)) + 12|0);
  $64 = HEAP32[$63>>2]|0;
  $19 = $64;
 }
 if ((label|0) == 10) {
  $9 = 1;
  $65 = $9;
  STACKTOP = sp;return ($65|0);
 }
 else if ((label|0) == 12) {
  $9 = 0;
  $65 = $9;
  STACKTOP = sp;return ($65|0);
 }
 return (0)|0;
}
function _back_passDoTest($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $10 = sp + 48|0;
 $20 = sp;
 $21 = sp + 8|0;
 $9 = $0;
 HEAP32[$10>>2] = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $19 = 0;
 $22 = $13;
 $23 = ((($22)) + 42|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = $24 << 16 >> 16;
 $26 = $13;
 $27 = ((($26)) + 46|0);
 $28 = (($27) + ($25<<1)|0);
 $29 = $14;
 HEAP32[$29>>2] = $28;
 $30 = $15;
 HEAP32[$30>>2] = 0;
 $31 = HEAP32[$10>>2]|0;
 $32 = $16;
 $33 = ((($32)) + 12|0);
 HEAP32[$33>>2] = $31;
 $34 = $16;
 HEAP32[$34>>2] = $31;
 $35 = $16;
 $36 = ((($35)) + 4|0);
 HEAP32[$36>>2] = -1;
 $37 = $12;
 $38 = ($37|0)==(75);
 if ($38) {
  $18 = 0;
 } else {
  $18 = 1;
 }
 L4: while(1) {
  $39 = $15;
  $40 = HEAP32[$39>>2]|0;
  $41 = $13;
  $42 = ((($41)) + 44|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 << 16 >> 16;
  $45 = ($40|0)<($44|0);
  if (!($45)) {
   label = 51;
   break;
  }
  HEAP32[$21>>2] = 1;
  $46 = HEAP32[$10>>2]|0;
  $47 = $11;
  $48 = ((($47)) + 8|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($46|0)>($49|0);
  if ($50) {
   label = 6;
   break;
  }
  $51 = $15;
  $52 = HEAP32[$51>>2]|0;
  $53 = $14;
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + ($52<<1)|0);
  $56 = HEAP16[$55>>1]|0;
  $57 = $56&65535;
  do {
   switch ($57|0) {
   case 32:  {
    label = 42;
    break L4;
    break;
   }
   case 96:  {
    $58 = HEAP32[$10>>2]|0;
    $59 = ($58|0)!=(0);
    if ($59) {
     HEAP32[$21>>2] = 0;
    }
    $60 = $15;
    $61 = HEAP32[$60>>2]|0;
    $62 = (($61) + 1)|0;
    HEAP32[$60>>2] = $62;
    break;
   }
   case 126:  {
    $63 = HEAP32[$10>>2]|0;
    $64 = $11;
    $65 = ((($64)) + 8|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($63|0)!=($66|0);
    if ($67) {
     HEAP32[$21>>2] = 0;
    }
    $68 = $15;
    $69 = HEAP32[$68>>2]|0;
    $70 = (($69) + 1)|0;
    HEAP32[$68>>2] = $70;
    break;
   }
   case 95:  {
    $71 = $15;
    $72 = HEAP32[$71>>2]|0;
    $73 = (($72) + 1)|0;
    $74 = $14;
    $75 = HEAP32[$74>>2]|0;
    $76 = (($75) + ($73<<1)|0);
    $77 = HEAP16[$76>>1]|0;
    $78 = $77&65535;
    $79 = HEAP32[$10>>2]|0;
    $80 = (($79) - ($78))|0;
    HEAP32[$10>>2] = $80;
    $81 = HEAP32[$10>>2]|0;
    $82 = ($81|0)<(0);
    if ($82) {
     HEAP32[$10>>2] = 0;
     HEAP32[$21>>2] = 0;
    }
    $83 = $15;
    $84 = HEAP32[$83>>2]|0;
    $85 = (($84) + 2)|0;
    HEAP32[$83>>2] = $85;
    break;
   }
   case 33:  {
    $86 = $19;
    $87 = ($86|0)!=(0);
    $88 = $87 ^ 1;
    $89 = $88&1;
    $19 = $89;
    $90 = $15;
    $91 = HEAP32[$90>>2]|0;
    $92 = (($91) + 1)|0;
    HEAP32[$90>>2] = $92;
    continue L4;
    break;
   }
   case 64: case 34:  {
    $93 = $11;
    $94 = HEAP32[$10>>2]|0;
    $95 = $14;
    $96 = HEAP32[$95>>2]|0;
    $97 = $15;
    $98 = HEAP32[$97>>2]|0;
    $99 = (_matchCurrentInput_361($93,$94,$96,$98)|0);
    HEAP32[$21>>2] = $99;
    $100 = $15;
    $101 = HEAP32[$100>>2]|0;
    $102 = (($101) + 1)|0;
    $103 = $14;
    $104 = HEAP32[$103>>2]|0;
    $105 = (($104) + ($102<<1)|0);
    $106 = HEAP16[$105>>1]|0;
    $107 = $106&65535;
    $108 = HEAP32[$10>>2]|0;
    $109 = (($108) + ($107))|0;
    HEAP32[$10>>2] = $109;
    $110 = $15;
    $111 = HEAP32[$110>>2]|0;
    $112 = (($111) + 1)|0;
    $113 = $14;
    $114 = HEAP32[$113>>2]|0;
    $115 = (($114) + ($112<<1)|0);
    $116 = HEAP16[$115>>1]|0;
    $117 = $116&65535;
    $118 = (($117) + 2)|0;
    $119 = $15;
    $120 = HEAP32[$119>>2]|0;
    $121 = (($120) + ($118))|0;
    HEAP32[$119>>2] = $121;
    break;
   }
   case 91:  {
    $122 = HEAP32[$10>>2]|0;
    $123 = $16;
    $124 = ((($123)) + 4|0);
    HEAP32[$124>>2] = $122;
    $125 = $15;
    $126 = HEAP32[$125>>2]|0;
    $127 = (($126) + 1)|0;
    HEAP32[$125>>2] = $127;
    break;
   }
   case 93:  {
    $128 = HEAP32[$10>>2]|0;
    $129 = $16;
    $130 = ((($129)) + 8|0);
    HEAP32[$130>>2] = $128;
    $131 = $15;
    $132 = HEAP32[$131>>2]|0;
    $133 = (($132) + 1)|0;
    HEAP32[$131>>2] = $133;
    break;
   }
   case 36:  {
    $134 = $15;
    $135 = HEAP32[$134>>2]|0;
    $136 = (($135) + 1)|0;
    $137 = $14;
    $138 = HEAP32[$137>>2]|0;
    $139 = (($138) + ($136<<1)|0);
    $140 = HEAP16[$139>>1]|0;
    $141 = $140&65535;
    $142 = $20;
    $143 = $142;
    HEAP32[$143>>2] = $141;
    $144 = (($142) + 4)|0;
    $145 = $144;
    HEAP32[$145>>2] = 0;
    $146 = $20;
    $147 = $146;
    $148 = HEAP32[$147>>2]|0;
    $149 = (($146) + 4)|0;
    $150 = $149;
    $151 = HEAP32[$150>>2]|0;
    $152 = (_bitshift64Shl(($148|0),($151|0),16)|0);
    $153 = tempRet0;
    $154 = $20;
    $155 = $154;
    HEAP32[$155>>2] = $152;
    $156 = (($154) + 4)|0;
    $157 = $156;
    HEAP32[$157>>2] = $153;
    $158 = $15;
    $159 = HEAP32[$158>>2]|0;
    $160 = (($159) + 2)|0;
    $161 = $14;
    $162 = HEAP32[$161>>2]|0;
    $163 = (($162) + ($160<<1)|0);
    $164 = HEAP16[$163>>1]|0;
    $165 = $164&65535;
    $166 = $20;
    $167 = $166;
    $168 = HEAP32[$167>>2]|0;
    $169 = (($166) + 4)|0;
    $170 = $169;
    $171 = HEAP32[$170>>2]|0;
    $172 = $168 | $165;
    $173 = $20;
    $174 = $173;
    HEAP32[$174>>2] = $172;
    $175 = (($173) + 4)|0;
    $176 = $175;
    HEAP32[$176>>2] = $171;
    $177 = $20;
    $178 = $177;
    $179 = HEAP32[$178>>2]|0;
    $180 = (($177) + 4)|0;
    $181 = $180;
    $182 = HEAP32[$181>>2]|0;
    $183 = (_bitshift64Shl(($179|0),($182|0),16)|0);
    $184 = tempRet0;
    $185 = $20;
    $186 = $185;
    HEAP32[$186>>2] = $183;
    $187 = (($185) + 4)|0;
    $188 = $187;
    HEAP32[$188>>2] = $184;
    $189 = $15;
    $190 = HEAP32[$189>>2]|0;
    $191 = (($190) + 3)|0;
    $192 = $14;
    $193 = HEAP32[$192>>2]|0;
    $194 = (($193) + ($191<<1)|0);
    $195 = HEAP16[$194>>1]|0;
    $196 = $195&65535;
    $197 = $20;
    $198 = $197;
    $199 = HEAP32[$198>>2]|0;
    $200 = (($197) + 4)|0;
    $201 = $200;
    $202 = HEAP32[$201>>2]|0;
    $203 = $199 | $196;
    $204 = $20;
    $205 = $204;
    HEAP32[$205>>2] = $203;
    $206 = (($204) + 4)|0;
    $207 = $206;
    HEAP32[$207>>2] = $202;
    $208 = $20;
    $209 = $208;
    $210 = HEAP32[$209>>2]|0;
    $211 = (($208) + 4)|0;
    $212 = $211;
    $213 = HEAP32[$212>>2]|0;
    $214 = (_bitshift64Shl(($210|0),($213|0),16)|0);
    $215 = tempRet0;
    $216 = $20;
    $217 = $216;
    HEAP32[$217>>2] = $214;
    $218 = (($216) + 4)|0;
    $219 = $218;
    HEAP32[$219>>2] = $215;
    $220 = $15;
    $221 = HEAP32[$220>>2]|0;
    $222 = (($221) + 4)|0;
    $223 = $14;
    $224 = HEAP32[$223>>2]|0;
    $225 = (($224) + ($222<<1)|0);
    $226 = HEAP16[$225>>1]|0;
    $227 = $226&65535;
    $228 = $20;
    $229 = $228;
    $230 = HEAP32[$229>>2]|0;
    $231 = (($228) + 4)|0;
    $232 = $231;
    $233 = HEAP32[$232>>2]|0;
    $234 = $230 | $227;
    $235 = $20;
    $236 = $235;
    HEAP32[$236>>2] = $234;
    $237 = (($235) + 4)|0;
    $238 = $237;
    HEAP32[$238>>2] = $233;
    $17 = 0;
    while(1) {
     $239 = $17;
     $240 = $15;
     $241 = HEAP32[$240>>2]|0;
     $242 = (($241) + 5)|0;
     $243 = $14;
     $244 = HEAP32[$243>>2]|0;
     $245 = (($244) + ($242<<1)|0);
     $246 = HEAP16[$245>>1]|0;
     $247 = $246&65535;
     $248 = ($239|0)<($247|0);
     if (!($248)) {
      break;
     }
     $249 = HEAP32[$10>>2]|0;
     $250 = $11;
     $251 = ((($250)) + 8|0);
     $252 = HEAP32[$251>>2]|0;
     $253 = ($249|0)>=($252|0);
     if ($253) {
      label = 24;
      break;
     }
     $254 = $18;
     $255 = ($254|0)!=(0);
     $256 = HEAP32[$10>>2]|0;
     $257 = $11;
     $258 = ((($257)) + 4|0);
     $259 = HEAP32[$258>>2]|0;
     $260 = (($259) + ($256<<1)|0);
     $261 = HEAP16[$260>>1]|0;
     $262 = $9;
     if ($255) {
      $263 = (_getDots_355($261,$262)|0);
      $266 = $263;
     } else {
      $264 = (_getChar_359($261,$262)|0);
      $266 = $264;
     }
     $265 = ((($266)) + 24|0);
     $267 = $265;
     $268 = $267;
     $269 = HEAP32[$268>>2]|0;
     $270 = (($267) + 4)|0;
     $271 = $270;
     $272 = HEAP32[$271>>2]|0;
     $273 = $20;
     $274 = $273;
     $275 = HEAP32[$274>>2]|0;
     $276 = (($273) + 4)|0;
     $277 = $276;
     $278 = HEAP32[$277>>2]|0;
     $279 = $269 & $275;
     $280 = $272 & $278;
     $281 = ($279|0)!=(0);
     $282 = ($280|0)!=(0);
     $283 = $281 | $282;
     if (!($283)) {
      label = 29;
      break;
     }
     $284 = HEAP32[$10>>2]|0;
     $285 = (($284) + 1)|0;
     HEAP32[$10>>2] = $285;
     $286 = $17;
     $287 = (($286) + 1)|0;
     $17 = $287;
    }
    if ((label|0) == 24) {
     label = 0;
     HEAP32[$21>>2] = 0;
    }
    else if ((label|0) == 29) {
     label = 0;
     HEAP32[$21>>2] = 0;
    }
    $288 = HEAP32[$21>>2]|0;
    $289 = ($288|0)!=(0);
    L40: do {
     if ($289) {
      $290 = $15;
      $291 = HEAP32[$290>>2]|0;
      $292 = (($291) + 5)|0;
      $293 = $14;
      $294 = HEAP32[$293>>2]|0;
      $295 = (($294) + ($292<<1)|0);
      $296 = HEAP16[$295>>1]|0;
      $297 = $296&65535;
      $17 = $297;
      while(1) {
       $298 = $17;
       $299 = $15;
       $300 = HEAP32[$299>>2]|0;
       $301 = (($300) + 6)|0;
       $302 = $14;
       $303 = HEAP32[$302>>2]|0;
       $304 = (($303) + ($301<<1)|0);
       $305 = HEAP16[$304>>1]|0;
       $306 = $305&65535;
       $307 = ($298|0)<($306|0);
       if (!($307)) {
        break L40;
       }
       $308 = HEAP32[$10>>2]|0;
       $309 = $11;
       $310 = ((($309)) + 8|0);
       $311 = HEAP32[$310>>2]|0;
       $312 = ($308|0)<($311|0);
       if (!($312)) {
        break L40;
       }
       $313 = $18;
       $314 = ($313|0)!=(0);
       $315 = HEAP32[$10>>2]|0;
       $316 = $11;
       $317 = ((($316)) + 4|0);
       $318 = HEAP32[$317>>2]|0;
       $319 = (($318) + ($315<<1)|0);
       $320 = HEAP16[$319>>1]|0;
       $321 = $9;
       if ($314) {
        $322 = (_getDots_355($320,$321)|0);
        $325 = $322;
       } else {
        $323 = (_getChar_359($320,$321)|0);
        $325 = $323;
       }
       $324 = ((($325)) + 24|0);
       $326 = $324;
       $327 = $326;
       $328 = HEAP32[$327>>2]|0;
       $329 = (($326) + 4)|0;
       $330 = $329;
       $331 = HEAP32[$330>>2]|0;
       $332 = $20;
       $333 = $332;
       $334 = HEAP32[$333>>2]|0;
       $335 = (($332) + 4)|0;
       $336 = $335;
       $337 = HEAP32[$336>>2]|0;
       $338 = $328 & $334;
       $339 = $331 & $337;
       $340 = ($338|0)!=(0);
       $341 = ($339|0)!=(0);
       $342 = $340 | $341;
       if (!($342)) {
        break L40;
       }
       $343 = HEAP32[$10>>2]|0;
       $344 = (($343) + 1)|0;
       HEAP32[$10>>2] = $344;
       $345 = $17;
       $346 = (($345) + 1)|0;
       $17 = $346;
      }
     }
    } while(0);
    $347 = $15;
    $348 = HEAP32[$347>>2]|0;
    $349 = (($348) + 7)|0;
    HEAP32[$347>>2] = $349;
    break;
   }
   case 37:  {
    $350 = $9;
    $351 = $11;
    $352 = $14;
    $353 = HEAP32[$352>>2]|0;
    $354 = $15;
    $355 = HEAP32[$354>>2]|0;
    $356 = (_back_swapTest($350,$351,$10,$353,$355)|0);
    HEAP32[$21>>2] = $356;
    $357 = $15;
    $358 = HEAP32[$357>>2]|0;
    $359 = (($358) + 5)|0;
    HEAP32[$357>>2] = $359;
    break;
   }
   default: {
    $379 = $14;
    $380 = HEAP32[$379>>2]|0;
    $381 = $15;
    $382 = (__lou_handlePassVariableTest($380,$381,$21)|0);
    $383 = ($382|0)!=(0);
    if (!($383)) {
     label = 46;
     break L4;
    }
   }
   }
  } while(0);
  $384 = $19;
  $385 = ($384|0)!=(0);
  $386 = HEAP32[$21>>2]|0;
  $387 = ($386|0)!=(0);
  $or$cond = $385 | $387;
  if (!($or$cond)) {
   label = 49;
   break;
  }
  $388 = $19;
  $389 = ($388|0)!=(0);
  $390 = HEAP32[$21>>2]|0;
  $391 = ($390|0)!=(0);
  $or$cond3 = $389 & $391;
  if ($or$cond3) {
   label = 49;
   break;
  }
  $19 = 0;
 }
 if ((label|0) == 6) {
  $8 = 0;
  $392 = $8;
  STACKTOP = sp;return ($392|0);
 }
 else if ((label|0) == 42) {
  $360 = $15;
  $361 = HEAP32[$360>>2]|0;
  $362 = (($361) + 1)|0;
  HEAP32[$360>>2] = $362;
  $363 = HEAP32[$10>>2]|0;
  $364 = $16;
  $365 = ((($364)) + 12|0);
  HEAP32[$365>>2] = $363;
  $366 = $16;
  $367 = ((($366)) + 4|0);
  $368 = HEAP32[$367>>2]|0;
  $369 = ($368|0)==(-1);
  if ($369) {
   $370 = $16;
   $371 = HEAP32[$370>>2]|0;
   $372 = $16;
   $373 = ((($372)) + 4|0);
   HEAP32[$373>>2] = $371;
   $374 = $16;
   $375 = ((($374)) + 12|0);
   $376 = HEAP32[$375>>2]|0;
   $377 = $16;
   $378 = ((($377)) + 8|0);
   HEAP32[$378>>2] = $376;
  }
  $8 = 1;
  $392 = $8;
  STACKTOP = sp;return ($392|0);
 }
 else if ((label|0) == 46) {
  $8 = 0;
  $392 = $8;
  STACKTOP = sp;return ($392|0);
 }
 else if ((label|0) == 49) {
  $8 = 0;
  $392 = $8;
  STACKTOP = sp;return ($392|0);
 }
 else if ((label|0) == 51) {
  $8 = 1;
  $392 = $8;
  STACKTOP = sp;return ($392|0);
 }
 return (0)|0;
}
function _matchCurrentInput_361($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $6;
 $10 = $11;
 $12 = $8;
 $13 = (($12) + 2)|0;
 $9 = $13;
 while(1) {
  $14 = $9;
  $15 = $8;
  $16 = (($15) + 2)|0;
  $17 = $8;
  $18 = (($17) + 1)|0;
  $19 = $7;
  $20 = (($19) + ($18<<1)|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21&65535;
  $23 = (($16) + ($22))|0;
  $24 = ($14|0)<($23|0);
  if (!($24)) {
   label = 6;
   break;
  }
  $25 = $9;
  $26 = $7;
  $27 = (($26) + ($25<<1)|0);
  $28 = HEAP16[$27>>1]|0;
  $29 = $28&65535;
  $30 = $10;
  $31 = (($30) + 1)|0;
  $10 = $31;
  $32 = $5;
  $33 = ((($32)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + ($30<<1)|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = $36&65535;
  $38 = ($29|0)!=($37|0);
  if ($38) {
   label = 4;
   break;
  }
  $39 = $9;
  $40 = (($39) + 1)|0;
  $9 = $40;
 }
 if ((label|0) == 4) {
  $4 = 0;
  $41 = $4;
  STACKTOP = sp;return ($41|0);
 }
 else if ((label|0) == 6) {
  $4 = 1;
  $41 = $4;
  STACKTOP = sp;return ($41|0);
 }
 return (0)|0;
}
function _back_swapTest($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $16 = $8;
 $17 = HEAP32[$16>>2]|0;
 $13 = $17;
 $18 = $10;
 $19 = (($18) + 1)|0;
 $20 = $9;
 $21 = (($20) + ($19<<1)|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = $22&65535;
 $24 = $23 << 16;
 $25 = $10;
 $26 = (($25) + 2)|0;
 $27 = $9;
 $28 = (($27) + ($26<<1)|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = $29&65535;
 $31 = $24 | $30;
 $14 = $31;
 $32 = $14;
 $33 = $6;
 $34 = ((($33)) + 31168|0);
 $35 = (($34) + ($32<<3)|0);
 $15 = $35;
 $11 = 0;
 while(1) {
  $36 = $11;
  $37 = $10;
  $38 = $9;
  $39 = (($38) + ($37<<1)|0);
  $40 = HEAP16[$39>>1]|0;
  $41 = $40&65535;
  $42 = (($41) + 3)|0;
  $43 = ($36|0)<($42|0);
  if (!($43)) {
   break;
  }
  $12 = 0;
  while(1) {
   $44 = $12;
   $45 = $15;
   $46 = ((($45)) + 42|0);
   $47 = HEAP16[$46>>1]|0;
   $48 = $47 << 16 >> 16;
   $49 = ($44|0)<($48|0);
   if (!($49)) {
    break;
   }
   $50 = $13;
   $51 = $7;
   $52 = ((($51)) + 4|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (($53) + ($50<<1)|0);
   $55 = HEAP16[$54>>1]|0;
   $56 = $55&65535;
   $57 = $12;
   $58 = $15;
   $59 = ((($58)) + 46|0);
   $60 = (($59) + ($57<<1)|0);
   $61 = HEAP16[$60>>1]|0;
   $62 = $61&65535;
   $63 = ($56|0)==($62|0);
   if ($63) {
    break;
   }
   $64 = $12;
   $65 = (($64) + 1)|0;
   $12 = $65;
  }
  $66 = $12;
  $67 = $15;
  $68 = ((($67)) + 42|0);
  $69 = HEAP16[$68>>1]|0;
  $70 = $69 << 16 >> 16;
  $71 = ($66|0)==($70|0);
  if ($71) {
   label = 8;
   break;
  }
  $72 = $13;
  $73 = (($72) + 1)|0;
  $13 = $73;
  $74 = $11;
  $75 = (($74) + 1)|0;
  $11 = $75;
 }
 if ((label|0) == 8) {
  $5 = 0;
  $141 = $5;
  STACKTOP = sp;return ($141|0);
 }
 $76 = $10;
 $77 = (($76) + 2)|0;
 $78 = $9;
 $79 = (($78) + ($77<<1)|0);
 $80 = HEAP16[$79>>1]|0;
 $81 = $80&65535;
 $82 = $10;
 $83 = (($82) + 3)|0;
 $84 = $9;
 $85 = (($84) + ($83<<1)|0);
 $86 = HEAP16[$85>>1]|0;
 $87 = $86&65535;
 $88 = ($81|0)==($87|0);
 if ($88) {
  $89 = $13;
  $90 = $8;
  HEAP32[$90>>2] = $89;
  $5 = 1;
  $141 = $5;
  STACKTOP = sp;return ($141|0);
 }
 while(1) {
  $91 = $11;
  $92 = $10;
  $93 = (($92) + 4)|0;
  $94 = $9;
  $95 = (($94) + ($93<<1)|0);
  $96 = HEAP16[$95>>1]|0;
  $97 = $96&65535;
  $98 = ($91|0)<($97|0);
  if (!($98)) {
   label = 21;
   break;
  }
  $12 = 0;
  while(1) {
   $99 = $12;
   $100 = $15;
   $101 = ((($100)) + 42|0);
   $102 = HEAP16[$101>>1]|0;
   $103 = $102 << 16 >> 16;
   $104 = ($99|0)<($103|0);
   if (!($104)) {
    break;
   }
   $105 = $13;
   $106 = $7;
   $107 = ((($106)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = (($108) + ($105<<1)|0);
   $110 = HEAP16[$109>>1]|0;
   $111 = $110&65535;
   $112 = $12;
   $113 = $15;
   $114 = ((($113)) + 46|0);
   $115 = (($114) + ($112<<1)|0);
   $116 = HEAP16[$115>>1]|0;
   $117 = $116&65535;
   $118 = ($111|0)!=($117|0);
   if ($118) {
    break;
   }
   $119 = $12;
   $120 = (($119) + 1)|0;
   $12 = $120;
  }
  $121 = $12;
  $122 = $15;
  $123 = ((($122)) + 42|0);
  $124 = HEAP16[$123>>1]|0;
  $125 = $124 << 16 >> 16;
  $126 = ($121|0)<($125|0);
  if ($126) {
   $127 = $12;
   $128 = $15;
   $129 = ((($128)) + 42|0);
   $130 = HEAP16[$129>>1]|0;
   $131 = $130 << 16 >> 16;
   $132 = ($127|0)<($131|0);
   if ($132) {
    label = 19;
    break;
   }
  }
  $135 = $13;
  $136 = (($135) + 1)|0;
  $13 = $136;
  $137 = $11;
  $138 = (($137) + 1)|0;
  $11 = $138;
 }
 if ((label|0) == 19) {
  $133 = $13;
  $134 = $8;
  HEAP32[$134>>2] = $133;
  $5 = 1;
  $141 = $5;
  STACKTOP = sp;return ($141|0);
 }
 else if ((label|0) == 21) {
  $139 = $13;
  $140 = $8;
  HEAP32[$140>>2] = $139;
  $5 = 1;
  $141 = $5;
  STACKTOP = sp;return ($141|0);
 }
 return (0)|0;
}
function _toLowercase_362($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = ((($6)) + 32|0);
 $8 = $7;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = $10 & 16;
 $15 = ($14|0)!=(0);
 $16 = (0)!=(0);
 $17 = $15 | $16;
 L1: do {
  if ($17) {
   $18 = $4;
   $5 = $18;
   $19 = $5;
   $20 = ((($19)) + 48|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)!=(0);
   if ($22) {
    $23 = $5;
    $24 = ((($23)) + 48|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $3;
    $27 = ((($26)) + 31168|0);
    $28 = (($27) + ($25<<3)|0);
    $5 = $28;
   }
   while(1) {
    $29 = $5;
    $30 = ((($29)) + 32|0);
    $31 = $30;
    $32 = $31;
    $33 = HEAP32[$32>>2]|0;
    $34 = (($31) + 4)|0;
    $35 = $34;
    $36 = HEAP32[$35>>2]|0;
    $37 = $4;
    $38 = ((($37)) + 32|0);
    $39 = $38;
    $40 = $39;
    $41 = HEAP32[$40>>2]|0;
    $42 = (($39) + 4)|0;
    $43 = $42;
    $44 = HEAP32[$43>>2]|0;
    $45 = $41 & -17;
    $46 = $33 & $45;
    $47 = $36 & $44;
    $48 = $4;
    $49 = ((($48)) + 32|0);
    $50 = $49;
    $51 = $50;
    $52 = HEAP32[$51>>2]|0;
    $53 = (($50) + 4)|0;
    $54 = $53;
    $55 = HEAP32[$54>>2]|0;
    $56 = $52 & -17;
    $57 = ($46|0)==($56|0);
    $58 = ($47|0)==($55|0);
    $59 = $57 & $58;
    $60 = $5;
    if ($59) {
     break;
    }
    $63 = ((($60)) + 52|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = ($64|0)!=(0);
    if (!($65)) {
     break L1;
    }
    $66 = $5;
    $67 = ((($66)) + 52|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = $3;
    $70 = ((($69)) + 31168|0);
    $71 = (($70) + ($68<<3)|0);
    $5 = $71;
   }
   $61 = ((($60)) + 44|0);
   $62 = HEAP16[$61>>1]|0;
   $2 = $62;
   $75 = $2;
   STACKTOP = sp;return ($75|0);
  }
 } while(0);
 $72 = $4;
 $73 = ((($72)) + 44|0);
 $74 = HEAP16[$73>>1]|0;
 $2 = $74;
 $75 = $2;
 STACKTOP = sp;return ($75|0);
}
function _compareChars_363($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $7;
 $11 = ($10|0)!=(0);
 if (!($11)) {
  $4 = 0;
  $36 = $4;
  STACKTOP = sp;return ($36|0);
 }
 $9 = 0;
 while(1) {
  $12 = $9;
  $13 = $7;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   label = 8;
   break;
  }
  $15 = $8;
  $16 = $9;
  $17 = $5;
  $18 = (($17) + ($16<<1)|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = $8;
  $21 = (_getChar_359($19,$20)|0);
  $22 = (_toLowercase_362($15,$21)|0);
  $23 = $22&65535;
  $24 = $8;
  $25 = $9;
  $26 = $6;
  $27 = (($26) + ($25<<1)|0);
  $28 = HEAP16[$27>>1]|0;
  $29 = $8;
  $30 = (_getChar_359($28,$29)|0);
  $31 = (_toLowercase_362($24,$30)|0);
  $32 = $31&65535;
  $33 = ($23|0)!=($32|0);
  if ($33) {
   label = 6;
   break;
  }
  $34 = $9;
  $35 = (($34) + 1)|0;
  $9 = $35;
 }
 if ((label|0) == 6) {
  $4 = 0;
  $36 = $4;
  STACKTOP = sp;return ($36|0);
 }
 else if ((label|0) == 8) {
  $4 = 1;
  $36 = $4;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function _back_setBefore($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $4;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $22 = 32;
 } else {
  $11 = $4;
  $12 = ((($11)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) - 1)|0;
  $15 = $4;
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + ($14<<1)|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = $19&65535;
  $22 = $20;
 }
 $21 = $22&65535;
 $6 = $21;
 $23 = $6;
 $24 = $3;
 $25 = (_getChar_359($23,$24)|0);
 $26 = ((($25)) + 24|0);
 $27 = $26;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 4)|0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = $5;
 $34 = $33;
 $35 = $34;
 HEAP32[$35>>2] = $29;
 $36 = (($34) + 4)|0;
 $37 = $36;
 HEAP32[$37>>2] = $32;
 STACKTOP = sp;return;
}
function _back_selectRule($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 $15 = $15|0;
 $16 = $16|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0;
 var $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0;
 var $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0;
 var $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0;
 var $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $28 = sp + 8|0;
 $38 = sp;
 $17 = $0;
 $18 = $1;
 $19 = $2;
 $20 = $3;
 $21 = $4;
 $22 = $6;
 $23 = $7;
 $24 = $8;
 $25 = $9;
 $26 = $10;
 $27 = $11;
 $41 = $28;
 $42 = $41;
 HEAP32[$42>>2] = $12;
 $43 = (($41) + 4)|0;
 $44 = $43;
 HEAP32[$44>>2] = $13;
 $29 = $14;
 $30 = $15;
 $31 = $16;
 $45 = $20;
 $46 = ((($45)) + 8|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $18;
 $49 = (($47) - ($48))|0;
 $32 = $49;
 $33 = 0;
 $34 = 0;
 $50 = $18;
 $51 = $20;
 $52 = ((($51)) + 4|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (($53) + ($50<<1)|0);
 $55 = HEAP16[$54>>1]|0;
 $56 = $17;
 $57 = (_getDots_355($55,$56)|0);
 $35 = $57;
 $58 = $17;
 $59 = $22;
 $60 = $23;
 $61 = $24;
 $62 = $26;
 $63 = $27;
 $64 = HEAP32[$63>>2]|0;
 $65 = (_handleMultind($58,$59,$60,$61,$62,$64)|0);
 $66 = ($65|0)!=(0);
 if ($66) {
  STACKTOP = sp;return;
 }
 $36 = 0;
 L4: while(1) {
  $67 = $36;
  $68 = ($67|0)<(3);
  if (!($68)) {
   label = 72;
   break;
  }
  $69 = $36;
  L7: do {
   switch ($69|0) {
   case 2:  {
    label = 11;
    break L4;
    break;
   }
   case 0:  {
    $70 = $32;
    $71 = ($70|0)<(2);
    if (!($71)) {
     $72 = ((($5)) + 12|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($73|0)!=(0);
     if ($74) {
      $75 = $35;
      $76 = ((($75)) + 24|0);
      $77 = $76;
      $78 = $77;
      $79 = HEAP32[$78>>2]|0;
      $80 = (($77) + 4)|0;
      $81 = $80;
      $82 = HEAP32[$81>>2]|0;
      $83 = $79 & 256;
      $84 = ($83|0)!=(0);
      $85 = (0)!=(0);
      $86 = $84 | $85;
      if ($86) {
       break L7;
      }
     }
     $87 = $35;
     $88 = ((($87)) + 44|0);
     $89 = HEAP16[$88>>1]|0;
     $90 = $89&65535;
     $91 = $90 << 8;
     $34 = $91;
     $92 = $18;
     $93 = (($92) + 1)|0;
     $94 = $20;
     $95 = ((($94)) + 4|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = (($96) + ($93<<1)|0);
     $98 = HEAP16[$97>>1]|0;
     $99 = $17;
     $100 = (_getDots_355($98,$99)|0);
     $101 = ((($100)) + 44|0);
     $102 = HEAP16[$101>>1]|0;
     $103 = $102&65535;
     $104 = $34;
     $105 = (($104) + ($103))|0;
     $34 = $105;
     $106 = $34;
     $107 = (($106>>>0) % 1123)&-1;
     $34 = $107;
     $108 = $34;
     $109 = $17;
     $110 = ((($109)) + 26676|0);
     $111 = (($110) + ($108<<2)|0);
     $112 = HEAP32[$111>>2]|0;
     $33 = $112;
    }
    break;
   }
   case 1:  {
    $113 = $32;
    $114 = ($113|0)>=(1);
    if ($114) {
     $32 = 1;
     $115 = $35;
     $116 = ((($115)) + 16|0);
     $117 = HEAP32[$116>>2]|0;
     $33 = $117;
    }
    break;
   }
   default: {
   }
   }
  } while(0);
  while(1) {
   $127 = $33;
   $128 = ($127|0)!=(0);
   if (!($128)) {
    break;
   }
   $129 = $33;
   $130 = $17;
   $131 = ((($130)) + 31168|0);
   $132 = (($131) + ($129<<3)|0);
   $133 = $24;
   HEAP32[$133>>2] = $132;
   $134 = $24;
   $135 = HEAP32[$134>>2]|0;
   $136 = ((($135)) + 36|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = $23;
   HEAP32[$138>>2] = $137;
   $139 = $23;
   $140 = HEAP32[$139>>2]|0;
   $141 = ($140|0)==(74);
   $142 = $24;
   $143 = HEAP32[$142>>2]|0;
   if ($141) {
    $144 = ((($143)) + 46|0);
    $37 = $144;
    $145 = $24;
    $146 = HEAP32[$145>>2]|0;
    $147 = ((($146)) + 42|0);
    $148 = HEAP16[$147>>1]|0;
    $149 = $148 << 16 >> 16;
    $150 = $22;
    HEAP32[$150>>2] = $149;
   } else {
    $151 = ((($143)) + 42|0);
    $152 = HEAP16[$151>>1]|0;
    $153 = $152 << 16 >> 16;
    $154 = $24;
    $155 = HEAP32[$154>>2]|0;
    $156 = ((($155)) + 46|0);
    $157 = (($156) + ($153<<1)|0);
    $37 = $157;
    $158 = $24;
    $159 = HEAP32[$158>>2]|0;
    $160 = ((($159)) + 44|0);
    $161 = HEAP16[$160>>1]|0;
    $162 = $161 << 16 >> 16;
    $163 = $22;
    HEAP32[$163>>2] = $162;
   }
   $164 = $22;
   $165 = HEAP32[$164>>2]|0;
   $166 = $32;
   $167 = ($165|0)<=($166|0);
   L22: do {
    if ($167) {
     $168 = $18;
     $169 = $20;
     $170 = ((($169)) + 4|0);
     $171 = HEAP32[$170>>2]|0;
     $172 = (($171) + ($168<<1)|0);
     $173 = $37;
     $174 = $22;
     $175 = HEAP32[$174>>2]|0;
     $176 = (_compareDots($172,$173,$175)|0);
     $177 = ($176|0)!=(0);
     if ($177) {
      $178 = $22;
      $179 = HEAP32[$178>>2]|0;
      $180 = $17;
      $181 = $18;
      $182 = $20;
      _back_setAfter($179,$180,$181,$182,$38);
      $183 = $24;
      $184 = HEAP32[$183>>2]|0;
      $185 = ((($184)) + 16|0);
      $186 = $185;
      $187 = $186;
      $188 = HEAP32[$187>>2]|0;
      $189 = (($186) + 4)|0;
      $190 = $189;
      $191 = HEAP32[$190>>2]|0;
      $192 = $188 & -33554433;
      $193 = ($192|0)!=(0);
      $194 = ($191|0)!=(0);
      $195 = $193 | $194;
      if ($195) {
       $196 = $28;
       $197 = $196;
       $198 = HEAP32[$197>>2]|0;
       $199 = (($196) + 4)|0;
       $200 = $199;
       $201 = HEAP32[$200>>2]|0;
       $202 = $24;
       $203 = HEAP32[$202>>2]|0;
       $204 = ((($203)) + 16|0);
       $205 = $204;
       $206 = $205;
       $207 = HEAP32[$206>>2]|0;
       $208 = (($205) + 4)|0;
       $209 = $208;
       $210 = HEAP32[$209>>2]|0;
       $211 = $198 & $207;
       $212 = $201 & $210;
       $213 = ($211|0)!=(0);
       $214 = ($212|0)!=(0);
       $215 = $213 | $214;
       if (!($215)) {
        break;
       }
      }
      $216 = $24;
      $217 = HEAP32[$216>>2]|0;
      $218 = ((($217)) + 24|0);
      $219 = $218;
      $220 = $219;
      $221 = HEAP32[$220>>2]|0;
      $222 = (($219) + 4)|0;
      $223 = $222;
      $224 = HEAP32[$223>>2]|0;
      $225 = $221 & -33554433;
      $226 = ($225|0)!=(0);
      $227 = ($224|0)!=(0);
      $228 = $226 | $227;
      if ($228) {
       $229 = $38;
       $230 = $229;
       $231 = HEAP32[$230>>2]|0;
       $232 = (($229) + 4)|0;
       $233 = $232;
       $234 = HEAP32[$233>>2]|0;
       $235 = $24;
       $236 = HEAP32[$235>>2]|0;
       $237 = ((($236)) + 24|0);
       $238 = $237;
       $239 = $238;
       $240 = HEAP32[$239>>2]|0;
       $241 = (($238) + 4)|0;
       $242 = $241;
       $243 = HEAP32[$242>>2]|0;
       $244 = $231 & $240;
       $245 = $234 & $243;
       $246 = ($244|0)!=(0);
       $247 = ($245|0)!=(0);
       $248 = $246 | $247;
       if (!($248)) {
        break;
       }
      }
      $249 = $23;
      $250 = HEAP32[$249>>2]|0;
      do {
       switch ($250|0) {
       case 90: case 46: case 45: case 23: case 38: case 37: case 5: case 4: case 7: case 6: case 3: case 110: case 73: case 79: case 84: case 65: case 64: case 63: case 68: case 67: case 66: case 62: case 61:  {
        label = 72;
        break L4;
        break;
       }
       case 74:  {
        $251 = $17;
        $252 = $18;
        $253 = $20;
        $254 = $23;
        $255 = HEAP32[$254>>2]|0;
        $256 = $24;
        $257 = HEAP32[$256>>2]|0;
        $258 = $29;
        $259 = $30;
        $260 = $31;
        $261 = (_back_passDoTest($251,$252,$253,$255,$257,$258,$259,$260)|0);
        $262 = ($261|0)!=(0);
        if ($262) {
         label = 72;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 71:  {
        $263 = ((($5)) + 12|0);
        $264 = HEAP32[$263>>2]|0;
        $265 = ($264|0)!=(0);
        if ($265) {
         label = 72;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 47:  {
        $266 = $38;
        $267 = $266;
        $268 = HEAP32[$267>>2]|0;
        $269 = (($266) + 4)|0;
        $270 = $269;
        $271 = HEAP32[$270>>2]|0;
        $272 = $268 & 130;
        $273 = ($272|0)!=(0);
        $274 = (0)!=(0);
        $275 = $273 | $274;
        if ($275) {
         label = 72;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 24: case 19:  {
        $276 = $28;
        $277 = $276;
        $278 = HEAP32[$277>>2]|0;
        $279 = (($276) + 4)|0;
        $280 = $279;
        $281 = HEAP32[$280>>2]|0;
        $282 = $278 & 2;
        $283 = ($282|0)!=(0);
        $284 = (0)!=(0);
        $285 = $283 | $284;
        if ($285) {
         break L22;
        }
        $286 = $38;
        $287 = $286;
        $288 = HEAP32[$287>>2]|0;
        $289 = (($286) + 4)|0;
        $290 = $289;
        $291 = HEAP32[$290>>2]|0;
        $292 = $288 & 130;
        $293 = ($292|0)!=(0);
        $294 = (0)!=(0);
        $295 = $293 | $294;
        if ($295) {
         label = 72;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 48:  {
        $296 = $22;
        $297 = HEAP32[$296>>2]|0;
        $298 = $26;
        HEAP32[$298>>2] = $297;
        $299 = $24;
        $300 = HEAP32[$299>>2]|0;
        $301 = $27;
        HEAP32[$301>>2] = $300;
        $302 = $17;
        $303 = $22;
        $304 = $23;
        $305 = $24;
        $306 = $26;
        $307 = $27;
        $308 = HEAP32[$307>>2]|0;
        $309 = (_handleMultind($302,$303,$304,$305,$306,$308)|0);
        $310 = ($309|0)!=(0);
        if ($310) {
         label = 72;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 91:  {
        $311 = $19;
        $312 = $311 & 256;
        $313 = ($312|0)!=(0);
        if ($313) {
         break L22;
        }
        $314 = ((($5)) + 16|0);
        $315 = HEAP32[$314>>2]|0;
        $316 = ($315|0)!=(0);
        if ($316) {
         break L22;
        }
        $317 = ((($5)) + 12|0);
        $318 = HEAP32[$317>>2]|0;
        $319 = ($318|0)!=(0);
        if ($319) {
         break L22;
        }
        break;
       }
       case 96:  {
        break;
       }
       case 95:  {
        $348 = $19;
        $349 = $348 & 256;
        $350 = ($349|0)!=(0);
        if ($350) {
         break L22;
        }
        $351 = $28;
        $352 = $351;
        $353 = HEAP32[$352>>2]|0;
        $354 = (($351) + 4)|0;
        $355 = $354;
        $356 = HEAP32[$355>>2]|0;
        $357 = $353 & 1;
        $358 = ($357|0)!=(0);
        $359 = (0)!=(0);
        $360 = $358 | $359;
        if (!($360)) {
         break L22;
        }
        $361 = $38;
        $362 = $361;
        $363 = HEAP32[$362>>2]|0;
        $364 = (($361) + 4)|0;
        $365 = $364;
        $366 = HEAP32[$365>>2]|0;
        $367 = $363 & 1;
        $368 = ($367|0)!=(0);
        $369 = (0)!=(0);
        $370 = $368 | $369;
        $371 = $25;
        $372 = ($371|0)!=(94);
        $or$cond = $370 & $372;
        if ($or$cond) {
         label = 72;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 94: case 93:  {
        $373 = $28;
        $374 = $373;
        $375 = HEAP32[$374>>2]|0;
        $376 = (($373) + 4)|0;
        $377 = $376;
        $378 = HEAP32[$377>>2]|0;
        $379 = $375 & 9;
        $380 = ($379|0)!=(0);
        $381 = (0)!=(0);
        $382 = $380 | $381;
        if (!($382)) {
         break L22;
        }
        $383 = $38;
        $384 = $383;
        $385 = HEAP32[$384>>2]|0;
        $386 = (($383) + 4)|0;
        $387 = $386;
        $388 = HEAP32[$387>>2]|0;
        $389 = $385 & 1;
        $390 = ($389|0)!=(0);
        $391 = (0)!=(0);
        $392 = $390 | $391;
        if (!($392)) {
         label = 72;
         break L4;
        }
        $393 = $19;
        $394 = $393 & 256;
        $395 = ($394|0)!=(0);
        if ($395) {
         label = 72;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 97:  {
        $396 = $28;
        $397 = $396;
        $398 = HEAP32[$397>>2]|0;
        $399 = (($396) + 4)|0;
        $400 = $399;
        $401 = HEAP32[$400>>2]|0;
        $402 = $398 & 9;
        $403 = ($402|0)!=(0);
        $404 = (0)!=(0);
        $405 = $403 | $404;
        if ($405) {
         label = 72;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 98:  {
        $406 = $28;
        $407 = $406;
        $408 = HEAP32[$407>>2]|0;
        $409 = (($406) + 4)|0;
        $410 = $409;
        $411 = HEAP32[$410>>2]|0;
        $412 = $408 & 11;
        $413 = ($412|0)!=(0);
        $414 = (0)!=(0);
        $415 = $413 | $414;
        if (!($415)) {
         break L22;
        }
        $416 = $17;
        $417 = $18;
        $418 = $19;
        $419 = $20;
        $420 = $22;
        $421 = HEAP32[$420>>2]|0;
        $422 = (_isEndWord($416,$417,$418,$419,$421)|0);
        $423 = ($422|0)!=(0);
        if ($423) {
         label = 72;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 99:  {
        $424 = $28;
        $425 = $424;
        $426 = HEAP32[$425>>2]|0;
        $427 = (($424) + 4)|0;
        $428 = $427;
        $429 = HEAP32[$428>>2]|0;
        $430 = $426 & 9;
        $431 = ($430|0)!=(0);
        $432 = (0)!=(0);
        $433 = $431 | $432;
        if (!($433)) {
         break L22;
        }
        $434 = $17;
        $435 = $18;
        $436 = $19;
        $437 = $20;
        $438 = $22;
        $439 = HEAP32[$438>>2]|0;
        $440 = (_isEndWord($434,$435,$436,$437,$439)|0);
        $441 = ($440|0)!=(0);
        if ($441) {
         break L22;
        } else {
         label = 72;
         break L4;
        }
        break;
       }
       case 100:  {
        $442 = $28;
        $443 = $442;
        $444 = HEAP32[$443>>2]|0;
        $445 = (($442) + 4)|0;
        $446 = $445;
        $447 = HEAP32[$446>>2]|0;
        $448 = $444 & 11;
        $449 = ($448|0)!=(0);
        $450 = (0)!=(0);
        $451 = $449 | $450;
        if (!($451)) {
         break L22;
        }
        $452 = $17;
        $453 = $18;
        $454 = $19;
        $455 = $20;
        $456 = $22;
        $457 = HEAP32[$456>>2]|0;
        $458 = (_isEndWord($452,$453,$454,$455,$457)|0);
        $459 = ($458|0)!=(0);
        if ($459) {
         break L22;
        } else {
         label = 72;
         break L4;
        }
        break;
       }
       case 92:  {
        $460 = $28;
        $461 = $460;
        $462 = HEAP32[$461>>2]|0;
        $463 = (($460) + 4)|0;
        $464 = $463;
        $465 = HEAP32[$464>>2]|0;
        $466 = $462 & 256;
        $467 = ($466|0)!=(0);
        $468 = (0)!=(0);
        $469 = $467 | $468;
        if ($469) {
         break L22;
        }
        $470 = $28;
        $471 = $470;
        $472 = HEAP32[$471>>2]|0;
        $473 = (($470) + 4)|0;
        $474 = $473;
        $475 = HEAP32[$474>>2]|0;
        $476 = $472 & 2;
        $477 = ($476|0)!=(0);
        $478 = (0)!=(0);
        $479 = $477 | $478;
        if ($479) {
         label = 72;
         break L4;
        }
        $480 = $17;
        $481 = $18;
        $482 = $19;
        $483 = $20;
        $484 = $22;
        $485 = HEAP32[$484>>2]|0;
        $486 = (_isEndWord($480,$481,$482,$483,$485)|0);
        $487 = ($486|0)!=(0);
        if ($487) {
         break L22;
        } else {
         label = 72;
         break L4;
        }
        break;
       }
       case 101:  {
        $488 = $28;
        $489 = $488;
        $490 = HEAP32[$489>>2]|0;
        $491 = (($488) + 4)|0;
        $492 = $491;
        $493 = HEAP32[$492>>2]|0;
        $494 = $490 & 2;
        $495 = ($494|0)!=(0);
        $496 = (0)!=(0);
        $497 = $495 | $496;
        if (!($497)) {
         break L22;
        }
        $498 = $17;
        $499 = $18;
        $500 = $19;
        $501 = $20;
        $502 = $22;
        $503 = HEAP32[$502>>2]|0;
        $504 = (_isEndWord($498,$499,$500,$501,$503)|0);
        $505 = ($504|0)!=(0);
        if ($505) {
         break L22;
        } else {
         label = 72;
         break L4;
        }
        break;
       }
       case 102:  {
        $506 = $28;
        $507 = $506;
        $508 = HEAP32[$507>>2]|0;
        $509 = (($506) + 4)|0;
        $510 = $509;
        $511 = HEAP32[$510>>2]|0;
        $512 = $508 & 2;
        $513 = ($512|0)!=(0);
        $514 = (0)!=(0);
        $515 = $513 | $514;
        if ($515) {
         label = 72;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 103:  {
        $516 = $28;
        $517 = $516;
        $518 = HEAP32[$517>>2]|0;
        $519 = (($516) + 4)|0;
        $520 = $519;
        $521 = HEAP32[$520>>2]|0;
        $522 = $518 & 2;
        $523 = ($522|0)!=(0);
        $524 = (0)!=(0);
        $525 = $523 | $524;
        if (!($525)) {
         break L22;
        }
        $526 = $17;
        $527 = $18;
        $528 = $19;
        $529 = $20;
        $530 = $22;
        $531 = HEAP32[$530>>2]|0;
        $532 = (_isEndWord($526,$527,$528,$529,$531)|0);
        $533 = ($532|0)!=(0);
        if ($533) {
         label = 72;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 106:  {
        $534 = $28;
        $535 = $534;
        $536 = HEAP32[$535>>2]|0;
        $537 = (($534) + 4)|0;
        $538 = $537;
        $539 = HEAP32[$538>>2]|0;
        $540 = $536 & 9;
        $541 = ($540|0)!=(0);
        $542 = (0)!=(0);
        $543 = $541 | $542;
        if (!($543)) {
         break L22;
        }
        $544 = $38;
        $545 = $544;
        $546 = HEAP32[$545>>2]|0;
        $547 = (($544) + 4)|0;
        $548 = $547;
        $549 = HEAP32[$548>>2]|0;
        $550 = $546 & 384;
        $551 = ($550|0)!=(0);
        $552 = (0)!=(0);
        $553 = $551 | $552;
        if ($553) {
         label = 72;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 107:  {
        $554 = $28;
        $555 = $554;
        $556 = HEAP32[$555>>2]|0;
        $557 = (($554) + 4)|0;
        $558 = $557;
        $559 = HEAP32[$558>>2]|0;
        $560 = $556 & 4;
        $561 = ($560|0)!=(0);
        $562 = (0)!=(0);
        $563 = $561 | $562;
        if (!($563)) {
         break L22;
        }
        $564 = $38;
        $565 = $564;
        $566 = HEAP32[$565>>2]|0;
        $567 = (($564) + 4)|0;
        $568 = $567;
        $569 = HEAP32[$568>>2]|0;
        $570 = $566 & 256;
        $571 = ($570|0)!=(0);
        $572 = (0)!=(0);
        $573 = $571 | $572;
        if ($573) {
         label = 72;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 108:  {
        $574 = ((($5)) + 12|0);
        $575 = HEAP32[$574>>2]|0;
        $576 = ($575|0)!=(0);
        if (!($576)) {
         break L22;
        }
        $577 = $38;
        $578 = $577;
        $579 = HEAP32[$578>>2]|0;
        $580 = (($577) + 4)|0;
        $581 = $580;
        $582 = HEAP32[$581>>2]|0;
        $583 = $579 & 256;
        $584 = ($583|0)!=(0);
        $585 = (0)!=(0);
        $586 = $584 | $585;
        if ($586) {
         break L22;
        } else {
         label = 72;
         break L4;
        }
        break;
       }
       case 109:  {
        $587 = $38;
        $588 = $587;
        $589 = HEAP32[$588>>2]|0;
        $590 = (($587) + 4)|0;
        $591 = $590;
        $592 = HEAP32[$591>>2]|0;
        $593 = $589 & 260;
        $594 = ($593|0)!=(0);
        $595 = (0)!=(0);
        $596 = $594 | $595;
        if ($596) {
         label = 72;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 104:  {
        $597 = $17;
        $598 = $21;
        $599 = (_isBegWord($597,$598)|0);
        $600 = ($599|0)!=(0);
        if ($600) {
         label = 72;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 105:  {
        $601 = $17;
        $602 = $18;
        $603 = $19;
        $604 = $20;
        $605 = $22;
        $606 = HEAP32[$605>>2]|0;
        $607 = (_isEndWord($601,$602,$603,$604,$606)|0);
        $608 = ($607|0)!=(0);
        if ($608) {
         label = 72;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 83:  {
        $609 = $28;
        $610 = $609;
        $611 = HEAP32[$610>>2]|0;
        $612 = (($609) + 4)|0;
        $613 = $612;
        $614 = HEAP32[$613>>2]|0;
        $615 = $611 & 256;
        $616 = ($615|0)!=(0);
        $617 = (0)!=(0);
        $618 = $616 | $617;
        if (!($618)) {
         label = 72;
         break L4;
        }
        $619 = $38;
        $620 = $619;
        $621 = HEAP32[$620>>2]|0;
        $622 = (($619) + 4)|0;
        $623 = $622;
        $624 = HEAP32[$623>>2]|0;
        $625 = $621 & 256;
        $626 = ($625|0)!=(0);
        $627 = (0)!=(0);
        $628 = $626 | $627;
        if (!($628)) {
         label = 72;
         break L4;
        }
        $629 = $24;
        $630 = HEAP32[$629>>2]|0;
        $631 = ((($630)) + 42|0);
        $632 = HEAP16[$631>>1]|0;
        $633 = $632 << 16 >> 16;
        $634 = ($633|0)>(1);
        if ($634) {
         break L22;
        } else {
         label = 72;
         break L4;
        }
        break;
       }
       case 113:  {
        $635 = $24;
        $636 = HEAP32[$635>>2]|0;
        $637 = ((($636)) + 32|0);
        $638 = HEAP32[$637>>2]|0;
        $639 = $17;
        $640 = ((($639)) + 31168|0);
        $641 = (($640) + ($638<<3)|0);
        $39 = $641;
        $642 = $39;
        $643 = ((($642)) + 2|0);
        $40 = $643;
        $644 = $20;
        $645 = ((($644)) + 4|0);
        $646 = HEAP32[$645>>2]|0;
        $647 = $18;
        $648 = (($647) - 1)|0;
        $649 = $40;
        $650 = $17;
        $651 = (__lou_pattern_check($646,$648,-1,-1,$649,$650)|0);
        $652 = ($651|0)!=(0);
        if (!($652)) {
         break L22;
        }
        $653 = $39;
        $654 = HEAP16[$653>>1]|0;
        $655 = $654&65535;
        $656 = $39;
        $657 = (($656) + ($655<<1)|0);
        $40 = $657;
        $658 = $20;
        $659 = ((($658)) + 4|0);
        $660 = HEAP32[$659>>2]|0;
        $661 = $18;
        $662 = $24;
        $663 = HEAP32[$662>>2]|0;
        $664 = ((($663)) + 44|0);
        $665 = HEAP16[$664>>1]|0;
        $666 = $665 << 16 >> 16;
        $667 = (($661) + ($666))|0;
        $668 = $20;
        $669 = ((($668)) + 8|0);
        $670 = HEAP32[$669>>2]|0;
        $671 = $40;
        $672 = $17;
        $673 = (__lou_pattern_check($660,$667,$670,1,$671,$672)|0);
        $674 = ($673|0)!=(0);
        if ($674) {
         label = 72;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       default: {
        break L22;
       }
       }
      } while(0);
      $320 = $28;
      $321 = $320;
      $322 = HEAP32[$321>>2]|0;
      $323 = (($320) + 4)|0;
      $324 = $323;
      $325 = HEAP32[$324>>2]|0;
      $326 = $322 & 9;
      $327 = ($326|0)!=(0);
      $328 = (0)!=(0);
      $329 = $327 | $328;
      if ($329) {
       $330 = $38;
       $331 = $330;
       $332 = HEAP32[$331>>2]|0;
       $333 = (($330) + 4)|0;
       $334 = $333;
       $335 = HEAP32[$334>>2]|0;
       $336 = $332 & 1;
       $337 = ($336|0)!=(0);
       $338 = (0)!=(0);
       $339 = $337 | $338;
       if ($339) {
        label = 72;
        break L4;
       }
       $340 = $17;
       $341 = $18;
       $342 = $19;
       $343 = $20;
       $344 = $22;
       $345 = HEAP32[$344>>2]|0;
       $346 = (_isEndWord($340,$341,$342,$343,$345)|0);
       $347 = ($346|0)!=(0);
       if ($347) {
        label = 72;
        break L4;
       }
      }
     }
    }
   } while(0);
   $675 = $24;
   $676 = HEAP32[$675>>2]|0;
   $677 = ((($676)) + 12|0);
   $678 = HEAP32[$677>>2]|0;
   $33 = $678;
  }
  $679 = $36;
  $680 = (($679) + 1)|0;
  $36 = $680;
 }
 if ((label|0) == 11) {
  $118 = $24;
  HEAP32[$118>>2] = 12952;
  HEAP32[(12988)>>2] = 117;
  $119 = $23;
  HEAP32[$119>>2] = 117;
  HEAP16[(12996)>>1] = 1;
  $120 = $22;
  HEAP32[$120>>2] = 1;
  $121 = $18;
  $122 = $20;
  $123 = ((($122)) + 4|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = (($124) + ($121<<1)|0);
  $126 = HEAP16[$125>>1]|0;
  HEAP16[(12998)>>1] = $126;
  HEAP16[(12994)>>1] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 72) {
  STACKTOP = sp;return;
 }
}
function _insertSpace($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $19 = sp + 40|0;
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 HEAP16[$19>>1] = 32;
 $20 = $10;
 $21 = $11;
 $22 = $12;
 $23 = $13;
 $24 = $15;
 $25 = $16;
 $26 = $17;
 $27 = $18;
 $28 = (_back_updatePositions($19,1,1,$20,$21,$22,$23,$24,$25,$26,$27)|0);
 $29 = ($28|0)!=(0);
 if (!($29)) {
  $9 = 0;
  $38 = $9;
  STACKTOP = sp;return ($38|0);
 }
 $30 = $14;
 $31 = ($30|0)!=(0|0);
 if ($31) {
  $32 = $13;
  $33 = ((($32)) + 12|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) - 1)|0;
  $36 = $14;
  $37 = (($36) + ($35)|0);
  HEAP8[$37>>0] = 49;
 }
 $9 = 1;
 $38 = $9;
 STACKTOP = sp;return ($38|0);
}
function _putCharacters_364($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $23 = 0;
 while(1) {
  $24 = $23;
  $25 = $13;
  $26 = ($24|0)<($25|0);
  if (!($26)) {
   label = 6;
   break;
  }
  $27 = $23;
  $28 = $12;
  $29 = (($28) + ($27<<1)|0);
  $30 = HEAP16[$29>>1]|0;
  $31 = $14;
  $32 = $15;
  $33 = $16;
  $34 = $17;
  $35 = $18;
  $36 = $19;
  $37 = $20;
  $38 = $21;
  $39 = $22;
  $40 = (_putCharacter_358($30,$31,$32,$33,$34,$35,$36,$37,$38,$39)|0);
  $41 = ($40|0)!=(0);
  if (!($41)) {
   label = 4;
   break;
  }
  $42 = $23;
  $43 = (($42) + 1)|0;
  $23 = $43;
 }
 if ((label|0) == 4) {
  $11 = 0;
  $44 = $11;
  STACKTOP = sp;return ($44|0);
 }
 else if ((label|0) == 6) {
  $11 = 1;
  $44 = $11;
  STACKTOP = sp;return ($44|0);
 }
 return (0)|0;
}
function _handleMultind($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = 0;
 $14 = $11;
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0);
 if (!($16)) {
  $6 = 0;
  $111 = $6;
  STACKTOP = sp;return ($111|0);
 }
 $17 = $12;
 $18 = ((($17)) + 42|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = $19 << 16 >> 16;
 $21 = $11;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20) - ($22))|0;
 $24 = $12;
 $25 = ((($24)) + 46|0);
 $26 = (($25) + ($23<<1)|0);
 $27 = HEAP16[$26>>1]|0;
 $28 = $27&65535;
 do {
  switch ($28|0) {
  case 3:  {
   $29 = $7;
   $30 = ((($29)) + 1512|0);
   $31 = ((($30)) + 360|0);
   $32 = ((($31)) + 20|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $7;
   $35 = $8;
   $36 = $9;
   $37 = $10;
   $38 = (_findBrailleIndicatorRule($33,$34,$35,$36,$37)|0);
   $13 = $38;
   break;
  }
  case 4:  {
   $39 = $7;
   $40 = ((($39)) + 1512|0);
   $41 = ((($40)) + 360|0);
   $42 = ((($41)) + 24|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = $7;
   $45 = $8;
   $46 = $9;
   $47 = $10;
   $48 = (_findBrailleIndicatorRule($43,$44,$45,$46,$47)|0);
   $13 = $48;
   break;
  }
  case 5:  {
   $49 = $7;
   $50 = ((($49)) + 1512|0);
   $51 = ((($50)) + 360|0);
   $52 = ((($51)) + 28|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $7;
   $55 = $8;
   $56 = $9;
   $57 = $10;
   $58 = (_findBrailleIndicatorRule($53,$54,$55,$56,$57)|0);
   $13 = $58;
   break;
  }
  case 19:  {
   $59 = $7;
   $60 = ((($59)) + 548|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $7;
   $63 = $8;
   $64 = $9;
   $65 = $10;
   $66 = (_findBrailleIndicatorRule($61,$62,$63,$64,$65)|0);
   $13 = $66;
   break;
  }
  case 47:  {
   $67 = $7;
   $68 = ((($67)) + 556|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = $7;
   $71 = $8;
   $72 = $9;
   $73 = $10;
   $74 = (_findBrailleIndicatorRule($69,$70,$71,$72,$73)|0);
   $13 = $74;
   break;
  }
  case 23:  {
   $75 = $7;
   $76 = ((($75)) + 552|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $7;
   $79 = $8;
   $80 = $9;
   $81 = $10;
   $82 = (_findBrailleIndicatorRule($77,$78,$79,$80,$81)|0);
   $13 = $82;
   break;
  }
  case 24:  {
   $83 = $7;
   $84 = ((($83)) + 560|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = $7;
   $87 = $8;
   $88 = $9;
   $89 = $10;
   $90 = (_findBrailleIndicatorRule($85,$86,$87,$88,$89)|0);
   $13 = $90;
   break;
  }
  case 45:  {
   $91 = $7;
   $92 = ((($91)) + 2088|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = $7;
   $95 = $8;
   $96 = $9;
   $97 = $10;
   $98 = (_findBrailleIndicatorRule($93,$94,$95,$96,$97)|0);
   $13 = $98;
   break;
  }
  case 46:  {
   $99 = $7;
   $100 = ((($99)) + 2092|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = $7;
   $103 = $8;
   $104 = $9;
   $105 = $10;
   $106 = (_findBrailleIndicatorRule($101,$102,$103,$104,$105)|0);
   $13 = $106;
   break;
  }
  default: {
   $13 = 0;
  }
  }
 } while(0);
 $107 = $11;
 $108 = HEAP32[$107>>2]|0;
 $109 = (($108) + -1)|0;
 HEAP32[$107>>2] = $109;
 $110 = $13;
 $6 = $110;
 $111 = $6;
 STACKTOP = sp;return ($111|0);
}
function _compareDots($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $6;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  $3 = 0;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 $7 = 0;
 while(1) {
  $10 = $7;
  $11 = $6;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   label = 8;
   break;
  }
  $13 = $7;
  $14 = $4;
  $15 = (($14) + ($13<<1)|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&65535;
  $18 = $7;
  $19 = $5;
  $20 = (($19) + ($18<<1)|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21&65535;
  $23 = ($17|0)!=($22|0);
  if ($23) {
   label = 6;
   break;
  }
  $24 = $7;
  $25 = (($24) + 1)|0;
  $7 = $25;
 }
 if ((label|0) == 6) {
  $3 = 0;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 else if ((label|0) == 8) {
  $3 = 1;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _back_setAfter($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $7;
 $12 = $5;
 $13 = (($11) + ($12))|0;
 $14 = $8;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)<($16|0);
 if ($17) {
  $18 = $7;
  $19 = $5;
  $20 = (($18) + ($19))|0;
  $21 = $8;
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + ($20<<1)|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $25&65535;
  $28 = $26;
 } else {
  $28 = 32;
 }
 $27 = $28&65535;
 $10 = $27;
 $29 = $10;
 $30 = $6;
 $31 = (_getDots_355($29,$30)|0);
 $32 = ((($31)) + 24|0);
 $33 = $32;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($33) + 4)|0;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = $9;
 $40 = $39;
 $41 = $40;
 HEAP32[$41>>2] = $35;
 $42 = (($40) + 4)|0;
 $43 = $42;
 HEAP32[$43>>2] = $38;
 STACKTOP = sp;return;
}
function _isEndWord($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $17 = $8;
 $18 = $17 & 256;
 $19 = ($18|0)!=(0);
 if ($19) {
  $5 = 0;
  $99 = $5;
  STACKTOP = sp;return ($99|0);
 }
 $20 = $7;
 $21 = $10;
 $22 = (($20) + ($21))|0;
 $11 = $22;
 L5: while(1) {
  $23 = $11;
  $24 = $9;
  $25 = ((($24)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($23|0)<($26|0);
  if (!($27)) {
   label = 21;
   break;
  }
  $15 = 0;
  $16 = 0;
  $28 = $11;
  $29 = $9;
  $30 = ((($29)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + ($28<<1)|0);
  $33 = HEAP16[$32>>1]|0;
  $34 = $6;
  $35 = (_getDots_355($33,$34)|0);
  $12 = $35;
  $36 = $12;
  $37 = ((($36)) + 16|0);
  $38 = HEAP32[$37>>2]|0;
  $13 = $38;
  $39 = $12;
  $40 = ((($39)) + 24|0);
  $41 = $40;
  $42 = $41;
  $43 = HEAP32[$42>>2]|0;
  $44 = (($41) + 4)|0;
  $45 = $44;
  $46 = HEAP32[$45>>2]|0;
  $47 = $43 & 1;
  $48 = ($47|0)!=(0);
  $49 = (0)!=(0);
  $50 = $48 | $49;
  if ($50) {
   label = 21;
   break;
  }
  $51 = $12;
  $52 = ((($51)) + 24|0);
  $53 = $52;
  $54 = $53;
  $55 = HEAP32[$54>>2]|0;
  $56 = (($53) + 4)|0;
  $57 = $56;
  $58 = HEAP32[$57>>2]|0;
  $59 = $55 & 2;
  $60 = ($59|0)!=(0);
  $61 = (0)!=(0);
  $62 = $60 | $61;
  if ($62) {
   label = 7;
   break;
  }
  while(1) {
   $63 = $13;
   $64 = ($63|0)!=(0);
   if (!($64)) {
    break;
   }
   $65 = $13;
   $66 = $6;
   $67 = ((($66)) + 31168|0);
   $68 = (($67) + ($65<<3)|0);
   $14 = $68;
   $69 = $14;
   $70 = ((($69)) + 42|0);
   $71 = HEAP16[$70>>1]|0;
   $72 = $71 << 16 >> 16;
   $73 = ($72|0)>(1);
   if ($73) {
    $74 = $14;
    $75 = ((($74)) + 36|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($76|0)!=(99);
    if ($77) {
     $78 = $14;
     $79 = ((($78)) + 36|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = ($80|0)!=(101);
     if ($81) {
      $16 = 1;
     }
    }
   }
   $82 = $14;
   $83 = ((($82)) + 36|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = ($84|0)==(105);
   if ($85) {
    $15 = 1;
   }
   $86 = $14;
   $87 = ((($86)) + 36|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = ($88|0)==(110);
   if ($89) {
    label = 16;
    break L5;
   }
   $90 = $14;
   $91 = ((($90)) + 12|0);
   $92 = HEAP32[$91>>2]|0;
   $13 = $92;
  }
  $93 = $16;
  $94 = ($93|0)==(0);
  $95 = $15;
  $96 = ($95|0)!=(0);
  $or$cond = $94 | $96;
  if (!($or$cond)) {
   label = 19;
   break;
  }
  $97 = $11;
  $98 = (($97) + 1)|0;
  $11 = $98;
 }
 if ((label|0) == 7) {
  $5 = 0;
  $99 = $5;
  STACKTOP = sp;return ($99|0);
 }
 else if ((label|0) == 16) {
  $5 = 1;
  $99 = $5;
  STACKTOP = sp;return ($99|0);
 }
 else if ((label|0) == 19) {
  $5 = 0;
  $99 = $5;
  STACKTOP = sp;return ($99|0);
 }
 else if ((label|0) == 21) {
  $5 = 1;
  $99 = $5;
  STACKTOP = sp;return ($99|0);
 }
 return (0)|0;
}
function _isBegWord($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $4;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $2 = 1;
  $51 = $2;
  STACKTOP = sp;return ($51|0);
 }
 $11 = $4;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) - 1)|0;
 $5 = $14;
 while(1) {
  $15 = $5;
  $16 = ($15|0)>=(0);
  if (!($16)) {
   label = 9;
   break;
  }
  $17 = $5;
  $18 = $4;
  $19 = ((($18)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($17<<1)|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $3;
  $24 = (_getChar_359($22,$23)|0);
  $6 = $24;
  $25 = $6;
  $26 = ((($25)) + 24|0);
  $27 = $26;
  $28 = $27;
  $29 = HEAP32[$28>>2]|0;
  $30 = (($27) + 4)|0;
  $31 = $30;
  $32 = HEAP32[$31>>2]|0;
  $33 = $29 & 1;
  $34 = ($33|0)!=(0);
  $35 = (0)!=(0);
  $36 = $34 | $35;
  if ($36) {
   label = 9;
   break;
  }
  $37 = $6;
  $38 = ((($37)) + 24|0);
  $39 = $38;
  $40 = $39;
  $41 = HEAP32[$40>>2]|0;
  $42 = (($39) + 4)|0;
  $43 = $42;
  $44 = HEAP32[$43>>2]|0;
  $45 = $41 & 198;
  $46 = ($45|0)!=(0);
  $47 = (0)!=(0);
  $48 = $46 | $47;
  if ($48) {
   label = 7;
   break;
  }
  $49 = $5;
  $50 = (($49) + -1)|0;
  $5 = $50;
 }
 if ((label|0) == 7) {
  $2 = 0;
  $51 = $2;
  STACKTOP = sp;return ($51|0);
 }
 else if ((label|0) == 9) {
  $2 = 1;
  $51 = $2;
  STACKTOP = sp;return ($51|0);
 }
 return (0)|0;
}
function _findBrailleIndicatorRule($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $6;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $6;
  $14 = $7;
  $15 = ((($14)) + 31168|0);
  $16 = (($15) + ($13<<3)|0);
  $17 = $10;
  HEAP32[$17>>2] = $16;
  $18 = $10;
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 36|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $9;
  HEAP32[$22>>2] = $21;
  $23 = $10;
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 44|0);
  $26 = HEAP16[$25>>1]|0;
  $27 = $26 << 16 >> 16;
  $28 = $8;
  HEAP32[$28>>2] = $27;
  $5 = 1;
  $29 = $5;
  STACKTOP = sp;return ($29|0);
 } else {
  $5 = 0;
  $29 = $5;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function _allocStringBuffer_367($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (__lou_allocMem(4,$4,0,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function __lou_resetPassVariables() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _memset((17512|0),0,200)|0;
 return;
}
function __lou_handlePassVariableTest($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $5;
 $8 = HEAP32[$7>>2]|0;
 $9 = $4;
 $10 = (($9) + ($8<<1)|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 switch ($12|0) {
 case 61:  {
  $13 = $5;
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 1)|0;
  $16 = $4;
  $17 = (($16) + ($15<<1)|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $18&65535;
  $20 = (17512 + ($19<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $5;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + 2)|0;
  $25 = $4;
  $26 = (($25) + ($24<<1)|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27&65535;
  $29 = ($21|0)!=($28|0);
  if ($29) {
   $30 = $6;
   HEAP32[$30>>2] = 0;
  }
  $31 = $5;
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + 3)|0;
  HEAP32[$31>>2] = $33;
  $3 = 1;
  $118 = $3;
  STACKTOP = sp;return ($118|0);
  break;
 }
 case 60:  {
  $34 = $5;
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + 1)|0;
  $37 = $4;
  $38 = (($37) + ($36<<1)|0);
  $39 = HEAP16[$38>>1]|0;
  $40 = $39&65535;
  $41 = (17512 + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $5;
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + 2)|0;
  $46 = $4;
  $47 = (($46) + ($45<<1)|0);
  $48 = HEAP16[$47>>1]|0;
  $49 = $48&65535;
  $50 = ($42|0)>=($49|0);
  if ($50) {
   $51 = $6;
   HEAP32[$51>>2] = 0;
  }
  $52 = $5;
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + 3)|0;
  HEAP32[$52>>2] = $54;
  $3 = 1;
  $118 = $3;
  STACKTOP = sp;return ($118|0);
  break;
 }
 case 62:  {
  $55 = $5;
  $56 = HEAP32[$55>>2]|0;
  $57 = (($56) + 1)|0;
  $58 = $4;
  $59 = (($58) + ($57<<1)|0);
  $60 = HEAP16[$59>>1]|0;
  $61 = $60&65535;
  $62 = (17512 + ($61<<2)|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $5;
  $65 = HEAP32[$64>>2]|0;
  $66 = (($65) + 2)|0;
  $67 = $4;
  $68 = (($67) + ($66<<1)|0);
  $69 = HEAP16[$68>>1]|0;
  $70 = $69&65535;
  $71 = ($63|0)<=($70|0);
  if ($71) {
   $72 = $6;
   HEAP32[$72>>2] = 0;
  }
  $73 = $5;
  $74 = HEAP32[$73>>2]|0;
  $75 = (($74) + 3)|0;
  HEAP32[$73>>2] = $75;
  $3 = 1;
  $118 = $3;
  STACKTOP = sp;return ($118|0);
  break;
 }
 case 130:  {
  $76 = $5;
  $77 = HEAP32[$76>>2]|0;
  $78 = (($77) + 1)|0;
  $79 = $4;
  $80 = (($79) + ($78<<1)|0);
  $81 = HEAP16[$80>>1]|0;
  $82 = $81&65535;
  $83 = (17512 + ($82<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $5;
  $86 = HEAP32[$85>>2]|0;
  $87 = (($86) + 2)|0;
  $88 = $4;
  $89 = (($88) + ($87<<1)|0);
  $90 = HEAP16[$89>>1]|0;
  $91 = $90&65535;
  $92 = ($84|0)>($91|0);
  if ($92) {
   $93 = $6;
   HEAP32[$93>>2] = 0;
  }
  $94 = $5;
  $95 = HEAP32[$94>>2]|0;
  $96 = (($95) + 3)|0;
  HEAP32[$94>>2] = $96;
  $3 = 1;
  $118 = $3;
  STACKTOP = sp;return ($118|0);
  break;
 }
 case 131:  {
  $97 = $5;
  $98 = HEAP32[$97>>2]|0;
  $99 = (($98) + 1)|0;
  $100 = $4;
  $101 = (($100) + ($99<<1)|0);
  $102 = HEAP16[$101>>1]|0;
  $103 = $102&65535;
  $104 = (17512 + ($103<<2)|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = $5;
  $107 = HEAP32[$106>>2]|0;
  $108 = (($107) + 2)|0;
  $109 = $4;
  $110 = (($109) + ($108<<1)|0);
  $111 = HEAP16[$110>>1]|0;
  $112 = $111&65535;
  $113 = ($105|0)<($112|0);
  if ($113) {
   $114 = $6;
   HEAP32[$114>>2] = 0;
  }
  $115 = $5;
  $116 = HEAP32[$115>>2]|0;
  $117 = (($116) + 3)|0;
  HEAP32[$115>>2] = $117;
  $3 = 1;
  $118 = $3;
  STACKTOP = sp;return ($118|0);
  break;
 }
 default: {
  $3 = 0;
  $118 = $3;
  STACKTOP = sp;return ($118|0);
 }
 }
 return (0)|0;
}
function __lou_handlePassVariableAction($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 $8 = (($7) + ($6<<1)|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 switch ($10|0) {
 case 61:  {
  $11 = $4;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + 2)|0;
  $14 = $3;
  $15 = (($14) + ($13<<1)|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&65535;
  $18 = $4;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 1)|0;
  $21 = $3;
  $22 = (($21) + ($20<<1)|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23&65535;
  $25 = (17512 + ($24<<2)|0);
  HEAP32[$25>>2] = $17;
  $26 = $4;
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 3)|0;
  HEAP32[$26>>2] = $28;
  $2 = 1;
  $73 = $2;
  STACKTOP = sp;return ($73|0);
  break;
 }
 case 45:  {
  $29 = $4;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 1)|0;
  $32 = $3;
  $33 = (($32) + ($31<<1)|0);
  $34 = HEAP16[$33>>1]|0;
  $35 = $34&65535;
  $36 = (17512 + ($35<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) - 1)|0;
  HEAP32[$36>>2] = $38;
  $39 = $4;
  $40 = HEAP32[$39>>2]|0;
  $41 = (($40) + 1)|0;
  $42 = $3;
  $43 = (($42) + ($41<<1)|0);
  $44 = HEAP16[$43>>1]|0;
  $45 = $44&65535;
  $46 = (17512 + ($45<<2)|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)<(0);
  if ($48) {
   $49 = $4;
   $50 = HEAP32[$49>>2]|0;
   $51 = (($50) + 1)|0;
   $52 = $3;
   $53 = (($52) + ($51<<1)|0);
   $54 = HEAP16[$53>>1]|0;
   $55 = $54&65535;
   $56 = (17512 + ($55<<2)|0);
   HEAP32[$56>>2] = 0;
  }
  $57 = $4;
  $58 = HEAP32[$57>>2]|0;
  $59 = (($58) + 2)|0;
  HEAP32[$57>>2] = $59;
  $2 = 1;
  $73 = $2;
  STACKTOP = sp;return ($73|0);
  break;
 }
 case 43:  {
  $60 = $4;
  $61 = HEAP32[$60>>2]|0;
  $62 = (($61) + 1)|0;
  $63 = $3;
  $64 = (($63) + ($62<<1)|0);
  $65 = HEAP16[$64>>1]|0;
  $66 = $65&65535;
  $67 = (17512 + ($66<<2)|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($68) + 1)|0;
  HEAP32[$67>>2] = $69;
  $70 = $4;
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + 2)|0;
  HEAP32[$70>>2] = $72;
  $2 = 1;
  $73 = $2;
  STACKTOP = sp;return ($73|0);
  break;
 }
 default: {
  $2 = 0;
  $73 = $2;
  STACKTOP = sp;return ($73|0);
 }
 }
 return (0)|0;
}
function _lou_indexTables($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $1 = $0;
 $5 = HEAP32[4428]|0;
 _list_free($5);
 HEAP32[4428] = 0;
 $6 = $1;
 $2 = $6;
 while(1) {
  $7 = $2;
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0|0);
  if (!($9)) {
   break;
  }
  $10 = $2;
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$vararg_buffer>>2] = $11;
  __lou_logMessage(10000,10094,$vararg_buffer);
  $12 = $2;
  $13 = HEAP32[$12>>2]|0;
  $14 = (_analyzeTable($13,1)|0);
  $3 = $14;
  $15 = $3;
  $16 = ($15|0)!=(0|0);
  if ($16) {
   $17 = $2;
   $18 = HEAP32[$17>>2]|0;
   $19 = (___strdup($18)|0);
   HEAP32[$4>>2] = $19;
   $20 = ((($4)) + 4|0);
   $21 = $3;
   HEAP32[$20>>2] = $21;
   $22 = HEAP32[4428]|0;
   $23 = (_rpl_malloc(8)|0);
   ;HEAP8[$23>>0]=HEAP8[$4>>0]|0;HEAP8[$23+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$23+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$23+3>>0]=HEAP8[$4+3>>0]|0;HEAP8[$23+4>>0]=HEAP8[$4+4>>0]|0;HEAP8[$23+5>>0]=HEAP8[$4+5>>0]|0;HEAP8[$23+6>>0]=HEAP8[$4+6>>0]|0;HEAP8[$23+7>>0]=HEAP8[$4+7>>0]|0;
   $24 = (_list_conj($22,$23,0,0,13)|0);
   HEAP32[4428] = $24;
  }
  $25 = $2;
  $26 = ((($25)) + 4|0);
  $2 = $26;
 }
 $27 = HEAP32[4428]|0;
 $28 = ($27|0)!=(0|0);
 if ($28) {
  STACKTOP = sp;return;
 }
 __lou_logMessage(30000,10113,$vararg_buffer1);
 STACKTOP = sp;return;
}
function _lou_findTable($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0;
 $9 = HEAP32[4428]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  _indexTablePath();
 }
 $11 = $2;
 $12 = (_parseQuery($11)|0);
 $3 = $12;
 $4 = 0;
 $5 = 0;
 $13 = HEAP32[4428]|0;
 $6 = $13;
 while(1) {
  $14 = $6;
  $15 = ($14|0)!=(0|0);
  if (!($15)) {
   break;
  }
  $16 = $6;
  $17 = HEAP32[$16>>2]|0;
  $7 = $17;
  $18 = $3;
  $19 = $7;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (_matchFeatureLists($18,$21,0)|0);
  $8 = $22;
  $23 = $8;
  $24 = $4;
  $25 = ($23|0)>($24|0);
  if ($25) {
   $26 = $8;
   $4 = $26;
   $27 = $5;
   $28 = ($27|0)!=(0|0);
   if ($28) {
    $29 = $5;
    _rpl_free($29);
   }
   $30 = $7;
   $31 = HEAP32[$30>>2]|0;
   $32 = (___strdup($31)|0);
   $5 = $32;
  }
  $33 = $6;
  $34 = ((($33)) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $6 = $35;
 }
 $36 = $3;
 _list_free($36);
 $37 = $5;
 $38 = ($37|0)!=(0|0);
 if ($38) {
  $39 = $5;
  $40 = $4;
  HEAP32[$vararg_buffer>>2] = $39;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $40;
  __lou_logMessage(20000,10074,$vararg_buffer);
  $41 = $5;
  $1 = $41;
  $43 = $1;
  STACKTOP = sp;return ($43|0);
 } else {
  $42 = $2;
  HEAP32[$vararg_buffer2>>2] = $42;
  __lou_logMessage(20000,9968,$vararg_buffer2);
  $1 = 0;
  $43 = $1;
  STACKTOP = sp;return ($43|0);
 }
 return (0)|0;
}
function _lou_findTables($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $9 = sp + 24|0;
 $2 = $0;
 $4 = 0;
 $12 = HEAP32[4428]|0;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  _indexTablePath();
 }
 $14 = $2;
 $15 = (_parseQuery($14)|0);
 $5 = $15;
 $16 = HEAP32[4428]|0;
 $6 = $16;
 while(1) {
  $17 = $6;
  $18 = ($17|0)!=(0|0);
  if (!($18)) {
   break;
  }
  $19 = $6;
  $20 = HEAP32[$19>>2]|0;
  $7 = $20;
  $21 = $5;
  $22 = $7;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (_matchFeatureLists($21,$24,0)|0);
  $8 = $25;
  $26 = $8;
  $27 = ($26|0)>(0);
  if ($27) {
   $28 = $7;
   $29 = HEAP32[$28>>2]|0;
   $30 = (___strdup($29)|0);
   HEAP32[$9>>2] = $30;
   $31 = ((($9)) + 4|0);
   $32 = $8;
   HEAP32[$31>>2] = $32;
   $33 = $4;
   $34 = (_rpl_malloc(8)|0);
   ;HEAP8[$34>>0]=HEAP8[$9>>0]|0;HEAP8[$34+1>>0]=HEAP8[$9+1>>0]|0;HEAP8[$34+2>>0]=HEAP8[$9+2>>0]|0;HEAP8[$34+3>>0]=HEAP8[$9+3>>0]|0;HEAP8[$34+4>>0]=HEAP8[$9+4>>0]|0;HEAP8[$34+5>>0]=HEAP8[$9+5>>0]|0;HEAP8[$34+6>>0]=HEAP8[$9+6>>0]|0;HEAP8[$34+7>>0]=HEAP8[$9+7>>0]|0;
   $35 = (_list_conj($33,$34,14,0,13)|0);
   $4 = $35;
  }
  $36 = $6;
  $37 = ((($36)) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  $6 = $38;
 }
 $39 = $5;
 _list_free($39);
 $40 = $4;
 $41 = ($40|0)!=(0|0);
 if (!($41)) {
  $67 = $2;
  HEAP32[$vararg_buffer1>>2] = $67;
  __lou_logMessage(20000,9968,$vararg_buffer1);
  $1 = 0;
  $68 = $1;
  STACKTOP = sp;return ($68|0);
 }
 $42 = $4;
 $43 = (_list_size($42)|0);
 HEAP32[$vararg_buffer>>2] = $43;
 __lou_logMessage(20000,9951,$vararg_buffer);
 $10 = 0;
 $44 = $4;
 $45 = (_list_size($44)|0);
 $46 = (1 + ($45))|0;
 $47 = $46<<2;
 $48 = (_rpl_malloc($47)|0);
 $3 = $48;
 $49 = $4;
 $11 = $49;
 while(1) {
  $50 = $11;
  $51 = ($50|0)!=(0|0);
  if (!($51)) {
   break;
  }
  $52 = $11;
  $53 = HEAP32[$52>>2]|0;
  $54 = HEAP32[$53>>2]|0;
  $55 = $10;
  $56 = (($55) + 1)|0;
  $10 = $56;
  $57 = $3;
  $58 = (($57) + ($55<<2)|0);
  HEAP32[$58>>2] = $54;
  $59 = $11;
  $60 = ((($59)) + 8|0);
  $61 = HEAP32[$60>>2]|0;
  $11 = $61;
 }
 $62 = $10;
 $63 = $3;
 $64 = (($63) + ($62<<2)|0);
 HEAP32[$64>>2] = 0;
 $65 = $4;
 _list_free($65);
 $66 = $3;
 $1 = $66;
 $68 = $1;
 STACKTOP = sp;return ($68|0);
}
function _lou_getTableInfo($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $10 = $2;
 $11 = (_analyzeTable($10,0)|0);
 $5 = $11;
 $7 = -1;
 $12 = $5;
 $6 = $12;
 L1: while(1) {
  $13 = $6;
  $14 = ($13|0)!=(0|0);
  if (!($14)) {
   label = 9;
   break;
  }
  $15 = $6;
  $16 = HEAP32[$15>>2]|0;
  $8 = $16;
  $17 = $8;
  $18 = HEAP32[$17>>2]|0;
  $19 = $3;
  $20 = (_strcasecmp($18,$19)|0);
  $9 = $20;
  $21 = $9;
  $22 = ($21|0)==(0);
  do {
   if ($22) {
    $23 = $7;
    $24 = ($23|0)<(0);
    if (!($24)) {
     $25 = $7;
     $26 = $8;
     $27 = ((($26)) + 8|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($25|0)>($28|0);
     if (!($29)) {
      break;
     }
    }
    $30 = $8;
    $31 = ((($30)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (___strdup($32)|0);
    $4 = $33;
    $34 = $8;
    $35 = ((($34)) + 8|0);
    $36 = HEAP32[$35>>2]|0;
    $7 = $36;
   } else {
    $37 = $9;
    $38 = ($37|0)>(0);
    if ($38) {
     label = 9;
     break L1;
    }
   }
  } while(0);
  $39 = $6;
  $40 = ((($39)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $6 = $41;
 }
 if ((label|0) == 9) {
  $42 = $5;
  _list_free($42);
  $43 = $4;
  STACKTOP = sp;return ($43|0);
 }
 return (0)|0;
}
function _lou_listTables() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = 0;
 $4 = HEAP32[4428]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  _indexTablePath();
 }
 $6 = HEAP32[4428]|0;
 $2 = $6;
 while(1) {
  $7 = $2;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   break;
  }
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $3 = $10;
  $11 = $1;
  $12 = $3;
  $13 = HEAP32[$12>>2]|0;
  $14 = (___strdup($13)|0);
  $15 = (_list_conj($11,$14,15,0,0)|0);
  $1 = $15;
  $16 = $2;
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $2 = $18;
 }
 $19 = $1;
 $20 = (_list_toArray($19,0)|0);
 $0 = $20;
 $21 = $1;
 _list_free($21);
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function _indexTablePath() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 __lou_logMessage(30000,9637,$vararg_buffer);
 $3 = (__lou_getTablePath()|0);
 $0 = $3;
 $4 = $0;
 $5 = (_listFiles($4)|0);
 $1 = $5;
 $6 = $1;
 $7 = (_list_toArray($6,0)|0);
 $2 = $7;
 $8 = $2;
 _lou_indexTables($8);
 $9 = $0;
 _rpl_free($9);
 $10 = $1;
 _list_free($10);
 $11 = $2;
 _rpl_free($11);
 STACKTOP = sp;return;
}
function _list_conj($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond$not = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $16 = $6;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  $18 = (_rpl_malloc(12)|0);
  $6 = $18;
  $19 = $9;
  $20 = ($19|0)!=(0|0);
  if ($20) {
   $21 = $9;
   $22 = $7;
   $23 = (FUNCTION_TABLE_ii[$21 & 7]($22)|0);
   $26 = $23;
  } else {
   $24 = $7;
   $26 = $24;
  }
  $25 = $6;
  HEAP32[$25>>2] = $26;
  $27 = $10;
  $28 = $6;
  $29 = ((($28)) + 4|0);
  HEAP32[$29>>2] = $27;
  $30 = $6;
  $31 = ((($30)) + 8|0);
  HEAP32[$31>>2] = 0;
  $32 = $6;
  $5 = $32;
  $99 = $5;
  STACKTOP = sp;return ($99|0);
 }
 $33 = $8;
 $34 = ($33|0)!=(0|0);
 if (!($34)) {
  $35 = (_rpl_malloc(12)|0);
  $11 = $35;
  $36 = $9;
  $37 = ($36|0)!=(0|0);
  if ($37) {
   $38 = $9;
   $39 = $7;
   $40 = (FUNCTION_TABLE_ii[$38 & 7]($39)|0);
   $43 = $40;
  } else {
   $41 = $7;
   $43 = $41;
  }
  $42 = $11;
  HEAP32[$42>>2] = $43;
  $44 = $10;
  $45 = $11;
  $46 = ((($45)) + 4|0);
  HEAP32[$46>>2] = $44;
  $47 = $6;
  $48 = $11;
  $49 = ((($48)) + 8|0);
  HEAP32[$49>>2] = $47;
  $50 = $11;
  $5 = $50;
  $99 = $5;
  STACKTOP = sp;return ($99|0);
 }
 $51 = $6;
 $12 = $51;
 $13 = 0;
 while(1) {
  $52 = $12;
  $53 = ($52|0)!=(0|0);
  if (!($53)) {
   break;
  }
  $54 = $8;
  $55 = $12;
  $56 = HEAP32[$55>>2]|0;
  $57 = $7;
  $58 = (FUNCTION_TABLE_iii[$54 & 31]($56,$57)|0);
  $14 = $58;
  $59 = $14;
  $60 = ($59|0)>(0);
  if ($60) {
   break;
  }
  $61 = $14;
  $62 = ($61|0)<(0);
  if (!($62)) {
   label = 16;
   break;
  }
  $63 = $12;
  $13 = $63;
  $64 = $13;
  $65 = ((($64)) + 8|0);
  $66 = HEAP32[$65>>2]|0;
  $12 = $66;
 }
 if ((label|0) == 16) {
  $67 = $7;
  $68 = $12;
  $69 = HEAP32[$68>>2]|0;
  $70 = ($67|0)==($69|0);
  $71 = $9;
  $72 = ($71|0)!=(0|0);
  $or$cond = $70 | $72;
  $or$cond$not = $or$cond ^ 1;
  $73 = $10;
  $74 = ($73|0)!=(0|0);
  $or$cond3 = $or$cond$not & $74;
  if ($or$cond3) {
   $75 = $10;
   $76 = $7;
   FUNCTION_TABLE_vi[$75 & 31]($76);
  }
  $77 = $6;
  $5 = $77;
  $99 = $5;
  STACKTOP = sp;return ($99|0);
 }
 $78 = (_rpl_malloc(12)|0);
 $15 = $78;
 $79 = $9;
 $80 = ($79|0)!=(0|0);
 if ($80) {
  $81 = $9;
  $82 = $7;
  $83 = (FUNCTION_TABLE_ii[$81 & 7]($82)|0);
  $86 = $83;
 } else {
  $84 = $7;
  $86 = $84;
 }
 $85 = $15;
 HEAP32[$85>>2] = $86;
 $87 = $10;
 $88 = $15;
 $89 = ((($88)) + 4|0);
 HEAP32[$89>>2] = $87;
 $90 = $12;
 $91 = $15;
 $92 = ((($91)) + 8|0);
 HEAP32[$92>>2] = $90;
 $93 = $13;
 $94 = ($93|0)!=(0|0);
 $95 = $15;
 if ($94) {
  $96 = $13;
  $97 = ((($96)) + 8|0);
  HEAP32[$97>>2] = $95;
 } else {
  $6 = $95;
 }
 $98 = $6;
 $5 = $98;
 $99 = $5;
 STACKTOP = sp;return ($99|0);
}
function _list_toArray($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = (_list_size($7)|0);
 $9 = (1 + ($8))|0;
 $10 = $9<<2;
 $11 = (_rpl_malloc($10)|0);
 $4 = $11;
 $6 = 0;
 $12 = $2;
 $5 = $12;
 while(1) {
  $13 = $5;
  $14 = ($13|0)!=(0|0);
  if (!($14)) {
   break;
  }
  $15 = $3;
  $16 = ($15|0)!=(0|0);
  if ($16) {
   $17 = $3;
   $18 = $5;
   $19 = HEAP32[$18>>2]|0;
   $20 = (FUNCTION_TABLE_ii[$17 & 7]($19)|0);
   $27 = $20;
  } else {
   $21 = $5;
   $22 = HEAP32[$21>>2]|0;
   $27 = $22;
  }
  $23 = $6;
  $24 = (($23) + 1)|0;
  $6 = $24;
  $25 = $4;
  $26 = (($25) + ($23<<2)|0);
  HEAP32[$26>>2] = $27;
  $28 = $5;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $5 = $30;
 }
 $31 = $6;
 $32 = $4;
 $33 = (($32) + ($31<<2)|0);
 HEAP32[$33>>2] = 0;
 $34 = $4;
 STACKTOP = sp;return ($34|0);
}
function _list_free($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $1;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $1;
  $12 = HEAP32[$11>>2]|0;
  FUNCTION_TABLE_vi[$10 & 31]($12);
 }
 $13 = $1;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 _list_free($15);
 $16 = $1;
 _rpl_free($16);
 STACKTOP = sp;return;
}
function _list_size($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $4 = $1;
 $3 = $4;
 while(1) {
  $5 = $3;
  $6 = ($5|0)!=(0|0);
  $7 = $2;
  if (!($6)) {
   break;
  }
  $8 = (($7) + 1)|0;
  $2 = $8;
  $9 = $3;
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $3 = $11;
 }
 STACKTOP = sp;return ($7|0);
}
function _listFiles($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $2 = 0;
 $4 = 0;
 while(1) {
  $5 = 0;
  while(1) {
   $6 = $4;
   $7 = $5;
   $8 = (($6) + ($7))|0;
   $9 = $1;
   $10 = (($9) + ($8)|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = $11 << 24 >> 24;
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $4;
   $15 = $5;
   $16 = (($14) + ($15))|0;
   $17 = $1;
   $18 = (($17) + ($16)|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = ($20|0)!=(44);
   if (!($21)) {
    break;
   }
   $22 = $5;
   $23 = (($22) + 1)|0;
   $5 = $23;
  }
  $24 = $5;
  $25 = (($24) + 1)|0;
  $26 = (_rpl_malloc($25)|0);
  $3 = $26;
  $27 = $5;
  $28 = $3;
  $29 = (($28) + ($27)|0);
  HEAP8[$29>>0] = 0;
  $30 = $3;
  $31 = $4;
  $32 = $1;
  $33 = (($32) + ($31)|0);
  $34 = $5;
  _memcpy(($30|0),($33|0),($34|0))|0;
  $35 = $2;
  $36 = $3;
  $37 = (_listDir($35,$36)|0);
  $2 = $37;
  $38 = $3;
  _rpl_free($38);
  $39 = $5;
  $40 = $4;
  $41 = (($40) + ($39))|0;
  $4 = $41;
  $42 = $4;
  $43 = $1;
  $44 = (($43) + ($42)|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45 << 24 >> 24;
  $47 = ($46|0)==(0);
  if ($47) {
   break;
  }
  $48 = $4;
  $49 = (($48) + 1)|0;
  $4 = $49;
 }
 $50 = $2;
 STACKTOP = sp;return ($50|0);
}
function _listDir($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $4 = sp + 28|0;
 $2 = $0;
 $3 = $1;
 $7 = $3;
 $8 = (_opendir($7)|0);
 $5 = $8;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  $26 = $3;
  HEAP32[$vararg_buffer3>>2] = $26;
  __lou_logMessage(30000,9704,$vararg_buffer3);
  $27 = $2;
  STACKTOP = sp;return ($27|0);
 }
 while(1) {
  $10 = $5;
  $11 = (_readdir($10)|0);
  $6 = $11;
  $12 = ($11|0)!=(0|0);
  if (!($12)) {
   break;
  }
  $13 = $3;
  $14 = $6;
  $15 = ((($14)) + 11|0);
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 47;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $15;
  (_sprintf(32849,9697,$vararg_buffer)|0);
  $16 = (_stat(32849,$4)|0);
  $17 = ($16|0)==(0);
  if (!($17)) {
   continue;
  }
  $18 = ((($4)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19 & 16384;
  $21 = ($20|0)!=(0);
  if ($21) {
   continue;
  }
  $22 = $2;
  $23 = (___strdup(32849)|0);
  $24 = (_list_conj($22,$23,0,0,13)|0);
  $2 = $24;
 }
 $25 = $5;
 (_closedir($25)|0);
 $27 = $2;
 STACKTOP = sp;return ($27|0);
}
function _analyzeTable($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond5 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer20 = 0, $vararg_buffer24 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer36 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr23 = 0;
 var $vararg_ptr27 = 0, $vararg_ptr34 = 0, $vararg_ptr35 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4352|0);
 $vararg_buffer36 = sp + 80|0;
 $vararg_buffer31 = sp + 64|0;
 $vararg_buffer28 = sp + 56|0;
 $vararg_buffer24 = sp + 48|0;
 $vararg_buffer20 = sp + 40|0;
 $vararg_buffer16 = sp + 32|0;
 $vararg_buffer12 = sp + 24|0;
 $vararg_buffer9 = sp + 16|0;
 $vararg_buffer6 = sp + 8|0;
 $vararg_buffer = sp;
 $6 = sp + 200|0;
 $22 = sp + 128|0;
 $24 = sp + 112|0;
 $26 = sp + 96|0;
 $27 = sp + 84|0;
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $28 = $3;
 $29 = (__lou_resolveTable($28,0)|0);
 $7 = $29;
 $30 = $7;
 $31 = ($30|0)==(0|0);
 if ($31) {
  $32 = $3;
  HEAP32[$vararg_buffer>>2] = $32;
  __lou_logMessage(40000,9726,$vararg_buffer);
  $2 = 0;
  $365 = $2;
  STACKTOP = sp;return ($365|0);
 }
 $33 = $7;
 $34 = HEAP32[$33>>2]|0;
 HEAP32[$vararg_buffer6>>2] = $34;
 (_sprintf(34897,10217,$vararg_buffer6)|0);
 $8 = 0;
 $8 = 0;
 while(1) {
  $35 = $8;
  $36 = $7;
  $37 = (($36) + ($35<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)!=(0|0);
  if (!($39)) {
   break;
  }
  $40 = $8;
  $41 = $7;
  $42 = (($41) + ($40<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  _rpl_free($43);
  $44 = $8;
  $45 = (($44) + 1)|0;
  $8 = $45;
 }
 $46 = $7;
 _rpl_free($46);
 $47 = $8;
 $48 = ($47|0)>(1);
 if ($48) {
  $49 = $3;
  HEAP32[$vararg_buffer9>>2] = $49;
  __lou_logMessage(40000,9752,$vararg_buffer9);
  $2 = 0;
  $365 = $2;
  STACKTOP = sp;return ($365|0);
 }
 HEAP32[$6>>2] = 34897;
 $50 = ((($6)) + 16|0);
 HEAP32[$50>>2] = 0;
 $51 = ((($6)) + 20|0);
 HEAP32[$51>>2] = 0;
 $52 = ((($6)) + 12|0);
 HEAP32[$52>>2] = 0;
 $53 = HEAP32[$6>>2]|0;
 $54 = (_fopen($53,9794)|0);
 $55 = ((($6)) + 8|0);
 HEAP32[$55>>2] = $54;
 $56 = ($54|0)!=(0|0);
 do {
  if ($56) {
   $9 = 0;
   $10 = 0;
   L15: while(1) {
    $57 = (__lou_getALine($6)|0);
    $58 = ($57|0)!=(0);
    if (!($58)) {
     label = 67;
     break;
    }
    $59 = ((($6)) + 24|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = ($60|0)==(0);
    if ($61) {
     continue;
    }
    $62 = ((($6)) + 40|0);
    $63 = HEAP16[$62>>1]|0;
    $64 = $63&65535;
    $65 = ($64|0)==(35);
    if (!($65)) {
     label = 67;
     break;
    }
    $66 = ((($6)) + 24|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = ($67|0)>=(2);
    if (!($68)) {
     continue;
    }
    $69 = ((($6)) + 40|0);
    $70 = ((($69)) + 2|0);
    $71 = HEAP16[$70>>1]|0;
    $72 = $71&65535;
    $73 = ($72|0)==(43);
    if (!($73)) {
     $74 = $4;
     $75 = ($74|0)!=(0);
     if ($75) {
      continue;
     }
     $76 = ((($6)) + 40|0);
     $77 = ((($76)) + 2|0);
     $78 = HEAP16[$77>>1]|0;
     $79 = $78&65535;
     $80 = ($79|0)==(45);
     if (!($80)) {
      continue;
     }
     $81 = ((($6)) + 24|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = ($82|0)>(2);
     if ($83) {
      $84 = ((($6)) + 40|0);
      $85 = ((($84)) + 4|0);
      $86 = HEAP16[$85>>1]|0;
      $87 = $86&65535;
      $88 = ($87|0)==(45);
      if ($88) {
       continue;
      }
     }
    }
    $89 = ((($6)) + 40|0);
    $90 = ((($89)) + 2|0);
    $91 = HEAP16[$90>>1]|0;
    $92 = $91&65535;
    $93 = ($92|0)==(43);
    $94 = $93&1;
    $11 = $94;
    $12 = 0;
    $13 = 0;
    $14 = 0;
    $15 = 0;
    $95 = ((($6)) + 28|0);
    HEAP32[$95>>2] = 2;
    $96 = ((($6)) + 28|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ((($6)) + 24|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($97|0)<($99|0);
    if (!($100)) {
     break;
    }
    $101 = ((($6)) + 28|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = ((($6)) + 40|0);
    $104 = (($103) + ($102<<1)|0);
    $105 = HEAP16[$104>>1]|0;
    $106 = $105&255;
    $107 = (_isValidChar($106)|0);
    $108 = ($107|0)!=(0);
    if (!($108)) {
     break;
    }
    $109 = ((($6)) + 28|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = ((($6)) + 40|0);
    $112 = (($111) + ($110<<1)|0);
    $12 = $112;
    $14 = 1;
    $113 = ((($6)) + 28|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = (($114) + 1)|0;
    HEAP32[$113>>2] = $115;
    while(1) {
     $116 = ((($6)) + 28|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = ((($6)) + 24|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = ($117|0)<($119|0);
     if (!($120)) {
      break;
     }
     $121 = ((($6)) + 28|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = ((($6)) + 40|0);
     $124 = (($123) + ($122<<1)|0);
     $125 = HEAP16[$124>>1]|0;
     $126 = $125&255;
     $127 = (_isValidChar($126)|0);
     $128 = ($127|0)!=(0);
     if (!($128)) {
      break;
     }
     $129 = $14;
     $130 = (($129) + 1)|0;
     $14 = $130;
     $131 = ((($6)) + 28|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 1)|0;
     HEAP32[$131>>2] = $133;
    }
    $134 = ((($6)) + 28|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = ((($6)) + 24|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = ($135|0)<($137|0);
    L34: do {
     if ($138) {
      $139 = ((($6)) + 28|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ((($6)) + 40|0);
      $142 = (($141) + ($140<<1)|0);
      $143 = HEAP16[$142>>1]|0;
      $144 = $143&65535;
      $145 = ($144|0)==(58);
      if ($145) {
       $146 = ((($6)) + 28|0);
       $147 = HEAP32[$146>>2]|0;
       $148 = (($147) + 1)|0;
       HEAP32[$146>>2] = $148;
       while(1) {
        $149 = ((($6)) + 28|0);
        $150 = HEAP32[$149>>2]|0;
        $151 = ((($6)) + 24|0);
        $152 = HEAP32[$151>>2]|0;
        $153 = ($150|0)<($152|0);
        if ($153) {
         $154 = ((($6)) + 28|0);
         $155 = HEAP32[$154>>2]|0;
         $156 = ((($6)) + 40|0);
         $157 = (($156) + ($155<<1)|0);
         $158 = HEAP16[$157>>1]|0;
         $159 = $158&255;
         $160 = (_isSpace($159)|0);
         $161 = ($160|0)!=(0);
         $366 = $161;
        } else {
         $366 = 0;
        }
        $162 = ((($6)) + 28|0);
        $163 = HEAP32[$162>>2]|0;
        if (!($366)) {
         break;
        }
        $164 = (($163) + 1)|0;
        HEAP32[$162>>2] = $164;
       }
       $165 = ((($6)) + 24|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = ($163|0)<($166|0);
       if (!($167)) {
        break L15;
       }
       $168 = $11;
       $169 = ($168|0)!=(0);
       if ($169) {
        $170 = ((($6)) + 28|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ((($6)) + 40|0);
        $173 = (($172) + ($171<<1)|0);
        $174 = HEAP16[$173>>1]|0;
        $175 = $174&255;
        $176 = (_isValidChar($175)|0);
        $177 = ($176|0)!=(0);
        if (!($177)) {
         break L15;
        }
       }
       $178 = ((($6)) + 28|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ((($6)) + 40|0);
       $181 = (($180) + ($179<<1)|0);
       $13 = $181;
       $15 = 1;
       $182 = ((($6)) + 28|0);
       $183 = HEAP32[$182>>2]|0;
       $184 = (($183) + 1)|0;
       HEAP32[$182>>2] = $184;
       while(1) {
        $185 = ((($6)) + 28|0);
        $186 = HEAP32[$185>>2]|0;
        $187 = ((($6)) + 24|0);
        $188 = HEAP32[$187>>2]|0;
        $189 = ($186|0)<($188|0);
        if (!($189)) {
         break L34;
        }
        $190 = $11;
        $191 = ($190|0)!=(0);
        if ($191) {
         $192 = ((($6)) + 28|0);
         $193 = HEAP32[$192>>2]|0;
         $194 = ((($6)) + 40|0);
         $195 = (($194) + ($193<<1)|0);
         $196 = HEAP16[$195>>1]|0;
         $197 = $196&255;
         $198 = (_isValidChar($197)|0);
         $199 = ($198|0)!=(0);
         if (!($199)) {
          break L34;
         }
        }
        $200 = $15;
        $201 = (($200) + 1)|0;
        $15 = $201;
        $202 = ((($6)) + 28|0);
        $203 = HEAP32[$202>>2]|0;
        $204 = (($203) + 1)|0;
        HEAP32[$202>>2] = $204;
       }
      }
     }
    } while(0);
    $205 = ((($6)) + 28|0);
    $206 = HEAP32[$205>>2]|0;
    $207 = ((($6)) + 24|0);
    $208 = HEAP32[$207>>2]|0;
    $209 = ($206|0)==($208|0);
    if (!($209)) {
     break;
    }
    $210 = $13;
    $211 = ($210|0)!=(0|0);
    if ($211) {
     $212 = $13;
     $213 = $15;
     $214 = (_widestrToStr($212,$213)|0);
     $215 = $214;
    } else {
     $215 = 0;
    }
    $16 = $215;
    $216 = $11;
    $217 = ($216|0)!=(0);
    if (!($217)) {
     $218 = $16;
     $219 = ($218|0)!=(0|0);
     if (!($219)) {
      break;
     }
     $17 = 0;
     $18 = 0;
     $19 = 1;
     while(1) {
      $220 = $17;
      $221 = $16;
      $222 = (($221) + ($220)|0);
      $223 = HEAP8[$222>>0]|0;
      $224 = ($223<<24>>24)!=(0);
      if (!($224)) {
       break;
      }
      $225 = $17;
      $226 = $16;
      $227 = (($226) + ($225)|0);
      $228 = HEAP8[$227>>0]|0;
      $229 = (_isSpace($228)|0);
      $230 = ($229|0)!=(0);
      do {
       if ($230) {
        $231 = $19;
        $232 = ($231|0)!=(0);
        if ($232) {
         break;
        }
        $233 = $18;
        $234 = (($233) + 1)|0;
        $18 = $234;
        $235 = $16;
        $236 = (($235) + ($233)|0);
        HEAP8[$236>>0] = 32;
        $19 = 1;
       } else {
        $237 = $17;
        $238 = $16;
        $239 = (($238) + ($237)|0);
        $240 = HEAP8[$239>>0]|0;
        $241 = $18;
        $242 = (($241) + 1)|0;
        $18 = $242;
        $243 = $16;
        $244 = (($243) + ($241)|0);
        HEAP8[$244>>0] = $240;
        $19 = 0;
       }
      } while(0);
      $245 = $17;
      $246 = (($245) + 1)|0;
      $17 = $246;
     }
     $247 = $18;
     $248 = ($247|0)>(0);
     do {
      if ($248) {
       $249 = $18;
       $250 = (($249) - 1)|0;
       $251 = $16;
       $252 = (($251) + ($250)|0);
       $253 = HEAP8[$252>>0]|0;
       $254 = $253 << 24 >> 24;
       $255 = ($254|0)==(32);
       if (!($255)) {
        break;
       }
       $256 = $18;
       $257 = (($256) + -1)|0;
       $18 = $257;
      }
     } while(0);
     $258 = $18;
     $259 = $16;
     $260 = (($259) + ($258)|0);
     HEAP8[$260>>0] = 0;
    }
    $261 = $12;
    $262 = $14;
    $263 = (_widestrToStr($261,$262)|0);
    $20 = $263;
    $264 = $20;
    $265 = (_strcasecmp($264,9797)|0);
    $266 = ($265|0)==(0);
    $267 = (_rpl_malloc(12)|0);
    do {
     if ($266) {
      $268 = $16;
      _feature_new($22,9804,$268);
      $269 = ((($22)) + 8|0);
      $270 = ((($6)) + 12|0);
      $271 = HEAP32[$270>>2]|0;
      HEAP32[$269>>2] = $271;
      dest=$267; src=$22; stop=dest+12|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
      $21 = $267;
      $272 = (_rpl_malloc(12)|0);
      $273 = $16;
      _feature_new($24,9813,$273);
      $274 = ((($24)) + 8|0);
      $275 = ((($6)) + 12|0);
      $276 = HEAP32[$275>>2]|0;
      HEAP32[$274>>2] = $276;
      dest=$272; src=$24; stop=dest+12|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
      $23 = $272;
      $277 = $21;
      $278 = HEAP32[$277>>2]|0;
      $279 = $21;
      $280 = ((($279)) + 4|0);
      $281 = HEAP32[$280>>2]|0;
      HEAP32[$vararg_buffer12>>2] = $278;
      $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
      HEAP32[$vararg_ptr15>>2] = $281;
      __lou_logMessage(10000,9820,$vararg_buffer12);
      $282 = $23;
      $283 = HEAP32[$282>>2]|0;
      $284 = $23;
      $285 = ((($284)) + 4|0);
      $286 = HEAP32[$285>>2]|0;
      HEAP32[$vararg_buffer16>>2] = $283;
      $vararg_ptr19 = ((($vararg_buffer16)) + 4|0);
      HEAP32[$vararg_ptr19>>2] = $286;
      __lou_logMessage(10000,9820,$vararg_buffer16);
      $287 = $5;
      $288 = $21;
      $289 = (_list_conj($287,$288,0,0,16)|0);
      $5 = $289;
      $290 = $23;
      $291 = (_list_conj($289,$290,0,0,16)|0);
      $5 = $291;
      $292 = $10;
      $293 = ($292|0)!=(0|0);
      if (!($293)) {
       $294 = $21;
       $10 = $294;
      }
      $295 = $9;
      $296 = ($295|0)!=(0|0);
      if (!($296)) {
       $297 = $23;
       $9 = $297;
      }
     } else {
      $298 = $20;
      $299 = $16;
      _feature_new($26,$298,$299);
      $300 = ((($26)) + 8|0);
      $301 = ((($6)) + 12|0);
      $302 = HEAP32[$301>>2]|0;
      HEAP32[$300>>2] = $302;
      dest=$267; src=$26; stop=dest+12|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
      $25 = $267;
      $303 = $25;
      $304 = HEAP32[$303>>2]|0;
      $305 = $25;
      $306 = ((($305)) + 4|0);
      $307 = HEAP32[$306>>2]|0;
      HEAP32[$vararg_buffer20>>2] = $304;
      $vararg_ptr23 = ((($vararg_buffer20)) + 4|0);
      HEAP32[$vararg_ptr23>>2] = $307;
      __lou_logMessage(10000,9820,$vararg_buffer20);
      $308 = $5;
      $309 = $25;
      $310 = (_list_conj($308,$309,0,0,16)|0);
      $5 = $310;
      $311 = $20;
      $312 = (_strcasecmp($311,9804)|0);
      $313 = ($312|0)==(0);
      if ($313) {
       $314 = $10;
       $315 = ($314|0)!=(0|0);
       if ($315) {
        break;
       }
       $316 = $25;
       $10 = $316;
       break;
      } else {
       $317 = $20;
       $318 = (_strcasecmp($317,9813)|0);
       $319 = ($318|0)!=(0);
       $320 = $9;
       $321 = ($320|0)!=(0|0);
       $or$cond5 = $319 | $321;
       if ($or$cond5) {
        break;
       }
       $322 = $25;
       $9 = $322;
       break;
      }
     }
    } while(0);
    $323 = $20;
    _rpl_free($323);
    $324 = $16;
    _rpl_free($324);
   }
   if ((label|0) == 67) {
    $325 = ((($6)) + 8|0);
    $326 = HEAP32[$325>>2]|0;
    (_fclose($326)|0);
    $327 = $9;
    $328 = ($327|0)==(0|0);
    $329 = $10;
    $330 = ($329|0)!=(0|0);
    $or$cond = $328 & $330;
    if (!($or$cond)) {
     break;
    }
    $331 = (_rpl_malloc(12)|0);
    $332 = $10;
    $333 = ((($332)) + 4|0);
    $334 = HEAP32[$333>>2]|0;
    _feature_new($27,9813,$334);
    $335 = ((($27)) + 8|0);
    HEAP32[$335>>2] = -1;
    dest=$331; src=$27; stop=dest+12|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $9 = $331;
    $336 = $9;
    $337 = HEAP32[$336>>2]|0;
    $338 = $9;
    $339 = ((($338)) + 4|0);
    $340 = HEAP32[$339>>2]|0;
    HEAP32[$vararg_buffer24>>2] = $337;
    $vararg_ptr27 = ((($vararg_buffer24)) + 4|0);
    HEAP32[$vararg_ptr27>>2] = $340;
    __lou_logMessage(10000,9820,$vararg_buffer24);
    $341 = $5;
    $342 = $9;
    $343 = (_list_conj($341,$342,0,0,16)|0);
    $5 = $343;
    break;
   }
   $347 = ((($6)) + 28|0);
   $348 = HEAP32[$347>>2]|0;
   $349 = ((($6)) + 24|0);
   $350 = HEAP32[$349>>2]|0;
   $351 = ($348|0)<($350|0);
   if ($351) {
    $352 = ((($6)) + 28|0);
    $353 = HEAP32[$352>>2]|0;
    $354 = ((($6)) + 40|0);
    $355 = (($354) + ($353<<1)|0);
    $356 = HEAP16[$355>>1]|0;
    $357 = $356&65535;
    $358 = ((($6)) + 12|0);
    $359 = HEAP32[$358>>2]|0;
    $360 = ((($6)) + 28|0);
    $361 = HEAP32[$360>>2]|0;
    HEAP32[$vararg_buffer31>>2] = $357;
    $vararg_ptr34 = ((($vararg_buffer31)) + 4|0);
    HEAP32[$vararg_ptr34>>2] = $359;
    $vararg_ptr35 = ((($vararg_buffer31)) + 8|0);
    HEAP32[$vararg_ptr35>>2] = $361;
    __lou_logMessage(40000,9869,$vararg_buffer31);
   } else {
    $362 = ((($6)) + 12|0);
    $363 = HEAP32[$362>>2]|0;
    HEAP32[$vararg_buffer36>>2] = $363;
    __lou_logMessage(40000,9917,$vararg_buffer36);
   }
   $364 = $5;
   _list_free($364);
   $2 = 0;
   $365 = $2;
   STACKTOP = sp;return ($365|0);
  } else {
   $344 = HEAP32[$6>>2]|0;
   HEAP32[$vararg_buffer28>>2] = $344;
   __lou_logMessage(40000,9846,$vararg_buffer28);
  }
 } while(0);
 $345 = $5;
 $346 = (_list_sort($345,17)|0);
 $2 = $346;
 $365 = $2;
 STACKTOP = sp;return ($365|0);
}
function _isValidChar($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 << 24 >> 24;
 $4 = ($3|0)>=(48);
 if ($4) {
  $5 = $1;
  $6 = $5 << 24 >> 24;
  $7 = ($6|0)<=(57);
  if ($7) {
   $30 = 1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $8 = $1;
   $9 = $8 << 24 >> 24;
   $10 = ($9|0)>=(65);
   if ($10) {
    $11 = $1;
    $12 = $11 << 24 >> 24;
    $13 = ($12|0)<=(90);
    if ($13) {
     $30 = 1;
     break;
    }
   }
   $14 = $1;
   $15 = $14 << 24 >> 24;
   $16 = ($15|0)>=(97);
   if ($16) {
    $17 = $1;
    $18 = $17 << 24 >> 24;
    $19 = ($18|0)<=(122);
    if ($19) {
     $30 = 1;
     break;
    }
   }
   $20 = $1;
   $21 = $20 << 24 >> 24;
   $22 = ($21|0)==(45);
   if ($22) {
    $30 = 1;
   } else {
    $23 = $1;
    $24 = $23 << 24 >> 24;
    $25 = ($24|0)==(46);
    if ($25) {
     $30 = 1;
    } else {
     $26 = $1;
     $27 = $26 << 24 >> 24;
     $28 = ($27|0)==(95);
     $30 = $28;
    }
   }
  }
 } while(0);
 $29 = $30&1;
 STACKTOP = sp;return ($29|0);
}
function _isSpace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 << 24 >> 24;
 $4 = ($3|0)==(32);
 if ($4) {
  $9 = 1;
 } else {
  $5 = $1;
  $6 = $5 << 24 >> 24;
  $7 = ($6|0)==(9);
  $9 = $7;
 }
 $8 = $9&1;
 STACKTOP = sp;return ($8|0);
}
function _widestrToStr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $3;
 $7 = (1 + ($6))|0;
 $8 = $7;
 $9 = (_rpl_malloc($8)|0);
 $4 = $9;
 $5 = 0;
 while(1) {
  $10 = $5;
  $11 = $3;
  $12 = ($10>>>0)<($11>>>0);
  $13 = $5;
  if (!($12)) {
   break;
  }
  $14 = $2;
  $15 = (($14) + ($13<<1)|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&255;
  $18 = $5;
  $19 = $4;
  $20 = (($19) + ($18)|0);
  HEAP8[$20>>0] = $17;
  $21 = $5;
  $22 = (($21) + 1)|0;
  $5 = $22;
 }
 $23 = $4;
 $24 = (($23) + ($13)|0);
 HEAP8[$24>>0] = 0;
 $25 = $4;
 STACKTOP = sp;return ($25|0);
}
function _feature_new($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $3 = $1;
 $4 = $2;
 $6 = $3;
 $7 = (___strdup($6)|0);
 HEAP32[$5>>2] = $7;
 $8 = $4;
 $9 = ($8|0)!=(0|0);
 $10 = $4;
 $11 = HEAP32[373]|0;
 $12 = $9 ? $10 : $11;
 $13 = (___strdup($12)|0);
 $14 = ((($5)) + 4|0);
 HEAP32[$14>>2] = $13;
 ;HEAP32[$0>>2]=HEAP32[$5>>2]|0;HEAP32[$0+4>>2]=HEAP32[$5+4>>2]|0;
 STACKTOP = sp;return;
}
function _feature_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 _rpl_free($5);
 $6 = $1;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 _rpl_free($8);
 $9 = $1;
 _rpl_free($9);
 STACKTOP = sp;return;
}
function _cmpFeatures($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 $8 = HEAP32[$7>>2]|0;
 $9 = (_strcasecmp($6,$8)|0);
 $4 = $9;
 $10 = $4;
 $11 = ($10|0)==(0);
 if (!($11)) {
  $19 = $4;
  STACKTOP = sp;return ($19|0);
 }
 $12 = $2;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (_strcasecmp($14,$17)|0);
 $4 = $18;
 $19 = $4;
 STACKTOP = sp;return ($19|0);
}
function _list_sort($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $6 = $2;
 $5 = $6;
 while(1) {
  $7 = $5;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   break;
  }
  $9 = $4;
  $10 = $5;
  $11 = HEAP32[$10>>2]|0;
  $12 = $3;
  $13 = $5;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_list_conj($9,$11,$12,0,$15)|0);
  $4 = $16;
  $17 = $5;
  $18 = ((($17)) + 4|0);
  HEAP32[$18>>2] = 0;
  $19 = $5;
  $20 = ((($19)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $5 = $21;
 }
 $22 = $2;
 _list_free($22);
 $23 = $4;
 STACKTOP = sp;return ($23|0);
}
function _parseQuery($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $or$cond = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer11 = sp + 24|0;
 $vararg_buffer7 = sp + 16|0;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer = sp;
 $12 = sp + 68|0;
 $13 = sp + 56|0;
 $14 = sp + 44|0;
 $2 = $0;
 $3 = 0;
 $4 = 0;
 $5 = 0;
 $6 = 0;
 $7 = 0;
 $9 = 0;
 while(1) {
  $18 = $9;
  $19 = (($18) + 1)|0;
  $9 = $19;
  $20 = $2;
  $21 = (($20) + ($18)|0);
  $8 = $21;
  $22 = $8;
  $23 = HEAP8[$22>>0]|0;
  $24 = (_isSpace($23)|0);
  $25 = ($24|0)!=(0);
  if (!($25)) {
   $26 = $8;
   $27 = HEAP8[$26>>0]|0;
   $28 = $27 << 24 >> 24;
   $29 = ($28|0)==(10);
   $30 = $29&1;
   $31 = $8;
   $32 = HEAP8[$31>>0]|0;
   $33 = $32 << 24 >> 24;
   $34 = ($33|0)==(0);
   $35 = $34&1;
   $36 = $30 | $35;
   $37 = ($36|0)!=(0);
   if (!($37)) {
    $93 = $8;
    $94 = HEAP8[$93>>0]|0;
    $95 = $94 << 24 >> 24;
    $96 = ($95|0)==(58);
    if ($96) {
     $97 = $4;
     $98 = ($97|0)==(0|0);
     $99 = $5;
     $100 = ($99|0)!=(0|0);
     $or$cond = $98 | $100;
     if ($or$cond) {
      label = 26;
      break;
     }
     $101 = $9;
     $102 = (($101) + 1)|0;
     $9 = $102;
     $103 = $2;
     $104 = (($103) + ($101)|0);
     $8 = $104;
     $105 = $8;
     $106 = HEAP8[$105>>0]|0;
     $107 = (_isValidChar($106)|0);
     $108 = ($107|0)!=(0);
     if (!($108)) {
      label = 26;
      break;
     }
     $109 = $8;
     $5 = $109;
     $7 = 1;
     continue;
    }
    $110 = $8;
    $111 = HEAP8[$110>>0]|0;
    $112 = (_isValidChar($111)|0);
    $113 = ($112|0)!=(0);
    if (!($113)) {
     label = 26;
     break;
    }
    $114 = $5;
    $115 = ($114|0)!=(0|0);
    if ($115) {
     $116 = $7;
     $117 = (($116) + 1)|0;
     $7 = $117;
     continue;
    }
    $118 = $4;
    $119 = ($118|0)!=(0|0);
    if ($119) {
     $120 = $6;
     $121 = (($120) + 1)|0;
     $6 = $121;
     continue;
    } else {
     $122 = $8;
     $4 = $122;
     $6 = 1;
     continue;
    }
   }
  }
  $38 = $4;
  $39 = ($38|0)!=(0|0);
  if ($39) {
   $10 = 0;
   $40 = $5;
   $41 = ($40|0)!=(0|0);
   if ($41) {
    $42 = $7;
    $43 = (($42) + 1)|0;
    $44 = (_rpl_malloc($43)|0);
    $10 = $44;
    $45 = $7;
    $46 = $10;
    $47 = (($46) + ($45)|0);
    HEAP8[$47>>0] = 0;
    $48 = $10;
    $49 = $5;
    $50 = $7;
    _memcpy(($48|0),($49|0),($50|0))|0;
   }
   $51 = $6;
   $52 = (($51) + 1)|0;
   $53 = (_rpl_malloc($52)|0);
   $11 = $53;
   $54 = $6;
   $55 = $11;
   $56 = (($55) + ($54)|0);
   HEAP8[$56>>0] = 0;
   $57 = $11;
   $58 = $4;
   $59 = $6;
   _memcpy(($57|0),($58|0),($59|0))|0;
   $60 = $11;
   $61 = (_strcasecmp($60,9797)|0);
   $62 = ($61|0)==(0);
   if ($62) {
    $63 = $10;
    _feature_new($12,9804,$63);
    $64 = ((($12)) + 8|0);
    HEAP32[$64>>2] = 0;
    $65 = $10;
    _feature_new($13,9813,$65);
    $66 = ((($13)) + 8|0);
    HEAP32[$66>>2] = 0;
    $67 = HEAP32[$12>>2]|0;
    $68 = ((($12)) + 4|0);
    $69 = HEAP32[$68>>2]|0;
    HEAP32[$vararg_buffer>>2] = $67;
    $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr2>>2] = $69;
    __lou_logMessage(10000,10007,$vararg_buffer);
    $70 = HEAP32[$13>>2]|0;
    $71 = ((($13)) + 4|0);
    $72 = HEAP32[$71>>2]|0;
    HEAP32[$vararg_buffer3>>2] = $70;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $72;
    __lou_logMessage(10000,10007,$vararg_buffer3);
    $73 = $3;
    $74 = (_rpl_malloc(12)|0);
    dest=$74; src=$12; stop=dest+12|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $75 = (_list_conj($73,$74,0,0,16)|0);
    $76 = (_rpl_malloc(12)|0);
    dest=$76; src=$13; stop=dest+12|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $77 = (_list_conj($75,$76,0,0,16)|0);
    $3 = $77;
   } else {
    $78 = $11;
    $79 = $10;
    _feature_new($14,$78,$79);
    $80 = ((($14)) + 8|0);
    HEAP32[$80>>2] = 0;
    $81 = HEAP32[$14>>2]|0;
    $82 = ((($14)) + 4|0);
    $83 = HEAP32[$82>>2]|0;
    HEAP32[$vararg_buffer7>>2] = $81;
    $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
    HEAP32[$vararg_ptr10>>2] = $83;
    __lou_logMessage(10000,10007,$vararg_buffer7);
    $84 = $3;
    $85 = (_rpl_malloc(12)|0);
    dest=$85; src=$14; stop=dest+12|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $86 = (_list_conj($84,$85,0,0,16)|0);
    $3 = $86;
   }
   $87 = $11;
   _rpl_free($87);
   $88 = $10;
   _rpl_free($88);
   $5 = 0;
   $4 = 0;
   $7 = 0;
   $6 = 0;
  }
  $89 = $8;
  $90 = HEAP8[$89>>0]|0;
  $91 = $90 << 24 >> 24;
  $92 = ($91|0)==(0);
  if ($92) {
   break;
  }
 }
 if ((label|0) == 26) {
  $137 = $8;
  $138 = $9;
  HEAP32[$vararg_buffer11>>2] = $137;
  $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
  HEAP32[$vararg_ptr14>>2] = $138;
  __lou_logMessage(40000,10033,$vararg_buffer11);
  $139 = $3;
  _list_free($139);
  $1 = 0;
  $140 = $1;
  STACKTOP = sp;return ($140|0);
 }
 $15 = 1;
 $123 = $3;
 $16 = $123;
 while(1) {
  $124 = $16;
  $125 = ($124|0)!=(0|0);
  if (!($125)) {
   break;
  }
  $126 = $16;
  $127 = HEAP32[$126>>2]|0;
  $17 = $127;
  $128 = $15;
  $129 = (($128) + 1)|0;
  $15 = $129;
  $130 = $17;
  $131 = ((($130)) + 8|0);
  HEAP32[$131>>2] = $128;
  $132 = $16;
  $133 = ((($132)) + 8|0);
  $134 = HEAP32[$133>>2]|0;
  $16 = $134;
 }
 $135 = $3;
 $136 = (_list_sort($135,18)|0);
 $1 = $136;
 $140 = $1;
 STACKTOP = sp;return ($140|0);
}
function _matchFeatureLists($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $18 = $5;
 $19 = ($18|0)!=(0);
 $6 = 10;
 if ($19) {
  $7 = -25;
  $8 = -5;
  $9 = -1;
 } else {
  $7 = -100;
  $8 = -20;
  $9 = -1;
 }
 $10 = 0;
 $20 = $3;
 $11 = $20;
 $21 = $4;
 $12 = $21;
 while(1) {
  $22 = $11;
  $23 = ($22|0)!=(0|0);
  $24 = $12;
  $25 = ($24|0)!=(0|0);
  if (!($23)) {
   if (!($25)) {
    break;
   }
   $26 = $9;
   $27 = $10;
   $28 = (($27) + ($26))|0;
   $10 = $28;
   $29 = $12;
   $13 = $29;
   $30 = $13;
   $31 = ((($30)) + 8|0);
   $32 = HEAP32[$31>>2]|0;
   $13 = $32;
   while(1) {
    $33 = $13;
    $34 = ($33|0)!=(0|0);
    if ($34) {
     $35 = $13;
     $36 = HEAP32[$35>>2]|0;
     $37 = $12;
     $38 = HEAP32[$37>>2]|0;
     $39 = (_cmpKeys($36,$38)|0);
     $40 = ($39|0)==(0);
     $120 = $40;
    } else {
     $120 = 0;
    }
    $41 = $13;
    if (!($120)) {
     break;
    }
    $42 = ((($41)) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    $13 = $43;
   }
   $12 = $41;
   continue;
  }
  if (!($25)) {
   $44 = $8;
   $45 = $10;
   $46 = (($45) + ($44))|0;
   $10 = $46;
   $47 = $11;
   $48 = ((($47)) + 8|0);
   $49 = HEAP32[$48>>2]|0;
   $11 = $49;
   continue;
  }
  $50 = $11;
  $51 = HEAP32[$50>>2]|0;
  $52 = $12;
  $53 = HEAP32[$52>>2]|0;
  $54 = (_cmpKeys($51,$53)|0);
  $14 = $54;
  $55 = $14;
  $56 = ($55|0)<(0);
  if ($56) {
   $57 = $8;
   $58 = $10;
   $59 = (($58) + ($57))|0;
   $10 = $59;
   $60 = $11;
   $61 = ((($60)) + 8|0);
   $62 = HEAP32[$61>>2]|0;
   $11 = $62;
   continue;
  }
  $63 = $14;
  $64 = ($63|0)>(0);
  if ($64) {
   $65 = $9;
   $66 = $10;
   $67 = (($66) + ($65))|0;
   $10 = $67;
   $68 = $12;
   $15 = $68;
   $69 = $15;
   $70 = ((($69)) + 8|0);
   $71 = HEAP32[$70>>2]|0;
   $15 = $71;
   while(1) {
    $72 = $15;
    $73 = ($72|0)!=(0|0);
    if ($73) {
     $74 = $15;
     $75 = HEAP32[$74>>2]|0;
     $76 = $12;
     $77 = HEAP32[$76>>2]|0;
     $78 = (_cmpKeys($75,$77)|0);
     $79 = ($78|0)==(0);
     $121 = $79;
    } else {
     $121 = 0;
    }
    $80 = $15;
    if (!($121)) {
     break;
    }
    $81 = ((($80)) + 8|0);
    $82 = HEAP32[$81>>2]|0;
    $15 = $82;
   }
   $12 = $80;
   continue;
  }
  $16 = 0;
  $83 = $12;
  $17 = $83;
  while(1) {
   $84 = $16;
   $85 = ($84|0)!=(0);
   if (!($85)) {
    $86 = $11;
    $87 = HEAP32[$86>>2]|0;
    $88 = ((($87)) + 4|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = $17;
    $91 = HEAP32[$90>>2]|0;
    $92 = ((($91)) + 4|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = (_strcasecmp($89,$93)|0);
    $95 = ($94|0)==(0);
    if ($95) {
     $16 = 1;
    }
   }
   $96 = $17;
   $97 = ((($96)) + 8|0);
   $98 = HEAP32[$97>>2]|0;
   $17 = $98;
   $99 = $17;
   $100 = ($99|0)!=(0|0);
   if (!($100)) {
    break;
   }
   $101 = $17;
   $102 = HEAP32[$101>>2]|0;
   $103 = $12;
   $104 = HEAP32[$103>>2]|0;
   $105 = (_cmpKeys($102,$104)|0);
   $106 = ($105|0)!=(0);
   if ($106) {
    break;
   }
  }
  $107 = $16;
  $108 = ($107|0)!=(0);
  if ($108) {
   $109 = $6;
   $110 = $10;
   $111 = (($110) + ($109))|0;
   $10 = $111;
  } else {
   $112 = $7;
   $113 = $10;
   $114 = (($113) + ($112))|0;
   $10 = $114;
  }
  $115 = $11;
  $116 = ((($115)) + 8|0);
  $117 = HEAP32[$116>>2]|0;
  $11 = $117;
  $118 = $17;
  $12 = $118;
 }
 $119 = $10;
 STACKTOP = sp;return ($119|0);
}
function _cmpMatches($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $4;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($7|0)>($10|0);
 if ($11) {
  $2 = -1;
  $12 = $2;
  STACKTOP = sp;return ($12|0);
 } else {
  $2 = 1;
  $12 = $2;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _cmpKeys($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = (_strcasecmp($5,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __lou_pattern_compile($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $13 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 HEAP32[$13>>2] = 0;
 $14 = $9;
 HEAP16[$14>>1] = 2;
 $15 = $9;
 $16 = ((($15)) + 2|0);
 HEAP16[$16>>1] = 0;
 $17 = $7;
 $18 = $8;
 $19 = $9;
 $20 = $10;
 $21 = $9;
 $22 = $9;
 $23 = ((($22)) + 2|0);
 $24 = $11;
 $25 = $12;
 $26 = (_pattern_compile_1($17,$18,$13,$19,$20,$21,$23,$24,$25)|0);
 $27 = ($26|0)!=(0);
 if (!($27)) {
  $6 = 0;
  $46 = $6;
  STACKTOP = sp;return ($46|0);
 }
 $28 = $9;
 $29 = HEAP16[$28>>1]|0;
 $30 = $29&65535;
 $31 = (($30) + 3)|0;
 $32 = $31&65535;
 HEAP16[$28>>1] = $32;
 $33 = $9;
 $34 = $10;
 $35 = $9;
 $36 = (_pattern_compile_2($33,2,$34,$35)|0);
 $37 = ($36|0)!=(0);
 if (!($37)) {
  $6 = 0;
  $46 = $6;
  STACKTOP = sp;return ($46|0);
 }
 $38 = $9;
 $39 = $10;
 $40 = $9;
 $41 = (_pattern_compile_3($38,2,$39,$40)|0);
 $42 = ($41|0)!=(0);
 if ($42) {
  $43 = $9;
  $44 = HEAP16[$43>>1]|0;
  $45 = $44&65535;
  $6 = $45;
  $46 = $6;
  STACKTOP = sp;return ($46|0);
 } else {
  $6 = 0;
  $46 = $6;
  STACKTOP = sp;return ($46|0);
 }
 return (0)|0;
}
function __lou_pattern_reverse($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _pattern_reverse_expression($2,2);
 STACKTOP = sp;return;
}
function __lou_pattern_check($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = $6;
 $13 = $7;
 $14 = $8;
 $15 = $9;
 $16 = $10;
 $17 = $11;
 $18 = (_pattern_check_hook($12,$13,$14,$15,$16,0,0,0,$17)|0);
 STACKTOP = sp;return ($18|0);
}
function _pattern_check_hook($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $18 = sp + 8|0;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $21 = $10;
 HEAP32[$18>>2] = $21;
 $22 = $13;
 $23 = ((($22)) + 2|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = $24&65535;
 $26 = $25<<2;
 $27 = (_rpl_malloc($26)|0);
 $20 = $27;
 $28 = $20;
 $29 = $13;
 $30 = ((($29)) + 2|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31&65535;
 $33 = $32<<2;
 _memset(($28|0),0,($33|0))|0;
 $34 = $9;
 $35 = $11;
 $36 = $12;
 $37 = $13;
 $38 = $14;
 $39 = $15;
 $40 = $16;
 $41 = $20;
 $42 = $17;
 $43 = (_pattern_check_expression($34,$18,$35,$36,$37,$38,$39,$40,2,0,0,$41,$42)|0);
 $19 = $43;
 $44 = $20;
 _rpl_free($44);
 $45 = $19;
 STACKTOP = sp;return ($45|0);
}
function _pattern_check_expression($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0;
 var $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $switch$split2D = 0, $switch$split312D = 0, $switch$split342D = 0, $switch$split372D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $14 = $0;
 $15 = $1;
 $16 = $2;
 $17 = $3;
 $18 = $4;
 $19 = $5;
 $20 = $6;
 $21 = $7;
 $22 = $8;
 $23 = $9;
 $24 = $10;
 $25 = $11;
 $26 = $12;
 $32 = 0;
 $33 = $15;
 $34 = HEAP32[$33>>2]|0;
 $28 = $34;
 L1: while(1) {
  $35 = $22;
  $36 = (($35) + 0)|0;
  $37 = $18;
  $38 = (($37) + ($36<<1)|0);
  $39 = HEAP16[$38>>1]|0;
  $40 = $39&65535;
  $41 = ($40|0)==(65535);
  if ($41) {
   $42 = $22;
   $43 = (($42) + 0)|0;
   $44 = $18;
   $45 = (($44) + ($43<<1)|0);
   $46 = HEAP16[$45>>1]|0;
   $47 = $46&65535;
   $48 = ($47|0)==(65535);
   $50 = $48;
  } else {
   $50 = 0;
  }
  $49 = $50 ^ 1;
  if (!($49)) {
   label = 68;
   break;
  }
  $51 = $22;
  $52 = (($51) + 0)|0;
  $53 = $18;
  $54 = (($53) + ($52<<1)|0);
  $55 = HEAP16[$54>>1]|0;
  $56 = $55&65535;
  $57 = ($56|0)==(12);
  $58 = $15;
  $59 = HEAP32[$58>>2]|0;
  $60 = $17;
  $61 = Math_imul($59, $60)|0;
  $62 = $16;
  $63 = $17;
  $64 = Math_imul($62, $63)|0;
  $65 = ($61|0)>=($64|0);
  if ($57) {
   label = 6;
   break;
  }
  if ($65) {
   $70 = $22;
   $71 = (($70) + 0)|0;
   $72 = $18;
   $73 = (($72) + ($71<<1)|0);
   $74 = HEAP16[$73>>1]|0;
   $75 = $74&65535;
   switch ($75|0) {
   case 9:  {
    label = 11;
    break L1;
    break;
   }
   case 10: case 8:  {
    label = 16;
    break L1;
    break;
   }
   default: {
   }
   }
  }
  $88 = $22;
  $89 = (($88) + 0)|0;
  $90 = $18;
  $91 = (($90) + ($89<<1)|0);
  $92 = HEAP16[$91>>1]|0;
  $93 = $92&65535;
  $switch$split2D = ($93|0)<(7);
  L11: do {
   if ($switch$split2D) {
    switch ($93|0) {
    case 1:  {
     $94 = $22;
     $95 = (($94) + 2)|0;
     $96 = $18;
     $97 = (($96) + ($95<<1)|0);
     $98 = HEAP16[$97>>1]|0;
     $99 = $98&65535;
     $22 = $99;
     break L11;
     break;
    }
    case 2:  {
     $100 = $22;
     $101 = (($100) + 3)|0;
     $102 = $18;
     $103 = (($102) + ($101<<1)|0);
     $104 = HEAP16[$103>>1]|0;
     $105 = $104&65535;
     $22 = $105;
     break L11;
     break;
    }
    case 3:  {
     $106 = $23;
     $107 = ($106|0)!=(0);
     $108 = $107 ^ 1;
     $109 = $108&1;
     $23 = $109;
     $110 = $22;
     $111 = (($110) + 3)|0;
     $112 = $18;
     $113 = (($112) + ($111<<1)|0);
     $114 = HEAP16[$113>>1]|0;
     $115 = $114&65535;
     $22 = $115;
     break L11;
     break;
    }
    case 5: case 4:  {
     $116 = $22;
     $117 = $24;
     $118 = ($116|0)==($117|0);
     if ($118) {
      $119 = $24;
      $120 = (($119) + 4)|0;
      $121 = $18;
      $122 = (($121) + ($120<<1)|0);
      $123 = HEAP16[$122>>1]|0;
      $124 = $123&65535;
      $125 = $25;
      $126 = (($125) + ($124<<2)|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = (($127) + 1)|0;
      HEAP32[$126>>2] = $128;
      label = 25;
     } else {
      $129 = $22;
      $130 = (($129) + 4)|0;
      $131 = $18;
      $132 = (($131) + ($130<<1)|0);
      $133 = HEAP16[$132>>1]|0;
      $134 = $133&65535;
      $135 = $25;
      $136 = (($135) + ($134<<2)|0);
      $137 = HEAP32[$136>>2]|0;
      $138 = ($137|0)!=(0);
      if (!($138)) {
       $139 = $22;
       $24 = $139;
       $140 = $24;
       $141 = (($140) + 4)|0;
       $142 = $18;
       $143 = (($142) + ($141<<1)|0);
       $144 = HEAP16[$143>>1]|0;
       $145 = $144&65535;
       $146 = $25;
       $147 = (($146) + ($145<<2)|0);
       HEAP32[$147>>2] = 1;
       label = 25;
      }
     }
     if ((label|0) == 25) {
      label = 0;
      $148 = $15;
      $149 = HEAP32[$148>>2]|0;
      $27 = $149;
      $150 = $14;
      $151 = $15;
      $152 = $16;
      $153 = $17;
      $154 = $18;
      $155 = $19;
      $156 = $20;
      $157 = $21;
      $158 = $22;
      $159 = (($158) + 3)|0;
      $160 = $18;
      $161 = (($160) + ($159<<1)|0);
      $162 = HEAP16[$161>>1]|0;
      $163 = $162&65535;
      $164 = $23;
      $165 = $24;
      $166 = $25;
      $167 = $26;
      $168 = (_pattern_check_expression($150,$151,$152,$153,$154,$155,$156,$157,$163,$164,$165,$166,$167)|0);
      $30 = $168;
      $169 = $30;
      $170 = ($169|0)!=(0);
      if ($170) {
       label = 26;
       break L1;
      }
      $171 = $27;
      $172 = $15;
      HEAP32[$172>>2] = $171;
      $173 = $24;
      $174 = (($173) + 4)|0;
      $175 = $18;
      $176 = (($175) + ($174<<1)|0);
      $177 = HEAP16[$176>>1]|0;
      $178 = $177&65535;
      $179 = $25;
      $180 = (($179) + ($178<<2)|0);
      $181 = HEAP32[$180>>2]|0;
      $182 = (($181) + -1)|0;
      HEAP32[$180>>2] = $182;
      $183 = $22;
      $184 = (($183) + 0)|0;
      $185 = $18;
      $186 = (($185) + ($184<<1)|0);
      $187 = HEAP16[$186>>1]|0;
      $188 = $187&65535;
      $189 = ($188|0)==(4);
      if ($189) {
       $190 = $24;
       $191 = (($190) + 4)|0;
       $192 = $18;
       $193 = (($192) + ($191<<1)|0);
       $194 = HEAP16[$193>>1]|0;
       $195 = $194&65535;
       $196 = $25;
       $197 = (($196) + ($195<<2)|0);
       $198 = HEAP32[$197>>2]|0;
       $199 = ($198|0)<(1);
       if ($199) {
        label = 29;
        break L1;
       }
      }
     }
     $200 = $22;
     $201 = (($200) + 2)|0;
     $202 = $18;
     $203 = (($202) + ($201<<1)|0);
     $204 = HEAP16[$203>>1]|0;
     $205 = $204&65535;
     $22 = $205;
     break L11;
     break;
    }
    case 6:  {
     $206 = $15;
     $207 = HEAP32[$206>>2]|0;
     $27 = $207;
     $208 = $14;
     $209 = $15;
     $210 = $16;
     $211 = $17;
     $212 = $18;
     $213 = $19;
     $214 = $20;
     $215 = $21;
     $216 = $22;
     $217 = (($216) + 3)|0;
     $218 = $18;
     $219 = (($218) + ($217<<1)|0);
     $220 = HEAP16[$219>>1]|0;
     $221 = $220&65535;
     $222 = $23;
     $223 = $24;
     $224 = $25;
     $225 = $26;
     $226 = (_pattern_check_expression($208,$209,$210,$211,$212,$213,$214,$215,$221,$222,$223,$224,$225)|0);
     $227 = ($226|0)!=(0);
     if ($227) {
      label = 32;
      break L1;
     }
     $228 = $27;
     $229 = $15;
     HEAP32[$229>>2] = $228;
     $230 = $22;
     $231 = (($230) + 2)|0;
     $232 = $18;
     $233 = (($232) + ($231<<1)|0);
     $234 = HEAP16[$233>>1]|0;
     $235 = $234&65535;
     $22 = $235;
     break L11;
     break;
    }
    default: {
     label = 58;
     break L1;
    }
    }
   } else {
    $switch$split312D = ($93|0)<(10);
    if ($switch$split312D) {
     switch ($93|0) {
     case 7:  {
      $236 = $15;
      $237 = HEAP32[$236>>2]|0;
      $27 = $237;
      $238 = $14;
      $239 = $15;
      $240 = $16;
      $241 = $17;
      $242 = $18;
      $243 = $19;
      $244 = $20;
      $245 = $21;
      $246 = $22;
      $247 = (($246) + 3)|0;
      $248 = $18;
      $249 = (($248) + ($247<<1)|0);
      $250 = HEAP16[$249>>1]|0;
      $251 = $250&65535;
      $252 = $23;
      $253 = $24;
      $254 = $25;
      $255 = $26;
      $256 = (_pattern_check_expression($238,$239,$240,$241,$242,$243,$244,$245,$251,$252,$253,$254,$255)|0);
      $257 = ($256|0)!=(0);
      if ($257) {
       label = 35;
       break L1;
      }
      $258 = $27;
      $259 = $15;
      HEAP32[$259>>2] = $258;
      $260 = $22;
      $261 = (($260) + 4)|0;
      $262 = $18;
      $263 = (($262) + ($261<<1)|0);
      $264 = HEAP16[$263>>1]|0;
      $265 = $264&65535;
      $22 = $265;
      break L11;
      break;
     }
     case 8:  {
      $266 = $17;
      $267 = $15;
      $268 = HEAP32[$267>>2]|0;
      $269 = (($268) + ($266))|0;
      HEAP32[$267>>2] = $269;
      $270 = $22;
      $271 = (($270) + 2)|0;
      $272 = $18;
      $273 = (($272) + ($271<<1)|0);
      $274 = HEAP16[$273>>1]|0;
      $275 = $274&65535;
      $22 = $275;
      break L11;
      break;
     }
     case 9:  {
      $276 = $15;
      $277 = HEAP32[$276>>2]|0;
      $278 = $14;
      $279 = (($278) + ($277<<1)|0);
      $280 = HEAP16[$279>>1]|0;
      $281 = $22;
      $282 = (($281) + 3)|0;
      $283 = $18;
      $284 = (($283) + ($282<<1)|0);
      $285 = $26;
      $286 = (_pattern_check_attrs($280,$284,$285)|0);
      $30 = $286;
      $287 = $30;
      $288 = ($287|0)!=(0);
      $289 = $23;
      $290 = ($289|0)!=(0);
      $or$cond = $288 & $290;
      if ($or$cond) {
       label = 39;
       break L1;
      }
      $291 = $30;
      $292 = ($291|0)!=(0);
      $293 = $23;
      $294 = ($293|0)!=(0);
      $or$cond3 = $292 | $294;
      if (!($or$cond3)) {
       label = 41;
       break L1;
      }
      $295 = $17;
      $296 = $15;
      $297 = HEAP32[$296>>2]|0;
      $298 = (($297) + ($295))|0;
      HEAP32[$296>>2] = $298;
      $299 = $22;
      $300 = (($299) + 2)|0;
      $301 = $18;
      $302 = (($301) + ($300<<1)|0);
      $303 = HEAP16[$302>>1]|0;
      $304 = $303&65535;
      $22 = $304;
      break L11;
      break;
     }
     default: {
      label = 58;
      break L1;
     }
     }
    }
    $switch$split342D = ($93|0)<(11);
    if ($switch$split342D) {
     switch ($93|0) {
     case 10:  {
      break;
     }
     default: {
      label = 58;
      break L1;
     }
     }
     $305 = $15;
     $306 = HEAP32[$305>>2]|0;
     $307 = $14;
     $308 = (($307) + ($306<<1)|0);
     $309 = HEAP16[$308>>1]|0;
     $310 = $22;
     $311 = (($310) + 3)|0;
     $312 = $18;
     $313 = (($312) + ($311<<1)|0);
     $314 = (_pattern_check_chars($309,$313)|0);
     $30 = $314;
     $315 = $30;
     $316 = ($315|0)!=(0);
     $317 = $23;
     $318 = ($317|0)!=(0);
     $or$cond5 = $316 & $318;
     if ($or$cond5) {
      label = 44;
      break L1;
     }
     $319 = $30;
     $320 = ($319|0)!=(0);
     $321 = $23;
     $322 = ($321|0)!=(0);
     $or$cond7 = $320 | $322;
     if (!($or$cond7)) {
      label = 46;
      break L1;
     }
     $323 = $17;
     $324 = $15;
     $325 = HEAP32[$324>>2]|0;
     $326 = (($325) + ($323))|0;
     HEAP32[$324>>2] = $326;
     $327 = $22;
     $328 = (($327) + 2)|0;
     $329 = $18;
     $330 = (($329) + ($328<<1)|0);
     $331 = HEAP16[$330>>1]|0;
     $332 = $331&65535;
     $22 = $332;
     break;
    }
    $switch$split372D = ($93|0)<(65535);
    if (!($switch$split372D)) {
     switch ($93|0) {
     case 65535:  {
      break L11;
      break;
     }
     default: {
      label = 58;
      break L1;
     }
     }
    }
    switch ($93|0) {
    case 11:  {
     break;
    }
    default: {
     label = 58;
     break L1;
    }
    }
    $333 = $19;
    $334 = ($333|0)==(0|0);
    if ($334) {
     label = 49;
     break L1;
    }
    $335 = $22;
    $336 = (($335) + 3)|0;
    $337 = $18;
    $338 = (($337) + ($336<<1)|0);
    $32 = $338;
    $31 = 0;
    while(1) {
     $339 = $31;
     $340 = $32;
     $341 = HEAP16[$340>>1]|0;
     $342 = $341&65535;
     $343 = ($339|0)<($342|0);
     if (!($343)) {
      break;
     }
     $344 = $31;
     $345 = (($344) + 1)|0;
     $346 = $32;
     $347 = (($346) + ($345<<1)|0);
     $348 = HEAP16[$347>>1]|0;
     $349 = $31;
     $350 = $20;
     $351 = (($350) + ($349<<1)|0);
     HEAP16[$351>>1] = $348;
     $352 = $31;
     $353 = (($352) + 1)|0;
     $31 = $353;
    }
    $354 = $19;
    $355 = $15;
    $356 = HEAP32[$355>>2]|0;
    $357 = $14;
    $358 = (($357) + ($356<<1)|0);
    $359 = HEAP16[$358>>1]|0;
    $360 = $32;
    $361 = HEAP16[$360>>1]|0;
    $362 = $361&65535;
    $363 = (FUNCTION_TABLE_iii[$354 & 31]($359,$362)|0);
    $30 = $363;
    $364 = $30;
    $365 = ($364|0)!=(0);
    $366 = $23;
    $367 = ($366|0)!=(0);
    $or$cond9 = $365 & $367;
    if ($or$cond9) {
     label = 54;
     break L1;
    }
    $368 = $30;
    $369 = ($368|0)!=(0);
    $370 = $23;
    $371 = ($370|0)!=(0);
    $or$cond11 = $369 | $371;
    if (!($or$cond11)) {
     label = 56;
     break L1;
    }
    $372 = $17;
    $373 = $15;
    $374 = HEAP32[$373>>2]|0;
    $375 = (($374) + ($372))|0;
    HEAP32[$373>>2] = $375;
    $376 = $22;
    $377 = (($376) + 2)|0;
    $378 = $18;
    $379 = (($378) + ($377<<1)|0);
    $380 = HEAP16[$379>>1]|0;
    $381 = $380&65535;
    $22 = $381;
   }
  } while(0);
  while(1) {
   $382 = $22;
   $383 = (($382) + 0)|0;
   $384 = $18;
   $385 = (($384) + ($383<<1)|0);
   $386 = HEAP16[$385>>1]|0;
   $387 = $386&65535;
   $388 = ($387|0)==(65535);
   if (!($388)) {
    continue L1;
   }
   $389 = $22;
   $390 = (($389) + 2)|0;
   $391 = $18;
   $392 = (($391) + ($390<<1)|0);
   $393 = HEAP16[$392>>1]|0;
   $394 = $393&65535;
   $395 = ($394|0)==(65535);
   if ($395) {
    continue L1;
   }
   $396 = $22;
   $397 = (($396) + 2)|0;
   $398 = $18;
   $399 = (($398) + ($397<<1)|0);
   $400 = HEAP16[$399>>1]|0;
   $401 = $400&65535;
   $22 = $401;
   $402 = $22;
   $403 = (($402) + 0)|0;
   $404 = $18;
   $405 = (($404) + ($403<<1)|0);
   $406 = HEAP16[$405>>1]|0;
   $407 = $406&65535;
   $408 = ($407|0)==(5);
   if ($408) {
    break;
   }
   $409 = $22;
   $410 = (($409) + 0)|0;
   $411 = $18;
   $412 = (($411) + ($410<<1)|0);
   $413 = HEAP16[$412>>1]|0;
   $414 = $413&65535;
   $415 = ($414|0)==(4);
   if ($415) {
    break;
   }
   $420 = $22;
   $421 = (($420) + 0)|0;
   $422 = $18;
   $423 = (($422) + ($421<<1)|0);
   $424 = HEAP16[$423>>1]|0;
   $425 = $424&65535;
   $426 = ($425|0)==(3);
   if ($426) {
    $427 = $23;
    $428 = ($427|0)!=(0);
    $429 = $428 ^ 1;
    $430 = $429&1;
    $23 = $430;
   }
   $431 = $22;
   $432 = (($431) + 2)|0;
   $433 = $18;
   $434 = (($433) + ($432<<1)|0);
   $435 = HEAP16[$434>>1]|0;
   $436 = $435&65535;
   $22 = $436;
  }
  $416 = $15;
  $417 = HEAP32[$416>>2]|0;
  $418 = $28;
  $419 = ($417|0)==($418|0);
  if ($419) {
   label = 64;
   break;
  }
 }
 switch (label|0) {
  case 6: {
   $66 = $23;
   if ($65) {
    $67 = ($66|0)!=(0);
    $68 = $67 ^ 1;
    $69 = $68&1;
    $13 = $69;
    $437 = $13;
    STACKTOP = sp;return ($437|0);
   } else {
    $13 = $66;
    $437 = $13;
    STACKTOP = sp;return ($437|0);
   }
   break;
  }
  case 11: {
   $76 = $22;
   $77 = (($76) + 3)|0;
   $78 = $18;
   $79 = (($78) + ($77<<1)|0);
   $80 = HEAP16[$79>>1]|0;
   $81 = $80&65535;
   $82 = $81 << 16;
   $29 = $82;
   $83 = $29;
   $84 = $83 & 16777216;
   $85 = ($84|0)!=(0);
   if (!($85)) {
    $13 = 0;
    $437 = $13;
    STACKTOP = sp;return ($437|0);
   }
   $86 = $23;
   $87 = ($86|0)!=(0);
   if ($87) {
    $13 = 0;
    $437 = $13;
    STACKTOP = sp;return ($437|0);
   } else {
    $13 = 1;
    $437 = $13;
    STACKTOP = sp;return ($437|0);
   }
   break;
  }
  case 16: {
   $13 = 0;
   $437 = $13;
   STACKTOP = sp;return ($437|0);
   break;
  }
  case 26: {
   $13 = 1;
   $437 = $13;
   STACKTOP = sp;return ($437|0);
   break;
  }
  case 29: {
   $13 = 0;
   $437 = $13;
   STACKTOP = sp;return ($437|0);
   break;
  }
  case 32: {
   $13 = 1;
   $437 = $13;
   STACKTOP = sp;return ($437|0);
   break;
  }
  case 35: {
   $13 = 1;
   $437 = $13;
   STACKTOP = sp;return ($437|0);
   break;
  }
  case 39: {
   $13 = 0;
   $437 = $13;
   STACKTOP = sp;return ($437|0);
   break;
  }
  case 41: {
   $13 = 0;
   $437 = $13;
   STACKTOP = sp;return ($437|0);
   break;
  }
  case 44: {
   $13 = 0;
   $437 = $13;
   STACKTOP = sp;return ($437|0);
   break;
  }
  case 46: {
   $13 = 0;
   $437 = $13;
   STACKTOP = sp;return ($437|0);
   break;
  }
  case 49: {
   $13 = 0;
   $437 = $13;
   STACKTOP = sp;return ($437|0);
   break;
  }
  case 54: {
   $13 = 0;
   $437 = $13;
   STACKTOP = sp;return ($437|0);
   break;
  }
  case 56: {
   $13 = 0;
   $437 = $13;
   STACKTOP = sp;return ($437|0);
   break;
  }
  case 58: {
   $13 = 0;
   $437 = $13;
   STACKTOP = sp;return ($437|0);
   break;
  }
  case 64: {
   $13 = 0;
   $437 = $13;
   STACKTOP = sp;return ($437|0);
   break;
  }
  case 68: {
   $13 = 1;
   $437 = $13;
   STACKTOP = sp;return ($437|0);
   break;
  }
 }
 return (0)|0;
}
function _pattern_check_attrs($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $5;
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = $10 << 16;
 $12 = $5;
 $13 = ((($12)) + 2|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14&65535;
 $16 = $11 | $15;
 $17 = $16 & -50331649;
 $7 = $17;
 $18 = $4;
 $19 = $7;
 $20 = ($19|0)<(0);
 $21 = $20 << 31 >> 31;
 $22 = $6;
 $23 = (_checkAttr($18,$19,$21,$22)|0);
 $24 = ($23|0)!=(0);
 if ($24) {
  $3 = 1;
  $25 = $3;
  STACKTOP = sp;return ($25|0);
 } else {
  $3 = 0;
  $25 = $3;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function _pattern_check_chars($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $4;
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 $10 = (($9) + 1)|0;
 $5 = $10;
 $6 = 1;
 while(1) {
  $11 = $6;
  $12 = $5;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $3;
  $15 = $14&65535;
  $16 = $6;
  $17 = $4;
  $18 = (($17) + ($16<<1)|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = $19&65535;
  $21 = ($15|0)==($20|0);
  if ($21) {
   break;
  }
  $22 = $6;
  $23 = (($22) + 1)|0;
  $6 = $23;
 }
 $24 = $6;
 $25 = $5;
 $26 = ($24|0)==($25|0);
 if ($26) {
  $2 = 0;
  $27 = $2;
  STACKTOP = sp;return ($27|0);
 } else {
  $2 = 1;
  $27 = $2;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function _checkAttr($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $4 = $0;
 $7 = $5;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $2;
 $6 = $3;
 $11 = $4;
 $12 = HEAP32[374]|0;
 $13 = ($12|0)!=(0);
 $14 = $13 ? 0 : 1;
 $15 = $6;
 $16 = (_findCharOrDots($11,$14,$15)|0);
 $17 = ((($16)) + 24|0);
 $18 = $17;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = $5;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = $20 & $26;
 $31 = $23 & $29;
 $32 = ($30|0)!=(0);
 $33 = ($31|0)!=(0);
 $34 = $32 | $33;
 $35 = $34 ? 1 : 0;
 STACKTOP = sp;return ($35|0);
}
function _findCharOrDots($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $11 = $4;
 $12 = (__lou_charHash($11)|0);
 $10 = $12;
 $13 = $5;
 $14 = ($13|0)==(0);
 $15 = $10;
 $16 = $6;
 if ($14) {
  $17 = ((($16)) + 13160|0);
  $18 = (($17) + ($15<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $9 = $19;
  $7 = 232;
 } else {
  $20 = ((($16)) + 17652|0);
  $21 = (($20) + ($15<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $9 = $22;
  $7 = 288;
 }
 while(1) {
  $23 = $9;
  $24 = ($23|0)!=(0);
  if (!($24)) {
   label = 8;
   break;
  }
  $25 = $9;
  $26 = $6;
  $27 = ((($26)) + 31168|0);
  $28 = (($27) + ($25<<3)|0);
  $8 = $28;
  $29 = $8;
  $30 = ((($29)) + 44|0);
  $31 = HEAP16[$30>>1]|0;
  $32 = $31&65535;
  $33 = $4;
  $34 = $33&65535;
  $35 = ($32|0)==($34|0);
  $36 = $8;
  if ($35) {
   label = 6;
   break;
  }
  $37 = ((($36)) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  $9 = $38;
 }
 if ((label|0) == 6) {
  $3 = $36;
  $43 = $3;
  STACKTOP = sp;return ($43|0);
 }
 else if ((label|0) == 8) {
  $39 = $4;
  $40 = $7;
  $41 = ((($40)) + 44|0);
  HEAP16[$41>>1] = $39;
  $42 = $7;
  $3 = $42;
  $43 = $3;
  STACKTOP = sp;return ($43|0);
 }
 return (0)|0;
}
function _pattern_reverse_expression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $7 = $3;
 $8 = (($7) + 2)|0;
 $9 = $2;
 $10 = (($9) + ($8<<1)|0);
 $11 = HEAP16[$10>>1]|0;
 $4 = $11;
 $12 = $4;
 $13 = $12&65535;
 $14 = (($13) + 0)|0;
 $15 = $2;
 $16 = (($15) + ($14<<1)|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17&65535;
 $19 = ($18|0)==(65535);
 if ($19) {
  STACKTOP = sp;return;
 }
 while(1) {
  $20 = $4;
  $21 = $20&65535;
  $22 = (($21) + 0)|0;
  $23 = $2;
  $24 = (($23) + ($22<<1)|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $25&65535;
  $27 = ($26|0)!=(65535);
  $28 = $4;
  $29 = $28&65535;
  if (!($27)) {
   break;
  }
  $30 = (($29) + 2)|0;
  $31 = $2;
  $32 = (($31) + ($30<<1)|0);
  $33 = HEAP16[$32>>1]|0;
  $4 = $33;
 }
 $34 = (($29) + 1)|0;
 $35 = $2;
 $36 = (($35) + ($34<<1)|0);
 $37 = HEAP16[$36>>1]|0;
 $5 = $37;
 $38 = $5;
 $39 = $38&65535;
 $40 = (($39) + 1)|0;
 $41 = $2;
 $42 = (($41) + ($40<<1)|0);
 $43 = HEAP16[$42>>1]|0;
 $6 = $43;
 $44 = $5;
 $45 = $3;
 $46 = (($45) + 2)|0;
 $47 = $2;
 $48 = (($47) + ($46<<1)|0);
 HEAP16[$48>>1] = $44;
 $49 = $3;
 $50 = $49&65535;
 $51 = $5;
 $52 = $51&65535;
 $53 = (($52) + 1)|0;
 $54 = $2;
 $55 = (($54) + ($53<<1)|0);
 HEAP16[$55>>1] = $50;
 $56 = $6;
 $57 = $5;
 $58 = $57&65535;
 $59 = (($58) + 2)|0;
 $60 = $2;
 $61 = (($60) + ($59<<1)|0);
 HEAP16[$61>>1] = $56;
 $62 = $2;
 $63 = $5;
 $64 = $63&65535;
 _pattern_reverse_branch($62,$64);
 while(1) {
  $65 = $6;
  $66 = $65&65535;
  $67 = $3;
  $68 = ($66|0)!=($67|0);
  if (!($68)) {
   break;
  }
  $69 = $6;
  $5 = $69;
  $70 = $6;
  $71 = $70&65535;
  $72 = (($71) + 1)|0;
  $73 = $2;
  $74 = (($73) + ($72<<1)|0);
  $75 = HEAP16[$74>>1]|0;
  $6 = $75;
  $76 = $2;
  $77 = $5;
  $78 = $77&65535;
  _pattern_reverse_branch($76,$78);
  $79 = $5;
  $80 = $79&65535;
  $81 = (($80) + 2)|0;
  $82 = $2;
  $83 = (($82) + ($81<<1)|0);
  $84 = HEAP16[$83>>1]|0;
  $85 = $5;
  $86 = $85&65535;
  $87 = (($86) + 1)|0;
  $88 = $2;
  $89 = (($88) + ($87<<1)|0);
  HEAP16[$89>>1] = $84;
  $90 = $6;
  $91 = $5;
  $92 = $91&65535;
  $93 = (($92) + 2)|0;
  $94 = $2;
  $95 = (($94) + ($93<<1)|0);
  HEAP16[$95>>1] = $90;
 }
 $96 = $5;
 $97 = $96&65535;
 $98 = (($97) + 2)|0;
 $99 = $2;
 $100 = (($99) + ($98<<1)|0);
 $101 = HEAP16[$100>>1]|0;
 $102 = $5;
 $103 = $102&65535;
 $104 = (($103) + 1)|0;
 $105 = $2;
 $106 = (($105) + ($104<<1)|0);
 HEAP16[$106>>1] = $101;
 $107 = $4;
 $108 = $5;
 $109 = $108&65535;
 $110 = (($109) + 2)|0;
 $111 = $2;
 $112 = (($111) + ($110<<1)|0);
 HEAP16[$112>>1] = $107;
 $113 = $5;
 $114 = $4;
 $115 = $114&65535;
 $116 = (($115) + 1)|0;
 $117 = $2;
 $118 = (($117) + ($116<<1)|0);
 HEAP16[$118>>1] = $113;
 STACKTOP = sp;return;
}
function _pattern_reverse_branch($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = (($5) + 0)|0;
 $7 = $2;
 $8 = (($7) + ($6<<1)|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 switch ($10|0) {
 case 7:  {
  $11 = $2;
  $12 = $3;
  $13 = (($12) + 3)|0;
  $14 = $2;
  $15 = (($14) + ($13<<1)|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&65535;
  _pattern_reverse_expression($11,$17);
  $18 = $3;
  $19 = (($18) + 3)|0;
  $20 = $2;
  $21 = (($20) + ($19<<1)|0);
  $22 = HEAP16[$21>>1]|0;
  $4 = $22;
  $23 = $3;
  $24 = (($23) + 4)|0;
  $25 = $2;
  $26 = (($25) + ($24<<1)|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $3;
  $29 = (($28) + 3)|0;
  $30 = $2;
  $31 = (($30) + ($29<<1)|0);
  HEAP16[$31>>1] = $27;
  $32 = $4;
  $33 = $3;
  $34 = (($33) + 4)|0;
  $35 = $2;
  $36 = (($35) + ($34<<1)|0);
  HEAP16[$36>>1] = $32;
  break;
 }
 case 6: case 5: case 4: case 3: case 2:  {
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 $37 = $2;
 $38 = $3;
 $39 = (($38) + 3)|0;
 $40 = $2;
 $41 = (($40) + ($39<<1)|0);
 $42 = HEAP16[$41>>1]|0;
 $43 = $42&65535;
 _pattern_reverse_expression($37,$43);
 STACKTOP = sp;return;
}
function _pattern_compile_1($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $20 = $15;
 $21 = HEAP16[$20>>1]|0;
 $22 = $21&65535;
 $23 = (($22) + 6)|0;
 $24 = $14;
 $25 = ($23|0)>=($24|0);
 if ($25) {
  $9 = 0;
  $122 = $9;
  STACKTOP = sp;return ($122|0);
 }
 $26 = $15;
 $27 = HEAP16[$26>>1]|0;
 $28 = $27&65535;
 $19 = $28;
 $29 = $15;
 $30 = HEAP16[$29>>1]|0;
 $31 = $30&65535;
 $32 = (($31) + 0)|0;
 $33 = $13;
 $34 = (($33) + ($32<<1)|0);
 HEAP16[$34>>1] = 1;
 $35 = $15;
 $36 = HEAP16[$35>>1]|0;
 $37 = $36&65535;
 $38 = (($37) + 1)|0;
 $39 = $13;
 $40 = (($39) + ($38<<1)|0);
 HEAP16[$40>>1] = -1;
 $41 = $15;
 $42 = HEAP16[$41>>1]|0;
 $43 = $42&65535;
 $44 = (($43) + 3)|0;
 $45 = $44&65535;
 HEAP16[$41>>1] = $45;
 $46 = $15;
 $47 = HEAP16[$46>>1]|0;
 $48 = $19;
 $49 = (($48) + 2)|0;
 $50 = $13;
 $51 = (($50) + ($49<<1)|0);
 HEAP16[$51>>1] = $47;
 $52 = $15;
 $53 = HEAP16[$52>>1]|0;
 $54 = $53&65535;
 $55 = (($54) + 0)|0;
 $56 = $13;
 $57 = (($56) + ($55<<1)|0);
 HEAP16[$57>>1] = -1;
 $58 = $19;
 $59 = $58&65535;
 $60 = $15;
 $61 = HEAP16[$60>>1]|0;
 $62 = $61&65535;
 $63 = (($62) + 1)|0;
 $64 = $13;
 $65 = (($64) + ($63<<1)|0);
 HEAP16[$65>>1] = $59;
 $66 = $15;
 $67 = HEAP16[$66>>1]|0;
 $68 = $67&65535;
 $69 = (($68) + 2)|0;
 $70 = $13;
 $71 = (($70) + ($69<<1)|0);
 HEAP16[$71>>1] = -1;
 while(1) {
  $72 = $12;
  $73 = HEAP32[$72>>2]|0;
  $74 = $11;
  $75 = ($73|0)<($74|0);
  $76 = $15;
  $77 = HEAP16[$76>>1]|0;
  $78 = $77&65535;
  if (!($75)) {
   label = 10;
   break;
  }
  $19 = $78;
  $79 = $10;
  $80 = $11;
  $81 = $12;
  $82 = $13;
  $83 = $14;
  $84 = $15;
  $85 = $16;
  $86 = $17;
  $87 = $18;
  $88 = (_pattern_compile_expression($79,$80,$81,$82,$83,$84,$85,$86,$87)|0);
  $89 = ($88|0)!=(0);
  if (!($89)) {
   label = 6;
   break;
  }
  $90 = $15;
  $91 = HEAP16[$90>>1]|0;
  $92 = $91&65535;
  $93 = (($92) + 3)|0;
  $94 = $14;
  $95 = ($93|0)>=($94|0);
  if ($95) {
   label = 8;
   break;
  }
  $96 = $15;
  $97 = HEAP16[$96>>1]|0;
  $98 = $19;
  $99 = (($98) + 2)|0;
  $100 = $13;
  $101 = (($100) + ($99<<1)|0);
  HEAP16[$101>>1] = $97;
  $102 = $15;
  $103 = HEAP16[$102>>1]|0;
  $104 = $103&65535;
  $105 = (($104) + 0)|0;
  $106 = $13;
  $107 = (($106) + ($105<<1)|0);
  HEAP16[$107>>1] = -1;
  $108 = $19;
  $109 = $108&65535;
  $110 = $15;
  $111 = HEAP16[$110>>1]|0;
  $112 = $111&65535;
  $113 = (($112) + 1)|0;
  $114 = $13;
  $115 = (($114) + ($113<<1)|0);
  HEAP16[$115>>1] = $109;
  $116 = $15;
  $117 = HEAP16[$116>>1]|0;
  $118 = $117&65535;
  $119 = (($118) + 2)|0;
  $120 = $13;
  $121 = (($120) + ($119<<1)|0);
  HEAP16[$121>>1] = -1;
 }
 if ((label|0) == 6) {
  $9 = 0;
  $122 = $9;
  STACKTOP = sp;return ($122|0);
 }
 else if ((label|0) == 8) {
  $9 = 0;
  $122 = $9;
  STACKTOP = sp;return ($122|0);
 }
 else if ((label|0) == 10) {
  $9 = $78;
  $122 = $9;
  STACKTOP = sp;return ($122|0);
 }
 return (0)|0;
}
function _pattern_compile_2($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 while(1) {
  $13 = $6;
  $14 = (($13) + 0)|0;
  $15 = $5;
  $16 = (($15) + ($14<<1)|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17&65535;
  $19 = ($18|0)!=(65535);
  if (!($19)) {
   label = 16;
   break;
  }
  $20 = $6;
  $21 = (($20) + 0)|0;
  $22 = $5;
  $23 = (($22) + ($21<<1)|0);
  $24 = HEAP16[$23>>1]|0;
  $25 = $24&65535;
  $26 = ($25|0)==(2);
  if ($26) {
   label = 5;
  } else {
   $27 = $6;
   $28 = (($27) + 0)|0;
   $29 = $5;
   $30 = (($29) + ($28<<1)|0);
   $31 = HEAP16[$30>>1]|0;
   $32 = $31&65535;
   $33 = ($32|0)==(3);
   if ($33) {
    label = 5;
   }
  }
  if ((label|0) == 5) {
   label = 0;
   $34 = $5;
   $35 = $6;
   $36 = (($35) + 3)|0;
   $37 = $5;
   $38 = (($37) + ($36<<1)|0);
   $39 = HEAP16[$38>>1]|0;
   $40 = $39&65535;
   $41 = $7;
   $42 = $8;
   $43 = (_pattern_compile_2($34,$40,$41,$42)|0);
   $44 = ($43|0)!=(0);
   if (!($44)) {
    label = 6;
    break;
   }
  }
  $45 = $6;
  $46 = (($45) + 0)|0;
  $47 = $5;
  $48 = (($47) + ($46<<1)|0);
  $49 = HEAP16[$48>>1]|0;
  $50 = $49&65535;
  $51 = ($50|0)==(5);
  if ($51) {
   label = 10;
  } else {
   $52 = $6;
   $53 = (($52) + 0)|0;
   $54 = $5;
   $55 = (($54) + ($53<<1)|0);
   $56 = HEAP16[$55>>1]|0;
   $57 = $56&65535;
   $58 = ($57|0)==(4);
   if ($58) {
    label = 10;
   } else {
    $59 = $6;
    $60 = (($59) + 0)|0;
    $61 = $5;
    $62 = (($61) + ($60<<1)|0);
    $63 = HEAP16[$62>>1]|0;
    $64 = $63&65535;
    $65 = ($64|0)==(6);
    if ($65) {
     label = 10;
    }
   }
  }
  if ((label|0) == 10) {
   label = 0;
   $66 = $8;
   $67 = HEAP16[$66>>1]|0;
   $68 = $67&65535;
   $69 = (($68) + 6)|0;
   $70 = $7;
   $71 = ($69|0)>=($70|0);
   if ($71) {
    label = 11;
    break;
   }
   $72 = $6;
   $73 = (($72) + 1)|0;
   $74 = $5;
   $75 = (($74) + ($73<<1)|0);
   $76 = HEAP16[$75>>1]|0;
   $77 = $76&65535;
   $12 = $77;
   $78 = $12;
   $79 = (($78) + 0)|0;
   $80 = $5;
   $81 = (($80) + ($79<<1)|0);
   $82 = HEAP16[$81>>1]|0;
   $83 = $82&65535;
   $84 = ($83|0)==(1);
   if ($84) {
    label = 13;
    break;
   }
   $85 = $12;
   $86 = (($85) + 1)|0;
   $87 = $5;
   $88 = (($87) + ($86<<1)|0);
   $89 = HEAP16[$88>>1]|0;
   $90 = $89&65535;
   $11 = $90;
   $91 = $8;
   $92 = HEAP16[$91>>1]|0;
   $93 = $92&65535;
   $9 = $93;
   $94 = $9;
   $95 = (($94) + 0)|0;
   $96 = $5;
   $97 = (($96) + ($95<<1)|0);
   HEAP16[$97>>1] = 1;
   $98 = $9;
   $99 = (($98) + 1)|0;
   $100 = $5;
   $101 = (($100) + ($99<<1)|0);
   HEAP16[$101>>1] = -1;
   $102 = $12;
   $103 = $102&65535;
   $104 = $9;
   $105 = (($104) + 2)|0;
   $106 = $5;
   $107 = (($106) + ($105<<1)|0);
   HEAP16[$107>>1] = $103;
   $108 = $8;
   $109 = HEAP16[$108>>1]|0;
   $110 = $109&65535;
   $111 = (($110) + 3)|0;
   $112 = $111&65535;
   HEAP16[$108>>1] = $112;
   $113 = $8;
   $114 = HEAP16[$113>>1]|0;
   $115 = $114&65535;
   $10 = $115;
   $116 = $10;
   $117 = (($116) + 0)|0;
   $118 = $5;
   $119 = (($118) + ($117<<1)|0);
   HEAP16[$119>>1] = -1;
   $120 = $12;
   $121 = $120&65535;
   $122 = $10;
   $123 = (($122) + 1)|0;
   $124 = $5;
   $125 = (($124) + ($123<<1)|0);
   HEAP16[$125>>1] = $121;
   $126 = $6;
   $127 = $126&65535;
   $128 = $10;
   $129 = (($128) + 2)|0;
   $130 = $5;
   $131 = (($130) + ($129<<1)|0);
   HEAP16[$131>>1] = $127;
   $132 = $8;
   $133 = HEAP16[$132>>1]|0;
   $134 = $133&65535;
   $135 = (($134) + 3)|0;
   $136 = $135&65535;
   HEAP16[$132>>1] = $136;
   $137 = $9;
   $138 = $137&65535;
   $139 = $6;
   $140 = (($139) + 3)|0;
   $141 = $5;
   $142 = (($141) + ($140<<1)|0);
   HEAP16[$142>>1] = $138;
   $143 = $6;
   $144 = $143&65535;
   $145 = $11;
   $146 = (($145) + 2)|0;
   $147 = $5;
   $148 = (($147) + ($146<<1)|0);
   HEAP16[$148>>1] = $144;
   $149 = $11;
   $150 = $149&65535;
   $151 = $6;
   $152 = (($151) + 1)|0;
   $153 = $5;
   $154 = (($153) + ($152<<1)|0);
   HEAP16[$154>>1] = $150;
   $155 = $9;
   $156 = $155&65535;
   $157 = $12;
   $158 = (($157) + 1)|0;
   $159 = $5;
   $160 = (($159) + ($158<<1)|0);
   HEAP16[$160>>1] = $156;
   $161 = $10;
   $162 = $161&65535;
   $163 = $12;
   $164 = (($163) + 2)|0;
   $165 = $5;
   $166 = (($165) + ($164<<1)|0);
   HEAP16[$166>>1] = $162;
  }
  $167 = $6;
  $168 = (($167) + 2)|0;
  $169 = $5;
  $170 = (($169) + ($168<<1)|0);
  $171 = HEAP16[$170>>1]|0;
  $172 = $171&65535;
  $6 = $172;
 }
 if ((label|0) == 6) {
  $4 = 0;
  $173 = $4;
  STACKTOP = sp;return ($173|0);
 }
 else if ((label|0) == 11) {
  $4 = 0;
  $173 = $4;
  STACKTOP = sp;return ($173|0);
 }
 else if ((label|0) == 13) {
  $4 = 0;
  $173 = $4;
  STACKTOP = sp;return ($173|0);
 }
 else if ((label|0) == 16) {
  $4 = 1;
  $173 = $4;
  STACKTOP = sp;return ($173|0);
 }
 return (0)|0;
}
function _pattern_compile_3($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 while(1) {
  $14 = $6;
  $15 = (($14) + 0)|0;
  $16 = $5;
  $17 = (($16) + ($15<<1)|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $18&65535;
  $20 = ($19|0)!=(65535);
  if (!($20)) {
   label = 29;
   break;
  }
  $21 = $6;
  $22 = (($21) + 0)|0;
  $23 = $5;
  $24 = (($23) + ($22<<1)|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $25&65535;
  $27 = ($26|0)==(2);
  if ($27) {
   label = 8;
  } else {
   $28 = $6;
   $29 = (($28) + 0)|0;
   $30 = $5;
   $31 = (($30) + ($29<<1)|0);
   $32 = HEAP16[$31>>1]|0;
   $33 = $32&65535;
   $34 = ($33|0)==(3);
   if ($34) {
    label = 8;
   } else {
    $35 = $6;
    $36 = (($35) + 0)|0;
    $37 = $5;
    $38 = (($37) + ($36<<1)|0);
    $39 = HEAP16[$38>>1]|0;
    $40 = $39&65535;
    $41 = ($40|0)==(6);
    if ($41) {
     label = 8;
    } else {
     $42 = $6;
     $43 = (($42) + 0)|0;
     $44 = $5;
     $45 = (($44) + ($43<<1)|0);
     $46 = HEAP16[$45>>1]|0;
     $47 = $46&65535;
     $48 = ($47|0)==(5);
     if ($48) {
      label = 8;
     } else {
      $49 = $6;
      $50 = (($49) + 0)|0;
      $51 = $5;
      $52 = (($51) + ($50<<1)|0);
      $53 = HEAP16[$52>>1]|0;
      $54 = $53&65535;
      $55 = ($54|0)==(4);
      if ($55) {
       label = 8;
      }
     }
    }
   }
  }
  if ((label|0) == 8) {
   label = 0;
   $56 = $5;
   $57 = $6;
   $58 = (($57) + 3)|0;
   $59 = $5;
   $60 = (($59) + ($58<<1)|0);
   $61 = HEAP16[$60>>1]|0;
   $62 = $61&65535;
   $63 = $7;
   $64 = $8;
   $65 = (_pattern_compile_3($56,$62,$63,$64)|0);
   $66 = ($65|0)!=(0);
   if (!($66)) {
    label = 9;
    break;
   }
  }
  $67 = $6;
  $68 = (($67) + 0)|0;
  $69 = $5;
  $70 = (($69) + ($68<<1)|0);
  $71 = HEAP16[$70>>1]|0;
  $72 = $71&65535;
  $73 = ($72|0)==(7);
  if ($73) {
   $74 = $8;
   $75 = HEAP16[$74>>1]|0;
   $76 = $75&65535;
   $77 = (($76) + 12)|0;
   $78 = $7;
   $79 = ($77|0)>=($78|0);
   if ($79) {
    label = 12;
    break;
   }
   $80 = $6;
   $81 = (($80) + 1)|0;
   $82 = $5;
   $83 = (($82) + ($81<<1)|0);
   $84 = HEAP16[$83>>1]|0;
   $85 = $84&65535;
   $9 = $85;
   $86 = $9;
   $87 = (($86) + 0)|0;
   $88 = $5;
   $89 = (($88) + ($87<<1)|0);
   $90 = HEAP16[$89>>1]|0;
   $91 = $90&65535;
   $92 = ($91|0)==(1);
   if ($92) {
    label = 14;
    break;
   }
   $93 = $9;
   $13 = $93;
   while(1) {
    $94 = $9;
    $95 = (($94) + 0)|0;
    $96 = $5;
    $97 = (($96) + ($95<<1)|0);
    $98 = HEAP16[$97>>1]|0;
    $99 = $98&65535;
    $100 = ($99|0)!=(1);
    $101 = $9;
    if (!($100)) {
     break;
    }
    $102 = (($101) + 1)|0;
    $103 = $5;
    $104 = (($103) + ($102<<1)|0);
    $105 = HEAP16[$104>>1]|0;
    $106 = $105&65535;
    $9 = $106;
   }
   $107 = (($101) + 2)|0;
   $108 = $5;
   $109 = (($108) + ($107<<1)|0);
   $110 = HEAP16[$109>>1]|0;
   $111 = $110&65535;
   $12 = $111;
   $112 = $8;
   $113 = HEAP16[$112>>1]|0;
   $114 = $113&65535;
   $10 = $114;
   $115 = $10;
   $116 = (($115) + 0)|0;
   $117 = $5;
   $118 = (($117) + ($116<<1)|0);
   HEAP16[$118>>1] = 1;
   $119 = $10;
   $120 = (($119) + 1)|0;
   $121 = $5;
   $122 = (($121) + ($120<<1)|0);
   HEAP16[$122>>1] = -1;
   $123 = $12;
   $124 = $123&65535;
   $125 = $10;
   $126 = (($125) + 2)|0;
   $127 = $5;
   $128 = (($127) + ($126<<1)|0);
   HEAP16[$128>>1] = $124;
   $129 = $8;
   $130 = HEAP16[$129>>1]|0;
   $131 = $130&65535;
   $132 = (($131) + 3)|0;
   $133 = $132&65535;
   HEAP16[$129>>1] = $133;
   $134 = $8;
   $135 = HEAP16[$134>>1]|0;
   $136 = $135&65535;
   $11 = $136;
   $137 = $11;
   $138 = (($137) + 0)|0;
   $139 = $5;
   $140 = (($139) + ($138<<1)|0);
   HEAP16[$140>>1] = -1;
   $141 = $13;
   $142 = $141&65535;
   $143 = $11;
   $144 = (($143) + 1)|0;
   $145 = $5;
   $146 = (($145) + ($144<<1)|0);
   HEAP16[$146>>1] = $142;
   $147 = $6;
   $148 = $147&65535;
   $149 = $11;
   $150 = (($149) + 2)|0;
   $151 = $5;
   $152 = (($151) + ($150<<1)|0);
   HEAP16[$152>>1] = $148;
   $153 = $8;
   $154 = HEAP16[$153>>1]|0;
   $155 = $154&65535;
   $156 = (($155) + 3)|0;
   $157 = $156&65535;
   HEAP16[$153>>1] = $157;
   $158 = $10;
   $159 = $158&65535;
   $160 = $6;
   $161 = (($160) + 3)|0;
   $162 = $5;
   $163 = (($162) + ($161<<1)|0);
   HEAP16[$163>>1] = $159;
   $164 = $6;
   $165 = $164&65535;
   $166 = $9;
   $167 = (($166) + 2)|0;
   $168 = $5;
   $169 = (($168) + ($167<<1)|0);
   HEAP16[$169>>1] = $165;
   $170 = $9;
   $171 = $170&65535;
   $172 = $6;
   $173 = (($172) + 1)|0;
   $174 = $5;
   $175 = (($174) + ($173<<1)|0);
   HEAP16[$175>>1] = $171;
   $176 = $10;
   $177 = $176&65535;
   $178 = $12;
   $179 = (($178) + 1)|0;
   $180 = $5;
   $181 = (($180) + ($179<<1)|0);
   HEAP16[$181>>1] = $177;
   $182 = $11;
   $183 = $182&65535;
   $184 = $13;
   $185 = (($184) + 2)|0;
   $186 = $5;
   $187 = (($186) + ($185<<1)|0);
   HEAP16[$187>>1] = $183;
   $188 = $6;
   $189 = (($188) + 2)|0;
   $190 = $5;
   $191 = (($190) + ($189<<1)|0);
   $192 = HEAP16[$191>>1]|0;
   $193 = $192&65535;
   $9 = $193;
   $194 = $9;
   $195 = (($194) + 0)|0;
   $196 = $5;
   $197 = (($196) + ($195<<1)|0);
   $198 = HEAP16[$197>>1]|0;
   $199 = $198&65535;
   $200 = ($199|0)==(65535);
   if ($200) {
    label = 20;
    break;
   }
   $201 = $9;
   $202 = (($201) + 0)|0;
   $203 = $5;
   $204 = (($203) + ($202<<1)|0);
   $205 = HEAP16[$204>>1]|0;
   $206 = $205&65535;
   $207 = ($206|0)==(7);
   if ($207) {
    label = 20;
    break;
   }
   $208 = $9;
   $12 = $208;
   while(1) {
    $209 = $9;
    $210 = (($209) + 0)|0;
    $211 = $5;
    $212 = (($211) + ($210<<1)|0);
    $213 = HEAP16[$212>>1]|0;
    $214 = $213&65535;
    $215 = ($214|0)!=(65535);
    if ($215) {
     $216 = $9;
     $217 = (($216) + 0)|0;
     $218 = $5;
     $219 = (($218) + ($217<<1)|0);
     $220 = HEAP16[$219>>1]|0;
     $221 = $220&65535;
     $222 = ($221|0)!=(7);
     $328 = $222;
    } else {
     $328 = 0;
    }
    $223 = $9;
    if (!($328)) {
     break;
    }
    $224 = (($223) + 2)|0;
    $225 = $5;
    $226 = (($225) + ($224<<1)|0);
    $227 = HEAP16[$226>>1]|0;
    $228 = $227&65535;
    $9 = $228;
   }
   $229 = (($223) + 1)|0;
   $230 = $5;
   $231 = (($230) + ($229<<1)|0);
   $232 = HEAP16[$231>>1]|0;
   $233 = $232&65535;
   $13 = $233;
   $234 = $8;
   $235 = HEAP16[$234>>1]|0;
   $236 = $235&65535;
   $10 = $236;
   $237 = $10;
   $238 = (($237) + 0)|0;
   $239 = $5;
   $240 = (($239) + ($238<<1)|0);
   HEAP16[$240>>1] = 1;
   $241 = $10;
   $242 = (($241) + 1)|0;
   $243 = $5;
   $244 = (($243) + ($242<<1)|0);
   HEAP16[$244>>1] = -1;
   $245 = $12;
   $246 = $245&65535;
   $247 = $10;
   $248 = (($247) + 2)|0;
   $249 = $5;
   $250 = (($249) + ($248<<1)|0);
   HEAP16[$250>>1] = $246;
   $251 = $8;
   $252 = HEAP16[$251>>1]|0;
   $253 = $252&65535;
   $254 = (($253) + 3)|0;
   $255 = $254&65535;
   HEAP16[$251>>1] = $255;
   $256 = $8;
   $257 = HEAP16[$256>>1]|0;
   $258 = $257&65535;
   $11 = $258;
   $259 = $11;
   $260 = (($259) + 0)|0;
   $261 = $5;
   $262 = (($261) + ($260<<1)|0);
   HEAP16[$262>>1] = -1;
   $263 = $13;
   $264 = $263&65535;
   $265 = $11;
   $266 = (($265) + 1)|0;
   $267 = $5;
   $268 = (($267) + ($266<<1)|0);
   HEAP16[$268>>1] = $264;
   $269 = $6;
   $270 = $269&65535;
   $271 = $11;
   $272 = (($271) + 2)|0;
   $273 = $5;
   $274 = (($273) + ($272<<1)|0);
   HEAP16[$274>>1] = $270;
   $275 = $8;
   $276 = HEAP16[$275>>1]|0;
   $277 = $276&65535;
   $278 = (($277) + 3)|0;
   $279 = $278&65535;
   HEAP16[$275>>1] = $279;
   $280 = $10;
   $281 = $280&65535;
   $282 = $6;
   $283 = (($282) + 4)|0;
   $284 = $5;
   $285 = (($284) + ($283<<1)|0);
   HEAP16[$285>>1] = $281;
   $286 = $6;
   $287 = $286&65535;
   $288 = $9;
   $289 = (($288) + 1)|0;
   $290 = $5;
   $291 = (($290) + ($289<<1)|0);
   HEAP16[$291>>1] = $287;
   $292 = $9;
   $293 = $292&65535;
   $294 = $6;
   $295 = (($294) + 2)|0;
   $296 = $5;
   $297 = (($296) + ($295<<1)|0);
   HEAP16[$297>>1] = $293;
   $298 = $10;
   $299 = $298&65535;
   $300 = $12;
   $301 = (($300) + 1)|0;
   $302 = $5;
   $303 = (($302) + ($301<<1)|0);
   HEAP16[$303>>1] = $299;
   $304 = $11;
   $305 = $304&65535;
   $306 = $13;
   $307 = (($306) + 2)|0;
   $308 = $5;
   $309 = (($308) + ($307<<1)|0);
   HEAP16[$309>>1] = $305;
   $310 = $5;
   $311 = $6;
   $312 = (($311) + 4)|0;
   $313 = $5;
   $314 = (($313) + ($312<<1)|0);
   $315 = HEAP16[$314>>1]|0;
   $316 = $315&65535;
   $317 = $7;
   $318 = $8;
   $319 = (_pattern_compile_3($310,$316,$317,$318)|0);
   $320 = ($319|0)!=(0);
   if (!($320)) {
    label = 27;
    break;
   }
  }
  $321 = $6;
  $322 = (($321) + 2)|0;
  $323 = $5;
  $324 = (($323) + ($322<<1)|0);
  $325 = HEAP16[$324>>1]|0;
  $326 = $325&65535;
  $6 = $326;
 }
 if ((label|0) == 9) {
  $4 = 0;
  $327 = $4;
  STACKTOP = sp;return ($327|0);
 }
 else if ((label|0) == 12) {
  $4 = 0;
  $327 = $4;
  STACKTOP = sp;return ($327|0);
 }
 else if ((label|0) == 14) {
  $4 = 0;
  $327 = $4;
  STACKTOP = sp;return ($327|0);
 }
 else if ((label|0) == 20) {
  $4 = 0;
  $327 = $4;
  STACKTOP = sp;return ($327|0);
 }
 else if ((label|0) == 27) {
  $4 = 0;
  $327 = $4;
  STACKTOP = sp;return ($327|0);
 }
 else if ((label|0) == 29) {
  $4 = 1;
  $327 = $4;
  STACKTOP = sp;return ($327|0);
 }
 return (0)|0;
}
function _pattern_compile_expression($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0;
 var $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0;
 var $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0;
 var $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0;
 var $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0;
 var $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0;
 var $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0;
 var $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0;
 var $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0;
 var $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0;
 var $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0;
 var $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0;
 var $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0;
 var $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0;
 var $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0;
 var $863 = 0, $864 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond3 = 0;
 var $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $vararg_buffer = 0, $vararg_ptr14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer = sp + 8|0;
 $32 = sp;
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $33 = $12;
 $34 = HEAP32[$33>>2]|0;
 $35 = $10;
 $36 = (($35) + ($34<<1)|0);
 $37 = HEAP16[$36>>1]|0;
 $38 = $37&65535;
 do {
  switch ($38|0) {
  case 40:  {
   $39 = $15;
   $40 = HEAP16[$39>>1]|0;
   $41 = $40&65535;
   $42 = (($41) + 10)|0;
   $43 = $14;
   $44 = ($42|0)>=($43|0);
   if ($44) {
    $9 = 0;
    $864 = $9;
    STACKTOP = sp;return ($864|0);
   }
   $45 = $12;
   $46 = HEAP32[$45>>2]|0;
   $47 = (($46) + 1)|0;
   HEAP32[$45>>2] = $47;
   $48 = $12;
   $49 = HEAP32[$48>>2]|0;
   $50 = $11;
   $51 = ($49|0)>=($50|0);
   if ($51) {
    $9 = 0;
    $864 = $9;
    STACKTOP = sp;return ($864|0);
   }
   $28 = 0;
   $29 = 0;
   $52 = $12;
   $53 = HEAP32[$52>>2]|0;
   $24 = $53;
   while(1) {
    $54 = $24;
    $55 = $11;
    $56 = ($54|0)<($55|0);
    if (!($56)) {
     break;
    }
    $57 = $24;
    $58 = $10;
    $59 = (($58) + ($57<<1)|0);
    $60 = HEAP16[$59>>1]|0;
    $61 = $60&65535;
    $62 = ($61|0)!=(92);
    $63 = $28;
    $64 = ($63|0)!=(0);
    $or$cond = $62 | $64;
    if ($or$cond) {
     $65 = $24;
     $66 = $10;
     $67 = (($66) + ($65<<1)|0);
     $68 = HEAP16[$67>>1]|0;
     $69 = $68&65535;
     $70 = ($69|0)!=(40);
     $71 = $28;
     $72 = ($71|0)!=(0);
     $or$cond3 = $70 | $72;
     if ($or$cond3) {
      $75 = $24;
      $76 = $10;
      $77 = (($76) + ($75<<1)|0);
      $78 = HEAP16[$77>>1]|0;
      $79 = $78&65535;
      $80 = ($79|0)!=(41);
      $81 = $28;
      $82 = ($81|0)!=(0);
      $or$cond5 = $80 | $82;
      if (!($or$cond5)) {
       $83 = $29;
       $84 = ($83|0)!=(0);
       if (!($84)) {
        break;
       }
       $85 = $29;
       $86 = (($85) + -1)|0;
       $29 = $86;
      }
     } else {
      $73 = $29;
      $74 = (($73) + 1)|0;
      $29 = $74;
     }
     $28 = 0;
    } else {
     $28 = 1;
    }
    $87 = $24;
    $88 = (($87) + 1)|0;
    $24 = $88;
   }
   $89 = $24;
   $90 = $11;
   $91 = ($89|0)>=($90|0);
   if ($91) {
    $9 = 0;
    $864 = $9;
    STACKTOP = sp;return ($864|0);
   }
   $92 = $15;
   $93 = HEAP16[$92>>1]|0;
   $94 = $93&65535;
   $95 = (($94) + 0)|0;
   $96 = $13;
   $97 = (($96) + ($95<<1)|0);
   HEAP16[$97>>1] = 2;
   $98 = $15;
   $99 = HEAP16[$98>>1]|0;
   $100 = $99&65535;
   $23 = $100;
   $101 = $15;
   $102 = HEAP16[$101>>1]|0;
   $103 = $102&65535;
   $104 = (($103) + 4)|0;
   $105 = $104&65535;
   HEAP16[$101>>1] = $105;
   $106 = $15;
   $107 = HEAP16[$106>>1]|0;
   $108 = $23;
   $109 = (($108) + 3)|0;
   $110 = $13;
   $111 = (($110) + ($109<<1)|0);
   HEAP16[$111>>1] = $107;
   $112 = $15;
   $113 = HEAP16[$112>>1]|0;
   $114 = $113&65535;
   $22 = $114;
   $115 = $22;
   $116 = (($115) + 0)|0;
   $117 = $13;
   $118 = (($117) + ($116<<1)|0);
   HEAP16[$118>>1] = 0;
   $119 = $22;
   $120 = (($119) + 1)|0;
   $121 = $13;
   $122 = (($121) + ($120<<1)|0);
   HEAP16[$122>>1] = -1;
   $123 = $22;
   $124 = (($123) + 2)|0;
   $125 = $13;
   $126 = (($125) + ($124<<1)|0);
   HEAP16[$126>>1] = -1;
   $127 = $10;
   $128 = $24;
   $129 = $12;
   $130 = $13;
   $131 = $14;
   $132 = $15;
   $133 = $16;
   $134 = $17;
   $135 = $18;
   $136 = (_pattern_compile_1($127,$128,$129,$130,$131,$132,$133,$134,$135)|0);
   $137 = ($136|0)!=(0);
   if ($137) {
    $138 = $12;
    $139 = HEAP32[$138>>2]|0;
    $140 = (($139) + 1)|0;
    HEAP32[$138>>2] = $140;
    $141 = $15;
    $142 = HEAP16[$141>>1]|0;
    $143 = $142&65535;
    $21 = $143;
    $144 = $23;
    $145 = $144&65535;
    $146 = $21;
    $147 = (($146) + 2)|0;
    $148 = $13;
    $149 = (($148) + ($147<<1)|0);
    HEAP16[$149>>1] = $145;
    $150 = $15;
    $151 = HEAP16[$150>>1]|0;
    $152 = $151&65535;
    $153 = (($152) + 3)|0;
    $154 = $153&65535;
    HEAP16[$150>>1] = $154;
    $155 = $154&65535;
    $9 = $155;
    $864 = $9;
    STACKTOP = sp;return ($864|0);
   } else {
    $9 = 0;
    $864 = $9;
    STACKTOP = sp;return ($864|0);
   }
   break;
  }
  case 33:  {
   $156 = $15;
   $157 = HEAP16[$156>>1]|0;
   $158 = $157&65535;
   $159 = (($158) + 10)|0;
   $160 = $14;
   $161 = ($159|0)>=($160|0);
   if ($161) {
    $9 = 0;
    $864 = $9;
    STACKTOP = sp;return ($864|0);
   }
   $162 = $12;
   $163 = HEAP32[$162>>2]|0;
   $164 = (($163) + 1)|0;
   HEAP32[$162>>2] = $164;
   $165 = $15;
   $166 = HEAP16[$165>>1]|0;
   $167 = $166&65535;
   $168 = (($167) + 0)|0;
   $169 = $13;
   $170 = (($169) + ($168<<1)|0);
   HEAP16[$170>>1] = 3;
   $171 = $15;
   $172 = HEAP16[$171>>1]|0;
   $173 = $172&65535;
   $23 = $173;
   $174 = $15;
   $175 = HEAP16[$174>>1]|0;
   $176 = $175&65535;
   $177 = (($176) + 4)|0;
   $178 = $177&65535;
   HEAP16[$174>>1] = $178;
   $179 = $15;
   $180 = HEAP16[$179>>1]|0;
   $181 = $23;
   $182 = (($181) + 3)|0;
   $183 = $13;
   $184 = (($183) + ($182<<1)|0);
   HEAP16[$184>>1] = $180;
   $185 = $15;
   $186 = HEAP16[$185>>1]|0;
   $187 = $186&65535;
   $20 = $187;
   $188 = $20;
   $189 = (($188) + 0)|0;
   $190 = $13;
   $191 = (($190) + ($189<<1)|0);
   HEAP16[$191>>1] = 1;
   $192 = $20;
   $193 = (($192) + 1)|0;
   $194 = $13;
   $195 = (($194) + ($193<<1)|0);
   HEAP16[$195>>1] = -1;
   $196 = $15;
   $197 = HEAP16[$196>>1]|0;
   $198 = $197&65535;
   $199 = (($198) + 3)|0;
   $200 = $199&65535;
   HEAP16[$196>>1] = $200;
   $201 = $15;
   $202 = HEAP16[$201>>1]|0;
   $203 = $20;
   $204 = (($203) + 2)|0;
   $205 = $13;
   $206 = (($205) + ($204<<1)|0);
   HEAP16[$206>>1] = $202;
   $207 = $15;
   $208 = HEAP16[$207>>1]|0;
   $209 = $208&65535;
   $22 = $209;
   $210 = $22;
   $211 = (($210) + 0)|0;
   $212 = $13;
   $213 = (($212) + ($211<<1)|0);
   HEAP16[$213>>1] = 0;
   $214 = $20;
   $215 = $214&65535;
   $216 = $22;
   $217 = (($216) + 1)|0;
   $218 = $13;
   $219 = (($218) + ($217<<1)|0);
   HEAP16[$219>>1] = $215;
   $220 = $22;
   $221 = (($220) + 2)|0;
   $222 = $13;
   $223 = (($222) + ($221<<1)|0);
   HEAP16[$223>>1] = -1;
   $224 = $10;
   $225 = $11;
   $226 = $12;
   $227 = $13;
   $228 = $14;
   $229 = $15;
   $230 = $16;
   $231 = $17;
   $232 = $18;
   $233 = (_pattern_compile_expression($224,$225,$226,$227,$228,$229,$230,$231,$232)|0);
   $234 = ($233|0)!=(0);
   if (!($234)) {
    $9 = 0;
    $864 = $9;
    STACKTOP = sp;return ($864|0);
   }
   $235 = $15;
   $236 = HEAP16[$235>>1]|0;
   $237 = $236&65535;
   $238 = (($237) + 3)|0;
   $239 = $14;
   $240 = ($238|0)>=($239|0);
   if ($240) {
    $9 = 0;
    $864 = $9;
    STACKTOP = sp;return ($864|0);
   } else {
    $241 = $15;
    $242 = HEAP16[$241>>1]|0;
    $243 = $22;
    $244 = (($243) + 2)|0;
    $245 = $13;
    $246 = (($245) + ($244<<1)|0);
    HEAP16[$246>>1] = $242;
    $247 = $15;
    $248 = HEAP16[$247>>1]|0;
    $249 = $248&65535;
    $21 = $249;
    $250 = $21;
    $251 = (($250) + 0)|0;
    $252 = $13;
    $253 = (($252) + ($251<<1)|0);
    HEAP16[$253>>1] = -1;
    $254 = $22;
    $255 = $254&65535;
    $256 = $21;
    $257 = (($256) + 1)|0;
    $258 = $13;
    $259 = (($258) + ($257<<1)|0);
    HEAP16[$259>>1] = $255;
    $260 = $23;
    $261 = $260&65535;
    $262 = $21;
    $263 = (($262) + 2)|0;
    $264 = $13;
    $265 = (($264) + ($263<<1)|0);
    HEAP16[$265>>1] = $261;
    $266 = $15;
    $267 = HEAP16[$266>>1]|0;
    $268 = $267&65535;
    $269 = (($268) + 3)|0;
    $270 = $269&65535;
    HEAP16[$266>>1] = $270;
    $271 = $270&65535;
    $9 = $271;
    $864 = $9;
    STACKTOP = sp;return ($864|0);
   }
   break;
  }
  case 43:  {
   $272 = $15;
   $273 = HEAP16[$272>>1]|0;
   $274 = $273&65535;
   $275 = (($274) + 5)|0;
   $276 = $14;
   $277 = ($275|0)>=($276|0);
   if ($277) {
    $9 = 0;
    $864 = $9;
    STACKTOP = sp;return ($864|0);
   } else {
    $278 = $15;
    $279 = HEAP16[$278>>1]|0;
    $280 = $279&65535;
    $281 = (($280) + 0)|0;
    $282 = $13;
    $283 = (($282) + ($281<<1)|0);
    HEAP16[$283>>1] = 4;
    $284 = $16;
    $285 = HEAP16[$284>>1]|0;
    $286 = (($285) + 1)<<16>>16;
    HEAP16[$284>>1] = $286;
    $287 = $15;
    $288 = HEAP16[$287>>1]|0;
    $289 = $288&65535;
    $290 = (($289) + 4)|0;
    $291 = $13;
    $292 = (($291) + ($290<<1)|0);
    HEAP16[$292>>1] = $285;
    $293 = $12;
    $294 = HEAP32[$293>>2]|0;
    $295 = (($294) + 1)|0;
    HEAP32[$293>>2] = $295;
    $296 = $15;
    $297 = HEAP16[$296>>1]|0;
    $298 = $297&65535;
    $299 = (($298) + 5)|0;
    $300 = $299&65535;
    HEAP16[$296>>1] = $300;
    $301 = $300&65535;
    $9 = $301;
    $864 = $9;
    STACKTOP = sp;return ($864|0);
   }
   break;
  }
  case 42:  {
   $302 = $15;
   $303 = HEAP16[$302>>1]|0;
   $304 = $303&65535;
   $305 = (($304) + 5)|0;
   $306 = $14;
   $307 = ($305|0)>=($306|0);
   if ($307) {
    $9 = 0;
    $864 = $9;
    STACKTOP = sp;return ($864|0);
   } else {
    $308 = $15;
    $309 = HEAP16[$308>>1]|0;
    $310 = $309&65535;
    $311 = (($310) + 0)|0;
    $312 = $13;
    $313 = (($312) + ($311<<1)|0);
    HEAP16[$313>>1] = 5;
    $314 = $16;
    $315 = HEAP16[$314>>1]|0;
    $316 = (($315) + 1)<<16>>16;
    HEAP16[$314>>1] = $316;
    $317 = $15;
    $318 = HEAP16[$317>>1]|0;
    $319 = $318&65535;
    $320 = (($319) + 4)|0;
    $321 = $13;
    $322 = (($321) + ($320<<1)|0);
    HEAP16[$322>>1] = $315;
    $323 = $12;
    $324 = HEAP32[$323>>2]|0;
    $325 = (($324) + 1)|0;
    HEAP32[$323>>2] = $325;
    $326 = $15;
    $327 = HEAP16[$326>>1]|0;
    $328 = $327&65535;
    $329 = (($328) + 5)|0;
    $330 = $329&65535;
    HEAP16[$326>>1] = $330;
    $331 = $330&65535;
    $9 = $331;
    $864 = $9;
    STACKTOP = sp;return ($864|0);
   }
   break;
  }
  case 63:  {
   $332 = $15;
   $333 = HEAP16[$332>>1]|0;
   $334 = $333&65535;
   $335 = (($334) + 4)|0;
   $336 = $14;
   $337 = ($335|0)>=($336|0);
   if ($337) {
    $9 = 0;
    $864 = $9;
    STACKTOP = sp;return ($864|0);
   } else {
    $338 = $15;
    $339 = HEAP16[$338>>1]|0;
    $340 = $339&65535;
    $341 = (($340) + 0)|0;
    $342 = $13;
    $343 = (($342) + ($341<<1)|0);
    HEAP16[$343>>1] = 6;
    $344 = $12;
    $345 = HEAP32[$344>>2]|0;
    $346 = (($345) + 1)|0;
    HEAP32[$344>>2] = $346;
    $347 = $15;
    $348 = HEAP16[$347>>1]|0;
    $349 = $348&65535;
    $350 = (($349) + 4)|0;
    $351 = $350&65535;
    HEAP16[$347>>1] = $351;
    $352 = $351&65535;
    $9 = $352;
    $864 = $9;
    STACKTOP = sp;return ($864|0);
   }
   break;
  }
  case 124:  {
   $353 = $15;
   $354 = HEAP16[$353>>1]|0;
   $355 = $354&65535;
   $356 = (($355) + 5)|0;
   $357 = $14;
   $358 = ($356|0)>=($357|0);
   if ($358) {
    $9 = 0;
    $864 = $9;
    STACKTOP = sp;return ($864|0);
   } else {
    $359 = $15;
    $360 = HEAP16[$359>>1]|0;
    $361 = $360&65535;
    $362 = (($361) + 0)|0;
    $363 = $13;
    $364 = (($363) + ($362<<1)|0);
    HEAP16[$364>>1] = 7;
    $365 = $12;
    $366 = HEAP32[$365>>2]|0;
    $367 = (($366) + 1)|0;
    HEAP32[$365>>2] = $367;
    $368 = $15;
    $369 = HEAP16[$368>>1]|0;
    $370 = $369&65535;
    $371 = (($370) + 5)|0;
    $372 = $371&65535;
    HEAP16[$368>>1] = $372;
    $373 = $372&65535;
    $9 = $373;
    $864 = $9;
    STACKTOP = sp;return ($864|0);
   }
   break;
  }
  case 46:  {
   $374 = $15;
   $375 = HEAP16[$374>>1]|0;
   $376 = $375&65535;
   $377 = (($376) + 3)|0;
   $378 = $14;
   $379 = ($377|0)>=($378|0);
   if ($379) {
    $9 = 0;
    $864 = $9;
    STACKTOP = sp;return ($864|0);
   } else {
    $380 = $15;
    $381 = HEAP16[$380>>1]|0;
    $382 = $381&65535;
    $383 = (($382) + 0)|0;
    $384 = $13;
    $385 = (($384) + ($383<<1)|0);
    HEAP16[$385>>1] = 8;
    $386 = $12;
    $387 = HEAP32[$386>>2]|0;
    $388 = (($387) + 1)|0;
    HEAP32[$386>>2] = $388;
    $389 = $15;
    $390 = HEAP16[$389>>1]|0;
    $391 = $390&65535;
    $392 = (($391) + 3)|0;
    $393 = $392&65535;
    HEAP16[$389>>1] = $393;
    $394 = $393&65535;
    $9 = $394;
    $864 = $9;
    STACKTOP = sp;return ($864|0);
   }
   break;
  }
  case 37:  {
   $395 = $15;
   $396 = HEAP16[$395>>1]|0;
   $397 = $396&65535;
   $398 = (($397) + 5)|0;
   $399 = $14;
   $400 = ($398|0)>=($399|0);
   if ($400) {
    $9 = 0;
    $864 = $9;
    STACKTOP = sp;return ($864|0);
   }
   $401 = $12;
   $402 = HEAP32[$401>>2]|0;
   $403 = (($402) + 1)|0;
   HEAP32[$401>>2] = $403;
   $404 = $12;
   $405 = HEAP32[$404>>2]|0;
   $406 = $11;
   $407 = ($405|0)>=($406|0);
   if ($407) {
    $9 = 0;
    $864 = $9;
    STACKTOP = sp;return ($864|0);
   }
   $408 = $12;
   $409 = HEAP32[$408>>2]|0;
   $410 = $10;
   $411 = (($410) + ($409<<1)|0);
   $412 = HEAP16[$411>>1]|0;
   $413 = $412&65535;
   $414 = ($413|0)==(91);
   if ($414) {
    $27 = 1;
    $415 = $12;
    $416 = HEAP32[$415>>2]|0;
    $417 = (($416) + 1)|0;
    HEAP32[$415>>2] = $417;
    $418 = $12;
    $419 = HEAP32[$418>>2]|0;
    $24 = $419;
    while(1) {
     $420 = $24;
     $421 = $11;
     $422 = ($420|0)<($421|0);
     if (!($422)) {
      break;
     }
     $423 = $24;
     $424 = $10;
     $425 = (($424) + ($423<<1)|0);
     $426 = HEAP16[$425>>1]|0;
     $427 = $426&65535;
     $428 = ($427|0)==(93);
     if ($428) {
      break;
     }
     $429 = $24;
     $430 = (($429) + 1)|0;
     $24 = $430;
    }
    $431 = $24;
    $432 = $11;
    $433 = ($431|0)>=($432|0);
    if ($433) {
     $9 = 0;
     $864 = $9;
     STACKTOP = sp;return ($864|0);
    }
   } else {
    $27 = 0;
    $434 = $12;
    $435 = HEAP32[$434>>2]|0;
    $436 = (($435) + 1)|0;
    $24 = $436;
   }
   $437 = $15;
   $438 = HEAP16[$437>>1]|0;
   $439 = $438&65535;
   $440 = (($439) + 0)|0;
   $441 = $13;
   $442 = (($441) + ($440<<1)|0);
   HEAP16[$442>>1] = 9;
   $26 = 0;
   $25 = 0;
   L98: while(1) {
    $443 = $12;
    $444 = HEAP32[$443>>2]|0;
    $445 = $24;
    $446 = ($444|0)<($445|0);
    if (!($446)) {
     label = 77;
     break;
    }
    $447 = $12;
    $448 = HEAP32[$447>>2]|0;
    $449 = $10;
    $450 = (($449) + ($448<<1)|0);
    $451 = HEAP16[$450>>1]|0;
    $452 = $451&65535;
    do {
     switch ($452|0) {
     case 95:  {
      $453 = $25;
      $454 = $453 | 1;
      $25 = $454;
      break;
     }
     case 35:  {
      $455 = $25;
      $456 = $455 | 4;
      $25 = $456;
      break;
     }
     case 97:  {
      $457 = $25;
      $458 = $457 | 2;
      $25 = $458;
      break;
     }
     case 117:  {
      $459 = $25;
      $460 = $459 | 16;
      $25 = $460;
      break;
     }
     case 108:  {
      $461 = $25;
      $462 = $461 | 32;
      $25 = $462;
      break;
     }
     case 46:  {
      $463 = $25;
      $464 = $463 | 8;
      $25 = $464;
      break;
     }
     case 36:  {
      $465 = $25;
      $466 = $465 | 128;
      $25 = $466;
      break;
     }
     case 126:  {
      $467 = $25;
      $468 = $467 | 8192;
      $25 = $468;
      break;
     }
     case 60:  {
      $469 = $25;
      $470 = $469 | 16384;
      $25 = $470;
      break;
     }
     case 62:  {
      $471 = $25;
      $472 = $471 | 32768;
      $25 = $472;
      break;
     }
     case 55: case 54: case 53: case 52: case 51: case 50: case 49: case 48:  {
      $473 = $12;
      $474 = HEAP32[$473>>2]|0;
      $475 = $10;
      $476 = (($475) + ($474<<1)|0);
      $477 = HEAP16[$476>>1]|0;
      $478 = $477&65535;
      $479 = (($478) - 48)|0;
      $31 = $479;
      $480 = $31;
      $481 = $17;
      $482 = ((($481)) + 40|0);
      $483 = (($482) + ($480<<3)|0);
      $484 = $483;
      $485 = $484;
      $486 = HEAP32[$485>>2]|0;
      $487 = (($484) + 4)|0;
      $488 = $487;
      $489 = HEAP32[$488>>2]|0;
      $490 = $32;
      $491 = $490;
      HEAP32[$491>>2] = $486;
      $492 = (($490) + 4)|0;
      $493 = $492;
      HEAP32[$493>>2] = $489;
      $494 = $32;
      $495 = $494;
      $496 = HEAP32[$495>>2]|0;
      $497 = (($494) + 4)|0;
      $498 = $497;
      $499 = HEAP32[$498>>2]|0;
      $500 = ($496|0)!=(0);
      $501 = ($499|0)!=(0);
      $502 = $500 | $501;
      if (!($502)) {
       $503 = $17;
       $504 = ((($503)) + 24|0);
       $505 = $504;
       $506 = $505;
       $507 = HEAP32[$506>>2]|0;
       $508 = (($505) + 4)|0;
       $509 = $508;
       $510 = HEAP32[$509>>2]|0;
       $511 = $31;
       $512 = $17;
       $513 = ((($512)) + 40|0);
       $514 = (($513) + ($511<<3)|0);
       $515 = $514;
       $516 = $515;
       HEAP32[$516>>2] = $507;
       $517 = (($515) + 4)|0;
       $518 = $517;
       HEAP32[$518>>2] = $510;
       $519 = $32;
       $520 = $519;
       HEAP32[$520>>2] = $507;
       $521 = (($519) + 4)|0;
       $522 = $521;
       HEAP32[$522>>2] = $510;
       $523 = $32;
       $524 = $523;
       $525 = HEAP32[$524>>2]|0;
       $526 = (($523) + 4)|0;
       $527 = $526;
       $528 = HEAP32[$527>>2]|0;
       $529 = ($528>>>0)>(0);
       $530 = ($525>>>0)>(8388608);
       $531 = ($528|0)==(0);
       $532 = $531 & $530;
       $533 = $529 | $532;
       if ($533) {
        label = 71;
        break L98;
       }
       $539 = $17;
       $540 = ((($539)) + 24|0);
       $541 = $540;
       $542 = $541;
       $543 = HEAP32[$542>>2]|0;
       $544 = (($541) + 4)|0;
       $545 = $544;
       $546 = HEAP32[$545>>2]|0;
       $547 = (_bitshift64Shl(($543|0),($546|0),1)|0);
       $548 = tempRet0;
       $549 = $540;
       $550 = $549;
       HEAP32[$550>>2] = $547;
       $551 = (($549) + 4)|0;
       $552 = $551;
       HEAP32[$552>>2] = $548;
      }
      $553 = $32;
      $554 = $553;
      $555 = HEAP32[$554>>2]|0;
      $556 = (($553) + 4)|0;
      $557 = $556;
      $558 = HEAP32[$557>>2]|0;
      $559 = (_bitshift64Lshr(($555|0),($558|0),16)|0);
      $560 = tempRet0;
      $561 = $26;
      $562 = ($561|0)<(0);
      $563 = $562 << 31 >> 31;
      $564 = $561 | $559;
      $563 | $560;
      $26 = $564;
      break;
     }
     case 94:  {
      $565 = $26;
      $566 = $565 | 256;
      $26 = $566;
      break;
     }
     default: {
      label = 75;
      break L98;
     }
     }
    } while(0);
    $567 = $12;
    $568 = HEAP32[$567>>2]|0;
    $569 = (($568) + 1)|0;
    HEAP32[$567>>2] = $569;
   }
   if ((label|0) == 71) {
    $534 = $18;
    $535 = HEAP32[$534>>2]|0;
    $536 = $18;
    $537 = ((($536)) + 12|0);
    $538 = HEAP32[$537>>2]|0;
    HEAP32[$vararg_buffer>>2] = $535;
    $vararg_ptr14 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr14>>2] = $538;
    __lou_logMessage(40000,10136,$vararg_buffer);
    $9 = 0;
    $864 = $9;
    STACKTOP = sp;return ($864|0);
   }
   else if ((label|0) == 75) {
    $9 = 0;
    $864 = $9;
    STACKTOP = sp;return ($864|0);
   }
   else if ((label|0) == 77) {
    $570 = $26;
    $571 = $570&65535;
    $572 = $15;
    $573 = HEAP16[$572>>1]|0;
    $574 = $573&65535;
    $575 = (($574) + 3)|0;
    $576 = $13;
    $577 = (($576) + ($575<<1)|0);
    HEAP16[$577>>1] = $571;
    $578 = $25;
    $579 = $578&65535;
    $580 = $15;
    $581 = HEAP16[$580>>1]|0;
    $582 = $581&65535;
    $583 = (($582) + 4)|0;
    $584 = $13;
    $585 = (($584) + ($583<<1)|0);
    HEAP16[$585>>1] = $579;
    $586 = $27;
    $587 = ($586|0)!=(0);
    if ($587) {
     $588 = $12;
     $589 = HEAP32[$588>>2]|0;
     $590 = (($589) + 1)|0;
     HEAP32[$588>>2] = $590;
    }
    $591 = $15;
    $592 = HEAP16[$591>>1]|0;
    $593 = $592&65535;
    $594 = (($593) + 5)|0;
    $595 = $594&65535;
    HEAP16[$591>>1] = $595;
    $596 = $595&65535;
    $9 = $596;
    $864 = $9;
    STACKTOP = sp;return ($864|0);
   }
   break;
  }
  case 91:  {
   $597 = $12;
   $598 = HEAP32[$597>>2]|0;
   $599 = (($598) + 1)|0;
   HEAP32[$597>>2] = $599;
   $600 = $12;
   $601 = HEAP32[$600>>2]|0;
   $602 = $11;
   $603 = ($601|0)>=($602|0);
   if ($603) {
    $9 = 0;
    $864 = $9;
    STACKTOP = sp;return ($864|0);
   }
   $28 = 0;
   $604 = $12;
   $605 = HEAP32[$604>>2]|0;
   $24 = $605;
   while(1) {
    $606 = $24;
    $607 = $11;
    $608 = ($606|0)<($607|0);
    if (!($608)) {
     break;
    }
    $609 = $24;
    $610 = $10;
    $611 = (($610) + ($609<<1)|0);
    $612 = HEAP16[$611>>1]|0;
    $613 = $612&65535;
    $614 = ($613|0)!=(92);
    $615 = $28;
    $616 = ($615|0)!=(0);
    $or$cond7 = $614 | $616;
    if ($or$cond7) {
     $617 = $24;
     $618 = $10;
     $619 = (($618) + ($617<<1)|0);
     $620 = HEAP16[$619>>1]|0;
     $621 = $620&65535;
     $622 = ($621|0)!=(93);
     $623 = $28;
     $624 = ($623|0)!=(0);
     $or$cond9 = $622 | $624;
     if (!($or$cond9)) {
      break;
     }
     $28 = 0;
    } else {
     $28 = 1;
    }
    $625 = $24;
    $626 = (($625) + 1)|0;
    $24 = $626;
   }
   $627 = $24;
   $628 = $11;
   $629 = ($627|0)>=($628|0);
   if ($629) {
    $9 = 0;
    $864 = $9;
    STACKTOP = sp;return ($864|0);
   }
   $630 = $15;
   $631 = HEAP16[$630>>1]|0;
   $632 = $631&65535;
   $633 = (($632) + 4)|0;
   $634 = $24;
   $635 = $12;
   $636 = HEAP32[$635>>2]|0;
   $637 = (($634) - ($636))|0;
   $638 = (($633) + ($637))|0;
   $639 = $14;
   $640 = ($638|0)>=($639|0);
   if ($640) {
    $9 = 0;
    $864 = $9;
    STACKTOP = sp;return ($864|0);
   }
   $641 = $15;
   $642 = HEAP16[$641>>1]|0;
   $643 = $642&65535;
   $644 = (($643) + 0)|0;
   $645 = $13;
   $646 = (($645) + ($644<<1)|0);
   HEAP16[$646>>1] = 10;
   $28 = 0;
   $647 = $15;
   $648 = HEAP16[$647>>1]|0;
   $649 = $648&65535;
   $650 = (($649) + 3)|0;
   $651 = $13;
   $652 = (($651) + ($650<<1)|0);
   $19 = $652;
   $30 = 1;
   while(1) {
    $653 = $12;
    $654 = HEAP32[$653>>2]|0;
    $655 = $24;
    $656 = ($654|0)<($655|0);
    if (!($656)) {
     break;
    }
    $657 = $12;
    $658 = HEAP32[$657>>2]|0;
    $659 = $10;
    $660 = (($659) + ($658<<1)|0);
    $661 = HEAP16[$660>>1]|0;
    $662 = $661&65535;
    $663 = ($662|0)!=(92);
    $664 = $28;
    $665 = ($664|0)!=(0);
    $or$cond11 = $663 | $665;
    if ($or$cond11) {
     $28 = 0;
     $666 = $12;
     $667 = HEAP32[$666>>2]|0;
     $668 = $10;
     $669 = (($668) + ($667<<1)|0);
     $670 = HEAP16[$669>>1]|0;
     $671 = $30;
     $672 = (($671) + 1)|0;
     $30 = $672;
     $673 = $19;
     $674 = (($673) + ($671<<1)|0);
     HEAP16[$674>>1] = $670;
    } else {
     $28 = 1;
    }
    $675 = $12;
    $676 = HEAP32[$675>>2]|0;
    $677 = (($676) + 1)|0;
    HEAP32[$675>>2] = $677;
   }
   $678 = $30;
   $679 = (($678) - 1)|0;
   $680 = $679&65535;
   $681 = $19;
   HEAP16[$681>>1] = $680;
   $682 = $12;
   $683 = HEAP32[$682>>2]|0;
   $684 = (($683) + 1)|0;
   HEAP32[$682>>2] = $684;
   $685 = $19;
   $686 = HEAP16[$685>>1]|0;
   $687 = $686&65535;
   $688 = (4 + ($687))|0;
   $689 = $15;
   $690 = HEAP16[$689>>1]|0;
   $691 = $690&65535;
   $692 = (($691) + ($688))|0;
   $693 = $692&65535;
   HEAP16[$689>>1] = $693;
   $694 = $693&65535;
   $9 = $694;
   $864 = $9;
   STACKTOP = sp;return ($864|0);
   break;
  }
  case 64:  {
   $695 = $12;
   $696 = HEAP32[$695>>2]|0;
   $697 = (($696) + 1)|0;
   HEAP32[$695>>2] = $697;
   $698 = $12;
   $699 = HEAP32[$698>>2]|0;
   $700 = $11;
   $701 = ($699|0)>=($700|0);
   if ($701) {
    $9 = 0;
    $864 = $9;
    STACKTOP = sp;return ($864|0);
   }
   $702 = $12;
   $703 = HEAP32[$702>>2]|0;
   $704 = $10;
   $705 = (($704) + ($703<<1)|0);
   $706 = HEAP16[$705>>1]|0;
   $707 = $706&65535;
   $708 = ($707|0)==(91);
   if ($708) {
    $27 = 1;
    $709 = $12;
    $710 = HEAP32[$709>>2]|0;
    $711 = (($710) + 1)|0;
    HEAP32[$709>>2] = $711;
    $712 = $12;
    $713 = HEAP32[$712>>2]|0;
    $24 = $713;
    while(1) {
     $714 = $24;
     $715 = $11;
     $716 = ($714|0)<($715|0);
     if (!($716)) {
      break;
     }
     $717 = $24;
     $718 = $10;
     $719 = (($718) + ($717<<1)|0);
     $720 = HEAP16[$719>>1]|0;
     $721 = $720&65535;
     $722 = ($721|0)==(93);
     if ($722) {
      break;
     }
     $723 = $24;
     $724 = (($723) + 1)|0;
     $24 = $724;
    }
    $725 = $24;
    $726 = $11;
    $727 = ($725|0)>=($726|0);
    if ($727) {
     $9 = 0;
     $864 = $9;
     STACKTOP = sp;return ($864|0);
    }
   } else {
    $27 = 0;
    $728 = $12;
    $729 = HEAP32[$728>>2]|0;
    $730 = (($729) + 1)|0;
    $24 = $730;
   }
   $731 = $15;
   $732 = HEAP16[$731>>1]|0;
   $733 = $732&65535;
   $734 = (($733) + 4)|0;
   $735 = $24;
   $736 = $12;
   $737 = HEAP32[$736>>2]|0;
   $738 = (($735) - ($737))|0;
   $739 = (($734) + ($738))|0;
   $740 = $14;
   $741 = ($739|0)>=($740|0);
   if ($741) {
    $9 = 0;
    $864 = $9;
    STACKTOP = sp;return ($864|0);
   }
   $742 = $15;
   $743 = HEAP16[$742>>1]|0;
   $744 = $743&65535;
   $745 = (($744) + 0)|0;
   $746 = $13;
   $747 = (($746) + ($745<<1)|0);
   HEAP16[$747>>1] = 11;
   $28 = 0;
   $748 = $15;
   $749 = HEAP16[$748>>1]|0;
   $750 = $749&65535;
   $751 = (($750) + 3)|0;
   $752 = $13;
   $753 = (($752) + ($751<<1)|0);
   $19 = $753;
   $30 = 1;
   while(1) {
    $754 = $12;
    $755 = HEAP32[$754>>2]|0;
    $756 = $24;
    $757 = ($755|0)<($756|0);
    if (!($757)) {
     break;
    }
    $758 = $12;
    $759 = HEAP32[$758>>2]|0;
    $760 = $10;
    $761 = (($760) + ($759<<1)|0);
    $762 = HEAP16[$761>>1]|0;
    $763 = $762&65535;
    $764 = ($763|0)!=(92);
    $765 = $28;
    $766 = ($765|0)!=(0);
    $or$cond13 = $764 | $766;
    if ($or$cond13) {
     $28 = 0;
     $767 = $12;
     $768 = HEAP32[$767>>2]|0;
     $769 = $10;
     $770 = (($769) + ($768<<1)|0);
     $771 = HEAP16[$770>>1]|0;
     $772 = $30;
     $773 = (($772) + 1)|0;
     $30 = $773;
     $774 = $19;
     $775 = (($774) + ($772<<1)|0);
     HEAP16[$775>>1] = $771;
    } else {
     $28 = 1;
    }
    $776 = $12;
    $777 = HEAP32[$776>>2]|0;
    $778 = (($777) + 1)|0;
    HEAP32[$776>>2] = $778;
   }
   $779 = $30;
   $780 = (($779) - 1)|0;
   $781 = $780&65535;
   $782 = $19;
   HEAP16[$782>>1] = $781;
   $783 = $27;
   $784 = ($783|0)!=(0);
   if ($784) {
    $785 = $12;
    $786 = HEAP32[$785>>2]|0;
    $787 = (($786) + 1)|0;
    HEAP32[$785>>2] = $787;
   }
   $788 = $19;
   $789 = HEAP16[$788>>1]|0;
   $790 = $789&65535;
   $791 = (4 + ($790))|0;
   $792 = $15;
   $793 = HEAP16[$792>>1]|0;
   $794 = $793&65535;
   $795 = (($794) + ($791))|0;
   $796 = $795&65535;
   HEAP16[$792>>1] = $796;
   $797 = $796&65535;
   $9 = $797;
   $864 = $9;
   STACKTOP = sp;return ($864|0);
   break;
  }
  case 36: case 94:  {
   $798 = $15;
   $799 = HEAP16[$798>>1]|0;
   $800 = $799&65535;
   $801 = (($800) + 3)|0;
   $802 = $14;
   $803 = ($801|0)>=($802|0);
   if ($803) {
    $9 = 0;
    $864 = $9;
    STACKTOP = sp;return ($864|0);
   } else {
    $804 = $15;
    $805 = HEAP16[$804>>1]|0;
    $806 = $805&65535;
    $807 = (($806) + 0)|0;
    $808 = $13;
    $809 = (($808) + ($807<<1)|0);
    HEAP16[$809>>1] = 12;
    $810 = $12;
    $811 = HEAP32[$810>>2]|0;
    $812 = (($811) + 1)|0;
    HEAP32[$810>>2] = $812;
    $813 = $15;
    $814 = HEAP16[$813>>1]|0;
    $815 = $814&65535;
    $816 = (($815) + 3)|0;
    $817 = $816&65535;
    HEAP16[$813>>1] = $817;
    $818 = $817&65535;
    $9 = $818;
    $864 = $9;
    STACKTOP = sp;return ($864|0);
   }
   break;
  }
  case 92:  {
   $819 = $12;
   $820 = HEAP32[$819>>2]|0;
   $821 = (($820) + 1)|0;
   HEAP32[$819>>2] = $821;
   $822 = $12;
   $823 = HEAP32[$822>>2]|0;
   $824 = $11;
   $825 = ($823|0)>=($824|0);
   if ($825) {
    $9 = 0;
    $864 = $9;
    STACKTOP = sp;return ($864|0);
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $826 = $15;
 $827 = HEAP16[$826>>1]|0;
 $828 = $827&65535;
 $829 = (($828) + 5)|0;
 $830 = $14;
 $831 = ($829|0)>=($830|0);
 if ($831) {
  $9 = 0;
  $864 = $9;
  STACKTOP = sp;return ($864|0);
 } else {
  $832 = $15;
  $833 = HEAP16[$832>>1]|0;
  $834 = $833&65535;
  $835 = (($834) + 0)|0;
  $836 = $13;
  $837 = (($836) + ($835<<1)|0);
  HEAP16[$837>>1] = 10;
  $838 = $15;
  $839 = HEAP16[$838>>1]|0;
  $840 = $839&65535;
  $841 = (($840) + 3)|0;
  $842 = $13;
  $843 = (($842) + ($841<<1)|0);
  HEAP16[$843>>1] = 1;
  $844 = $12;
  $845 = HEAP32[$844>>2]|0;
  $846 = $10;
  $847 = (($846) + ($845<<1)|0);
  $848 = HEAP16[$847>>1]|0;
  $849 = $15;
  $850 = HEAP16[$849>>1]|0;
  $851 = $850&65535;
  $852 = (($851) + 4)|0;
  $853 = $13;
  $854 = (($853) + ($852<<1)|0);
  HEAP16[$854>>1] = $848;
  $855 = $12;
  $856 = HEAP32[$855>>2]|0;
  $857 = (($856) + 1)|0;
  HEAP32[$855>>2] = $857;
  $858 = $15;
  $859 = HEAP16[$858>>1]|0;
  $860 = $859&65535;
  $861 = (($860) + 5)|0;
  $862 = $861&65535;
  HEAP16[$858>>1] = $862;
  $863 = $862&65535;
  $9 = $863;
  $864 = $9;
  STACKTOP = sp;return ($864|0);
 }
 return (0)|0;
}
function __lou_logWidecharBuf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $13 = $7;
 $14 = ($13*9)|0;
 $15 = (($14) + 3)|0;
 $16 = $5;
 $17 = (_strlen($16)|0);
 $18 = (($15) + ($17))|0;
 $8 = $18;
 $19 = $8;
 $20 = (_rpl_malloc($19)|0);
 $9 = $20;
 $21 = $9;
 $10 = $21;
 $12 = 0;
 $11 = 10220;
 $12 = 0;
 while(1) {
  $22 = $12;
  $23 = $5;
  $24 = (_strlen($23)|0);
  $25 = ($22|0)<($24|0);
  if (!($25)) {
   break;
  }
  $26 = $12;
  $27 = $5;
  $28 = (($27) + ($26)|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $12;
  $31 = $9;
  $32 = (($31) + ($30)|0);
  HEAP8[$32>>0] = $29;
  $33 = $12;
  $34 = (($33) + 1)|0;
  $12 = $34;
 }
 $35 = $5;
 $36 = (_strlen($35)|0);
 $37 = $10;
 $38 = (($37) + ($36)|0);
 $10 = $38;
 $12 = 0;
 while(1) {
  $39 = $12;
  $40 = $7;
  $41 = ($39|0)<($40|0);
  $42 = $10;
  if (!($41)) {
   break;
  }
  $43 = $11;
  $44 = $12;
  $45 = $6;
  $46 = (($45) + ($44<<1)|0);
  $47 = HEAP16[$46>>1]|0;
  $48 = $47&65535;
  HEAP32[$vararg_buffer>>2] = $48;
  $49 = (_sprintf($42,$43,$vararg_buffer)|0);
  $50 = $10;
  $51 = (($50) + ($49)|0);
  $10 = $51;
  $52 = $12;
  $53 = (($52) + 1)|0;
  $12 = $53;
 }
 HEAP8[$42>>0] = 126;
 $54 = $10;
 $55 = ((($54)) + 1|0);
 $10 = $55;
 $56 = $10;
 HEAP8[$56>>0] = 32;
 $57 = $10;
 $58 = ((($57)) + 1|0);
 $10 = $58;
 $12 = 0;
 while(1) {
  $59 = $12;
  $60 = $7;
  $61 = ($59|0)<($60|0);
  if (!($61)) {
   break;
  }
  $62 = $12;
  $63 = $6;
  $64 = (($63) + ($62<<1)|0);
  $65 = HEAP16[$64>>1]|0;
  $66 = $65&65535;
  $67 = $66 & 65280;
  $68 = ($67|0)!=(0);
  if ($68) {
   $69 = $10;
   HEAP8[$69>>0] = 32;
  } else {
   $70 = $12;
   $71 = $6;
   $72 = (($71) + ($70<<1)|0);
   $73 = HEAP16[$72>>1]|0;
   $74 = $73&255;
   $75 = $10;
   HEAP8[$75>>0] = $74;
  }
  $76 = $10;
  $77 = ((($76)) + 1|0);
  $10 = $77;
  $78 = $12;
  $79 = (($78) + 1)|0;
  $12 = $79;
 }
 $80 = $10;
 HEAP8[$80>>0] = 0;
 $81 = $4;
 $82 = $9;
 HEAP32[$vararg_buffer1>>2] = $82;
 __lou_logMessage($81,10217,$vararg_buffer1);
 $83 = $9;
 _rpl_free($83);
 STACKTOP = sp;return;
}
function _defaultLogCallback($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $4 = $3;
 HEAP32[$vararg_buffer>>2] = $4;
 _lou_logPrint(10217,$vararg_buffer);
 STACKTOP = sp;return;
}
function _lou_registerLogCallback($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  HEAP32[376] = 5;
 } else {
  $4 = $1;
  HEAP32[376] = $4;
 }
 STACKTOP = sp;return;
}
function _lou_setLogLevel($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[375] = $2;
 STACKTOP = sp;return;
}
function __lou_logMessage($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp;
 $2 = $0;
 $3 = $1;
 $7 = $3;
 $8 = ($7|0)==(0|0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = $2;
 $10 = HEAP32[375]|0;
 $11 = ($9>>>0)>=($10>>>0);
 $12 = HEAP32[376]|0;
 $13 = ($12|0)!=(0|0);
 $or$cond = $11 & $13;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 HEAP32[$6>>2] = $varargs;
 $14 = $3;
 $15 = (_vsnprintf(0,0,$14,$6)|0);
 $5 = $15;
 $16 = $5;
 $17 = (($16) + 1)|0;
 $18 = (_rpl_malloc($17)|0);
 $4 = $18;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  STACKTOP = sp;return;
 }
 HEAP32[$6>>2] = $varargs;
 $20 = $4;
 $21 = $5;
 $22 = (($21) + 1)|0;
 $23 = $3;
 (_vsnprintf($20,$22,$23,$6)|0);
 $24 = HEAP32[376]|0;
 $25 = $2;
 $26 = $4;
 FUNCTION_TABLE_vii[$24 & 7]($25,$26);
 $27 = $4;
 _rpl_free($27);
 STACKTOP = sp;return;
}
function _lou_logFile($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = $0;
 $2 = HEAP32[4429]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = HEAP32[4429]|0;
  (_fclose($4)|0);
  HEAP32[4429] = 0;
 }
 $5 = $1;
 $6 = ($5|0)==(0|0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = HEAP8[$7>>0]|0;
 $9 = $8 << 24 >> 24;
 $10 = ($9|0)==(0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = $1;
 $12 = (_strlen($11)|0);
 $13 = ($12>>>0)>=(256);
 if ($13) {
  STACKTOP = sp;return;
 }
 $14 = HEAP8[36945]|0;
 $15 = $14 << 24 >> 24;
 $16 = ($15|0)==(0);
 if ($16) {
  $17 = $1;
  (_strcpy(36945,$17)|0);
 }
 $18 = $1;
 $19 = (_fopen($18,10188)|0);
 HEAP32[4429] = $19;
 $20 = HEAP32[4429]|0;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $22 = HEAP8[36945]|0;
  $23 = $22 << 24 >> 24;
  $24 = ($23|0)!=(0);
  if ($24) {
   $25 = (_fopen(36945,10188)|0);
   HEAP32[4429] = $25;
  }
 }
 $26 = HEAP32[4429]|0;
 $27 = ($26|0)==(0|0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $28 = HEAP32[384]|0;
 $29 = $1;
 HEAP32[$vararg_buffer>>2] = $29;
 (_fprintf($28,10192,$vararg_buffer)|0);
 $30 = HEAP32[384]|0;
 HEAP32[4429] = $30;
 STACKTOP = sp;return;
}
function _lou_logPrint($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = sp + 8|0;
 $1 = $0;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[4429]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (_fopen(36945,10188)|0);
  HEAP32[4429] = $7;
 }
 $8 = HEAP32[4429]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $10 = HEAP32[384]|0;
  HEAP32[4429] = $10;
 }
 HEAP32[$2>>2] = $varargs;
 $11 = HEAP32[4429]|0;
 $12 = $1;
 (_vfprintf($11,$12,$2)|0);
 $13 = HEAP32[4429]|0;
 (_fprintf($13,10190,$vararg_buffer)|0);
 $14 = HEAP32[4429]|0;
 (_fflush($14)|0);
 STACKTOP = sp;return;
}
function _lou_logEnd() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4429]|0;
 $1 = ($0|0)!=(0|0);
 if ($1) {
  $2 = HEAP32[4429]|0;
  $3 = HEAP32[384]|0;
  $4 = ($2|0)!=($3|0);
  if ($4) {
   $5 = HEAP32[4429]|0;
   (_fclose($5)|0);
  }
 }
 HEAP32[4429] = 0;
 return;
}
function __lou_stringHash($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $5;
 $8 = ($7|0)!=(0);
 $9 = $4;
 $10 = HEAP16[$9>>1]|0;
 if ($8) {
  $19 = $6;
  $20 = (_toLowercase_439($10,$19)|0);
  $21 = $20&65535;
  $22 = $21 << 8;
  $23 = $4;
  $24 = ((($23)) + 2|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $6;
  $27 = (_toLowercase_439($25,$26)|0);
  $28 = $27&65535;
  $29 = (($22) + ($28))|0;
  $30 = (($29>>>0) % 1123)&-1;
  $3 = $30;
  $31 = $3;
  STACKTOP = sp;return ($31|0);
 } else {
  $11 = $10&65535;
  $12 = $11 << 8;
  $13 = $4;
  $14 = ((($13)) + 2|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15&65535;
  $17 = (($12) + ($16))|0;
  $18 = (($17>>>0) % 1123)&-1;
  $3 = $18;
  $31 = $3;
  STACKTOP = sp;return ($31|0);
 }
 return (0)|0;
}
function __lou_charHash($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2&65535;
 $4 = (($3>>>0) % 1123)&-1;
 STACKTOP = sp;return ($4|0);
}
function __lou_showString($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer = sp;
 $9 = sp + 40|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 $14 = $6;
 $15 = (($14) + 1)|0;
 $6 = $15;
 $16 = (41317 + ($14)|0);
 HEAP8[$16>>0] = 39;
 $7 = 0;
 L1: while(1) {
  $17 = $7;
  $18 = $4;
  $19 = ($17|0)<($18|0);
  $20 = $6;
  $21 = ($20|0)<(2046);
  $22 = $19 ? $21 : 0;
  if (!($22)) {
   label = 19;
   break;
  }
  $23 = $7;
  $24 = $3;
  $25 = (($24) + ($23<<1)|0);
  $26 = HEAP16[$25>>1]|0;
  $8 = $26;
  $27 = $5;
  $28 = ($27|0)!=(0);
  if ($28) {
   label = 6;
  } else {
   $29 = $8;
   $30 = (_isASCII($29)|0);
   $31 = ($30|0)!=(0);
   if ($31) {
    $32 = $8;
    $33 = $32&255;
    $34 = $6;
    $35 = (($34) + 1)|0;
    $6 = $35;
    $36 = (41317 + ($34)|0);
    HEAP8[$36>>0] = $33;
   } else {
    label = 6;
   }
  }
  L7: do {
   if ((label|0) == 6) {
    label = 0;
    $37 = $8;
    $38 = $37&65535;
    HEAP32[$vararg_buffer>>2] = $38;
    $39 = (_sprintf($9,10355,$vararg_buffer)|0);
    $10 = $39;
    $40 = $10;
    switch ($40|0) {
    case 4: case 3: case 2: case 1:  {
     $11 = 120;
     $41 = $10;
     $42 = (4 - ($41))|0;
     $12 = $42;
     break;
    }
    case 5:  {
     $11 = 121;
     $12 = 0;
     break;
    }
    case 8: case 7: case 6:  {
     $11 = 122;
     $43 = $10;
     $44 = (8 - ($43))|0;
     $12 = $44;
     break;
    }
    default: {
     $11 = 63;
     $12 = 0;
    }
    }
    $45 = $6;
    $46 = $12;
    $47 = (($45) + ($46))|0;
    $48 = $10;
    $49 = (($47) + ($48))|0;
    $50 = (($49) + 4)|0;
    $51 = ($50|0)>=(2046);
    if ($51) {
     label = 19;
     break L1;
    }
    $52 = $6;
    $53 = (($52) + 1)|0;
    $6 = $53;
    $54 = (41317 + ($52)|0);
    HEAP8[$54>>0] = 92;
    $55 = $11;
    $56 = $6;
    $57 = (($56) + 1)|0;
    $6 = $57;
    $58 = (41317 + ($56)|0);
    HEAP8[$58>>0] = $55;
    $13 = 0;
    while(1) {
     $59 = $13;
     $60 = $12;
     $61 = ($59|0)<($60|0);
     if (!($61)) {
      break;
     }
     $62 = $6;
     $63 = (($62) + 1)|0;
     $6 = $63;
     $64 = (41317 + ($62)|0);
     HEAP8[$64>>0] = 48;
     $65 = $13;
     $66 = (($65) + 1)|0;
     $13 = $66;
    }
    $13 = 0;
    while(1) {
     $67 = $13;
     $68 = $10;
     $69 = ($67|0)<($68|0);
     if (!($69)) {
      break L7;
     }
     $70 = $13;
     $71 = (($9) + ($70)|0);
     $72 = HEAP8[$71>>0]|0;
     $73 = $6;
     $74 = (($73) + 1)|0;
     $6 = $74;
     $75 = (41317 + ($73)|0);
     HEAP8[$75>>0] = $72;
     $76 = $13;
     $77 = (($76) + 1)|0;
     $13 = $77;
    }
   }
  } while(0);
  $78 = $7;
  $79 = (($78) + 1)|0;
  $7 = $79;
 }
 if ((label|0) == 19) {
  $80 = $6;
  $81 = (($80) + 1)|0;
  $6 = $81;
  $82 = (41317 + ($80)|0);
  HEAP8[$82>>0] = 39;
  $83 = $6;
  $84 = (41317 + ($83)|0);
  HEAP8[$84>>0] = 0;
  STACKTOP = sp;return (41317|0);
 }
 return (0)|0;
}
function __lou_unknownDots($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $4 = $2;
 $5 = (($4) + 1)|0;
 $2 = $5;
 $6 = (41297 + ($4)|0);
 HEAP8[$6>>0] = 92;
 $3 = 0;
 while(1) {
  $7 = $3;
  $8 = (568 + ($7<<4)|0);
  $9 = $8;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $12 = (($9) + 4)|0;
  $13 = $12;
  $14 = HEAP32[$13>>2]|0;
  $15 = ($11|0)!=(0);
  $16 = ($14|0)!=(0);
  $17 = $15 | $16;
  if (!($17)) {
   break;
  }
  $18 = $1;
  $19 = $18&65535;
  $20 = $3;
  $21 = (568 + ($20<<4)|0);
  $22 = $21;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = (($22) + 4)|0;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $28 = $19 & $24;
  $29 = ($28|0)!=(0);
  $30 = (0)!=(0);
  $31 = $29 | $30;
  if ($31) {
   $32 = $3;
   $33 = (568 + ($32<<4)|0);
   $34 = ((($33)) + 8|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $2;
   $37 = (($36) + 1)|0;
   $2 = $37;
   $38 = (41297 + ($36)|0);
   HEAP8[$38>>0] = $35;
  }
  $39 = $3;
  $40 = (($39) + 1)|0;
  $3 = $40;
 }
 $41 = $2;
 $42 = ($41|0)==(1);
 if (!($42)) {
  $46 = $2;
  $47 = (($46) + 1)|0;
  $2 = $47;
  $48 = (41297 + ($46)|0);
  HEAP8[$48>>0] = 47;
  $49 = $2;
  $50 = (41297 + ($49)|0);
  HEAP8[$50>>0] = 0;
  STACKTOP = sp;return (41297|0);
 }
 $43 = $2;
 $44 = (($43) + 1)|0;
 $2 = $44;
 $45 = (41297 + ($43)|0);
 HEAP8[$45>>0] = 48;
 $46 = $2;
 $47 = (($46) + 1)|0;
 $2 = $47;
 $48 = (41297 + ($46)|0);
 HEAP8[$48>>0] = 47;
 $49 = $2;
 $50 = (41297 + ($49)|0);
 HEAP8[$50>>0] = 0;
 STACKTOP = sp;return (41297|0);
}
function __lou_showDots($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $5 = 0;
 while(1) {
  $7 = $5;
  $8 = $3;
  $9 = ($7|0)<($8|0);
  $10 = $4;
  $11 = ($10|0)<(2047);
  $12 = $9 ? $11 : 0;
  if (!($12)) {
   break;
  }
  $6 = 0;
  while(1) {
   $13 = $6;
   $14 = (568 + ($13<<4)|0);
   $15 = $14;
   $16 = $15;
   $17 = HEAP32[$16>>2]|0;
   $18 = (($15) + 4)|0;
   $19 = $18;
   $20 = HEAP32[$19>>2]|0;
   $21 = ($17|0)!=(0);
   $22 = ($20|0)!=(0);
   $23 = $21 | $22;
   $24 = $5;
   $25 = $2;
   $26 = (($25) + ($24<<1)|0);
   $27 = HEAP16[$26>>1]|0;
   if (!($23)) {
    break;
   }
   $28 = $27&65535;
   $29 = $6;
   $30 = (568 + ($29<<4)|0);
   $31 = $30;
   $32 = $31;
   $33 = HEAP32[$32>>2]|0;
   $34 = (($31) + 4)|0;
   $35 = $34;
   $36 = HEAP32[$35>>2]|0;
   $37 = $28 & $33;
   $38 = ($37|0)!=(0);
   $39 = (0)!=(0);
   $40 = $38 | $39;
   $41 = $4;
   $42 = ($41|0)<(2047);
   $or$cond = $40 & $42;
   if ($or$cond) {
    $43 = $6;
    $44 = (568 + ($43<<4)|0);
    $45 = ((($44)) + 8|0);
    $46 = HEAP8[$45>>0]|0;
    $47 = $4;
    $48 = (($47) + 1)|0;
    $4 = $48;
    $49 = (39249 + ($47)|0);
    HEAP8[$49>>0] = $46;
   }
   $50 = $6;
   $51 = (($50) + 1)|0;
   $6 = $51;
  }
  $52 = $27&65535;
  $53 = ($52|0)==(32768);
  $54 = $4;
  $55 = ($54|0)<(2047);
  $or$cond3 = $53 & $55;
  if ($or$cond3) {
   $56 = $4;
   $57 = (($56) + 1)|0;
   $4 = $57;
   $58 = (39249 + ($56)|0);
   HEAP8[$58>>0] = 48;
  }
  $59 = $5;
  $60 = $3;
  $61 = (($60) - 1)|0;
  $62 = ($59|0)!=($61|0);
  $63 = $4;
  $64 = ($63|0)<(2047);
  $or$cond5 = $62 & $64;
  if ($or$cond5) {
   $65 = $4;
   $66 = (($65) + 1)|0;
   $4 = $66;
   $67 = (39249 + ($65)|0);
   HEAP8[$67>>0] = 45;
  }
  $68 = $5;
  $69 = (($68) + 1)|0;
  $5 = $69;
 }
 $70 = $4;
 $71 = (39249 + ($70)|0);
 HEAP8[$71>>0] = 0;
 STACKTOP = sp;return (39249|0);
}
function __lou_showAttributes($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $5 = $2;
 $6 = $5;
 HEAP32[$6>>2] = $0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 $3 = 0;
 $4 = 0;
 while(1) {
  $9 = $4;
  $10 = (344 + ($9<<4)|0);
  $11 = $10;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($11) + 4)|0;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $17 = ($13|0)!=(0);
  $18 = ($16|0)!=(0);
  $19 = $17 | $18;
  if (!($19)) {
   break;
  }
  $20 = $2;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + 4)|0;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = $4;
  $27 = (344 + ($26<<4)|0);
  $28 = $27;
  $29 = $28;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($28) + 4)|0;
  $32 = $31;
  $33 = HEAP32[$32>>2]|0;
  $34 = $22 & $30;
  $35 = $25 & $33;
  $36 = ($34|0)!=(0);
  $37 = ($35|0)!=(0);
  $38 = $36 | $37;
  $39 = $3;
  $40 = ($39|0)<(2047);
  $or$cond = $38 & $40;
  if ($or$cond) {
   $41 = $4;
   $42 = (344 + ($41<<4)|0);
   $43 = ((($42)) + 8|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $3;
   $46 = (($45) + 1)|0;
   $3 = $46;
   $47 = (37201 + ($45)|0);
   HEAP8[$47>>0] = $44;
  }
  $48 = $4;
  $49 = (($48) + 1)|0;
  $4 = $49;
 }
 $50 = $3;
 $51 = (37201 + ($50)|0);
 HEAP8[$51>>0] = 0;
 STACKTOP = sp;return (37201|0);
}
function __lou_outOfMemory() {
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 __lou_logMessage(50000,10324,$vararg_buffer);
 _exit(3);
 // unreachable;
}
function __lou_isValidMode($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $3 = $2;
  $4 = ($3>>>0)<(7);
  if (!($4)) {
   break;
  }
  $5 = $2;
  $6 = (1508 + ($5<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 ^ -1;
  $9 = $1;
  $10 = $9 & $8;
  $1 = $10;
  $11 = $2;
  $12 = (($11) + 1)|0;
  $2 = $12;
 }
 $13 = $1;
 $14 = ($13|0)!=(0);
 $15 = $14 ^ 1;
 $16 = $15&1;
 STACKTOP = sp;return ($16|0);
}
function __lou_charToFallbackDots($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = $4&65535;
 $6 = ($5|0)>=(128);
 $$ = $6 ? 63 : $0;
 $1 = $$;
 $2 = -32768;
 $3 = 10228;
 while(1) {
  $7 = $3;
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  $10 = $1;
  $11 = $10&65535;
  $12 = ($9|0)>($11|0);
  $13 = $3;
  if (!($12)) {
   break;
  }
  $14 = ((($13)) + 4|0);
  $3 = $14;
 }
 $15 = ((($13)) + 1|0);
 $3 = $15;
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $17 ^ -1;
 $19 = $1;
 $20 = $19&65535;
 $21 = $20 & $18;
 $22 = $21&65535;
 $1 = $22;
 $23 = $3;
 $24 = ((($23)) + 1|0);
 $3 = $24;
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = $1;
 $28 = $27&65535;
 $29 = $28 | $26;
 $30 = $29&65535;
 $1 = $30;
 $31 = $3;
 $32 = ((($31)) + 1|0);
 $3 = $32;
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = $2;
 $36 = $35&65535;
 $37 = $36 | $34;
 $38 = $37&65535;
 $2 = $38;
 $39 = $1;
 $40 = $39&65535;
 $41 = (10228 + ($40)|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = $2;
 $45 = $44&65535;
 $46 = $45 | $43;
 $47 = $46&65535;
 $2 = $47;
 $48 = $2;
 STACKTOP = sp;return ($48|0);
}
function _isASCII($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2&65535;
 $4 = ($3|0)>=(32);
 if ($4) {
  $5 = $1;
  $6 = $5&65535;
  $7 = ($6|0)<(127);
  $9 = $7;
 } else {
  $9 = 0;
 }
 $8 = $9&1;
 STACKTOP = sp;return ($8|0);
}
function _toLowercase_439($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = (__lou_charHash($6)|0);
 $8 = $4;
 $9 = ((($8)) + 13160|0);
 $10 = (($9) + ($7<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[4430] = $11;
 while(1) {
  $12 = HEAP32[4430]|0;
  $13 = ($12|0)!=(0);
  if (!($13)) {
   label = 13;
   break;
  }
  $14 = HEAP32[4430]|0;
  $15 = $4;
  $16 = ((($15)) + 31168|0);
  $17 = (($16) + ($14<<3)|0);
  HEAP32[4431] = $17;
  $18 = HEAP32[4431]|0;
  $19 = ((($18)) + 44|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = $20&65535;
  $22 = $3;
  $23 = $22&65535;
  $24 = ($21|0)==($23|0);
  $25 = HEAP32[4431]|0;
  if ($24) {
   break;
  }
  $94 = ((($25)) + 8|0);
  $95 = HEAP32[$94>>2]|0;
  HEAP32[4430] = $95;
 }
 if ((label|0) == 13) {
  $96 = $3;
  $2 = $96;
  $97 = $2;
  STACKTOP = sp;return ($97|0);
 }
 $26 = ((($25)) + 32|0);
 $27 = $26;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 4)|0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = $29 & 16;
 $34 = ($33|0)!=(0);
 $35 = (0)!=(0);
 $36 = $34 | $35;
 L9: do {
  if ($36) {
   $37 = HEAP32[4431]|0;
   $5 = $37;
   $38 = $5;
   $39 = ((($38)) + 48|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)!=(0);
   if ($41) {
    $42 = $5;
    $43 = ((($42)) + 48|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = $4;
    $46 = ((($45)) + 31168|0);
    $47 = (($46) + ($44<<3)|0);
    $5 = $47;
   }
   while(1) {
    $48 = $5;
    $49 = ((($48)) + 32|0);
    $50 = $49;
    $51 = $50;
    $52 = HEAP32[$51>>2]|0;
    $53 = (($50) + 4)|0;
    $54 = $53;
    $55 = HEAP32[$54>>2]|0;
    $56 = HEAP32[4431]|0;
    $57 = ((($56)) + 32|0);
    $58 = $57;
    $59 = $58;
    $60 = HEAP32[$59>>2]|0;
    $61 = (($58) + 4)|0;
    $62 = $61;
    $63 = HEAP32[$62>>2]|0;
    $64 = $60 & -17;
    $65 = $52 & $64;
    $66 = $55 & $63;
    $67 = HEAP32[4431]|0;
    $68 = ((($67)) + 32|0);
    $69 = $68;
    $70 = $69;
    $71 = HEAP32[$70>>2]|0;
    $72 = (($69) + 4)|0;
    $73 = $72;
    $74 = HEAP32[$73>>2]|0;
    $75 = $71 & -17;
    $76 = ($65|0)==($75|0);
    $77 = ($66|0)==($74|0);
    $78 = $76 & $77;
    $79 = $5;
    if ($78) {
     break;
    }
    $82 = ((($79)) + 52|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($83|0)!=(0);
    if (!($84)) {
     break L9;
    }
    $85 = $5;
    $86 = ((($85)) + 52|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = $4;
    $89 = ((($88)) + 31168|0);
    $90 = (($89) + ($87<<3)|0);
    $5 = $90;
   }
   $80 = ((($79)) + 44|0);
   $81 = HEAP16[$80>>1]|0;
   $2 = $81;
   $97 = $2;
   STACKTOP = sp;return ($97|0);
  }
 } while(0);
 $91 = HEAP32[4431]|0;
 $92 = ((($91)) + 44|0);
 $93 = HEAP16[$92>>1]|0;
 $2 = $93;
 $97 = $2;
 STACKTOP = sp;return ($97|0);
}
function _rpl_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 $2 = $4;
 $5 = $1;
 _free($5);
 $6 = $2;
 $7 = (___errno_location()|0);
 HEAP32[$7>>2] = $6;
 STACKTOP = sp;return;
}
function _rpl_malloc($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)==(0);
 $$ = $5 ? 1 : $0;
 $2 = $$;
 $6 = $2;
 $7 = (2147483647)<($6>>>0);
 if ($7) {
  $8 = (___errno_location()|0);
  HEAP32[$8>>2] = 12;
  $1 = 0;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 } else {
  $9 = $2;
  $10 = (_malloc($9)|0);
  $3 = $10;
  $11 = $3;
  $1 = $11;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _rpl_realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ($6|0)==(0|0);
 $8 = $4;
 do {
  if ($7) {
   $9 = (_rpl_malloc($8)|0);
   $2 = $9;
  } else {
   $10 = ($8|0)==(0);
   if ($10) {
    $11 = $3;
    _rpl_free($11);
    $2 = 0;
    break;
   }
   $12 = $4;
   $13 = (2147483647)<($12>>>0);
   if ($13) {
    $14 = (___errno_location()|0);
    HEAP32[$14>>2] = 12;
    $2 = 0;
    break;
   } else {
    $15 = $3;
    $16 = $4;
    $17 = (_realloc($15,$16)|0);
    $5 = $17;
    $18 = $5;
    $2 = $18;
    break;
   }
  }
 } while(0);
 $19 = $2;
 STACKTOP = sp;return ($19|0);
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer>>2] = $2;
 $3 = (___syscall6(6,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$056 = 0, $$058 = 0, $$059 = 0, $$061 = 0, $$1 = 0, $$157 = 0, $$160 = 0, $$phi$trans$insert = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = ((($0)) + 44|0);
 $$056 = 2;$$058 = $12;$$059 = $3;
 while(1) {
  $15 = HEAP32[4432]|0;
  $16 = ($15|0)==(0|0);
  if ($16) {
   $20 = HEAP32[$13>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $20;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $$059;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $$056;
   $21 = (___syscall146(146,($vararg_buffer3|0))|0);
   $22 = (___syscall_ret($21)|0);
   $$0 = $22;
  } else {
   _pthread_cleanup_push((19|0),($0|0));
   $17 = HEAP32[$13>>2]|0;
   HEAP32[$vararg_buffer>>2] = $17;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $$059;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $$056;
   $18 = (___syscall146(146,($vararg_buffer|0))|0);
   $19 = (___syscall_ret($18)|0);
   _pthread_cleanup_pop(0);
   $$0 = $19;
  }
  $23 = ($$058|0)==($$0|0);
  if ($23) {
   label = 6;
   break;
  }
  $30 = ($$0|0)<(0);
  if ($30) {
   label = 8;
   break;
  }
  $38 = (($$058) - ($$0))|0;
  $39 = ((($$059)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($$0>>>0)>($40>>>0);
  if ($41) {
   $42 = HEAP32[$14>>2]|0;
   HEAP32[$4>>2] = $42;
   HEAP32[$7>>2] = $42;
   $43 = (($$0) - ($40))|0;
   $44 = ((($$059)) + 8|0);
   $45 = (($$056) + -1)|0;
   $$phi$trans$insert = ((($$059)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $$1 = $43;$$157 = $45;$$160 = $44;$53 = $$pre;
  } else {
   $46 = ($$056|0)==(2);
   if ($46) {
    $47 = HEAP32[$4>>2]|0;
    $48 = (($47) + ($$0)|0);
    HEAP32[$4>>2] = $48;
    $$1 = $$0;$$157 = 2;$$160 = $$059;$53 = $40;
   } else {
    $$1 = $$0;$$157 = $$056;$$160 = $$059;$53 = $40;
   }
  }
  $49 = HEAP32[$$160>>2]|0;
  $50 = (($49) + ($$1)|0);
  HEAP32[$$160>>2] = $50;
  $51 = ((($$160)) + 4|0);
  $52 = (($53) - ($$1))|0;
  HEAP32[$51>>2] = $52;
  $$056 = $$157;$$058 = $38;$$059 = $$160;
 }
 if ((label|0) == 6) {
  $24 = HEAP32[$14>>2]|0;
  $25 = ((($0)) + 48|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($24) + ($26)|0);
  $28 = ((($0)) + 16|0);
  HEAP32[$28>>2] = $27;
  $29 = $24;
  HEAP32[$4>>2] = $29;
  HEAP32[$7>>2] = $29;
  $$061 = $2;
 }
 else if ((label|0) == 8) {
  $31 = ((($0)) + 16|0);
  HEAP32[$31>>2] = 0;
  HEAP32[$4>>2] = 0;
  HEAP32[$7>>2] = 0;
  $32 = HEAP32[$0>>2]|0;
  $33 = $32 | 32;
  HEAP32[$0>>2] = $33;
  $34 = ($$056|0)==(2);
  if ($34) {
   $$061 = 0;
  } else {
   $35 = ((($$059)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($2) - ($36))|0;
   $$061 = $37;
  }
 }
 STACKTOP = sp;return ($$061|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $6 = (___syscall140(140,($vararg_buffer|0))|0);
 $7 = (___syscall_ret($6)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  HEAP32[$3>>2] = -1;
  $9 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $9 = $$pre;
 }
 STACKTOP = sp;return ($9|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4432]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 17772;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 64|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function _cleanup($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  ___unlockfile($0);
 }
 return;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp;
 $3 = sp + 12|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 7;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $3;
  $10 = (___syscall54(54,($vararg_buffer|0))|0);
  $11 = ($10|0)==(0);
  if (!($11)) {
   $12 = ((($0)) + 75|0);
   HEAP8[$12>>0] = -1;
  }
 }
 $13 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($13|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$026 = 0, $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = HEAP32[4432]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $20 = ((($0)) + 60|0);
  $21 = HEAP32[$20>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $21;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $3;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 2;
  $22 = (___syscall145(145,($vararg_buffer3|0))|0);
  $23 = (___syscall_ret($22)|0);
  $$0 = $23;
 } else {
  _pthread_cleanup_push((20|0),($0|0));
  $16 = ((($0)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer>>2] = $17;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $3;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2;
  $18 = (___syscall145(145,($vararg_buffer|0))|0);
  $19 = (___syscall_ret($18)|0);
  _pthread_cleanup_pop(0);
  $$0 = $19;
 }
 $24 = ($$0|0)<(1);
 if ($24) {
  $25 = $$0 & 48;
  $26 = $25 ^ 16;
  $27 = HEAP32[$0>>2]|0;
  $28 = $27 | $26;
  HEAP32[$0>>2] = $28;
  $29 = ((($0)) + 8|0);
  HEAP32[$29>>2] = 0;
  $30 = ((($0)) + 4|0);
  HEAP32[$30>>2] = 0;
  $$026 = $$0;
 } else {
  $31 = HEAP32[$4>>2]|0;
  $32 = ($$0>>>0)>($31>>>0);
  if ($32) {
   $33 = (($$0) - ($31))|0;
   $34 = HEAP32[$11>>2]|0;
   $35 = ((($0)) + 4|0);
   HEAP32[$35>>2] = $34;
   $$cast = $34;
   $36 = (($$cast) + ($33)|0);
   $37 = ((($0)) + 8|0);
   HEAP32[$37>>2] = $36;
   $38 = HEAP32[$5>>2]|0;
   $39 = ($38|0)==(0);
   if ($39) {
    $$026 = $2;
   } else {
    $40 = ((($$cast)) + 1|0);
    HEAP32[$35>>2] = $40;
    $41 = HEAP8[$$cast>>0]|0;
    $42 = (($2) + -1)|0;
    $43 = (($1) + ($42)|0);
    HEAP8[$43>>0] = $41;
    $$026 = $2;
   }
  } else {
   $$026 = $$0;
  }
 }
 STACKTOP = sp;return ($$026|0);
}
function _cleanup_340($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  ___unlockfile($0);
 }
 return;
}
function _stat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $2 = (___syscall195(195,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _opendir($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = (_open($0,589824,$vararg_buffer)|0);
 $2 = ($1|0)<(0);
 do {
  if ($2) {
   $$0 = 0;
  } else {
   $3 = (_calloc(1,2072)|0);
   $4 = ($3|0)==(0|0);
   if ($4) {
    HEAP32[$vararg_buffer1>>2] = $1;
    (___syscall6(6,($vararg_buffer1|0))|0);
    $$0 = 0;
    break;
   } else {
    HEAP32[$3>>2] = $1;
    $$0 = $3;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _open($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = sp + 16|0;
 HEAP32[$2>>2] = $varargs;
 $arglist_current = HEAP32[$2>>2]|0;
 $3 = $arglist_current;
 $4 = ((0) + 4|0);
 $expanded2 = $4;
 $expanded = (($expanded2) - 1)|0;
 $5 = (($3) + ($expanded))|0;
 $6 = ((0) + 4|0);
 $expanded6 = $6;
 $expanded5 = (($expanded6) - 1)|0;
 $expanded4 = $expanded5 ^ -1;
 $7 = $5 & $expanded4;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $arglist_next = ((($8)) + 4|0);
 HEAP32[$2>>2] = $arglist_next;
 $10 = $1 | 32768;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $10;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $9;
 $11 = (___syscall5(5,($vararg_buffer|0))|0);
 $12 = (___syscall_ret($11)|0);
 STACKTOP = sp;return ($12|0);
}
function _readdir($0) {
 $0 = $0|0;
 var $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)<($4|0);
 L1: do {
  if ($5) {
   $13 = $2;
   label = 6;
  } else {
   $6 = HEAP32[$0>>2]|0;
   $7 = ((($0)) + 24|0);
   HEAP32[$vararg_buffer>>2] = $6;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $7;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = 2048;
   $8 = (___syscall220(220,($vararg_buffer|0))|0);
   $9 = ($8|0)<(1);
   if (!($9)) {
    HEAP32[$3>>2] = $8;
    HEAP32[$1>>2] = 0;
    $13 = 0;
    label = 6;
    break;
   }
   switch ($8|0) {
   case 0: case -2:  {
    $$1 = 0;
    break L1;
    break;
   }
   default: {
   }
   }
   $10 = (0 - ($8))|0;
   $11 = (___errno_location()|0);
   HEAP32[$11>>2] = $10;
   $$1 = 0;
  }
 } while(0);
 if ((label|0) == 6) {
  $12 = (((($0)) + 24|0) + ($13)|0);
  $14 = ((($12)) + 8|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15&65535;
  $17 = (($16) + ($13))|0;
  HEAP32[$1>>2] = $17;
  $18 = ((($12)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($0)) + 4|0);
  HEAP32[$20>>2] = $19;
  $$1 = $12;
 }
 STACKTOP = sp;return ($$1|0);
}
function _closedir($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_close($1)|0);
 _free($0);
 return ($2|0);
}
function _close($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $1 = (___syscall6(6,($vararg_buffer|0))|0);
 $2 = ($1|0)==(-4);
 $$ = $2 ? -115 : $1;
 $3 = (___syscall_ret($$)|0);
 STACKTOP = sp;return ($3|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $$011$lcssa = 0, $$01113 = 0, $$015 = 0, $$112 = 0, $$114 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$015 = 0;
 while(1) {
  $2 = (10358 + ($$015)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = ($4|0)==($0|0);
  if ($5) {
   label = 2;
   break;
  }
  $6 = (($$015) + 1)|0;
  $7 = ($6|0)==(87);
  if ($7) {
   $$01113 = 10446;$$114 = 87;
   label = 5;
   break;
  } else {
   $$015 = $6;
  }
 }
 if ((label|0) == 2) {
  $1 = ($$015|0)==(0);
  if ($1) {
   $$011$lcssa = 10446;
  } else {
   $$01113 = 10446;$$114 = $$015;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$112 = $$01113;
   while(1) {
    $8 = HEAP8[$$112>>0]|0;
    $9 = ($8<<24>>24)==(0);
    $10 = ((($$112)) + 1|0);
    if ($9) {
     break;
    } else {
     $$112 = $10;
    }
   }
   $11 = (($$114) + -1)|0;
   $12 = ($11|0)==(0);
   if ($12) {
    $$011$lcssa = $10;
    break;
   } else {
    $$01113 = $10;$$114 = $11;
    label = 5;
   }
  }
 }
 return ($$011$lcssa|0);
}
function _isupper($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -65)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _tolower($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_isupper($0)|0);
 $2 = ($1|0)==(0);
 $3 = $0 | 32;
 $$0 = $2 ? $0 : $3;
 return ($$0|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _sprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_vsnprintf($0,2147483647,$1,$2)|0);
 return ($3|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 112|0;
 $5 = sp;
 dest=$5; src=1768; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $$$015 = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $$$015;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($$$015)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($$$015|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $39 = $12;
  } else {
   $39 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 31]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $40 = ($39|0)==(0);
  if (!($40)) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$0259 = 0, $$$0262 = 0, $$$0269 = 0, $$$3484$i = 0, $$$3484705$i = 0, $$$3484706$i = 0, $$$3501$i = 0, $$$4266 = 0, $$$4502$i = 0, $$$5 = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i300 = 0, $$0228 = 0, $$0229396 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0;
 var $$0240$lcssa = 0, $$0240$lcssa460 = 0, $$0240395 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249383 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$ = 0, $$0259 = 0, $$0262342 = 0, $$0262390 = 0, $$0269 = 0, $$0269$phi = 0, $$0321 = 0, $$0463$lcssa$i = 0, $$0463594$i = 0, $$0464603$i = 0;
 var $$0466$i = 0.0, $$0470$i = 0, $$0471$i = 0.0, $$0479$i = 0, $$0487652$i = 0, $$0488$i = 0, $$0488663$i = 0, $$0488665$i = 0, $$0496$$9$i = 0, $$0497664$i = 0, $$0498$i = 0, $$05$lcssa$i = 0, $$0509592$i = 0.0, $$0510$i = 0, $$0511$i = 0, $$0514647$i = 0, $$0520$i = 0, $$0522$$i = 0, $$0522$i = 0, $$0524$i = 0;
 var $$0526$i = 0, $$0528$i = 0, $$0528639$i = 0, $$0528641$i = 0, $$0531646$i = 0, $$056$i = 0, $$06$i = 0, $$06$i290 = 0, $$06$i298 = 0, $$1 = 0, $$1230407 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241406 = 0, $$1244394 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0, $$1260 = 0;
 var $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$1322 = 0, $$1465$i = 0, $$1467$i = 0.0, $$1469$i = 0.0, $$1472$i = 0.0, $$1480$i = 0, $$1482$lcssa$i = 0, $$1482671$i = 0, $$1489651$i = 0, $$1499$lcssa$i = 0, $$1499670$i = 0, $$1508593$i = 0, $$1512$lcssa$i = 0, $$1512617$i = 0, $$1515$i = 0, $$1521$i = 0, $$1525$i = 0;
 var $$1527$i = 0, $$1529624$i = 0, $$1532$lcssa$i = 0, $$1532640$i = 0, $$1607$i = 0, $$2 = 0, $$2$i = 0, $$2234 = 0, $$2239 = 0, $$2242381 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2261 = 0, $$2271 = 0, $$2323$lcssa = 0, $$2323382 = 0, $$2473$i = 0.0, $$2476$$545$i = 0;
 var $$2476$$547$i = 0, $$2476$i = 0, $$2483$ph$i = 0, $$2490$lcssa$i = 0, $$2490632$i = 0, $$2500$i = 0, $$2513$i = 0, $$2516628$i = 0, $$2530$i = 0, $$2533627$i = 0, $$3$i = 0.0, $$3257 = 0, $$3265 = 0, $$3272 = 0, $$331 = 0, $$332 = 0, $$333 = 0, $$3379 = 0, $$3477$i = 0, $$3484$lcssa$i = 0;
 var $$3484658$i = 0, $$3501$lcssa$i = 0, $$3501657$i = 0, $$3534623$i = 0, $$4$i = 0.0, $$4258458 = 0, $$4266 = 0, $$4325 = 0, $$4478$lcssa$i = 0, $$4478600$i = 0, $$4492$i = 0, $$4502$i = 0, $$4518$i = 0, $$5 = 0, $$5$lcssa$i = 0, $$537$i = 0, $$538$$i = 0, $$538$i = 0, $$541$i = 0.0, $$544$i = 0;
 var $$546$i = 0, $$5486$lcssa$i = 0, $$5486633$i = 0, $$5493606$i = 0, $$5519$ph$i = 0, $$553$i = 0, $$554$i = 0, $$557$i = 0.0, $$5611$i = 0, $$6 = 0, $$6$i = 0, $$6268 = 0, $$6494599$i = 0, $$7 = 0, $$7495610$i = 0, $$7505$$i = 0, $$7505$i = 0, $$7505$ph$i = 0, $$8$i = 0, $$9$ph$i = 0;
 var $$lcssa683$i = 0, $$neg$i = 0, $$neg572$i = 0, $$pn$i = 0, $$pr = 0, $$pr$i = 0, $$pr571$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi704$iZ2D = 0, $$pre452 = 0, $$pre453 = 0, $$pre454 = 0, $$pre697$i = 0, $$pre700$i = 0, $$pre703$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0.0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0.0, $404 = 0.0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0.0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0.0, $494 = 0.0, $495 = 0.0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
 var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0;
 var $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0;
 var $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0.0, $606 = 0.0, $607 = 0, $608 = 0.0, $609 = 0, $61 = 0;
 var $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0;
 var $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0;
 var $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0;
 var $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0;
 var $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0;
 var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0;
 var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0;
 var $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0;
 var $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0;
 var $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0;
 var $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0;
 var $809 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i292 = 0, $isdigit275 = 0;
 var $isdigit277 = 0, $isdigit5$i = 0, $isdigit5$i288 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i291 = 0, $isdigittmp274 = 0, $isdigittmp276 = 0, $isdigittmp4$i = 0, $isdigittmp4$i287 = 0, $isdigittmp7$i = 0, $isdigittmp7$i289 = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond280 = 0, $or$cond282 = 0, $or$cond285 = 0;
 var $or$cond3$not$i = 0, $or$cond412 = 0, $or$cond540$i = 0, $or$cond543$i = 0, $or$cond552$i = 0, $or$cond6$i = 0, $scevgep694$i = 0, $scevgep694695$i = 0, $storemerge = 0, $storemerge273345 = 0, $storemerge273389 = 0, $storemerge278 = 0, $sum = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(624|0);
 $5 = sp + 24|0;
 $6 = sp + 16|0;
 $7 = sp + 588|0;
 $8 = sp + 576|0;
 $9 = sp;
 $10 = sp + 536|0;
 $11 = sp + 8|0;
 $12 = sp + 528|0;
 $13 = ($0|0)!=(0|0);
 $14 = ((($10)) + 40|0);
 $15 = $14;
 $16 = ((($10)) + 39|0);
 $17 = ((($11)) + 4|0);
 $18 = $7;
 $19 = (0 - ($18))|0;
 $20 = ((($8)) + 12|0);
 $21 = ((($8)) + 11|0);
 $22 = $20;
 $23 = (($22) - ($18))|0;
 $24 = (-2 - ($18))|0;
 $25 = (($22) + 2)|0;
 $26 = ((($5)) + 288|0);
 $27 = ((($7)) + 9|0);
 $28 = $27;
 $29 = ((($7)) + 8|0);
 $$0243 = 0;$$0247 = 0;$$0269 = 0;$$0321 = $1;
 L1: while(1) {
  $30 = ($$0247|0)>(-1);
  do {
   if ($30) {
    $31 = (2147483647 - ($$0247))|0;
    $32 = ($$0243|0)>($31|0);
    if ($32) {
     $33 = (___errno_location()|0);
     HEAP32[$33>>2] = 75;
     $$1248 = -1;
     break;
    } else {
     $34 = (($$0243) + ($$0247))|0;
     $$1248 = $34;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while(0);
  $35 = HEAP8[$$0321>>0]|0;
  $36 = ($35<<24>>24)==(0);
  if ($36) {
   label = 243;
   break;
  } else {
   $$1322 = $$0321;$37 = $35;
  }
  L9: while(1) {
   switch ($37<<24>>24) {
   case 37:  {
    $$0249383 = $$1322;$$2323382 = $$1322;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$0249$lcssa = $$1322;$$2323$lcssa = $$1322;
    break L9;
    break;
   }
   default: {
   }
   }
   $38 = ((($$1322)) + 1|0);
   $$pre = HEAP8[$38>>0]|0;
   $$1322 = $38;$37 = $$pre;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $39 = ((($$2323382)) + 1|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = ($40<<24>>24)==(37);
     if (!($41)) {
      $$0249$lcssa = $$0249383;$$2323$lcssa = $$2323382;
      break L12;
     }
     $42 = ((($$0249383)) + 1|0);
     $43 = ((($$2323382)) + 2|0);
     $44 = HEAP8[$43>>0]|0;
     $45 = ($44<<24>>24)==(37);
     if ($45) {
      $$0249383 = $42;$$2323382 = $43;
      label = 9;
     } else {
      $$0249$lcssa = $42;$$2323$lcssa = $43;
      break;
     }
    }
   }
  } while(0);
  $46 = $$0249$lcssa;
  $47 = $$0321;
  $48 = (($46) - ($47))|0;
  if ($13) {
   $49 = HEAP32[$0>>2]|0;
   $50 = $49 & 32;
   $51 = ($50|0)==(0);
   if ($51) {
    (___fwritex($$0321,$48,$0)|0);
   }
  }
  $52 = ($48|0)==(0);
  if (!($52)) {
   $$0269$phi = $$0269;$$0243 = $48;$$0247 = $$1248;$$0321 = $$2323$lcssa;$$0269 = $$0269$phi;
   continue;
  }
  $53 = ((($$2323$lcssa)) + 1|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54 << 24 >> 24;
  $isdigittmp = (($55) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $56 = ((($$2323$lcssa)) + 2|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = ($57<<24>>24)==(36);
   $59 = ((($$2323$lcssa)) + 3|0);
   $$331 = $58 ? $59 : $53;
   $$$0269 = $58 ? 1 : $$0269;
   $isdigittmp$ = $58 ? $isdigittmp : -1;
   $$pre452 = HEAP8[$$331>>0]|0;
   $$0253 = $isdigittmp$;$$1270 = $$$0269;$61 = $$pre452;$storemerge = $$331;
  } else {
   $$0253 = -1;$$1270 = $$0269;$61 = $54;$storemerge = $53;
  }
  $60 = $61 << 24 >> 24;
  $62 = (($60) + -32)|0;
  $63 = ($62>>>0)<(32);
  L25: do {
   if ($63) {
    $$0262390 = 0;$65 = $62;$69 = $61;$storemerge273389 = $storemerge;
    while(1) {
     $64 = 1 << $65;
     $66 = $64 & 75913;
     $67 = ($66|0)==(0);
     if ($67) {
      $$0262342 = $$0262390;$78 = $69;$storemerge273345 = $storemerge273389;
      break L25;
     }
     $68 = $69 << 24 >> 24;
     $70 = (($68) + -32)|0;
     $71 = 1 << $70;
     $72 = $71 | $$0262390;
     $73 = ((($storemerge273389)) + 1|0);
     $74 = HEAP8[$73>>0]|0;
     $75 = $74 << 24 >> 24;
     $76 = (($75) + -32)|0;
     $77 = ($76>>>0)<(32);
     if ($77) {
      $$0262390 = $72;$65 = $76;$69 = $74;$storemerge273389 = $73;
     } else {
      $$0262342 = $72;$78 = $74;$storemerge273345 = $73;
      break;
     }
    }
   } else {
    $$0262342 = 0;$78 = $61;$storemerge273345 = $storemerge;
   }
  } while(0);
  $79 = ($78<<24>>24)==(42);
  do {
   if ($79) {
    $80 = ((($storemerge273345)) + 1|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = $81 << 24 >> 24;
    $isdigittmp276 = (($82) + -48)|0;
    $isdigit277 = ($isdigittmp276>>>0)<(10);
    if ($isdigit277) {
     $83 = ((($storemerge273345)) + 2|0);
     $84 = HEAP8[$83>>0]|0;
     $85 = ($84<<24>>24)==(36);
     if ($85) {
      $86 = (($4) + ($isdigittmp276<<2)|0);
      HEAP32[$86>>2] = 10;
      $87 = HEAP8[$80>>0]|0;
      $88 = $87 << 24 >> 24;
      $89 = (($88) + -48)|0;
      $90 = (($3) + ($89<<3)|0);
      $91 = $90;
      $92 = $91;
      $93 = HEAP32[$92>>2]|0;
      $94 = (($91) + 4)|0;
      $95 = $94;
      $96 = HEAP32[$95>>2]|0;
      $97 = ((($storemerge273345)) + 3|0);
      $$0259 = $93;$$2271 = 1;$storemerge278 = $97;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $98 = ($$1270|0)==(0);
     if (!($98)) {
      $$0 = -1;
      break L1;
     }
     if (!($13)) {
      $$1260 = 0;$$1263 = $$0262342;$$3272 = 0;$$4325 = $80;$$pr = $81;
      break;
     }
     $arglist_current = HEAP32[$2>>2]|0;
     $99 = $arglist_current;
     $100 = ((0) + 4|0);
     $expanded4 = $100;
     $expanded = (($expanded4) - 1)|0;
     $101 = (($99) + ($expanded))|0;
     $102 = ((0) + 4|0);
     $expanded8 = $102;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $103 = $101 & $expanded6;
     $104 = $103;
     $105 = HEAP32[$104>>2]|0;
     $arglist_next = ((($104)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $$0259 = $105;$$2271 = 0;$storemerge278 = $80;
    }
    $106 = ($$0259|0)<(0);
    $107 = $$0262342 | 8192;
    $108 = (0 - ($$0259))|0;
    $$$0262 = $106 ? $107 : $$0262342;
    $$$0259 = $106 ? $108 : $$0259;
    $$pre453 = HEAP8[$storemerge278>>0]|0;
    $$1260 = $$$0259;$$1263 = $$$0262;$$3272 = $$2271;$$4325 = $storemerge278;$$pr = $$pre453;
   } else {
    $109 = $78 << 24 >> 24;
    $isdigittmp4$i = (($109) + -48)|0;
    $isdigit5$i = ($isdigittmp4$i>>>0)<(10);
    if ($isdigit5$i) {
     $$06$i = 0;$113 = $storemerge273345;$isdigittmp7$i = $isdigittmp4$i;
     while(1) {
      $110 = ($$06$i*10)|0;
      $111 = (($110) + ($isdigittmp7$i))|0;
      $112 = ((($113)) + 1|0);
      $114 = HEAP8[$112>>0]|0;
      $115 = $114 << 24 >> 24;
      $isdigittmp$i = (($115) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $$06$i = $111;$113 = $112;$isdigittmp7$i = $isdigittmp$i;
      } else {
       break;
      }
     }
     $116 = ($111|0)<(0);
     if ($116) {
      $$0 = -1;
      break L1;
     } else {
      $$1260 = $111;$$1263 = $$0262342;$$3272 = $$1270;$$4325 = $112;$$pr = $114;
     }
    } else {
     $$1260 = 0;$$1263 = $$0262342;$$3272 = $$1270;$$4325 = $storemerge273345;$$pr = $78;
    }
   }
  } while(0);
  $117 = ($$pr<<24>>24)==(46);
  L45: do {
   if ($117) {
    $118 = ((($$4325)) + 1|0);
    $119 = HEAP8[$118>>0]|0;
    $120 = ($119<<24>>24)==(42);
    if (!($120)) {
     $147 = $119 << 24 >> 24;
     $isdigittmp4$i287 = (($147) + -48)|0;
     $isdigit5$i288 = ($isdigittmp4$i287>>>0)<(10);
     if ($isdigit5$i288) {
      $$06$i290 = 0;$151 = $118;$isdigittmp7$i289 = $isdigittmp4$i287;
     } else {
      $$0254 = 0;$$6 = $118;
      break;
     }
     while(1) {
      $148 = ($$06$i290*10)|0;
      $149 = (($148) + ($isdigittmp7$i289))|0;
      $150 = ((($151)) + 1|0);
      $152 = HEAP8[$150>>0]|0;
      $153 = $152 << 24 >> 24;
      $isdigittmp$i291 = (($153) + -48)|0;
      $isdigit$i292 = ($isdigittmp$i291>>>0)<(10);
      if ($isdigit$i292) {
       $$06$i290 = $149;$151 = $150;$isdigittmp7$i289 = $isdigittmp$i291;
      } else {
       $$0254 = $149;$$6 = $150;
       break L45;
      }
     }
    }
    $121 = ((($$4325)) + 2|0);
    $122 = HEAP8[$121>>0]|0;
    $123 = $122 << 24 >> 24;
    $isdigittmp274 = (($123) + -48)|0;
    $isdigit275 = ($isdigittmp274>>>0)<(10);
    if ($isdigit275) {
     $124 = ((($$4325)) + 3|0);
     $125 = HEAP8[$124>>0]|0;
     $126 = ($125<<24>>24)==(36);
     if ($126) {
      $127 = (($4) + ($isdigittmp274<<2)|0);
      HEAP32[$127>>2] = 10;
      $128 = HEAP8[$121>>0]|0;
      $129 = $128 << 24 >> 24;
      $130 = (($129) + -48)|0;
      $131 = (($3) + ($130<<3)|0);
      $132 = $131;
      $133 = $132;
      $134 = HEAP32[$133>>2]|0;
      $135 = (($132) + 4)|0;
      $136 = $135;
      $137 = HEAP32[$136>>2]|0;
      $138 = ((($$4325)) + 4|0);
      $$0254 = $134;$$6 = $138;
      break;
     }
    }
    $139 = ($$3272|0)==(0);
    if (!($139)) {
     $$0 = -1;
     break L1;
    }
    if ($13) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $140 = $arglist_current2;
     $141 = ((0) + 4|0);
     $expanded11 = $141;
     $expanded10 = (($expanded11) - 1)|0;
     $142 = (($140) + ($expanded10))|0;
     $143 = ((0) + 4|0);
     $expanded15 = $143;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $144 = $142 & $expanded13;
     $145 = $144;
     $146 = HEAP32[$145>>2]|0;
     $arglist_next3 = ((($145)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $$0254 = $146;$$6 = $121;
    } else {
     $$0254 = 0;$$6 = $121;
    }
   } else {
    $$0254 = -1;$$6 = $$4325;
   }
  } while(0);
  $$0252 = 0;$$7 = $$6;
  while(1) {
   $154 = HEAP8[$$7>>0]|0;
   $155 = $154 << 24 >> 24;
   $156 = (($155) + -65)|0;
   $157 = ($156>>>0)>(57);
   if ($157) {
    $$0 = -1;
    break L1;
   }
   $158 = ((($$7)) + 1|0);
   $159 = ((12250 + (($$0252*58)|0)|0) + ($156)|0);
   $160 = HEAP8[$159>>0]|0;
   $161 = $160&255;
   $162 = (($161) + -1)|0;
   $163 = ($162>>>0)<(8);
   if ($163) {
    $$0252 = $161;$$7 = $158;
   } else {
    break;
   }
  }
  $164 = ($160<<24>>24)==(0);
  if ($164) {
   $$0 = -1;
   break;
  }
  $165 = ($160<<24>>24)==(19);
  $166 = ($$0253|0)>(-1);
  do {
   if ($165) {
    if ($166) {
     $$0 = -1;
     break L1;
    } else {
     label = 51;
    }
   } else {
    if ($166) {
     $167 = (($4) + ($$0253<<2)|0);
     HEAP32[$167>>2] = $161;
     $168 = (($3) + ($$0253<<3)|0);
     $169 = $168;
     $170 = $169;
     $171 = HEAP32[$170>>2]|0;
     $172 = (($169) + 4)|0;
     $173 = $172;
     $174 = HEAP32[$173>>2]|0;
     $175 = $9;
     $176 = $175;
     HEAP32[$176>>2] = $171;
     $177 = (($175) + 4)|0;
     $178 = $177;
     HEAP32[$178>>2] = $174;
     label = 51;
     break;
    }
    if (!($13)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg_291($9,$161,$2);
   }
  } while(0);
  if ((label|0) == 51) {
   label = 0;
   if (!($13)) {
    $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
    continue;
   }
  }
  $179 = HEAP8[$$7>>0]|0;
  $180 = $179 << 24 >> 24;
  $181 = ($$0252|0)!=(0);
  $182 = $180 & 15;
  $183 = ($182|0)==(3);
  $or$cond280 = $181 & $183;
  $184 = $180 & -33;
  $$0235 = $or$cond280 ? $184 : $180;
  $185 = $$1263 & 8192;
  $186 = ($185|0)==(0);
  $187 = $$1263 & -65537;
  $$1263$ = $186 ? $$1263 : $187;
  L74: do {
   switch ($$0235|0) {
   case 110:  {
    $trunc = $$0252&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $194 = HEAP32[$9>>2]|0;
     HEAP32[$194>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 1:  {
     $195 = HEAP32[$9>>2]|0;
     HEAP32[$195>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 2:  {
     $196 = ($$1248|0)<(0);
     $197 = $196 << 31 >> 31;
     $198 = HEAP32[$9>>2]|0;
     $199 = $198;
     $200 = $199;
     HEAP32[$200>>2] = $$1248;
     $201 = (($199) + 4)|0;
     $202 = $201;
     HEAP32[$202>>2] = $197;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 3:  {
     $203 = $$1248&65535;
     $204 = HEAP32[$9>>2]|0;
     HEAP16[$204>>1] = $203;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 4:  {
     $205 = $$1248&255;
     $206 = HEAP32[$9>>2]|0;
     HEAP8[$206>>0] = $205;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 6:  {
     $207 = HEAP32[$9>>2]|0;
     HEAP32[$207>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 7:  {
     $208 = ($$1248|0)<(0);
     $209 = $208 << 31 >> 31;
     $210 = HEAP32[$9>>2]|0;
     $211 = $210;
     $212 = $211;
     HEAP32[$212>>2] = $$1248;
     $213 = (($211) + 4)|0;
     $214 = $213;
     HEAP32[$214>>2] = $209;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    default: {
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $215 = ($$0254>>>0)>(8);
    $216 = $215 ? $$0254 : 8;
    $217 = $$1263$ | 8;
    $$1236 = 120;$$1255 = $216;$$3265 = $217;
    label = 63;
    break;
   }
   case 88: case 120:  {
    $$1236 = $$0235;$$1255 = $$0254;$$3265 = $$1263$;
    label = 63;
    break;
   }
   case 111:  {
    $257 = $9;
    $258 = $257;
    $259 = HEAP32[$258>>2]|0;
    $260 = (($257) + 4)|0;
    $261 = $260;
    $262 = HEAP32[$261>>2]|0;
    $263 = ($259|0)==(0);
    $264 = ($262|0)==(0);
    $265 = $263 & $264;
    if ($265) {
     $$0$lcssa$i300 = $14;
    } else {
     $$06$i298 = $14;$267 = $259;$271 = $262;
     while(1) {
      $266 = $267 & 7;
      $268 = $266 | 48;
      $269 = $268&255;
      $270 = ((($$06$i298)) + -1|0);
      HEAP8[$270>>0] = $269;
      $272 = (_bitshift64Lshr(($267|0),($271|0),3)|0);
      $273 = tempRet0;
      $274 = ($272|0)==(0);
      $275 = ($273|0)==(0);
      $276 = $274 & $275;
      if ($276) {
       $$0$lcssa$i300 = $270;
       break;
      } else {
       $$06$i298 = $270;$267 = $272;$271 = $273;
      }
     }
    }
    $277 = $$1263$ & 8;
    $278 = ($277|0)==(0);
    if ($278) {
     $$0228 = $$0$lcssa$i300;$$1233 = 0;$$1238 = 12730;$$2256 = $$0254;$$4266 = $$1263$;
     label = 76;
    } else {
     $279 = $$0$lcssa$i300;
     $280 = (($15) - ($279))|0;
     $281 = ($$0254|0)>($280|0);
     $282 = (($280) + 1)|0;
     $$0254$ = $281 ? $$0254 : $282;
     $$0228 = $$0$lcssa$i300;$$1233 = 0;$$1238 = 12730;$$2256 = $$0254$;$$4266 = $$1263$;
     label = 76;
    }
    break;
   }
   case 105: case 100:  {
    $283 = $9;
    $284 = $283;
    $285 = HEAP32[$284>>2]|0;
    $286 = (($283) + 4)|0;
    $287 = $286;
    $288 = HEAP32[$287>>2]|0;
    $289 = ($288|0)<(0);
    if ($289) {
     $290 = (_i64Subtract(0,0,($285|0),($288|0))|0);
     $291 = tempRet0;
     $292 = $9;
     $293 = $292;
     HEAP32[$293>>2] = $290;
     $294 = (($292) + 4)|0;
     $295 = $294;
     HEAP32[$295>>2] = $291;
     $$0232 = 1;$$0237 = 12730;$300 = $290;$301 = $291;
     label = 75;
     break L74;
    }
    $296 = $$1263$ & 2048;
    $297 = ($296|0)==(0);
    if ($297) {
     $298 = $$1263$ & 1;
     $299 = ($298|0)==(0);
     $$ = $299 ? 12730 : (12732);
     $$0232 = $298;$$0237 = $$;$300 = $285;$301 = $288;
     label = 75;
    } else {
     $$0232 = 1;$$0237 = (12731);$300 = $285;$301 = $288;
     label = 75;
    }
    break;
   }
   case 117:  {
    $188 = $9;
    $189 = $188;
    $190 = HEAP32[$189>>2]|0;
    $191 = (($188) + 4)|0;
    $192 = $191;
    $193 = HEAP32[$192>>2]|0;
    $$0232 = 0;$$0237 = 12730;$300 = $190;$301 = $193;
    label = 75;
    break;
   }
   case 99:  {
    $321 = $9;
    $322 = $321;
    $323 = HEAP32[$322>>2]|0;
    $324 = (($321) + 4)|0;
    $325 = $324;
    $326 = HEAP32[$325>>2]|0;
    $327 = $323&255;
    HEAP8[$16>>0] = $327;
    $$2 = $16;$$2234 = 0;$$2239 = 12730;$$2251 = $14;$$5 = 1;$$6268 = $187;
    break;
   }
   case 109:  {
    $328 = (___errno_location()|0);
    $329 = HEAP32[$328>>2]|0;
    $330 = (_strerror($329)|0);
    $$1 = $330;
    label = 81;
    break;
   }
   case 115:  {
    $331 = HEAP32[$9>>2]|0;
    $332 = ($331|0)!=(0|0);
    $333 = $332 ? $331 : 12740;
    $$1 = $333;
    label = 81;
    break;
   }
   case 67:  {
    $340 = $9;
    $341 = $340;
    $342 = HEAP32[$341>>2]|0;
    $343 = (($340) + 4)|0;
    $344 = $343;
    $345 = HEAP32[$344>>2]|0;
    HEAP32[$11>>2] = $342;
    HEAP32[$17>>2] = 0;
    HEAP32[$9>>2] = $11;
    $$4258458 = -1;$809 = $11;
    label = 85;
    break;
   }
   case 83:  {
    $$pre454 = HEAP32[$9>>2]|0;
    $346 = ($$0254|0)==(0);
    if ($346) {
     _pad($0,32,$$1260,0,$$1263$);
     $$0240$lcssa460 = 0;
     label = 96;
    } else {
     $$4258458 = $$0254;$809 = $$pre454;
     label = 85;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $371 = +HEAPF64[$9>>3];
    HEAP32[$6>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $371;$372 = HEAP32[tempDoublePtr>>2]|0;
    $373 = HEAP32[tempDoublePtr+4>>2]|0;
    $374 = ($373|0)<(0);
    if ($374) {
     $375 = -$371;
     $$0471$i = $375;$$0520$i = 1;$$0522$i = 12747;
    } else {
     $376 = $$1263$ & 2048;
     $377 = ($376|0)==(0);
     $378 = $$1263$ & 1;
     if ($377) {
      $379 = ($378|0)==(0);
      $$$i = $379 ? (12748) : (12753);
      $$0471$i = $371;$$0520$i = $378;$$0522$i = $$$i;
     } else {
      $$0471$i = $371;$$0520$i = 1;$$0522$i = (12750);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$0471$i;$380 = HEAP32[tempDoublePtr>>2]|0;
    $381 = HEAP32[tempDoublePtr+4>>2]|0;
    $382 = $381 & 2146435072;
    $383 = ($382>>>0)<(2146435072);
    $384 = (0)<(0);
    $385 = ($382|0)==(2146435072);
    $386 = $385 & $384;
    $387 = $383 | $386;
    do {
     if ($387) {
      $403 = (+_frexpl($$0471$i,$6));
      $404 = $403 * 2.0;
      $405 = $404 != 0.0;
      if ($405) {
       $406 = HEAP32[$6>>2]|0;
       $407 = (($406) + -1)|0;
       HEAP32[$6>>2] = $407;
      }
      $408 = $$0235 | 32;
      $409 = ($408|0)==(97);
      if ($409) {
       $410 = $$0235 & 32;
       $411 = ($410|0)==(0);
       $412 = ((($$0522$i)) + 9|0);
       $$0522$$i = $411 ? $$0522$i : $412;
       $413 = $$0520$i | 2;
       $414 = ($$0254>>>0)>(11);
       $415 = (12 - ($$0254))|0;
       $416 = ($415|0)==(0);
       $417 = $414 | $416;
       do {
        if ($417) {
         $$1472$i = $404;
        } else {
         $$0509592$i = 8.0;$$1508593$i = $415;
         while(1) {
          $418 = (($$1508593$i) + -1)|0;
          $419 = $$0509592$i * 16.0;
          $420 = ($418|0)==(0);
          if ($420) {
           break;
          } else {
           $$0509592$i = $419;$$1508593$i = $418;
          }
         }
         $421 = HEAP8[$$0522$$i>>0]|0;
         $422 = ($421<<24>>24)==(45);
         if ($422) {
          $423 = -$404;
          $424 = $423 - $419;
          $425 = $419 + $424;
          $426 = -$425;
          $$1472$i = $426;
          break;
         } else {
          $427 = $404 + $419;
          $428 = $427 - $419;
          $$1472$i = $428;
          break;
         }
        }
       } while(0);
       $429 = HEAP32[$6>>2]|0;
       $430 = ($429|0)<(0);
       $431 = (0 - ($429))|0;
       $432 = $430 ? $431 : $429;
       $433 = ($432|0)<(0);
       $434 = $433 << 31 >> 31;
       $435 = (_fmt_u($432,$434,$20)|0);
       $436 = ($435|0)==($20|0);
       if ($436) {
        HEAP8[$21>>0] = 48;
        $$0511$i = $21;
       } else {
        $$0511$i = $435;
       }
       $437 = $429 >> 31;
       $438 = $437 & 2;
       $439 = (($438) + 43)|0;
       $440 = $439&255;
       $441 = ((($$0511$i)) + -1|0);
       HEAP8[$441>>0] = $440;
       $442 = (($$0235) + 15)|0;
       $443 = $442&255;
       $444 = ((($$0511$i)) + -2|0);
       HEAP8[$444>>0] = $443;
       $notrhs$i = ($$0254|0)<(1);
       $445 = $$1263$ & 8;
       $446 = ($445|0)==(0);
       $$0524$i = $7;$$2473$i = $$1472$i;
       while(1) {
        $447 = (~~(($$2473$i)));
        $448 = (12714 + ($447)|0);
        $449 = HEAP8[$448>>0]|0;
        $450 = $449&255;
        $451 = $450 | $410;
        $452 = $451&255;
        $453 = ((($$0524$i)) + 1|0);
        HEAP8[$$0524$i>>0] = $452;
        $454 = (+($447|0));
        $455 = $$2473$i - $454;
        $456 = $455 * 16.0;
        $457 = $453;
        $458 = (($457) - ($18))|0;
        $459 = ($458|0)==(1);
        do {
         if ($459) {
          $notlhs$i = $456 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $446 & $or$cond3$not$i;
          if ($or$cond$i) {
           $$1525$i = $453;
           break;
          }
          $460 = ((($$0524$i)) + 2|0);
          HEAP8[$453>>0] = 46;
          $$1525$i = $460;
         } else {
          $$1525$i = $453;
         }
        } while(0);
        $461 = $456 != 0.0;
        if ($461) {
         $$0524$i = $$1525$i;$$2473$i = $456;
        } else {
         break;
        }
       }
       $462 = ($$0254|0)!=(0);
       $$pre700$i = $$1525$i;
       $463 = (($24) + ($$pre700$i))|0;
       $464 = ($463|0)<($$0254|0);
       $or$cond412 = $462 & $464;
       $465 = $444;
       $466 = (($25) + ($$0254))|0;
       $467 = (($466) - ($465))|0;
       $468 = (($23) - ($465))|0;
       $469 = (($468) + ($$pre700$i))|0;
       $$0526$i = $or$cond412 ? $467 : $469;
       $470 = (($$0526$i) + ($413))|0;
       _pad($0,32,$$1260,$470,$$1263$);
       $471 = HEAP32[$0>>2]|0;
       $472 = $471 & 32;
       $473 = ($472|0)==(0);
       if ($473) {
        (___fwritex($$0522$$i,$413,$0)|0);
       }
       $474 = $$1263$ ^ 65536;
       _pad($0,48,$$1260,$470,$474);
       $475 = (($$pre700$i) - ($18))|0;
       $476 = HEAP32[$0>>2]|0;
       $477 = $476 & 32;
       $478 = ($477|0)==(0);
       if ($478) {
        (___fwritex($7,$475,$0)|0);
       }
       $479 = (($22) - ($465))|0;
       $sum = (($475) + ($479))|0;
       $480 = (($$0526$i) - ($sum))|0;
       _pad($0,48,$480,0,0);
       $481 = HEAP32[$0>>2]|0;
       $482 = $481 & 32;
       $483 = ($482|0)==(0);
       if ($483) {
        (___fwritex($444,$479,$0)|0);
       }
       $484 = $$1263$ ^ 8192;
       _pad($0,32,$$1260,$470,$484);
       $485 = ($470|0)<($$1260|0);
       $$537$i = $485 ? $$1260 : $470;
       $$0470$i = $$537$i;
       break;
      }
      $486 = ($$0254|0)<(0);
      $$538$i = $486 ? 6 : $$0254;
      if ($405) {
       $487 = $404 * 268435456.0;
       $488 = HEAP32[$6>>2]|0;
       $489 = (($488) + -28)|0;
       HEAP32[$6>>2] = $489;
       $$3$i = $487;$$pr$i = $489;
      } else {
       $$pre697$i = HEAP32[$6>>2]|0;
       $$3$i = $404;$$pr$i = $$pre697$i;
      }
      $490 = ($$pr$i|0)<(0);
      $$554$i = $490 ? $5 : $26;
      $$0498$i = $$554$i;$$4$i = $$3$i;
      while(1) {
       $491 = (~~(($$4$i))>>>0);
       HEAP32[$$0498$i>>2] = $491;
       $492 = ((($$0498$i)) + 4|0);
       $493 = (+($491>>>0));
       $494 = $$4$i - $493;
       $495 = $494 * 1.0E+9;
       $496 = $495 != 0.0;
       if ($496) {
        $$0498$i = $492;$$4$i = $495;
       } else {
        break;
       }
      }
      $497 = ($$pr$i|0)>(0);
      if ($497) {
       $$1482671$i = $$554$i;$$1499670$i = $492;$498 = $$pr$i;
       while(1) {
        $499 = ($498|0)>(29);
        $500 = $499 ? 29 : $498;
        $$0488663$i = ((($$1499670$i)) + -4|0);
        $501 = ($$0488663$i>>>0)<($$1482671$i>>>0);
        do {
         if ($501) {
          $$2483$ph$i = $$1482671$i;
         } else {
          $$0488665$i = $$0488663$i;$$0497664$i = 0;
          while(1) {
           $502 = HEAP32[$$0488665$i>>2]|0;
           $503 = (_bitshift64Shl(($502|0),0,($500|0))|0);
           $504 = tempRet0;
           $505 = (_i64Add(($503|0),($504|0),($$0497664$i|0),0)|0);
           $506 = tempRet0;
           $507 = (___uremdi3(($505|0),($506|0),1000000000,0)|0);
           $508 = tempRet0;
           HEAP32[$$0488665$i>>2] = $507;
           $509 = (___udivdi3(($505|0),($506|0),1000000000,0)|0);
           $510 = tempRet0;
           $$0488$i = ((($$0488665$i)) + -4|0);
           $511 = ($$0488$i>>>0)<($$1482671$i>>>0);
           if ($511) {
            break;
           } else {
            $$0488665$i = $$0488$i;$$0497664$i = $509;
           }
          }
          $512 = ($509|0)==(0);
          if ($512) {
           $$2483$ph$i = $$1482671$i;
           break;
          }
          $513 = ((($$1482671$i)) + -4|0);
          HEAP32[$513>>2] = $509;
          $$2483$ph$i = $513;
         }
        } while(0);
        $$2500$i = $$1499670$i;
        while(1) {
         $514 = ($$2500$i>>>0)>($$2483$ph$i>>>0);
         if (!($514)) {
          break;
         }
         $515 = ((($$2500$i)) + -4|0);
         $516 = HEAP32[$515>>2]|0;
         $517 = ($516|0)==(0);
         if ($517) {
          $$2500$i = $515;
         } else {
          break;
         }
        }
        $518 = HEAP32[$6>>2]|0;
        $519 = (($518) - ($500))|0;
        HEAP32[$6>>2] = $519;
        $520 = ($519|0)>(0);
        if ($520) {
         $$1482671$i = $$2483$ph$i;$$1499670$i = $$2500$i;$498 = $519;
        } else {
         $$1482$lcssa$i = $$2483$ph$i;$$1499$lcssa$i = $$2500$i;$$pr571$i = $519;
         break;
        }
       }
      } else {
       $$1482$lcssa$i = $$554$i;$$1499$lcssa$i = $492;$$pr571$i = $$pr$i;
      }
      $521 = ($$pr571$i|0)<(0);
      if ($521) {
       $522 = (($$538$i) + 25)|0;
       $523 = (($522|0) / 9)&-1;
       $524 = (($523) + 1)|0;
       $525 = ($408|0)==(102);
       $$3484658$i = $$1482$lcssa$i;$$3501657$i = $$1499$lcssa$i;$527 = $$pr571$i;
       while(1) {
        $526 = (0 - ($527))|0;
        $528 = ($526|0)>(9);
        $529 = $528 ? 9 : $526;
        $530 = ($$3484658$i>>>0)<($$3501657$i>>>0);
        do {
         if ($530) {
          $534 = 1 << $529;
          $535 = (($534) + -1)|0;
          $536 = 1000000000 >>> $529;
          $$0487652$i = 0;$$1489651$i = $$3484658$i;
          while(1) {
           $537 = HEAP32[$$1489651$i>>2]|0;
           $538 = $537 & $535;
           $539 = $537 >>> $529;
           $540 = (($539) + ($$0487652$i))|0;
           HEAP32[$$1489651$i>>2] = $540;
           $541 = Math_imul($538, $536)|0;
           $542 = ((($$1489651$i)) + 4|0);
           $543 = ($542>>>0)<($$3501657$i>>>0);
           if ($543) {
            $$0487652$i = $541;$$1489651$i = $542;
           } else {
            break;
           }
          }
          $544 = HEAP32[$$3484658$i>>2]|0;
          $545 = ($544|0)==(0);
          $546 = ((($$3484658$i)) + 4|0);
          $$$3484$i = $545 ? $546 : $$3484658$i;
          $547 = ($541|0)==(0);
          if ($547) {
           $$$3484706$i = $$$3484$i;$$4502$i = $$3501657$i;
           break;
          }
          $548 = ((($$3501657$i)) + 4|0);
          HEAP32[$$3501657$i>>2] = $541;
          $$$3484706$i = $$$3484$i;$$4502$i = $548;
         } else {
          $531 = HEAP32[$$3484658$i>>2]|0;
          $532 = ($531|0)==(0);
          $533 = ((($$3484658$i)) + 4|0);
          $$$3484705$i = $532 ? $533 : $$3484658$i;
          $$$3484706$i = $$$3484705$i;$$4502$i = $$3501657$i;
         }
        } while(0);
        $549 = $525 ? $$554$i : $$$3484706$i;
        $550 = $$4502$i;
        $551 = $549;
        $552 = (($550) - ($551))|0;
        $553 = $552 >> 2;
        $554 = ($553|0)>($524|0);
        $555 = (($549) + ($524<<2)|0);
        $$$4502$i = $554 ? $555 : $$4502$i;
        $556 = HEAP32[$6>>2]|0;
        $557 = (($556) + ($529))|0;
        HEAP32[$6>>2] = $557;
        $558 = ($557|0)<(0);
        if ($558) {
         $$3484658$i = $$$3484706$i;$$3501657$i = $$$4502$i;$527 = $557;
        } else {
         $$3484$lcssa$i = $$$3484706$i;$$3501$lcssa$i = $$$4502$i;
         break;
        }
       }
      } else {
       $$3484$lcssa$i = $$1482$lcssa$i;$$3501$lcssa$i = $$1499$lcssa$i;
      }
      $559 = ($$3484$lcssa$i>>>0)<($$3501$lcssa$i>>>0);
      $560 = $$554$i;
      do {
       if ($559) {
        $561 = $$3484$lcssa$i;
        $562 = (($560) - ($561))|0;
        $563 = $562 >> 2;
        $564 = ($563*9)|0;
        $565 = HEAP32[$$3484$lcssa$i>>2]|0;
        $566 = ($565>>>0)<(10);
        if ($566) {
         $$1515$i = $564;
         break;
        } else {
         $$0514647$i = $564;$$0531646$i = 10;
        }
        while(1) {
         $567 = ($$0531646$i*10)|0;
         $568 = (($$0514647$i) + 1)|0;
         $569 = ($565>>>0)<($567>>>0);
         if ($569) {
          $$1515$i = $568;
          break;
         } else {
          $$0514647$i = $568;$$0531646$i = $567;
         }
        }
       } else {
        $$1515$i = 0;
       }
      } while(0);
      $570 = ($408|0)!=(102);
      $571 = $570 ? $$1515$i : 0;
      $572 = (($$538$i) - ($571))|0;
      $573 = ($408|0)==(103);
      $574 = ($$538$i|0)!=(0);
      $575 = $574 & $573;
      $$neg$i = $575 << 31 >> 31;
      $576 = (($572) + ($$neg$i))|0;
      $577 = $$3501$lcssa$i;
      $578 = (($577) - ($560))|0;
      $579 = $578 >> 2;
      $580 = ($579*9)|0;
      $581 = (($580) + -9)|0;
      $582 = ($576|0)<($581|0);
      if ($582) {
       $583 = ((($$554$i)) + 4|0);
       $584 = (($576) + 9216)|0;
       $585 = (($584|0) / 9)&-1;
       $586 = (($585) + -1024)|0;
       $587 = (($583) + ($586<<2)|0);
       $588 = (($584|0) % 9)&-1;
       $$0528639$i = (($588) + 1)|0;
       $589 = ($$0528639$i|0)<(9);
       if ($589) {
        $$0528641$i = $$0528639$i;$$1532640$i = 10;
        while(1) {
         $590 = ($$1532640$i*10)|0;
         $$0528$i = (($$0528641$i) + 1)|0;
         $exitcond$i = ($$0528$i|0)==(9);
         if ($exitcond$i) {
          $$1532$lcssa$i = $590;
          break;
         } else {
          $$0528641$i = $$0528$i;$$1532640$i = $590;
         }
        }
       } else {
        $$1532$lcssa$i = 10;
       }
       $591 = HEAP32[$587>>2]|0;
       $592 = (($591>>>0) % ($$1532$lcssa$i>>>0))&-1;
       $593 = ($592|0)==(0);
       $594 = ((($587)) + 4|0);
       $595 = ($594|0)==($$3501$lcssa$i|0);
       $or$cond540$i = $595 & $593;
       do {
        if ($or$cond540$i) {
         $$4492$i = $587;$$4518$i = $$1515$i;$$8$i = $$3484$lcssa$i;
        } else {
         $596 = (($591>>>0) / ($$1532$lcssa$i>>>0))&-1;
         $597 = $596 & 1;
         $598 = ($597|0)==(0);
         $$541$i = $598 ? 9007199254740992.0 : 9007199254740994.0;
         $599 = (($$1532$lcssa$i|0) / 2)&-1;
         $600 = ($592>>>0)<($599>>>0);
         if ($600) {
          $$0466$i = 0.5;
         } else {
          $601 = ($592|0)==($599|0);
          $or$cond543$i = $595 & $601;
          $$557$i = $or$cond543$i ? 1.0 : 1.5;
          $$0466$i = $$557$i;
         }
         $602 = ($$0520$i|0)==(0);
         do {
          if ($602) {
           $$1467$i = $$0466$i;$$1469$i = $$541$i;
          } else {
           $603 = HEAP8[$$0522$i>>0]|0;
           $604 = ($603<<24>>24)==(45);
           if (!($604)) {
            $$1467$i = $$0466$i;$$1469$i = $$541$i;
            break;
           }
           $605 = -$$541$i;
           $606 = -$$0466$i;
           $$1467$i = $606;$$1469$i = $605;
          }
         } while(0);
         $607 = (($591) - ($592))|0;
         HEAP32[$587>>2] = $607;
         $608 = $$1469$i + $$1467$i;
         $609 = $608 != $$1469$i;
         if (!($609)) {
          $$4492$i = $587;$$4518$i = $$1515$i;$$8$i = $$3484$lcssa$i;
          break;
         }
         $610 = (($607) + ($$1532$lcssa$i))|0;
         HEAP32[$587>>2] = $610;
         $611 = ($610>>>0)>(999999999);
         if ($611) {
          $$2490632$i = $587;$$5486633$i = $$3484$lcssa$i;
          while(1) {
           $612 = ((($$2490632$i)) + -4|0);
           HEAP32[$$2490632$i>>2] = 0;
           $613 = ($612>>>0)<($$5486633$i>>>0);
           if ($613) {
            $614 = ((($$5486633$i)) + -4|0);
            HEAP32[$614>>2] = 0;
            $$6$i = $614;
           } else {
            $$6$i = $$5486633$i;
           }
           $615 = HEAP32[$612>>2]|0;
           $616 = (($615) + 1)|0;
           HEAP32[$612>>2] = $616;
           $617 = ($616>>>0)>(999999999);
           if ($617) {
            $$2490632$i = $612;$$5486633$i = $$6$i;
           } else {
            $$2490$lcssa$i = $612;$$5486$lcssa$i = $$6$i;
            break;
           }
          }
         } else {
          $$2490$lcssa$i = $587;$$5486$lcssa$i = $$3484$lcssa$i;
         }
         $618 = $$5486$lcssa$i;
         $619 = (($560) - ($618))|0;
         $620 = $619 >> 2;
         $621 = ($620*9)|0;
         $622 = HEAP32[$$5486$lcssa$i>>2]|0;
         $623 = ($622>>>0)<(10);
         if ($623) {
          $$4492$i = $$2490$lcssa$i;$$4518$i = $621;$$8$i = $$5486$lcssa$i;
          break;
         } else {
          $$2516628$i = $621;$$2533627$i = 10;
         }
         while(1) {
          $624 = ($$2533627$i*10)|0;
          $625 = (($$2516628$i) + 1)|0;
          $626 = ($622>>>0)<($624>>>0);
          if ($626) {
           $$4492$i = $$2490$lcssa$i;$$4518$i = $625;$$8$i = $$5486$lcssa$i;
           break;
          } else {
           $$2516628$i = $625;$$2533627$i = $624;
          }
         }
        }
       } while(0);
       $627 = ((($$4492$i)) + 4|0);
       $628 = ($$3501$lcssa$i>>>0)>($627>>>0);
       $$$3501$i = $628 ? $627 : $$3501$lcssa$i;
       $$5519$ph$i = $$4518$i;$$7505$ph$i = $$$3501$i;$$9$ph$i = $$8$i;
      } else {
       $$5519$ph$i = $$1515$i;$$7505$ph$i = $$3501$lcssa$i;$$9$ph$i = $$3484$lcssa$i;
      }
      $629 = (0 - ($$5519$ph$i))|0;
      $$7505$i = $$7505$ph$i;
      while(1) {
       $630 = ($$7505$i>>>0)>($$9$ph$i>>>0);
       if (!($630)) {
        $$lcssa683$i = 0;
        break;
       }
       $631 = ((($$7505$i)) + -4|0);
       $632 = HEAP32[$631>>2]|0;
       $633 = ($632|0)==(0);
       if ($633) {
        $$7505$i = $631;
       } else {
        $$lcssa683$i = 1;
        break;
       }
      }
      do {
       if ($573) {
        $634 = $574&1;
        $635 = $634 ^ 1;
        $$538$$i = (($635) + ($$538$i))|0;
        $636 = ($$538$$i|0)>($$5519$ph$i|0);
        $637 = ($$5519$ph$i|0)>(-5);
        $or$cond6$i = $636 & $637;
        if ($or$cond6$i) {
         $638 = (($$0235) + -1)|0;
         $$neg572$i = (($$538$$i) + -1)|0;
         $639 = (($$neg572$i) - ($$5519$ph$i))|0;
         $$0479$i = $638;$$2476$i = $639;
        } else {
         $640 = (($$0235) + -2)|0;
         $641 = (($$538$$i) + -1)|0;
         $$0479$i = $640;$$2476$i = $641;
        }
        $642 = $$1263$ & 8;
        $643 = ($642|0)==(0);
        if (!($643)) {
         $$1480$i = $$0479$i;$$3477$i = $$2476$i;$$pre$phi704$iZ2D = $642;
         break;
        }
        do {
         if ($$lcssa683$i) {
          $644 = ((($$7505$i)) + -4|0);
          $645 = HEAP32[$644>>2]|0;
          $646 = ($645|0)==(0);
          if ($646) {
           $$2530$i = 9;
           break;
          }
          $647 = (($645>>>0) % 10)&-1;
          $648 = ($647|0)==(0);
          if ($648) {
           $$1529624$i = 0;$$3534623$i = 10;
          } else {
           $$2530$i = 0;
           break;
          }
          while(1) {
           $649 = ($$3534623$i*10)|0;
           $650 = (($$1529624$i) + 1)|0;
           $651 = (($645>>>0) % ($649>>>0))&-1;
           $652 = ($651|0)==(0);
           if ($652) {
            $$1529624$i = $650;$$3534623$i = $649;
           } else {
            $$2530$i = $650;
            break;
           }
          }
         } else {
          $$2530$i = 9;
         }
        } while(0);
        $653 = $$0479$i | 32;
        $654 = ($653|0)==(102);
        $655 = $$7505$i;
        $656 = (($655) - ($560))|0;
        $657 = $656 >> 2;
        $658 = ($657*9)|0;
        $659 = (($658) + -9)|0;
        if ($654) {
         $660 = (($659) - ($$2530$i))|0;
         $661 = ($660|0)<(0);
         $$544$i = $661 ? 0 : $660;
         $662 = ($$2476$i|0)<($$544$i|0);
         $$2476$$545$i = $662 ? $$2476$i : $$544$i;
         $$1480$i = $$0479$i;$$3477$i = $$2476$$545$i;$$pre$phi704$iZ2D = 0;
         break;
        } else {
         $663 = (($659) + ($$5519$ph$i))|0;
         $664 = (($663) - ($$2530$i))|0;
         $665 = ($664|0)<(0);
         $$546$i = $665 ? 0 : $664;
         $666 = ($$2476$i|0)<($$546$i|0);
         $$2476$$547$i = $666 ? $$2476$i : $$546$i;
         $$1480$i = $$0479$i;$$3477$i = $$2476$$547$i;$$pre$phi704$iZ2D = 0;
         break;
        }
       } else {
        $$pre703$i = $$1263$ & 8;
        $$1480$i = $$0235;$$3477$i = $$538$i;$$pre$phi704$iZ2D = $$pre703$i;
       }
      } while(0);
      $667 = $$3477$i | $$pre$phi704$iZ2D;
      $668 = ($667|0)!=(0);
      $669 = $668&1;
      $670 = $$1480$i | 32;
      $671 = ($670|0)==(102);
      if ($671) {
       $672 = ($$5519$ph$i|0)>(0);
       $673 = $672 ? $$5519$ph$i : 0;
       $$2513$i = 0;$$pn$i = $673;
      } else {
       $674 = ($$5519$ph$i|0)<(0);
       $675 = $674 ? $629 : $$5519$ph$i;
       $676 = ($675|0)<(0);
       $677 = $676 << 31 >> 31;
       $678 = (_fmt_u($675,$677,$20)|0);
       $679 = $678;
       $680 = (($22) - ($679))|0;
       $681 = ($680|0)<(2);
       if ($681) {
        $$1512617$i = $678;
        while(1) {
         $682 = ((($$1512617$i)) + -1|0);
         HEAP8[$682>>0] = 48;
         $683 = $682;
         $684 = (($22) - ($683))|0;
         $685 = ($684|0)<(2);
         if ($685) {
          $$1512617$i = $682;
         } else {
          $$1512$lcssa$i = $682;
          break;
         }
        }
       } else {
        $$1512$lcssa$i = $678;
       }
       $686 = $$5519$ph$i >> 31;
       $687 = $686 & 2;
       $688 = (($687) + 43)|0;
       $689 = $688&255;
       $690 = ((($$1512$lcssa$i)) + -1|0);
       HEAP8[$690>>0] = $689;
       $691 = $$1480$i&255;
       $692 = ((($$1512$lcssa$i)) + -2|0);
       HEAP8[$692>>0] = $691;
       $693 = $692;
       $694 = (($22) - ($693))|0;
       $$2513$i = $692;$$pn$i = $694;
      }
      $695 = (($$0520$i) + 1)|0;
      $696 = (($695) + ($$3477$i))|0;
      $$1527$i = (($696) + ($669))|0;
      $697 = (($$1527$i) + ($$pn$i))|0;
      _pad($0,32,$$1260,$697,$$1263$);
      $698 = HEAP32[$0>>2]|0;
      $699 = $698 & 32;
      $700 = ($699|0)==(0);
      if ($700) {
       (___fwritex($$0522$i,$$0520$i,$0)|0);
      }
      $701 = $$1263$ ^ 65536;
      _pad($0,48,$$1260,$697,$701);
      do {
       if ($671) {
        $702 = ($$9$ph$i>>>0)>($$554$i>>>0);
        $$0496$$9$i = $702 ? $$554$i : $$9$ph$i;
        $$5493606$i = $$0496$$9$i;
        while(1) {
         $703 = HEAP32[$$5493606$i>>2]|0;
         $704 = (_fmt_u($703,0,$27)|0);
         $705 = ($$5493606$i|0)==($$0496$$9$i|0);
         do {
          if ($705) {
           $711 = ($704|0)==($27|0);
           if (!($711)) {
            $$1465$i = $704;
            break;
           }
           HEAP8[$29>>0] = 48;
           $$1465$i = $29;
          } else {
           $706 = ($704>>>0)>($7>>>0);
           if (!($706)) {
            $$1465$i = $704;
            break;
           }
           $707 = $704;
           $708 = (($707) - ($18))|0;
           _memset(($7|0),48,($708|0))|0;
           $$0464603$i = $704;
           while(1) {
            $709 = ((($$0464603$i)) + -1|0);
            $710 = ($709>>>0)>($7>>>0);
            if ($710) {
             $$0464603$i = $709;
            } else {
             $$1465$i = $709;
             break;
            }
           }
          }
         } while(0);
         $712 = HEAP32[$0>>2]|0;
         $713 = $712 & 32;
         $714 = ($713|0)==(0);
         if ($714) {
          $715 = $$1465$i;
          $716 = (($28) - ($715))|0;
          (___fwritex($$1465$i,$716,$0)|0);
         }
         $717 = ((($$5493606$i)) + 4|0);
         $718 = ($717>>>0)>($$554$i>>>0);
         if ($718) {
          break;
         } else {
          $$5493606$i = $717;
         }
        }
        $719 = ($667|0)==(0);
        do {
         if (!($719)) {
          $720 = HEAP32[$0>>2]|0;
          $721 = $720 & 32;
          $722 = ($721|0)==(0);
          if (!($722)) {
           break;
          }
          (___fwritex(12782,1,$0)|0);
         }
        } while(0);
        $723 = ($717>>>0)<($$7505$i>>>0);
        $724 = ($$3477$i|0)>(0);
        $725 = $724 & $723;
        if ($725) {
         $$4478600$i = $$3477$i;$$6494599$i = $717;
         while(1) {
          $726 = HEAP32[$$6494599$i>>2]|0;
          $727 = (_fmt_u($726,0,$27)|0);
          $728 = ($727>>>0)>($7>>>0);
          if ($728) {
           $729 = $727;
           $730 = (($729) - ($18))|0;
           _memset(($7|0),48,($730|0))|0;
           $$0463594$i = $727;
           while(1) {
            $731 = ((($$0463594$i)) + -1|0);
            $732 = ($731>>>0)>($7>>>0);
            if ($732) {
             $$0463594$i = $731;
            } else {
             $$0463$lcssa$i = $731;
             break;
            }
           }
          } else {
           $$0463$lcssa$i = $727;
          }
          $733 = HEAP32[$0>>2]|0;
          $734 = $733 & 32;
          $735 = ($734|0)==(0);
          if ($735) {
           $736 = ($$4478600$i|0)>(9);
           $737 = $736 ? 9 : $$4478600$i;
           (___fwritex($$0463$lcssa$i,$737,$0)|0);
          }
          $738 = ((($$6494599$i)) + 4|0);
          $739 = (($$4478600$i) + -9)|0;
          $740 = ($738>>>0)<($$7505$i>>>0);
          $741 = ($$4478600$i|0)>(9);
          $742 = $741 & $740;
          if ($742) {
           $$4478600$i = $739;$$6494599$i = $738;
          } else {
           $$4478$lcssa$i = $739;
           break;
          }
         }
        } else {
         $$4478$lcssa$i = $$3477$i;
        }
        $743 = (($$4478$lcssa$i) + 9)|0;
        _pad($0,48,$743,9,0);
       } else {
        $744 = ((($$9$ph$i)) + 4|0);
        $$7505$$i = $$lcssa683$i ? $$7505$i : $744;
        $745 = ($$3477$i|0)>(-1);
        if ($745) {
         $746 = ($$pre$phi704$iZ2D|0)==(0);
         $$5611$i = $$3477$i;$$7495610$i = $$9$ph$i;
         while(1) {
          $747 = HEAP32[$$7495610$i>>2]|0;
          $748 = (_fmt_u($747,0,$27)|0);
          $749 = ($748|0)==($27|0);
          if ($749) {
           HEAP8[$29>>0] = 48;
           $$0$i = $29;
          } else {
           $$0$i = $748;
          }
          $750 = ($$7495610$i|0)==($$9$ph$i|0);
          do {
           if ($750) {
            $754 = ((($$0$i)) + 1|0);
            $755 = HEAP32[$0>>2]|0;
            $756 = $755 & 32;
            $757 = ($756|0)==(0);
            if ($757) {
             (___fwritex($$0$i,1,$0)|0);
            }
            $758 = ($$5611$i|0)<(1);
            $or$cond552$i = $746 & $758;
            if ($or$cond552$i) {
             $$2$i = $754;
             break;
            }
            $759 = HEAP32[$0>>2]|0;
            $760 = $759 & 32;
            $761 = ($760|0)==(0);
            if (!($761)) {
             $$2$i = $754;
             break;
            }
            (___fwritex(12782,1,$0)|0);
            $$2$i = $754;
           } else {
            $751 = ($$0$i>>>0)>($7>>>0);
            if (!($751)) {
             $$2$i = $$0$i;
             break;
            }
            $scevgep694$i = (($$0$i) + ($19)|0);
            $scevgep694695$i = $scevgep694$i;
            _memset(($7|0),48,($scevgep694695$i|0))|0;
            $$1607$i = $$0$i;
            while(1) {
             $752 = ((($$1607$i)) + -1|0);
             $753 = ($752>>>0)>($7>>>0);
             if ($753) {
              $$1607$i = $752;
             } else {
              $$2$i = $752;
              break;
             }
            }
           }
          } while(0);
          $762 = $$2$i;
          $763 = (($28) - ($762))|0;
          $764 = HEAP32[$0>>2]|0;
          $765 = $764 & 32;
          $766 = ($765|0)==(0);
          if ($766) {
           $767 = ($$5611$i|0)>($763|0);
           $768 = $767 ? $763 : $$5611$i;
           (___fwritex($$2$i,$768,$0)|0);
          }
          $769 = (($$5611$i) - ($763))|0;
          $770 = ((($$7495610$i)) + 4|0);
          $771 = ($770>>>0)<($$7505$$i>>>0);
          $772 = ($769|0)>(-1);
          $773 = $771 & $772;
          if ($773) {
           $$5611$i = $769;$$7495610$i = $770;
          } else {
           $$5$lcssa$i = $769;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$3477$i;
        }
        $774 = (($$5$lcssa$i) + 18)|0;
        _pad($0,48,$774,18,0);
        $775 = HEAP32[$0>>2]|0;
        $776 = $775 & 32;
        $777 = ($776|0)==(0);
        if (!($777)) {
         break;
        }
        $778 = $$2513$i;
        $779 = (($22) - ($778))|0;
        (___fwritex($$2513$i,$779,$0)|0);
       }
      } while(0);
      $780 = $$1263$ ^ 8192;
      _pad($0,32,$$1260,$697,$780);
      $781 = ($697|0)<($$1260|0);
      $$553$i = $781 ? $$1260 : $697;
      $$0470$i = $$553$i;
     } else {
      $388 = $$0235 & 32;
      $389 = ($388|0)!=(0);
      $390 = $389 ? 12766 : 12770;
      $391 = ($$0471$i != $$0471$i) | (0.0 != 0.0);
      $392 = $389 ? 12774 : 12778;
      $$1521$i = $391 ? 0 : $$0520$i;
      $$0510$i = $391 ? $392 : $390;
      $393 = (($$1521$i) + 3)|0;
      _pad($0,32,$$1260,$393,$187);
      $394 = HEAP32[$0>>2]|0;
      $395 = $394 & 32;
      $396 = ($395|0)==(0);
      if ($396) {
       (___fwritex($$0522$i,$$1521$i,$0)|0);
       $$pre$i = HEAP32[$0>>2]|0;
       $398 = $$pre$i;
      } else {
       $398 = $394;
      }
      $397 = $398 & 32;
      $399 = ($397|0)==(0);
      if ($399) {
       (___fwritex($$0510$i,3,$0)|0);
      }
      $400 = $$1263$ ^ 8192;
      _pad($0,32,$$1260,$393,$400);
      $401 = ($393|0)<($$1260|0);
      $402 = $401 ? $$1260 : $393;
      $$0470$i = $402;
     }
    } while(0);
    $$0243 = $$0470$i;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
    continue L1;
    break;
   }
   default: {
    $$2 = $$0321;$$2234 = 0;$$2239 = 12730;$$2251 = $14;$$5 = $$0254;$$6268 = $$1263$;
   }
   }
  } while(0);
  L310: do {
   if ((label|0) == 63) {
    label = 0;
    $218 = $9;
    $219 = $218;
    $220 = HEAP32[$219>>2]|0;
    $221 = (($218) + 4)|0;
    $222 = $221;
    $223 = HEAP32[$222>>2]|0;
    $224 = $$1236 & 32;
    $225 = ($220|0)==(0);
    $226 = ($223|0)==(0);
    $227 = $225 & $226;
    if ($227) {
     $$05$lcssa$i = $14;$248 = 0;$250 = 0;
    } else {
     $$056$i = $14;$229 = $220;$236 = $223;
     while(1) {
      $228 = $229 & 15;
      $230 = (12714 + ($228)|0);
      $231 = HEAP8[$230>>0]|0;
      $232 = $231&255;
      $233 = $232 | $224;
      $234 = $233&255;
      $235 = ((($$056$i)) + -1|0);
      HEAP8[$235>>0] = $234;
      $237 = (_bitshift64Lshr(($229|0),($236|0),4)|0);
      $238 = tempRet0;
      $239 = ($237|0)==(0);
      $240 = ($238|0)==(0);
      $241 = $239 & $240;
      if ($241) {
       break;
      } else {
       $$056$i = $235;$229 = $237;$236 = $238;
      }
     }
     $242 = $9;
     $243 = $242;
     $244 = HEAP32[$243>>2]|0;
     $245 = (($242) + 4)|0;
     $246 = $245;
     $247 = HEAP32[$246>>2]|0;
     $$05$lcssa$i = $235;$248 = $244;$250 = $247;
    }
    $249 = ($248|0)==(0);
    $251 = ($250|0)==(0);
    $252 = $249 & $251;
    $253 = $$3265 & 8;
    $254 = ($253|0)==(0);
    $or$cond282 = $254 | $252;
    $255 = $$1236 >> 4;
    $256 = (12730 + ($255)|0);
    $$332 = $or$cond282 ? 12730 : $256;
    $$333 = $or$cond282 ? 0 : 2;
    $$0228 = $$05$lcssa$i;$$1233 = $$333;$$1238 = $$332;$$2256 = $$1255;$$4266 = $$3265;
    label = 76;
   }
   else if ((label|0) == 75) {
    label = 0;
    $302 = (_fmt_u($300,$301,$14)|0);
    $$0228 = $302;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $$1263$;
    label = 76;
   }
   else if ((label|0) == 81) {
    label = 0;
    $334 = (_memchr($$1,0,$$0254)|0);
    $335 = ($334|0)==(0|0);
    $336 = $334;
    $337 = $$1;
    $338 = (($336) - ($337))|0;
    $339 = (($$1) + ($$0254)|0);
    $$3257 = $335 ? $$0254 : $338;
    $$1250 = $335 ? $339 : $334;
    $$2 = $$1;$$2234 = 0;$$2239 = 12730;$$2251 = $$1250;$$5 = $$3257;$$6268 = $187;
   }
   else if ((label|0) == 85) {
    label = 0;
    $$0229396 = $809;$$0240395 = 0;$$1244394 = 0;
    while(1) {
     $347 = HEAP32[$$0229396>>2]|0;
     $348 = ($347|0)==(0);
     if ($348) {
      $$0240$lcssa = $$0240395;$$2245 = $$1244394;
      break;
     }
     $349 = (_wctomb($12,$347)|0);
     $350 = ($349|0)<(0);
     $351 = (($$4258458) - ($$0240395))|0;
     $352 = ($349>>>0)>($351>>>0);
     $or$cond285 = $350 | $352;
     if ($or$cond285) {
      $$0240$lcssa = $$0240395;$$2245 = $349;
      break;
     }
     $353 = ((($$0229396)) + 4|0);
     $354 = (($349) + ($$0240395))|0;
     $355 = ($$4258458>>>0)>($354>>>0);
     if ($355) {
      $$0229396 = $353;$$0240395 = $354;$$1244394 = $349;
     } else {
      $$0240$lcssa = $354;$$2245 = $349;
      break;
     }
    }
    $356 = ($$2245|0)<(0);
    if ($356) {
     $$0 = -1;
     break L1;
    }
    _pad($0,32,$$1260,$$0240$lcssa,$$1263$);
    $357 = ($$0240$lcssa|0)==(0);
    if ($357) {
     $$0240$lcssa460 = 0;
     label = 96;
    } else {
     $$1230407 = $809;$$1241406 = 0;
     while(1) {
      $358 = HEAP32[$$1230407>>2]|0;
      $359 = ($358|0)==(0);
      if ($359) {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break L310;
      }
      $360 = ((($$1230407)) + 4|0);
      $361 = (_wctomb($12,$358)|0);
      $362 = (($361) + ($$1241406))|0;
      $363 = ($362|0)>($$0240$lcssa|0);
      if ($363) {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break L310;
      }
      $364 = HEAP32[$0>>2]|0;
      $365 = $364 & 32;
      $366 = ($365|0)==(0);
      if ($366) {
       (___fwritex($12,$361,$0)|0);
      }
      $367 = ($362>>>0)<($$0240$lcssa>>>0);
      if ($367) {
       $$1230407 = $360;$$1241406 = $362;
      } else {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 96) {
   label = 0;
   $368 = $$1263$ ^ 8192;
   _pad($0,32,$$1260,$$0240$lcssa460,$368);
   $369 = ($$1260|0)>($$0240$lcssa460|0);
   $370 = $369 ? $$1260 : $$0240$lcssa460;
   $$0243 = $370;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
   continue;
  }
  if ((label|0) == 76) {
   label = 0;
   $303 = ($$2256|0)>(-1);
   $304 = $$4266 & -65537;
   $$$4266 = $303 ? $304 : $$4266;
   $305 = $9;
   $306 = $305;
   $307 = HEAP32[$306>>2]|0;
   $308 = (($305) + 4)|0;
   $309 = $308;
   $310 = HEAP32[$309>>2]|0;
   $311 = ($307|0)!=(0);
   $312 = ($310|0)!=(0);
   $313 = $311 | $312;
   $314 = ($$2256|0)!=(0);
   $or$cond = $314 | $313;
   if ($or$cond) {
    $315 = $$0228;
    $316 = (($15) - ($315))|0;
    $317 = $313&1;
    $318 = $317 ^ 1;
    $319 = (($318) + ($316))|0;
    $320 = ($$2256|0)>($319|0);
    $$2256$ = $320 ? $$2256 : $319;
    $$2 = $$0228;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $14;$$5 = $$2256$;$$6268 = $$$4266;
   } else {
    $$2 = $14;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $14;$$5 = 0;$$6268 = $$$4266;
   }
  }
  $782 = $$2251;
  $783 = $$2;
  $784 = (($782) - ($783))|0;
  $785 = ($$5|0)<($784|0);
  $$$5 = $785 ? $784 : $$5;
  $786 = (($$$5) + ($$2234))|0;
  $787 = ($$1260|0)<($786|0);
  $$2261 = $787 ? $786 : $$1260;
  _pad($0,32,$$2261,$786,$$6268);
  $788 = HEAP32[$0>>2]|0;
  $789 = $788 & 32;
  $790 = ($789|0)==(0);
  if ($790) {
   (___fwritex($$2239,$$2234,$0)|0);
  }
  $791 = $$6268 ^ 65536;
  _pad($0,48,$$2261,$786,$791);
  _pad($0,48,$$$5,$784,0);
  $792 = HEAP32[$0>>2]|0;
  $793 = $792 & 32;
  $794 = ($793|0)==(0);
  if ($794) {
   (___fwritex($$2,$784,$0)|0);
  }
  $795 = $$6268 ^ 8192;
  _pad($0,32,$$2261,$786,$795);
  $$0243 = $$2261;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
 }
 L345: do {
  if ((label|0) == 243) {
   $796 = ($0|0)==(0|0);
   if ($796) {
    $797 = ($$0269|0)==(0);
    if ($797) {
     $$0 = 0;
    } else {
     $$2242381 = 1;
     while(1) {
      $798 = (($4) + ($$2242381<<2)|0);
      $799 = HEAP32[$798>>2]|0;
      $800 = ($799|0)==(0);
      if ($800) {
       $$3379 = $$2242381;
       break;
      }
      $801 = (($3) + ($$2242381<<3)|0);
      _pop_arg_291($801,$799,$2);
      $802 = (($$2242381) + 1)|0;
      $803 = ($802|0)<(10);
      if ($803) {
       $$2242381 = $802;
      } else {
       $$0 = 1;
       break L345;
      }
     }
     while(1) {
      $806 = (($4) + ($$3379<<2)|0);
      $807 = HEAP32[$806>>2]|0;
      $808 = ($807|0)==(0);
      $804 = (($$3379) + 1)|0;
      if (!($808)) {
       $$0 = -1;
       break L345;
      }
      $805 = ($804|0)<(10);
      if ($805) {
       $$3379 = $804;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$032 = 0, $$033 = 0, $$034 = 0, $$1 = 0, $$pre = 0, $$pre38 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$032 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 31]($2,$0,$1)|0);
    $$032 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)>(-1);
   L10: do {
    if ($20) {
     $$0 = $1;
     while(1) {
      $21 = ($$0|0)==(0);
      if ($21) {
       $$033 = $1;$$034 = $0;$$1 = 0;$32 = $14;
       break L10;
      }
      $22 = (($$0) + -1)|0;
      $23 = (($0) + ($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(10);
      if ($25) {
       break;
      } else {
       $$0 = $22;
      }
     }
     $26 = ((($2)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_iiii[$27 & 31]($2,$0,$$0)|0);
     $29 = ($28>>>0)<($$0>>>0);
     if ($29) {
      $$032 = $$0;
      break L5;
     }
     $30 = (($0) + ($$0)|0);
     $31 = (($1) - ($$0))|0;
     $$pre38 = HEAP32[$9>>2]|0;
     $$033 = $31;$$034 = $30;$$1 = $$0;$32 = $$pre38;
    } else {
     $$033 = $1;$$034 = $0;$$1 = 0;$32 = $14;
    }
   } while(0);
   _memcpy(($32|0),($$034|0),($$033|0))|0;
   $33 = HEAP32[$9>>2]|0;
   $34 = (($33) + ($$033)|0);
   HEAP32[$9>>2] = $34;
   $35 = (($$1) + ($$033))|0;
   $$032 = $35;
  }
 } while(0);
 return ($$032|0);
}
function _pop_arg_291($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___uremdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = $10 | 48;
   $13 = $12&255;
   $14 = ((($$0914)) + -1|0);
   HEAP8[$14>>0] = $13;
   $15 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $16 = tempRet0;
   $17 = ($9>>>0)>(9);
   $18 = ($8>>>0)>(4294967295);
   $19 = ($9|0)==(9);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;$8 = $15;$9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;$$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0|0)==(0);
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $23 = (($$012>>>0) % 10)&-1;
   $24 = $23 | 48;
   $25 = $24&255;
   $26 = ((($$111)) + -1|0);
   HEAP8[$26>>0] = $25;
   $27 = (($$012>>>0) / 10)&-1;
   $28 = ($$012>>>0)<(10);
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;$$111 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function _pad($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa16 = 0, $$012 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 do {
  if ($or$cond) {
   $9 = (($2) - ($3))|0;
   $10 = ($9>>>0)>(256);
   $11 = $10 ? 256 : $9;
   _memset(($5|0),($1|0),($11|0))|0;
   $12 = ($9>>>0)>(255);
   $13 = HEAP32[$0>>2]|0;
   $14 = $13 & 32;
   $15 = ($14|0)==(0);
   if ($12) {
    $16 = (($2) - ($3))|0;
    $$012 = $9;$23 = $13;$24 = $15;
    while(1) {
     if ($24) {
      (___fwritex($5,256,$0)|0);
      $$pre = HEAP32[$0>>2]|0;
      $20 = $$pre;
     } else {
      $20 = $23;
     }
     $17 = (($$012) + -256)|0;
     $18 = ($17>>>0)>(255);
     $19 = $20 & 32;
     $21 = ($19|0)==(0);
     if ($18) {
      $$012 = $17;$23 = $20;$24 = $21;
     } else {
      break;
     }
    }
    $22 = $16 & 255;
    if ($21) {
     $$0$lcssa16 = $22;
    } else {
     break;
    }
   } else {
    if ($15) {
     $$0$lcssa16 = $9;
    } else {
     break;
    }
   }
   (___fwritex($5,$$0$lcssa16,$0)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = ($1>>>0)<(2048);
   if ($6) {
    $7 = $1 >>> 6;
    $8 = $7 | 192;
    $9 = $8&255;
    $10 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $9;
    $11 = $1 & 63;
    $12 = $11 | 128;
    $13 = $12&255;
    HEAP8[$10>>0] = $13;
    $$0 = 2;
    break;
   }
   $14 = ($1>>>0)<(55296);
   $15 = $1 & -8192;
   $16 = ($15|0)==(57344);
   $or$cond = $14 | $16;
   if ($or$cond) {
    $17 = $1 >>> 12;
    $18 = $17 | 224;
    $19 = $18&255;
    $20 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $19;
    $21 = $1 >>> 6;
    $22 = $21 & 63;
    $23 = $22 | 128;
    $24 = $23&255;
    $25 = ((($0)) + 2|0);
    HEAP8[$20>>0] = $24;
    $26 = $1 & 63;
    $27 = $26 | 128;
    $28 = $27&255;
    HEAP8[$25>>0] = $28;
    $$0 = 3;
    break;
   }
   $29 = (($1) + -65536)|0;
   $30 = ($29>>>0)<(1048576);
   if ($30) {
    $31 = $1 >>> 18;
    $32 = $31 | 240;
    $33 = $32&255;
    $34 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $33;
    $35 = $1 >>> 12;
    $36 = $35 & 63;
    $37 = $36 | 128;
    $38 = $37&255;
    $39 = ((($0)) + 2|0);
    HEAP8[$34>>0] = $38;
    $40 = $1 >>> 6;
    $41 = $40 & 63;
    $42 = $41 | 128;
    $43 = $42&255;
    $44 = ((($0)) + 3|0);
    HEAP8[$39>>0] = $43;
    $45 = $1 & 63;
    $46 = $45 | 128;
    $47 = $46&255;
    HEAP8[$44>>0] = $47;
    $$0 = 4;
    break;
   } else {
    $48 = (___errno_location()|0);
    HEAP32[$48>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$cast = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7>>>0)>($2>>>0);
 $$ = $8 ? $2 : $7;
 $$cast = $6;
 _memcpy(($$cast|0),($1|0),($$|0))|0;
 $9 = HEAP32[$5>>2]|0;
 $10 = (($9) + ($$)|0);
 HEAP32[$5>>2] = $10;
 return ($2|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = (___toread($0)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $7 = ((($0)) + 32|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (FUNCTION_TABLE_iiii[$8 & 31]($0,$1,1)|0);
  $10 = ($9|0)==(1);
  if ($10) {
   $11 = HEAP8[$1>>0]|0;
   $12 = $11&255;
   $$0 = $12;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 44|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 31]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($0)) + 28|0);
 HEAP32[$15>>2] = 0;
 HEAP32[$7>>2] = 0;
 $16 = HEAP32[$0>>2]|0;
 $17 = $16 & 20;
 $18 = ($17|0)==(0);
 if ($18) {
  $22 = HEAP32[$9>>2]|0;
  $23 = ((($0)) + 8|0);
  HEAP32[$23>>2] = $22;
  $24 = ((($0)) + 4|0);
  HEAP32[$24>>2] = $22;
  $$0 = 0;
 } else {
  $19 = $16 & 4;
  $20 = ($19|0)==(0);
  if ($20) {
   $$0 = -1;
  } else {
   $21 = $16 | 32;
   HEAP32[$0>>2] = $21;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function _snprintf($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (_vsnprintf($0,$1,$2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  (___lockfile($0)|0);
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)!=(0);
 if (!($6)) {
  ___lock(((17756)|0));
  $7 = ((($0)) + 52|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  $10 = $8;
  $$pre = ((($0)) + 56|0);
  if (!($9)) {
   $11 = HEAP32[$$pre>>2]|0;
   $12 = ((($8)) + 56|0);
   HEAP32[$12>>2] = $11;
  }
  $13 = HEAP32[$$pre>>2]|0;
  $14 = ($13|0)==(0|0);
  $15 = $13;
  if (!($14)) {
   $16 = ((($13)) + 52|0);
   HEAP32[$16>>2] = $10;
  }
  $17 = HEAP32[(17752)>>2]|0;
  $18 = ($17|0)==($0|0);
  if ($18) {
   HEAP32[(17752)>>2] = $15;
  }
  ___unlock(((17756)|0));
 }
 $19 = (_fflush($0)|0);
 $20 = ((($0)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (FUNCTION_TABLE_ii[$21 & 7]($0)|0);
 $23 = $22 | $19;
 $24 = ((($0)) + 92|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0|0);
 if (!($26)) {
  _free($25);
 }
 if (!($6)) {
  _free($0);
 }
 return ($23|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[441]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $28 = 0;
   } else {
    $10 = HEAP32[441]|0;
    $11 = (_fflush($10)|0);
    $28 = $11;
   }
   ___lock(((17756)|0));
   $$02325 = HEAP32[(17752)>>2]|0;
   $12 = ($$02325|0)==(0|0);
   if ($12) {
    $$024$lcssa = $28;
   } else {
    $$02327 = $$02325;$$02426 = $28;
    while(1) {
     $13 = ((($$02327)) + 76|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($14|0)>(-1);
     if ($15) {
      $16 = (___lockfile($$02327)|0);
      $24 = $16;
     } else {
      $24 = 0;
     }
     $17 = ((($$02327)) + 20|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ((($$02327)) + 28|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18>>>0)>($20>>>0);
     if ($21) {
      $22 = (___fflush_unlocked($$02327)|0);
      $23 = $22 | $$02426;
      $$1 = $23;
     } else {
      $$1 = $$02426;
     }
     $25 = ($24|0)==(0);
     if (!($25)) {
      ___unlockfile($$02327);
     }
     $26 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$26>>2]|0;
     $27 = ($$023|0)==(0|0);
     if ($27) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___unlock(((17756)|0));
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 31]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($0)) + 40|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $11;
   $18 = $13;
   $19 = (($17) - ($18))|0;
   (FUNCTION_TABLE_iiii[$16 & 31]($0,$19,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _fprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vfprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _fgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(0);
 if ($3) {
  label = 3;
 } else {
  $4 = (___lockfile($0)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   label = 3;
  } else {
   $15 = ((($0)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($0)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16>>>0)<($18>>>0);
   if ($19) {
    $20 = ((($16)) + 1|0);
    HEAP32[$15>>2] = $20;
    $21 = HEAP8[$16>>0]|0;
    $22 = $21&255;
    $24 = $22;
   } else {
    $23 = (___uflow($0)|0);
    $24 = $23;
   }
   ___unlockfile($0);
   $$0 = $24;
  }
 }
 do {
  if ((label|0) == 3) {
   $6 = ((($0)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($0)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($7>>>0)<($9>>>0);
   if ($10) {
    $11 = ((($7)) + 1|0);
    HEAP32[$6>>2] = $11;
    $12 = HEAP8[$7>>0]|0;
    $13 = $12&255;
    $$0 = $13;
    break;
   } else {
    $14 = (___uflow($0)|0);
    $$0 = $14;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$cast = 0, $$pre = 0, $$pre34 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 52|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $memchr = (_memchr(12784,$4,4)|0);
 $5 = ($memchr|0)==(0|0);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 22;
  $$0 = 0;
 } else {
  $7 = (_malloc(1144)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = 0;
  } else {
   dest=$7; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $9 = (_strchr($1,43)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = ($3<<24>>24)==(114);
    $12 = $11 ? 8 : 4;
    HEAP32[$7>>2] = $12;
   }
   $13 = (_strchr($1,101)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    $15 = $3;
   } else {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$1>>0]|0;
    $15 = $$pre;
   }
   $16 = ($15<<24>>24)==(97);
   if ($16) {
    HEAP32[$vararg_buffer3>>2] = $0;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $17 = (___syscall221(221,($vararg_buffer3|0))|0);
    $18 = $17 & 1024;
    $19 = ($18|0)==(0);
    if ($19) {
     $20 = $17 | 1024;
     HEAP32[$vararg_buffer7>>2] = $0;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $20;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $21 = HEAP32[$7>>2]|0;
    $22 = $21 | 128;
    HEAP32[$7>>2] = $22;
    $29 = $22;
   } else {
    $$pre34 = HEAP32[$7>>2]|0;
    $29 = $$pre34;
   }
   $23 = ((($7)) + 60|0);
   HEAP32[$23>>2] = $0;
   $24 = ((($7)) + 120|0);
   $25 = ((($7)) + 44|0);
   HEAP32[$25>>2] = $24;
   $26 = ((($7)) + 48|0);
   HEAP32[$26>>2] = 1024;
   $27 = ((($7)) + 75|0);
   HEAP8[$27>>0] = -1;
   $28 = $29 & 8;
   $30 = ($28|0)==(0);
   if ($30) {
    HEAP32[$vararg_buffer12>>2] = $0;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21505;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $2;
    $31 = (___syscall54(54,($vararg_buffer12|0))|0);
    $32 = ($31|0)==(0);
    if ($32) {
     HEAP8[$27>>0] = 10;
    }
   }
   $33 = ((($7)) + 32|0);
   HEAP32[$33>>2] = 21;
   $34 = ((($7)) + 36|0);
   HEAP32[$34>>2] = 7;
   $35 = ((($7)) + 40|0);
   HEAP32[$35>>2] = 8;
   $36 = ((($7)) + 12|0);
   HEAP32[$36>>2] = 6;
   $37 = HEAP32[(17732)>>2]|0;
   $38 = ($37|0)==(0);
   if ($38) {
    $39 = ((($7)) + 76|0);
    HEAP32[$39>>2] = -1;
   }
   ___lock(((17756)|0));
   $40 = HEAP32[(17752)>>2]|0;
   $41 = ((($7)) + 56|0);
   HEAP32[$41>>2] = $40;
   $42 = ($40|0)==(0);
   if (!($42)) {
    $$cast = $40;
    $43 = ((($$cast)) + 52|0);
    HEAP32[$43>>2] = $7;
   }
   HEAP32[(17752)>>2] = $7;
   ___unlock(((17756)|0));
   $$0 = $7;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $8 = (_strlen($0)|0);
   $9 = (($0) + ($8)|0);
   $$0 = $9;
  } else {
   $4 = $0;
   $5 = $4 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$030$lcssa = $0;
   } else {
    $7 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($7<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$014 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01518 = $0;$22 = $1;
   while(1) {
    $4 = HEAP8[$$01518>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$pn = $22;
     break L1;
    }
    $6 = ((($$01518)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01518 = $6;$22 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn29 = $$0;
   while(1) {
    $19 = ((($$pn29)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn29 = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$pn = $21;
 }
 $$014 = (($$pn) - ($1))|0;
 return ($$014|0);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$$4 = 0, $$0 = 0, $$0$ = 0, $$2 = 0, $$2$ = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $not$ = ($3<<24>>24)!=(114);
 $$ = $not$&1;
 $$0 = $2 ? $$ : 2;
 $4 = (_strchr($0,120)|0);
 $5 = ($4|0)==(0|0);
 $6 = $$0 | 128;
 $$0$ = $5 ? $$0 : $6;
 $7 = (_strchr($0,101)|0);
 $8 = ($7|0)==(0|0);
 $9 = $$0$ | 524288;
 $$2 = $8 ? $$0$ : $9;
 $10 = ($3<<24>>24)==(114);
 $11 = $$2 | 64;
 $$2$ = $10 ? $$2 : $11;
 $12 = ($3<<24>>24)==(119);
 $13 = $$2$ | 512;
 $$4 = $12 ? $13 : $$2$;
 $14 = ($3<<24>>24)==(97);
 $15 = $$4 | 1024;
 $$$4 = $14 ? $15 : $$4;
 return ($$$4|0);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $memchr = (_memchr(12784,$3,4)|0);
 $4 = ($memchr|0)==(0|0);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $$0 = 0;
 } else {
  $6 = (___fmodeflags($1)|0);
  $7 = $6 | 32768;
  HEAP32[$vararg_buffer>>2] = $0;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $7;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $8 = (___syscall5(5,($vararg_buffer|0))|0);
  $9 = (___syscall_ret($8)|0);
  $10 = ($9|0)<(0);
  if ($10) {
   $$0 = 0;
  } else {
   $11 = (___fdopen($9,$1)|0);
   $12 = ($11|0)==(0|0);
   if ($12) {
    HEAP32[$vararg_buffer3>>2] = $9;
    (___syscall6(6,($vararg_buffer3|0))|0);
    $$0 = 0;
   } else {
    $$0 = $11;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _strcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($0,$1)|0);
 return ($0|0);
}
function ___stpcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$029 = 0, $$037 = 0, $$1$ph = 0, $$128$ph = 0, $$12834 = 0, $$135 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = $2 ^ $3;
 $5 = $4 & 3;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = $2 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$026$lcssa = $1;$$027$lcssa = $0;
   } else {
    $$02642 = $1;$$02741 = $0;
    while(1) {
     $9 = HEAP8[$$02642>>0]|0;
     HEAP8[$$02741>>0] = $9;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$029 = $$02741;
      break L1;
     }
     $11 = ((($$02642)) + 1|0);
     $12 = ((($$02741)) + 1|0);
     $13 = $11;
     $14 = $13 & 3;
     $15 = ($14|0)==(0);
     if ($15) {
      $$026$lcssa = $11;$$027$lcssa = $12;
      break;
     } else {
      $$02642 = $11;$$02741 = $12;
     }
    }
   }
   $16 = HEAP32[$$026$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   if ($21) {
    $$02536 = $$027$lcssa;$$037 = $$026$lcssa;$24 = $16;
    while(1) {
     $22 = ((($$037)) + 4|0);
     $23 = ((($$02536)) + 4|0);
     HEAP32[$$02536>>2] = $24;
     $25 = HEAP32[$22>>2]|0;
     $26 = (($25) + -16843009)|0;
     $27 = $25 & -2139062144;
     $28 = $27 ^ -2139062144;
     $29 = $28 & $26;
     $30 = ($29|0)==(0);
     if ($30) {
      $$02536 = $23;$$037 = $22;$24 = $25;
     } else {
      $$0$lcssa = $22;$$025$lcssa = $23;
      break;
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa;$$025$lcssa = $$027$lcssa;
   }
   $$1$ph = $$0$lcssa;$$128$ph = $$025$lcssa;
   label = 8;
  } else {
   $$1$ph = $1;$$128$ph = $0;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $31 = HEAP8[$$1$ph>>0]|0;
  HEAP8[$$128$ph>>0] = $31;
  $32 = ($31<<24>>24)==(0);
  if ($32) {
   $$029 = $$128$ph;
  } else {
   $$12834 = $$128$ph;$$135 = $$1$ph;
   while(1) {
    $33 = ((($$135)) + 1|0);
    $34 = ((($$12834)) + 1|0);
    $35 = HEAP8[$33>>0]|0;
    HEAP8[$34>>0] = $35;
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     $$029 = $34;
     break;
    } else {
     $$12834 = $34;$$135 = $33;
    }
   }
  }
 }
 return ($$029|0);
}
function ___strdup($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 $3 = (_malloc($2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
 } else {
  _memcpy(($3|0),($0|0),($2|0))|0;
  $$0 = $3;
 }
 return ($$0|0);
}
function _strcasecmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$01718 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = ($2<<24>>24)==(0);
 L1: do {
  if ($3) {
   $$0$lcssa = $1;$20 = 0;
  } else {
   $4 = $2&255;
   $$01718 = $0;$$019 = $1;$10 = $4;$8 = $2;
   while(1) {
    $5 = HEAP8[$$019>>0]|0;
    $6 = $5&255;
    $7 = ($5<<24>>24)==(0);
    if ($7) {
     $$0$lcssa = $$019;$20 = $8;
     break L1;
    }
    $9 = ($8<<24>>24)==($5<<24>>24);
    if (!($9)) {
     $11 = (_tolower($10)|0);
     $12 = (_tolower($6)|0);
     $13 = ($11|0)==($12|0);
     if (!($13)) {
      $$0$lcssa = $$019;$20 = $8;
      break L1;
     }
    }
    $14 = ((($$01718)) + 1|0);
    $15 = ((($$019)) + 1|0);
    $16 = HEAP8[$14>>0]|0;
    $17 = $16&255;
    $18 = ($16<<24>>24)==(0);
    if ($18) {
     $$0$lcssa = $15;$20 = 0;
     break;
    } else {
     $$01718 = $14;$$019 = $15;$10 = $17;$8 = $16;
    }
   }
  }
 } while(0);
 $19 = $20&255;
 $21 = (_tolower($19)|0);
 $22 = HEAP8[$$0$lcssa>>0]|0;
 $23 = $22&255;
 $24 = (_tolower($23)|0);
 $25 = (($21) - ($24))|0;
 return ($25|0);
}
function _strcat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (($0) + ($2)|0);
 (_strcpy($3,$1)|0);
 return ($0|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0190$i = 0, $$$0191$i = 0, $$$4349$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0$i18$i = 0, $$01$i$i = 0, $$0187$i = 0, $$0189$i = 0, $$0190$i = 0, $$0191$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0;
 var $$024370$i = 0, $$0286$i$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0294$i$i = 0, $$0295$i$i = 0, $$0340$i = 0, $$0342$i = 0, $$0343$i = 0, $$0345$i = 0, $$0351$i = 0, $$0356$i = 0, $$0357$$i = 0, $$0357$i = 0, $$0359$i = 0, $$0360$i = 0, $$0366$i = 0, $$1194$i = 0, $$1196$i = 0, $$124469$i = 0;
 var $$1290$i$i = 0, $$1292$i$i = 0, $$1341$i = 0, $$1346$i = 0, $$1361$i = 0, $$1368$i = 0, $$1372$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2353$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i201 = 0, $$3348$i = 0, $$3370$i = 0, $$4$lcssa$i = 0, $$413$i = 0, $$4349$lcssa$i = 0, $$434912$i = 0, $$4355$$4$i = 0;
 var $$4355$ph$i = 0, $$435511$i = 0, $$5256$i = 0, $$723947$i = 0, $$748$i = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i19$i = 0, $$pre$i205 = 0, $$pre$i208 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i20$iZ2D = 0, $$pre$phi$i206Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre9$i$i = 0, $1 = 0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0;
 var $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0;
 var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i204 = 0, $exitcond$i$i = 0, $not$$i$i = 0, $not$$i22$i = 0;
 var $not$7$i = 0, $or$cond$i = 0, $or$cond$i211 = 0, $or$cond1$i = 0, $or$cond1$i210 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[4444]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (17816 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    do {
     if ($21) {
      $22 = 1 << $14;
      $23 = $22 ^ -1;
      $24 = $8 & $23;
      HEAP32[4444] = $24;
     } else {
      $25 = HEAP32[(17792)>>2]|0;
      $26 = ($20>>>0)<($25>>>0);
      if ($26) {
       _abort();
       // unreachable;
      }
      $27 = ((($20)) + 12|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28|0)==($18|0);
      if ($29) {
       HEAP32[$27>>2] = $16;
       HEAP32[$17>>2] = $20;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $30 = $14 << 3;
    $31 = $30 | 3;
    $32 = ((($18)) + 4|0);
    HEAP32[$32>>2] = $31;
    $33 = (($18) + ($30)|0);
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 | 1;
    HEAP32[$34>>2] = $36;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $37 = HEAP32[(17784)>>2]|0;
   $38 = ($6>>>0)>($37>>>0);
   if ($38) {
    $39 = ($9|0)==(0);
    if (!($39)) {
     $40 = $9 << $7;
     $41 = 2 << $7;
     $42 = (0 - ($41))|0;
     $43 = $41 | $42;
     $44 = $40 & $43;
     $45 = (0 - ($44))|0;
     $46 = $44 & $45;
     $47 = (($46) + -1)|0;
     $48 = $47 >>> 12;
     $49 = $48 & 16;
     $50 = $47 >>> $49;
     $51 = $50 >>> 5;
     $52 = $51 & 8;
     $53 = $52 | $49;
     $54 = $50 >>> $52;
     $55 = $54 >>> 2;
     $56 = $55 & 4;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 2;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = $62 >>> 1;
     $64 = $63 & 1;
     $65 = $61 | $64;
     $66 = $62 >>> $64;
     $67 = (($65) + ($66))|0;
     $68 = $67 << 1;
     $69 = (17816 + ($68<<2)|0);
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($71)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($69|0)==($73|0);
     do {
      if ($74) {
       $75 = 1 << $67;
       $76 = $75 ^ -1;
       $77 = $8 & $76;
       HEAP32[4444] = $77;
       $98 = $77;
      } else {
       $78 = HEAP32[(17792)>>2]|0;
       $79 = ($73>>>0)<($78>>>0);
       if ($79) {
        _abort();
        // unreachable;
       }
       $80 = ((($73)) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==($71|0);
       if ($82) {
        HEAP32[$80>>2] = $69;
        HEAP32[$70>>2] = $73;
        $98 = $8;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $83 = $67 << 3;
     $84 = (($83) - ($6))|0;
     $85 = $6 | 3;
     $86 = ((($71)) + 4|0);
     HEAP32[$86>>2] = $85;
     $87 = (($71) + ($6)|0);
     $88 = $84 | 1;
     $89 = ((($87)) + 4|0);
     HEAP32[$89>>2] = $88;
     $90 = (($87) + ($84)|0);
     HEAP32[$90>>2] = $84;
     $91 = ($37|0)==(0);
     if (!($91)) {
      $92 = HEAP32[(17796)>>2]|0;
      $93 = $37 >>> 3;
      $94 = $93 << 1;
      $95 = (17816 + ($94<<2)|0);
      $96 = 1 << $93;
      $97 = $98 & $96;
      $99 = ($97|0)==(0);
      if ($99) {
       $100 = $98 | $96;
       HEAP32[4444] = $100;
       $$pre = ((($95)) + 8|0);
       $$0199 = $95;$$pre$phiZ2D = $$pre;
      } else {
       $101 = ((($95)) + 8|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = HEAP32[(17792)>>2]|0;
       $104 = ($102>>>0)<($103>>>0);
       if ($104) {
        _abort();
        // unreachable;
       } else {
        $$0199 = $102;$$pre$phiZ2D = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $92;
      $105 = ((($$0199)) + 12|0);
      HEAP32[$105>>2] = $92;
      $106 = ((($92)) + 8|0);
      HEAP32[$106>>2] = $$0199;
      $107 = ((($92)) + 12|0);
      HEAP32[$107>>2] = $95;
     }
     HEAP32[(17784)>>2] = $84;
     HEAP32[(17796)>>2] = $87;
     $$0 = $72;
     STACKTOP = sp;return ($$0|0);
    }
    $108 = HEAP32[(17780)>>2]|0;
    $109 = ($108|0)==(0);
    if ($109) {
     $$0197 = $6;
    } else {
     $110 = (0 - ($108))|0;
     $111 = $108 & $110;
     $112 = (($111) + -1)|0;
     $113 = $112 >>> 12;
     $114 = $113 & 16;
     $115 = $112 >>> $114;
     $116 = $115 >>> 5;
     $117 = $116 & 8;
     $118 = $117 | $114;
     $119 = $115 >>> $117;
     $120 = $119 >>> 2;
     $121 = $120 & 4;
     $122 = $118 | $121;
     $123 = $119 >>> $121;
     $124 = $123 >>> 1;
     $125 = $124 & 2;
     $126 = $122 | $125;
     $127 = $123 >>> $125;
     $128 = $127 >>> 1;
     $129 = $128 & 1;
     $130 = $126 | $129;
     $131 = $127 >>> $129;
     $132 = (($130) + ($131))|0;
     $133 = (18080 + ($132<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($134)) + 4|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $136 & -8;
     $138 = (($137) - ($6))|0;
     $$0189$i = $134;$$0190$i = $134;$$0191$i = $138;
     while(1) {
      $139 = ((($$0189$i)) + 16|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ($140|0)==(0|0);
      if ($141) {
       $142 = ((($$0189$i)) + 20|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($143|0)==(0|0);
       if ($144) {
        break;
       } else {
        $146 = $143;
       }
      } else {
       $146 = $140;
      }
      $145 = ((($146)) + 4|0);
      $147 = HEAP32[$145>>2]|0;
      $148 = $147 & -8;
      $149 = (($148) - ($6))|0;
      $150 = ($149>>>0)<($$0191$i>>>0);
      $$$0191$i = $150 ? $149 : $$0191$i;
      $$$0190$i = $150 ? $146 : $$0190$i;
      $$0189$i = $146;$$0190$i = $$$0190$i;$$0191$i = $$$0191$i;
     }
     $151 = HEAP32[(17792)>>2]|0;
     $152 = ($$0190$i>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     }
     $153 = (($$0190$i) + ($6)|0);
     $154 = ($$0190$i>>>0)<($153>>>0);
     if (!($154)) {
      _abort();
      // unreachable;
     }
     $155 = ((($$0190$i)) + 24|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ((($$0190$i)) + 12|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ($158|0)==($$0190$i|0);
     do {
      if ($159) {
       $169 = ((($$0190$i)) + 20|0);
       $170 = HEAP32[$169>>2]|0;
       $171 = ($170|0)==(0|0);
       if ($171) {
        $172 = ((($$0190$i)) + 16|0);
        $173 = HEAP32[$172>>2]|0;
        $174 = ($173|0)==(0|0);
        if ($174) {
         $$3$i = 0;
         break;
        } else {
         $$1194$i = $173;$$1196$i = $172;
        }
       } else {
        $$1194$i = $170;$$1196$i = $169;
       }
       while(1) {
        $175 = ((($$1194$i)) + 20|0);
        $176 = HEAP32[$175>>2]|0;
        $177 = ($176|0)==(0|0);
        if (!($177)) {
         $$1194$i = $176;$$1196$i = $175;
         continue;
        }
        $178 = ((($$1194$i)) + 16|0);
        $179 = HEAP32[$178>>2]|0;
        $180 = ($179|0)==(0|0);
        if ($180) {
         break;
        } else {
         $$1194$i = $179;$$1196$i = $178;
        }
       }
       $181 = ($$1196$i>>>0)<($151>>>0);
       if ($181) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$1196$i>>2] = 0;
        $$3$i = $$1194$i;
        break;
       }
      } else {
       $160 = ((($$0190$i)) + 8|0);
       $161 = HEAP32[$160>>2]|0;
       $162 = ($161>>>0)<($151>>>0);
       if ($162) {
        _abort();
        // unreachable;
       }
       $163 = ((($161)) + 12|0);
       $164 = HEAP32[$163>>2]|0;
       $165 = ($164|0)==($$0190$i|0);
       if (!($165)) {
        _abort();
        // unreachable;
       }
       $166 = ((($158)) + 8|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = ($167|0)==($$0190$i|0);
       if ($168) {
        HEAP32[$163>>2] = $158;
        HEAP32[$166>>2] = $161;
        $$3$i = $158;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $182 = ($156|0)==(0|0);
     do {
      if (!($182)) {
       $183 = ((($$0190$i)) + 28|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = (18080 + ($184<<2)|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = ($$0190$i|0)==($186|0);
       if ($187) {
        HEAP32[$185>>2] = $$3$i;
        $cond$i = ($$3$i|0)==(0|0);
        if ($cond$i) {
         $188 = 1 << $184;
         $189 = $188 ^ -1;
         $190 = $108 & $189;
         HEAP32[(17780)>>2] = $190;
         break;
        }
       } else {
        $191 = HEAP32[(17792)>>2]|0;
        $192 = ($156>>>0)<($191>>>0);
        if ($192) {
         _abort();
         // unreachable;
        }
        $193 = ((($156)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = ($194|0)==($$0190$i|0);
        if ($195) {
         HEAP32[$193>>2] = $$3$i;
        } else {
         $196 = ((($156)) + 20|0);
         HEAP32[$196>>2] = $$3$i;
        }
        $197 = ($$3$i|0)==(0|0);
        if ($197) {
         break;
        }
       }
       $198 = HEAP32[(17792)>>2]|0;
       $199 = ($$3$i>>>0)<($198>>>0);
       if ($199) {
        _abort();
        // unreachable;
       }
       $200 = ((($$3$i)) + 24|0);
       HEAP32[$200>>2] = $156;
       $201 = ((($$0190$i)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(0|0);
       do {
        if (!($203)) {
         $204 = ($202>>>0)<($198>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = ((($$3$i)) + 16|0);
          HEAP32[$205>>2] = $202;
          $206 = ((($202)) + 24|0);
          HEAP32[$206>>2] = $$3$i;
          break;
         }
        }
       } while(0);
       $207 = ((($$0190$i)) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[(17792)>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = ((($$3$i)) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = ((($208)) + 24|0);
         HEAP32[$213>>2] = $$3$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($$0191$i>>>0)<(16);
     if ($214) {
      $215 = (($$0191$i) + ($6))|0;
      $216 = $215 | 3;
      $217 = ((($$0190$i)) + 4|0);
      HEAP32[$217>>2] = $216;
      $218 = (($$0190$i) + ($215)|0);
      $219 = ((($218)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 | 1;
      HEAP32[$219>>2] = $221;
     } else {
      $222 = $6 | 3;
      $223 = ((($$0190$i)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = $$0191$i | 1;
      $225 = ((($153)) + 4|0);
      HEAP32[$225>>2] = $224;
      $226 = (($153) + ($$0191$i)|0);
      HEAP32[$226>>2] = $$0191$i;
      $227 = ($37|0)==(0);
      if (!($227)) {
       $228 = HEAP32[(17796)>>2]|0;
       $229 = $37 >>> 3;
       $230 = $229 << 1;
       $231 = (17816 + ($230<<2)|0);
       $232 = 1 << $229;
       $233 = $8 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $8 | $232;
        HEAP32[4444] = $235;
        $$pre$i = ((($231)) + 8|0);
        $$0187$i = $231;$$pre$phi$iZ2D = $$pre$i;
       } else {
        $236 = ((($231)) + 8|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(17792)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$0187$i = $237;$$pre$phi$iZ2D = $236;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $240 = ((($$0187$i)) + 12|0);
       HEAP32[$240>>2] = $228;
       $241 = ((($228)) + 8|0);
       HEAP32[$241>>2] = $$0187$i;
       $242 = ((($228)) + 12|0);
       HEAP32[$242>>2] = $231;
      }
      HEAP32[(17784)>>2] = $$0191$i;
      HEAP32[(17796)>>2] = $153;
     }
     $243 = ((($$0190$i)) + 8|0);
     $$0 = $243;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$0197 = $6;
   }
  } else {
   $244 = ($0>>>0)>(4294967231);
   if ($244) {
    $$0197 = -1;
   } else {
    $245 = (($0) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(17780)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $$0197 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $$0356$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $$0356$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $$0356$i = $274;
      }
     }
     $275 = (18080 + ($$0356$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $$2353$i = 0;$$3$i201 = 0;$$3348$i = $249;
       label = 86;
      } else {
       $278 = ($$0356$i|0)==(31);
       $279 = $$0356$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $$0340$i = 0;$$0345$i = $249;$$0351$i = $276;$$0357$i = $282;$$0360$i = 0;
       while(1) {
        $283 = ((($$0351$i)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($$0345$i>>>0);
        if ($287) {
         $288 = ($286|0)==(0);
         if ($288) {
          $$413$i = $$0351$i;$$434912$i = 0;$$435511$i = $$0351$i;
          label = 90;
          break L123;
         } else {
          $$1341$i = $$0351$i;$$1346$i = $286;
         }
        } else {
         $$1341$i = $$0340$i;$$1346$i = $$0345$i;
        }
        $289 = ((($$0351$i)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $$0357$i >>> 31;
        $292 = (((($$0351$i)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond1$i = $294 | $295;
        $$1361$i = $or$cond1$i ? $$0360$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $296&1;
        $298 = $297 ^ 1;
        $$0357$$i = $$0357$i << $298;
        if ($296) {
         $$2353$i = $$1361$i;$$3$i201 = $$1341$i;$$3348$i = $$1346$i;
         label = 86;
         break;
        } else {
         $$0340$i = $$1341$i;$$0345$i = $$1346$i;$$0351$i = $293;$$0357$i = $$0357$$i;$$0360$i = $$1361$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $299 = ($$2353$i|0)==(0|0);
      $300 = ($$3$i201|0)==(0|0);
      $or$cond$i = $299 & $300;
      if ($or$cond$i) {
       $301 = 2 << $$0356$i;
       $302 = (0 - ($301))|0;
       $303 = $301 | $302;
       $304 = $247 & $303;
       $305 = ($304|0)==(0);
       if ($305) {
        $$0197 = $246;
        break;
       }
       $306 = (0 - ($304))|0;
       $307 = $304 & $306;
       $308 = (($307) + -1)|0;
       $309 = $308 >>> 12;
       $310 = $309 & 16;
       $311 = $308 >>> $310;
       $312 = $311 >>> 5;
       $313 = $312 & 8;
       $314 = $313 | $310;
       $315 = $311 >>> $313;
       $316 = $315 >>> 2;
       $317 = $316 & 4;
       $318 = $314 | $317;
       $319 = $315 >>> $317;
       $320 = $319 >>> 1;
       $321 = $320 & 2;
       $322 = $318 | $321;
       $323 = $319 >>> $321;
       $324 = $323 >>> 1;
       $325 = $324 & 1;
       $326 = $322 | $325;
       $327 = $323 >>> $325;
       $328 = (($326) + ($327))|0;
       $329 = (18080 + ($328<<2)|0);
       $330 = HEAP32[$329>>2]|0;
       $$4355$ph$i = $330;
      } else {
       $$4355$ph$i = $$2353$i;
      }
      $331 = ($$4355$ph$i|0)==(0|0);
      if ($331) {
       $$4$lcssa$i = $$3$i201;$$4349$lcssa$i = $$3348$i;
      } else {
       $$413$i = $$3$i201;$$434912$i = $$3348$i;$$435511$i = $$4355$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $332 = ((($$435511$i)) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($246))|0;
       $336 = ($335>>>0)<($$434912$i>>>0);
       $$$4349$i = $336 ? $335 : $$434912$i;
       $$4355$$4$i = $336 ? $$435511$i : $$413$i;
       $337 = ((($$435511$i)) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $$413$i = $$4355$$4$i;$$434912$i = $$$4349$i;$$435511$i = $338;
        label = 90;
        continue;
       }
       $340 = ((($$435511$i)) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $$4$lcssa$i = $$4355$$4$i;$$4349$lcssa$i = $$$4349$i;
        break;
       } else {
        $$413$i = $$4355$$4$i;$$434912$i = $$$4349$i;$$435511$i = $341;
        label = 90;
       }
      }
     }
     $343 = ($$4$lcssa$i|0)==(0|0);
     if ($343) {
      $$0197 = $246;
     } else {
      $344 = HEAP32[(17784)>>2]|0;
      $345 = (($344) - ($246))|0;
      $346 = ($$4349$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[(17792)>>2]|0;
       $348 = ($$4$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($$4$lcssa$i) + ($246)|0);
       $350 = ($$4$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = ((($$4$lcssa$i)) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = ((($$4$lcssa$i)) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($$4$lcssa$i|0);
       do {
        if ($355) {
         $365 = ((($$4$lcssa$i)) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = ((($$4$lcssa$i)) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $$3370$i = 0;
           break;
          } else {
           $$1368$i = $369;$$1372$i = $368;
          }
         } else {
          $$1368$i = $366;$$1372$i = $365;
         }
         while(1) {
          $371 = ((($$1368$i)) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $$1368$i = $372;$$1372$i = $371;
           continue;
          }
          $374 = ((($$1368$i)) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $$1368$i = $375;$$1372$i = $374;
          }
         }
         $377 = ($$1372$i>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$1372$i>>2] = 0;
          $$3370$i = $$1368$i;
          break;
         }
        } else {
         $356 = ((($$4$lcssa$i)) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = ((($357)) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($$4$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = ((($354)) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($$4$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $$3370$i = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if ($378) {
         $470 = $247;
        } else {
         $379 = ((($$4$lcssa$i)) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = (18080 + ($380<<2)|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($$4$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $$3370$i;
          $cond$i204 = ($$3370$i|0)==(0|0);
          if ($cond$i204) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = $247 & $385;
           HEAP32[(17780)>>2] = $386;
           $470 = $386;
           break;
          }
         } else {
          $387 = HEAP32[(17792)>>2]|0;
          $388 = ($352>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($352)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($$4$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $$3370$i;
          } else {
           $392 = ((($352)) + 20|0);
           HEAP32[$392>>2] = $$3370$i;
          }
          $393 = ($$3370$i|0)==(0|0);
          if ($393) {
           $470 = $247;
           break;
          }
         }
         $394 = HEAP32[(17792)>>2]|0;
         $395 = ($$3370$i>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($$3370$i)) + 24|0);
         HEAP32[$396>>2] = $352;
         $397 = ((($$4$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($$3370$i)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $$3370$i;
            break;
           }
          }
         } while(0);
         $403 = ((($$4$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if ($405) {
          $470 = $247;
         } else {
          $406 = HEAP32[(17792)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($$3370$i)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $$3370$i;
           $470 = $247;
           break;
          }
         }
        }
       } while(0);
       $410 = ($$4349$lcssa$i>>>0)<(16);
       do {
        if ($410) {
         $411 = (($$4349$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $414 = (($$4$lcssa$i) + ($411)|0);
         $415 = ((($414)) + 4|0);
         $416 = HEAP32[$415>>2]|0;
         $417 = $416 | 1;
         HEAP32[$415>>2] = $417;
        } else {
         $418 = $246 | 3;
         $419 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$419>>2] = $418;
         $420 = $$4349$lcssa$i | 1;
         $421 = ((($349)) + 4|0);
         HEAP32[$421>>2] = $420;
         $422 = (($349) + ($$4349$lcssa$i)|0);
         HEAP32[$422>>2] = $$4349$lcssa$i;
         $423 = $$4349$lcssa$i >>> 3;
         $424 = ($$4349$lcssa$i>>>0)<(256);
         if ($424) {
          $425 = $423 << 1;
          $426 = (17816 + ($425<<2)|0);
          $427 = HEAP32[4444]|0;
          $428 = 1 << $423;
          $429 = $427 & $428;
          $430 = ($429|0)==(0);
          if ($430) {
           $431 = $427 | $428;
           HEAP32[4444] = $431;
           $$pre$i205 = ((($426)) + 8|0);
           $$0366$i = $426;$$pre$phi$i206Z2D = $$pre$i205;
          } else {
           $432 = ((($426)) + 8|0);
           $433 = HEAP32[$432>>2]|0;
           $434 = HEAP32[(17792)>>2]|0;
           $435 = ($433>>>0)<($434>>>0);
           if ($435) {
            _abort();
            // unreachable;
           } else {
            $$0366$i = $433;$$pre$phi$i206Z2D = $432;
           }
          }
          HEAP32[$$pre$phi$i206Z2D>>2] = $349;
          $436 = ((($$0366$i)) + 12|0);
          HEAP32[$436>>2] = $349;
          $437 = ((($349)) + 8|0);
          HEAP32[$437>>2] = $$0366$i;
          $438 = ((($349)) + 12|0);
          HEAP32[$438>>2] = $426;
          break;
         }
         $439 = $$4349$lcssa$i >>> 8;
         $440 = ($439|0)==(0);
         if ($440) {
          $$0359$i = 0;
         } else {
          $441 = ($$4349$lcssa$i>>>0)>(16777215);
          if ($441) {
           $$0359$i = 31;
          } else {
           $442 = (($439) + 1048320)|0;
           $443 = $442 >>> 16;
           $444 = $443 & 8;
           $445 = $439 << $444;
           $446 = (($445) + 520192)|0;
           $447 = $446 >>> 16;
           $448 = $447 & 4;
           $449 = $448 | $444;
           $450 = $445 << $448;
           $451 = (($450) + 245760)|0;
           $452 = $451 >>> 16;
           $453 = $452 & 2;
           $454 = $449 | $453;
           $455 = (14 - ($454))|0;
           $456 = $450 << $453;
           $457 = $456 >>> 15;
           $458 = (($455) + ($457))|0;
           $459 = $458 << 1;
           $460 = (($458) + 7)|0;
           $461 = $$4349$lcssa$i >>> $460;
           $462 = $461 & 1;
           $463 = $462 | $459;
           $$0359$i = $463;
          }
         }
         $464 = (18080 + ($$0359$i<<2)|0);
         $465 = ((($349)) + 28|0);
         HEAP32[$465>>2] = $$0359$i;
         $466 = ((($349)) + 16|0);
         $467 = ((($466)) + 4|0);
         HEAP32[$467>>2] = 0;
         HEAP32[$466>>2] = 0;
         $468 = 1 << $$0359$i;
         $469 = $470 & $468;
         $471 = ($469|0)==(0);
         if ($471) {
          $472 = $470 | $468;
          HEAP32[(17780)>>2] = $472;
          HEAP32[$464>>2] = $349;
          $473 = ((($349)) + 24|0);
          HEAP32[$473>>2] = $464;
          $474 = ((($349)) + 12|0);
          HEAP32[$474>>2] = $349;
          $475 = ((($349)) + 8|0);
          HEAP32[$475>>2] = $349;
          break;
         }
         $476 = HEAP32[$464>>2]|0;
         $477 = ($$0359$i|0)==(31);
         $478 = $$0359$i >>> 1;
         $479 = (25 - ($478))|0;
         $480 = $477 ? 0 : $479;
         $481 = $$4349$lcssa$i << $480;
         $$0342$i = $481;$$0343$i = $476;
         while(1) {
          $482 = ((($$0343$i)) + 4|0);
          $483 = HEAP32[$482>>2]|0;
          $484 = $483 & -8;
          $485 = ($484|0)==($$4349$lcssa$i|0);
          if ($485) {
           label = 148;
           break;
          }
          $486 = $$0342$i >>> 31;
          $487 = (((($$0343$i)) + 16|0) + ($486<<2)|0);
          $488 = $$0342$i << 1;
          $489 = HEAP32[$487>>2]|0;
          $490 = ($489|0)==(0|0);
          if ($490) {
           label = 145;
           break;
          } else {
           $$0342$i = $488;$$0343$i = $489;
          }
         }
         if ((label|0) == 145) {
          $491 = HEAP32[(17792)>>2]|0;
          $492 = ($487>>>0)<($491>>>0);
          if ($492) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$487>>2] = $349;
           $493 = ((($349)) + 24|0);
           HEAP32[$493>>2] = $$0343$i;
           $494 = ((($349)) + 12|0);
           HEAP32[$494>>2] = $349;
           $495 = ((($349)) + 8|0);
           HEAP32[$495>>2] = $349;
           break;
          }
         }
         else if ((label|0) == 148) {
          $496 = ((($$0343$i)) + 8|0);
          $497 = HEAP32[$496>>2]|0;
          $498 = HEAP32[(17792)>>2]|0;
          $499 = ($497>>>0)>=($498>>>0);
          $not$7$i = ($$0343$i>>>0)>=($498>>>0);
          $500 = $499 & $not$7$i;
          if ($500) {
           $501 = ((($497)) + 12|0);
           HEAP32[$501>>2] = $349;
           HEAP32[$496>>2] = $349;
           $502 = ((($349)) + 8|0);
           HEAP32[$502>>2] = $497;
           $503 = ((($349)) + 12|0);
           HEAP32[$503>>2] = $$0343$i;
           $504 = ((($349)) + 24|0);
           HEAP32[$504>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $505 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $505;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0197 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $506 = HEAP32[(17784)>>2]|0;
 $507 = ($506>>>0)<($$0197>>>0);
 if (!($507)) {
  $508 = (($506) - ($$0197))|0;
  $509 = HEAP32[(17796)>>2]|0;
  $510 = ($508>>>0)>(15);
  if ($510) {
   $511 = (($509) + ($$0197)|0);
   HEAP32[(17796)>>2] = $511;
   HEAP32[(17784)>>2] = $508;
   $512 = $508 | 1;
   $513 = ((($511)) + 4|0);
   HEAP32[$513>>2] = $512;
   $514 = (($511) + ($508)|0);
   HEAP32[$514>>2] = $508;
   $515 = $$0197 | 3;
   $516 = ((($509)) + 4|0);
   HEAP32[$516>>2] = $515;
  } else {
   HEAP32[(17784)>>2] = 0;
   HEAP32[(17796)>>2] = 0;
   $517 = $506 | 3;
   $518 = ((($509)) + 4|0);
   HEAP32[$518>>2] = $517;
   $519 = (($509) + ($506)|0);
   $520 = ((($519)) + 4|0);
   $521 = HEAP32[$520>>2]|0;
   $522 = $521 | 1;
   HEAP32[$520>>2] = $522;
  }
  $523 = ((($509)) + 8|0);
  $$0 = $523;
  STACKTOP = sp;return ($$0|0);
 }
 $524 = HEAP32[(17788)>>2]|0;
 $525 = ($524>>>0)>($$0197>>>0);
 if ($525) {
  $526 = (($524) - ($$0197))|0;
  HEAP32[(17788)>>2] = $526;
  $527 = HEAP32[(17800)>>2]|0;
  $528 = (($527) + ($$0197)|0);
  HEAP32[(17800)>>2] = $528;
  $529 = $526 | 1;
  $530 = ((($528)) + 4|0);
  HEAP32[$530>>2] = $529;
  $531 = $$0197 | 3;
  $532 = ((($527)) + 4|0);
  HEAP32[$532>>2] = $531;
  $533 = ((($527)) + 8|0);
  $$0 = $533;
  STACKTOP = sp;return ($$0|0);
 }
 $534 = HEAP32[4562]|0;
 $535 = ($534|0)==(0);
 if ($535) {
  HEAP32[(18256)>>2] = 4096;
  HEAP32[(18252)>>2] = 4096;
  HEAP32[(18260)>>2] = -1;
  HEAP32[(18264)>>2] = -1;
  HEAP32[(18268)>>2] = 0;
  HEAP32[(18220)>>2] = 0;
  $536 = $1;
  $537 = $536 & -16;
  $538 = $537 ^ 1431655768;
  HEAP32[$1>>2] = $538;
  HEAP32[4562] = $538;
  $542 = 4096;
 } else {
  $$pre$i208 = HEAP32[(18256)>>2]|0;
  $542 = $$pre$i208;
 }
 $539 = (($$0197) + 48)|0;
 $540 = (($$0197) + 47)|0;
 $541 = (($542) + ($540))|0;
 $543 = (0 - ($542))|0;
 $544 = $541 & $543;
 $545 = ($544>>>0)>($$0197>>>0);
 if (!($545)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $546 = HEAP32[(18216)>>2]|0;
 $547 = ($546|0)==(0);
 if (!($547)) {
  $548 = HEAP32[(18208)>>2]|0;
  $549 = (($548) + ($544))|0;
  $550 = ($549>>>0)<=($548>>>0);
  $551 = ($549>>>0)>($546>>>0);
  $or$cond1$i210 = $550 | $551;
  if ($or$cond1$i210) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $552 = HEAP32[(18220)>>2]|0;
 $553 = $552 & 4;
 $554 = ($553|0)==(0);
 L255: do {
  if ($554) {
   $555 = HEAP32[(17800)>>2]|0;
   $556 = ($555|0)==(0|0);
   L257: do {
    if ($556) {
     label = 172;
    } else {
     $$0$i17$i = (18224);
     while(1) {
      $557 = HEAP32[$$0$i17$i>>2]|0;
      $558 = ($557>>>0)>($555>>>0);
      if (!($558)) {
       $559 = ((($$0$i17$i)) + 4|0);
       $560 = HEAP32[$559>>2]|0;
       $561 = (($557) + ($560)|0);
       $562 = ($561>>>0)>($555>>>0);
       if ($562) {
        break;
       }
      }
      $563 = ((($$0$i17$i)) + 8|0);
      $564 = HEAP32[$563>>2]|0;
      $565 = ($564|0)==(0|0);
      if ($565) {
       label = 172;
       break L257;
      } else {
       $$0$i17$i = $564;
      }
     }
     $588 = (($541) - ($524))|0;
     $589 = $588 & $543;
     $590 = ($589>>>0)<(2147483647);
     if ($590) {
      $591 = (_sbrk(($589|0))|0);
      $592 = HEAP32[$$0$i17$i>>2]|0;
      $593 = HEAP32[$559>>2]|0;
      $594 = (($592) + ($593)|0);
      $595 = ($591|0)==($594|0);
      if ($595) {
       $596 = ($591|0)==((-1)|0);
       if (!($596)) {
        $$723947$i = $589;$$748$i = $591;
        label = 190;
        break L255;
       }
      } else {
       $$2247$ph$i = $591;$$2253$ph$i = $589;
       label = 180;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 172) {
     $566 = (_sbrk(0)|0);
     $567 = ($566|0)==((-1)|0);
     if (!($567)) {
      $568 = $566;
      $569 = HEAP32[(18252)>>2]|0;
      $570 = (($569) + -1)|0;
      $571 = $570 & $568;
      $572 = ($571|0)==(0);
      $573 = (($570) + ($568))|0;
      $574 = (0 - ($569))|0;
      $575 = $573 & $574;
      $576 = (($575) - ($568))|0;
      $577 = $572 ? 0 : $576;
      $$$i = (($577) + ($544))|0;
      $578 = HEAP32[(18208)>>2]|0;
      $579 = (($$$i) + ($578))|0;
      $580 = ($$$i>>>0)>($$0197>>>0);
      $581 = ($$$i>>>0)<(2147483647);
      $or$cond$i211 = $580 & $581;
      if ($or$cond$i211) {
       $582 = HEAP32[(18216)>>2]|0;
       $583 = ($582|0)==(0);
       if (!($583)) {
        $584 = ($579>>>0)<=($578>>>0);
        $585 = ($579>>>0)>($582>>>0);
        $or$cond2$i = $584 | $585;
        if ($or$cond2$i) {
         break;
        }
       }
       $586 = (_sbrk(($$$i|0))|0);
       $587 = ($586|0)==($566|0);
       if ($587) {
        $$723947$i = $$$i;$$748$i = $566;
        label = 190;
        break L255;
       } else {
        $$2247$ph$i = $586;$$2253$ph$i = $$$i;
        label = 180;
       }
      }
     }
    }
   } while(0);
   L274: do {
    if ((label|0) == 180) {
     $597 = (0 - ($$2253$ph$i))|0;
     $598 = ($$2247$ph$i|0)!=((-1)|0);
     $599 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $599 & $598;
     $600 = ($539>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $600 & $or$cond7$i;
     do {
      if ($or$cond10$i) {
       $601 = HEAP32[(18256)>>2]|0;
       $602 = (($540) - ($$2253$ph$i))|0;
       $603 = (($602) + ($601))|0;
       $604 = (0 - ($601))|0;
       $605 = $603 & $604;
       $606 = ($605>>>0)<(2147483647);
       if ($606) {
        $607 = (_sbrk(($605|0))|0);
        $608 = ($607|0)==((-1)|0);
        if ($608) {
         (_sbrk(($597|0))|0);
         break L274;
        } else {
         $609 = (($605) + ($$2253$ph$i))|0;
         $$5256$i = $609;
         break;
        }
       } else {
        $$5256$i = $$2253$ph$i;
       }
      } else {
       $$5256$i = $$2253$ph$i;
      }
     } while(0);
     $610 = ($$2247$ph$i|0)==((-1)|0);
     if (!($610)) {
      $$723947$i = $$5256$i;$$748$i = $$2247$ph$i;
      label = 190;
      break L255;
     }
    }
   } while(0);
   $611 = HEAP32[(18220)>>2]|0;
   $612 = $611 | 4;
   HEAP32[(18220)>>2] = $612;
   label = 187;
  } else {
   label = 187;
  }
 } while(0);
 if ((label|0) == 187) {
  $613 = ($544>>>0)<(2147483647);
  if ($613) {
   $614 = (_sbrk(($544|0))|0);
   $615 = (_sbrk(0)|0);
   $616 = ($614|0)!=((-1)|0);
   $617 = ($615|0)!=((-1)|0);
   $or$cond5$i = $616 & $617;
   $618 = ($614>>>0)<($615>>>0);
   $or$cond11$i = $618 & $or$cond5$i;
   if ($or$cond11$i) {
    $619 = $615;
    $620 = $614;
    $621 = (($619) - ($620))|0;
    $622 = (($$0197) + 40)|0;
    $$not$i = ($621>>>0)>($622>>>0);
    if ($$not$i) {
     $$723947$i = $621;$$748$i = $614;
     label = 190;
    }
   }
  }
 }
 if ((label|0) == 190) {
  $623 = HEAP32[(18208)>>2]|0;
  $624 = (($623) + ($$723947$i))|0;
  HEAP32[(18208)>>2] = $624;
  $625 = HEAP32[(18212)>>2]|0;
  $626 = ($624>>>0)>($625>>>0);
  if ($626) {
   HEAP32[(18212)>>2] = $624;
  }
  $627 = HEAP32[(17800)>>2]|0;
  $628 = ($627|0)==(0|0);
  do {
   if ($628) {
    $629 = HEAP32[(17792)>>2]|0;
    $630 = ($629|0)==(0|0);
    $631 = ($$748$i>>>0)<($629>>>0);
    $or$cond12$i = $630 | $631;
    if ($or$cond12$i) {
     HEAP32[(17792)>>2] = $$748$i;
    }
    HEAP32[(18224)>>2] = $$748$i;
    HEAP32[(18228)>>2] = $$723947$i;
    HEAP32[(18236)>>2] = 0;
    $632 = HEAP32[4562]|0;
    HEAP32[(17812)>>2] = $632;
    HEAP32[(17808)>>2] = -1;
    $$01$i$i = 0;
    while(1) {
     $633 = $$01$i$i << 1;
     $634 = (17816 + ($633<<2)|0);
     $635 = ((($634)) + 12|0);
     HEAP32[$635>>2] = $634;
     $636 = ((($634)) + 8|0);
     HEAP32[$636>>2] = $634;
     $637 = (($$01$i$i) + 1)|0;
     $exitcond$i$i = ($637|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $637;
     }
    }
    $638 = (($$723947$i) + -40)|0;
    $639 = ((($$748$i)) + 8|0);
    $640 = $639;
    $641 = $640 & 7;
    $642 = ($641|0)==(0);
    $643 = (0 - ($640))|0;
    $644 = $643 & 7;
    $645 = $642 ? 0 : $644;
    $646 = (($$748$i) + ($645)|0);
    $647 = (($638) - ($645))|0;
    HEAP32[(17800)>>2] = $646;
    HEAP32[(17788)>>2] = $647;
    $648 = $647 | 1;
    $649 = ((($646)) + 4|0);
    HEAP32[$649>>2] = $648;
    $650 = (($646) + ($647)|0);
    $651 = ((($650)) + 4|0);
    HEAP32[$651>>2] = 40;
    $652 = HEAP32[(18264)>>2]|0;
    HEAP32[(17804)>>2] = $652;
   } else {
    $$024370$i = (18224);
    while(1) {
     $653 = HEAP32[$$024370$i>>2]|0;
     $654 = ((($$024370$i)) + 4|0);
     $655 = HEAP32[$654>>2]|0;
     $656 = (($653) + ($655)|0);
     $657 = ($$748$i|0)==($656|0);
     if ($657) {
      label = 200;
      break;
     }
     $658 = ((($$024370$i)) + 8|0);
     $659 = HEAP32[$658>>2]|0;
     $660 = ($659|0)==(0|0);
     if ($660) {
      break;
     } else {
      $$024370$i = $659;
     }
    }
    if ((label|0) == 200) {
     $661 = ((($$024370$i)) + 12|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = $662 & 8;
     $664 = ($663|0)==(0);
     if ($664) {
      $665 = ($627>>>0)>=($653>>>0);
      $666 = ($627>>>0)<($$748$i>>>0);
      $or$cond50$i = $666 & $665;
      if ($or$cond50$i) {
       $667 = (($655) + ($$723947$i))|0;
       HEAP32[$654>>2] = $667;
       $668 = HEAP32[(17788)>>2]|0;
       $669 = ((($627)) + 8|0);
       $670 = $669;
       $671 = $670 & 7;
       $672 = ($671|0)==(0);
       $673 = (0 - ($670))|0;
       $674 = $673 & 7;
       $675 = $672 ? 0 : $674;
       $676 = (($627) + ($675)|0);
       $677 = (($$723947$i) - ($675))|0;
       $678 = (($677) + ($668))|0;
       HEAP32[(17800)>>2] = $676;
       HEAP32[(17788)>>2] = $678;
       $679 = $678 | 1;
       $680 = ((($676)) + 4|0);
       HEAP32[$680>>2] = $679;
       $681 = (($676) + ($678)|0);
       $682 = ((($681)) + 4|0);
       HEAP32[$682>>2] = 40;
       $683 = HEAP32[(18264)>>2]|0;
       HEAP32[(17804)>>2] = $683;
       break;
      }
     }
    }
    $684 = HEAP32[(17792)>>2]|0;
    $685 = ($$748$i>>>0)<($684>>>0);
    if ($685) {
     HEAP32[(17792)>>2] = $$748$i;
     $749 = $$748$i;
    } else {
     $749 = $684;
    }
    $686 = (($$748$i) + ($$723947$i)|0);
    $$124469$i = (18224);
    while(1) {
     $687 = HEAP32[$$124469$i>>2]|0;
     $688 = ($687|0)==($686|0);
     if ($688) {
      label = 208;
      break;
     }
     $689 = ((($$124469$i)) + 8|0);
     $690 = HEAP32[$689>>2]|0;
     $691 = ($690|0)==(0|0);
     if ($691) {
      $$0$i$i$i = (18224);
      break;
     } else {
      $$124469$i = $690;
     }
    }
    if ((label|0) == 208) {
     $692 = ((($$124469$i)) + 12|0);
     $693 = HEAP32[$692>>2]|0;
     $694 = $693 & 8;
     $695 = ($694|0)==(0);
     if ($695) {
      HEAP32[$$124469$i>>2] = $$748$i;
      $696 = ((($$124469$i)) + 4|0);
      $697 = HEAP32[$696>>2]|0;
      $698 = (($697) + ($$723947$i))|0;
      HEAP32[$696>>2] = $698;
      $699 = ((($$748$i)) + 8|0);
      $700 = $699;
      $701 = $700 & 7;
      $702 = ($701|0)==(0);
      $703 = (0 - ($700))|0;
      $704 = $703 & 7;
      $705 = $702 ? 0 : $704;
      $706 = (($$748$i) + ($705)|0);
      $707 = ((($686)) + 8|0);
      $708 = $707;
      $709 = $708 & 7;
      $710 = ($709|0)==(0);
      $711 = (0 - ($708))|0;
      $712 = $711 & 7;
      $713 = $710 ? 0 : $712;
      $714 = (($686) + ($713)|0);
      $715 = $714;
      $716 = $706;
      $717 = (($715) - ($716))|0;
      $718 = (($706) + ($$0197)|0);
      $719 = (($717) - ($$0197))|0;
      $720 = $$0197 | 3;
      $721 = ((($706)) + 4|0);
      HEAP32[$721>>2] = $720;
      $722 = ($714|0)==($627|0);
      do {
       if ($722) {
        $723 = HEAP32[(17788)>>2]|0;
        $724 = (($723) + ($719))|0;
        HEAP32[(17788)>>2] = $724;
        HEAP32[(17800)>>2] = $718;
        $725 = $724 | 1;
        $726 = ((($718)) + 4|0);
        HEAP32[$726>>2] = $725;
       } else {
        $727 = HEAP32[(17796)>>2]|0;
        $728 = ($714|0)==($727|0);
        if ($728) {
         $729 = HEAP32[(17784)>>2]|0;
         $730 = (($729) + ($719))|0;
         HEAP32[(17784)>>2] = $730;
         HEAP32[(17796)>>2] = $718;
         $731 = $730 | 1;
         $732 = ((($718)) + 4|0);
         HEAP32[$732>>2] = $731;
         $733 = (($718) + ($730)|0);
         HEAP32[$733>>2] = $730;
         break;
        }
        $734 = ((($714)) + 4|0);
        $735 = HEAP32[$734>>2]|0;
        $736 = $735 & 3;
        $737 = ($736|0)==(1);
        if ($737) {
         $738 = $735 & -8;
         $739 = $735 >>> 3;
         $740 = ($735>>>0)<(256);
         L326: do {
          if ($740) {
           $741 = ((($714)) + 8|0);
           $742 = HEAP32[$741>>2]|0;
           $743 = ((($714)) + 12|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = $739 << 1;
           $746 = (17816 + ($745<<2)|0);
           $747 = ($742|0)==($746|0);
           do {
            if (!($747)) {
             $748 = ($742>>>0)<($749>>>0);
             if ($748) {
              _abort();
              // unreachable;
             }
             $750 = ((($742)) + 12|0);
             $751 = HEAP32[$750>>2]|0;
             $752 = ($751|0)==($714|0);
             if ($752) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $753 = ($744|0)==($742|0);
           if ($753) {
            $754 = 1 << $739;
            $755 = $754 ^ -1;
            $756 = HEAP32[4444]|0;
            $757 = $756 & $755;
            HEAP32[4444] = $757;
            break;
           }
           $758 = ($744|0)==($746|0);
           do {
            if ($758) {
             $$pre9$i$i = ((($744)) + 8|0);
             $$pre$phi10$i$iZ2D = $$pre9$i$i;
            } else {
             $759 = ($744>>>0)<($749>>>0);
             if ($759) {
              _abort();
              // unreachable;
             }
             $760 = ((($744)) + 8|0);
             $761 = HEAP32[$760>>2]|0;
             $762 = ($761|0)==($714|0);
             if ($762) {
              $$pre$phi10$i$iZ2D = $760;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $763 = ((($742)) + 12|0);
           HEAP32[$763>>2] = $744;
           HEAP32[$$pre$phi10$i$iZ2D>>2] = $742;
          } else {
           $764 = ((($714)) + 24|0);
           $765 = HEAP32[$764>>2]|0;
           $766 = ((($714)) + 12|0);
           $767 = HEAP32[$766>>2]|0;
           $768 = ($767|0)==($714|0);
           do {
            if ($768) {
             $778 = ((($714)) + 16|0);
             $779 = ((($778)) + 4|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==(0|0);
             if ($781) {
              $782 = HEAP32[$778>>2]|0;
              $783 = ($782|0)==(0|0);
              if ($783) {
               $$3$i$i = 0;
               break;
              } else {
               $$1290$i$i = $782;$$1292$i$i = $778;
              }
             } else {
              $$1290$i$i = $780;$$1292$i$i = $779;
             }
             while(1) {
              $784 = ((($$1290$i$i)) + 20|0);
              $785 = HEAP32[$784>>2]|0;
              $786 = ($785|0)==(0|0);
              if (!($786)) {
               $$1290$i$i = $785;$$1292$i$i = $784;
               continue;
              }
              $787 = ((($$1290$i$i)) + 16|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               break;
              } else {
               $$1290$i$i = $788;$$1292$i$i = $787;
              }
             }
             $790 = ($$1292$i$i>>>0)<($749>>>0);
             if ($790) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$$1292$i$i>>2] = 0;
              $$3$i$i = $$1290$i$i;
              break;
             }
            } else {
             $769 = ((($714)) + 8|0);
             $770 = HEAP32[$769>>2]|0;
             $771 = ($770>>>0)<($749>>>0);
             if ($771) {
              _abort();
              // unreachable;
             }
             $772 = ((($770)) + 12|0);
             $773 = HEAP32[$772>>2]|0;
             $774 = ($773|0)==($714|0);
             if (!($774)) {
              _abort();
              // unreachable;
             }
             $775 = ((($767)) + 8|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776|0)==($714|0);
             if ($777) {
              HEAP32[$772>>2] = $767;
              HEAP32[$775>>2] = $770;
              $$3$i$i = $767;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $791 = ($765|0)==(0|0);
           if ($791) {
            break;
           }
           $792 = ((($714)) + 28|0);
           $793 = HEAP32[$792>>2]|0;
           $794 = (18080 + ($793<<2)|0);
           $795 = HEAP32[$794>>2]|0;
           $796 = ($714|0)==($795|0);
           do {
            if ($796) {
             HEAP32[$794>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $797 = 1 << $793;
             $798 = $797 ^ -1;
             $799 = HEAP32[(17780)>>2]|0;
             $800 = $799 & $798;
             HEAP32[(17780)>>2] = $800;
             break L326;
            } else {
             $801 = HEAP32[(17792)>>2]|0;
             $802 = ($765>>>0)<($801>>>0);
             if ($802) {
              _abort();
              // unreachable;
             }
             $803 = ((($765)) + 16|0);
             $804 = HEAP32[$803>>2]|0;
             $805 = ($804|0)==($714|0);
             if ($805) {
              HEAP32[$803>>2] = $$3$i$i;
             } else {
              $806 = ((($765)) + 20|0);
              HEAP32[$806>>2] = $$3$i$i;
             }
             $807 = ($$3$i$i|0)==(0|0);
             if ($807) {
              break L326;
             }
            }
           } while(0);
           $808 = HEAP32[(17792)>>2]|0;
           $809 = ($$3$i$i>>>0)<($808>>>0);
           if ($809) {
            _abort();
            // unreachable;
           }
           $810 = ((($$3$i$i)) + 24|0);
           HEAP32[$810>>2] = $765;
           $811 = ((($714)) + 16|0);
           $812 = HEAP32[$811>>2]|0;
           $813 = ($812|0)==(0|0);
           do {
            if (!($813)) {
             $814 = ($812>>>0)<($808>>>0);
             if ($814) {
              _abort();
              // unreachable;
             } else {
              $815 = ((($$3$i$i)) + 16|0);
              HEAP32[$815>>2] = $812;
              $816 = ((($812)) + 24|0);
              HEAP32[$816>>2] = $$3$i$i;
              break;
             }
            }
           } while(0);
           $817 = ((($811)) + 4|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           if ($819) {
            break;
           }
           $820 = HEAP32[(17792)>>2]|0;
           $821 = ($818>>>0)<($820>>>0);
           if ($821) {
            _abort();
            // unreachable;
           } else {
            $822 = ((($$3$i$i)) + 20|0);
            HEAP32[$822>>2] = $818;
            $823 = ((($818)) + 24|0);
            HEAP32[$823>>2] = $$3$i$i;
            break;
           }
          }
         } while(0);
         $824 = (($714) + ($738)|0);
         $825 = (($738) + ($719))|0;
         $$0$i18$i = $824;$$0286$i$i = $825;
        } else {
         $$0$i18$i = $714;$$0286$i$i = $719;
        }
        $826 = ((($$0$i18$i)) + 4|0);
        $827 = HEAP32[$826>>2]|0;
        $828 = $827 & -2;
        HEAP32[$826>>2] = $828;
        $829 = $$0286$i$i | 1;
        $830 = ((($718)) + 4|0);
        HEAP32[$830>>2] = $829;
        $831 = (($718) + ($$0286$i$i)|0);
        HEAP32[$831>>2] = $$0286$i$i;
        $832 = $$0286$i$i >>> 3;
        $833 = ($$0286$i$i>>>0)<(256);
        if ($833) {
         $834 = $832 << 1;
         $835 = (17816 + ($834<<2)|0);
         $836 = HEAP32[4444]|0;
         $837 = 1 << $832;
         $838 = $836 & $837;
         $839 = ($838|0)==(0);
         do {
          if ($839) {
           $840 = $836 | $837;
           HEAP32[4444] = $840;
           $$pre$i19$i = ((($835)) + 8|0);
           $$0294$i$i = $835;$$pre$phi$i20$iZ2D = $$pre$i19$i;
          } else {
           $841 = ((($835)) + 8|0);
           $842 = HEAP32[$841>>2]|0;
           $843 = HEAP32[(17792)>>2]|0;
           $844 = ($842>>>0)<($843>>>0);
           if (!($844)) {
            $$0294$i$i = $842;$$pre$phi$i20$iZ2D = $841;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i20$iZ2D>>2] = $718;
         $845 = ((($$0294$i$i)) + 12|0);
         HEAP32[$845>>2] = $718;
         $846 = ((($718)) + 8|0);
         HEAP32[$846>>2] = $$0294$i$i;
         $847 = ((($718)) + 12|0);
         HEAP32[$847>>2] = $835;
         break;
        }
        $848 = $$0286$i$i >>> 8;
        $849 = ($848|0)==(0);
        do {
         if ($849) {
          $$0295$i$i = 0;
         } else {
          $850 = ($$0286$i$i>>>0)>(16777215);
          if ($850) {
           $$0295$i$i = 31;
           break;
          }
          $851 = (($848) + 1048320)|0;
          $852 = $851 >>> 16;
          $853 = $852 & 8;
          $854 = $848 << $853;
          $855 = (($854) + 520192)|0;
          $856 = $855 >>> 16;
          $857 = $856 & 4;
          $858 = $857 | $853;
          $859 = $854 << $857;
          $860 = (($859) + 245760)|0;
          $861 = $860 >>> 16;
          $862 = $861 & 2;
          $863 = $858 | $862;
          $864 = (14 - ($863))|0;
          $865 = $859 << $862;
          $866 = $865 >>> 15;
          $867 = (($864) + ($866))|0;
          $868 = $867 << 1;
          $869 = (($867) + 7)|0;
          $870 = $$0286$i$i >>> $869;
          $871 = $870 & 1;
          $872 = $871 | $868;
          $$0295$i$i = $872;
         }
        } while(0);
        $873 = (18080 + ($$0295$i$i<<2)|0);
        $874 = ((($718)) + 28|0);
        HEAP32[$874>>2] = $$0295$i$i;
        $875 = ((($718)) + 16|0);
        $876 = ((($875)) + 4|0);
        HEAP32[$876>>2] = 0;
        HEAP32[$875>>2] = 0;
        $877 = HEAP32[(17780)>>2]|0;
        $878 = 1 << $$0295$i$i;
        $879 = $877 & $878;
        $880 = ($879|0)==(0);
        if ($880) {
         $881 = $877 | $878;
         HEAP32[(17780)>>2] = $881;
         HEAP32[$873>>2] = $718;
         $882 = ((($718)) + 24|0);
         HEAP32[$882>>2] = $873;
         $883 = ((($718)) + 12|0);
         HEAP32[$883>>2] = $718;
         $884 = ((($718)) + 8|0);
         HEAP32[$884>>2] = $718;
         break;
        }
        $885 = HEAP32[$873>>2]|0;
        $886 = ($$0295$i$i|0)==(31);
        $887 = $$0295$i$i >>> 1;
        $888 = (25 - ($887))|0;
        $889 = $886 ? 0 : $888;
        $890 = $$0286$i$i << $889;
        $$0287$i$i = $890;$$0288$i$i = $885;
        while(1) {
         $891 = ((($$0288$i$i)) + 4|0);
         $892 = HEAP32[$891>>2]|0;
         $893 = $892 & -8;
         $894 = ($893|0)==($$0286$i$i|0);
         if ($894) {
          label = 278;
          break;
         }
         $895 = $$0287$i$i >>> 31;
         $896 = (((($$0288$i$i)) + 16|0) + ($895<<2)|0);
         $897 = $$0287$i$i << 1;
         $898 = HEAP32[$896>>2]|0;
         $899 = ($898|0)==(0|0);
         if ($899) {
          label = 275;
          break;
         } else {
          $$0287$i$i = $897;$$0288$i$i = $898;
         }
        }
        if ((label|0) == 275) {
         $900 = HEAP32[(17792)>>2]|0;
         $901 = ($896>>>0)<($900>>>0);
         if ($901) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$896>>2] = $718;
          $902 = ((($718)) + 24|0);
          HEAP32[$902>>2] = $$0288$i$i;
          $903 = ((($718)) + 12|0);
          HEAP32[$903>>2] = $718;
          $904 = ((($718)) + 8|0);
          HEAP32[$904>>2] = $718;
          break;
         }
        }
        else if ((label|0) == 278) {
         $905 = ((($$0288$i$i)) + 8|0);
         $906 = HEAP32[$905>>2]|0;
         $907 = HEAP32[(17792)>>2]|0;
         $908 = ($906>>>0)>=($907>>>0);
         $not$$i22$i = ($$0288$i$i>>>0)>=($907>>>0);
         $909 = $908 & $not$$i22$i;
         if ($909) {
          $910 = ((($906)) + 12|0);
          HEAP32[$910>>2] = $718;
          HEAP32[$905>>2] = $718;
          $911 = ((($718)) + 8|0);
          HEAP32[$911>>2] = $906;
          $912 = ((($718)) + 12|0);
          HEAP32[$912>>2] = $$0288$i$i;
          $913 = ((($718)) + 24|0);
          HEAP32[$913>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1044 = ((($706)) + 8|0);
      $$0 = $1044;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0$i$i$i = (18224);
     }
    }
    while(1) {
     $914 = HEAP32[$$0$i$i$i>>2]|0;
     $915 = ($914>>>0)>($627>>>0);
     if (!($915)) {
      $916 = ((($$0$i$i$i)) + 4|0);
      $917 = HEAP32[$916>>2]|0;
      $918 = (($914) + ($917)|0);
      $919 = ($918>>>0)>($627>>>0);
      if ($919) {
       break;
      }
     }
     $920 = ((($$0$i$i$i)) + 8|0);
     $921 = HEAP32[$920>>2]|0;
     $$0$i$i$i = $921;
    }
    $922 = ((($918)) + -47|0);
    $923 = ((($922)) + 8|0);
    $924 = $923;
    $925 = $924 & 7;
    $926 = ($925|0)==(0);
    $927 = (0 - ($924))|0;
    $928 = $927 & 7;
    $929 = $926 ? 0 : $928;
    $930 = (($922) + ($929)|0);
    $931 = ((($627)) + 16|0);
    $932 = ($930>>>0)<($931>>>0);
    $933 = $932 ? $627 : $930;
    $934 = ((($933)) + 8|0);
    $935 = ((($933)) + 24|0);
    $936 = (($$723947$i) + -40)|0;
    $937 = ((($$748$i)) + 8|0);
    $938 = $937;
    $939 = $938 & 7;
    $940 = ($939|0)==(0);
    $941 = (0 - ($938))|0;
    $942 = $941 & 7;
    $943 = $940 ? 0 : $942;
    $944 = (($$748$i) + ($943)|0);
    $945 = (($936) - ($943))|0;
    HEAP32[(17800)>>2] = $944;
    HEAP32[(17788)>>2] = $945;
    $946 = $945 | 1;
    $947 = ((($944)) + 4|0);
    HEAP32[$947>>2] = $946;
    $948 = (($944) + ($945)|0);
    $949 = ((($948)) + 4|0);
    HEAP32[$949>>2] = 40;
    $950 = HEAP32[(18264)>>2]|0;
    HEAP32[(17804)>>2] = $950;
    $951 = ((($933)) + 4|0);
    HEAP32[$951>>2] = 27;
    ;HEAP32[$934>>2]=HEAP32[(18224)>>2]|0;HEAP32[$934+4>>2]=HEAP32[(18224)+4>>2]|0;HEAP32[$934+8>>2]=HEAP32[(18224)+8>>2]|0;HEAP32[$934+12>>2]=HEAP32[(18224)+12>>2]|0;
    HEAP32[(18224)>>2] = $$748$i;
    HEAP32[(18228)>>2] = $$723947$i;
    HEAP32[(18236)>>2] = 0;
    HEAP32[(18232)>>2] = $934;
    $$0$i$i = $935;
    while(1) {
     $952 = ((($$0$i$i)) + 4|0);
     HEAP32[$952>>2] = 7;
     $953 = ((($952)) + 4|0);
     $954 = ($953>>>0)<($918>>>0);
     if ($954) {
      $$0$i$i = $952;
     } else {
      break;
     }
    }
    $955 = ($933|0)==($627|0);
    if (!($955)) {
     $956 = $933;
     $957 = $627;
     $958 = (($956) - ($957))|0;
     $959 = HEAP32[$951>>2]|0;
     $960 = $959 & -2;
     HEAP32[$951>>2] = $960;
     $961 = $958 | 1;
     $962 = ((($627)) + 4|0);
     HEAP32[$962>>2] = $961;
     HEAP32[$933>>2] = $958;
     $963 = $958 >>> 3;
     $964 = ($958>>>0)<(256);
     if ($964) {
      $965 = $963 << 1;
      $966 = (17816 + ($965<<2)|0);
      $967 = HEAP32[4444]|0;
      $968 = 1 << $963;
      $969 = $967 & $968;
      $970 = ($969|0)==(0);
      if ($970) {
       $971 = $967 | $968;
       HEAP32[4444] = $971;
       $$pre$i$i = ((($966)) + 8|0);
       $$0211$i$i = $966;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $972 = ((($966)) + 8|0);
       $973 = HEAP32[$972>>2]|0;
       $974 = HEAP32[(17792)>>2]|0;
       $975 = ($973>>>0)<($974>>>0);
       if ($975) {
        _abort();
        // unreachable;
       } else {
        $$0211$i$i = $973;$$pre$phi$i$iZ2D = $972;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $627;
      $976 = ((($$0211$i$i)) + 12|0);
      HEAP32[$976>>2] = $627;
      $977 = ((($627)) + 8|0);
      HEAP32[$977>>2] = $$0211$i$i;
      $978 = ((($627)) + 12|0);
      HEAP32[$978>>2] = $966;
      break;
     }
     $979 = $958 >>> 8;
     $980 = ($979|0)==(0);
     if ($980) {
      $$0212$i$i = 0;
     } else {
      $981 = ($958>>>0)>(16777215);
      if ($981) {
       $$0212$i$i = 31;
      } else {
       $982 = (($979) + 1048320)|0;
       $983 = $982 >>> 16;
       $984 = $983 & 8;
       $985 = $979 << $984;
       $986 = (($985) + 520192)|0;
       $987 = $986 >>> 16;
       $988 = $987 & 4;
       $989 = $988 | $984;
       $990 = $985 << $988;
       $991 = (($990) + 245760)|0;
       $992 = $991 >>> 16;
       $993 = $992 & 2;
       $994 = $989 | $993;
       $995 = (14 - ($994))|0;
       $996 = $990 << $993;
       $997 = $996 >>> 15;
       $998 = (($995) + ($997))|0;
       $999 = $998 << 1;
       $1000 = (($998) + 7)|0;
       $1001 = $958 >>> $1000;
       $1002 = $1001 & 1;
       $1003 = $1002 | $999;
       $$0212$i$i = $1003;
      }
     }
     $1004 = (18080 + ($$0212$i$i<<2)|0);
     $1005 = ((($627)) + 28|0);
     HEAP32[$1005>>2] = $$0212$i$i;
     $1006 = ((($627)) + 20|0);
     HEAP32[$1006>>2] = 0;
     HEAP32[$931>>2] = 0;
     $1007 = HEAP32[(17780)>>2]|0;
     $1008 = 1 << $$0212$i$i;
     $1009 = $1007 & $1008;
     $1010 = ($1009|0)==(0);
     if ($1010) {
      $1011 = $1007 | $1008;
      HEAP32[(17780)>>2] = $1011;
      HEAP32[$1004>>2] = $627;
      $1012 = ((($627)) + 24|0);
      HEAP32[$1012>>2] = $1004;
      $1013 = ((($627)) + 12|0);
      HEAP32[$1013>>2] = $627;
      $1014 = ((($627)) + 8|0);
      HEAP32[$1014>>2] = $627;
      break;
     }
     $1015 = HEAP32[$1004>>2]|0;
     $1016 = ($$0212$i$i|0)==(31);
     $1017 = $$0212$i$i >>> 1;
     $1018 = (25 - ($1017))|0;
     $1019 = $1016 ? 0 : $1018;
     $1020 = $958 << $1019;
     $$0206$i$i = $1020;$$0207$i$i = $1015;
     while(1) {
      $1021 = ((($$0207$i$i)) + 4|0);
      $1022 = HEAP32[$1021>>2]|0;
      $1023 = $1022 & -8;
      $1024 = ($1023|0)==($958|0);
      if ($1024) {
       label = 304;
       break;
      }
      $1025 = $$0206$i$i >>> 31;
      $1026 = (((($$0207$i$i)) + 16|0) + ($1025<<2)|0);
      $1027 = $$0206$i$i << 1;
      $1028 = HEAP32[$1026>>2]|0;
      $1029 = ($1028|0)==(0|0);
      if ($1029) {
       label = 301;
       break;
      } else {
       $$0206$i$i = $1027;$$0207$i$i = $1028;
      }
     }
     if ((label|0) == 301) {
      $1030 = HEAP32[(17792)>>2]|0;
      $1031 = ($1026>>>0)<($1030>>>0);
      if ($1031) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$1026>>2] = $627;
       $1032 = ((($627)) + 24|0);
       HEAP32[$1032>>2] = $$0207$i$i;
       $1033 = ((($627)) + 12|0);
       HEAP32[$1033>>2] = $627;
       $1034 = ((($627)) + 8|0);
       HEAP32[$1034>>2] = $627;
       break;
      }
     }
     else if ((label|0) == 304) {
      $1035 = ((($$0207$i$i)) + 8|0);
      $1036 = HEAP32[$1035>>2]|0;
      $1037 = HEAP32[(17792)>>2]|0;
      $1038 = ($1036>>>0)>=($1037>>>0);
      $not$$i$i = ($$0207$i$i>>>0)>=($1037>>>0);
      $1039 = $1038 & $not$$i$i;
      if ($1039) {
       $1040 = ((($1036)) + 12|0);
       HEAP32[$1040>>2] = $627;
       HEAP32[$1035>>2] = $627;
       $1041 = ((($627)) + 8|0);
       HEAP32[$1041>>2] = $1036;
       $1042 = ((($627)) + 12|0);
       HEAP32[$1042>>2] = $$0207$i$i;
       $1043 = ((($627)) + 24|0);
       HEAP32[$1043>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1045 = HEAP32[(17788)>>2]|0;
  $1046 = ($1045>>>0)>($$0197>>>0);
  if ($1046) {
   $1047 = (($1045) - ($$0197))|0;
   HEAP32[(17788)>>2] = $1047;
   $1048 = HEAP32[(17800)>>2]|0;
   $1049 = (($1048) + ($$0197)|0);
   HEAP32[(17800)>>2] = $1049;
   $1050 = $1047 | 1;
   $1051 = ((($1049)) + 4|0);
   HEAP32[$1051>>2] = $1050;
   $1052 = $$0197 | 3;
   $1053 = ((($1048)) + 4|0);
   HEAP32[$1053>>2] = $1052;
   $1054 = ((($1048)) + 8|0);
   $$0 = $1054;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1055 = (___errno_location()|0);
 HEAP32[$1055>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0211$i = 0, $$0211$in$i = 0, $$0381 = 0, $$0382 = 0, $$0394 = 0, $$0401 = 0, $$1 = 0, $$1380 = 0, $$1385 = 0, $$1388 = 0, $$1396 = 0, $$1400 = 0, $$2 = 0, $$3 = 0, $$3398 = 0, $$pre = 0, $$pre$phi439Z2D = 0, $$pre$phi441Z2D = 0, $$pre$phiZ2D = 0, $$pre438 = 0;
 var $$pre440 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond418 = 0, $cond419 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(17792)>>2]|0;
 $4 = ($2>>>0)<($3>>>0);
 if ($4) {
  _abort();
  // unreachable;
 }
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 3;
 $8 = ($7|0)==(1);
 if ($8) {
  _abort();
  // unreachable;
 }
 $9 = $6 & -8;
 $10 = (($2) + ($9)|0);
 $11 = $6 & 1;
 $12 = ($11|0)==(0);
 do {
  if ($12) {
   $13 = HEAP32[$2>>2]|0;
   $14 = ($7|0)==(0);
   if ($14) {
    return;
   }
   $15 = (0 - ($13))|0;
   $16 = (($2) + ($15)|0);
   $17 = (($13) + ($9))|0;
   $18 = ($16>>>0)<($3>>>0);
   if ($18) {
    _abort();
    // unreachable;
   }
   $19 = HEAP32[(17796)>>2]|0;
   $20 = ($16|0)==($19|0);
   if ($20) {
    $105 = ((($10)) + 4|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $106 & 3;
    $108 = ($107|0)==(3);
    if (!($108)) {
     $$1 = $16;$$1380 = $17;
     break;
    }
    HEAP32[(17784)>>2] = $17;
    $109 = $106 & -2;
    HEAP32[$105>>2] = $109;
    $110 = $17 | 1;
    $111 = ((($16)) + 4|0);
    HEAP32[$111>>2] = $110;
    $112 = (($16) + ($17)|0);
    HEAP32[$112>>2] = $17;
    return;
   }
   $21 = $13 >>> 3;
   $22 = ($13>>>0)<(256);
   if ($22) {
    $23 = ((($16)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($16)) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $21 << 1;
    $28 = (17816 + ($27<<2)|0);
    $29 = ($24|0)==($28|0);
    if (!($29)) {
     $30 = ($24>>>0)<($3>>>0);
     if ($30) {
      _abort();
      // unreachable;
     }
     $31 = ((($24)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==($16|0);
     if (!($33)) {
      _abort();
      // unreachable;
     }
    }
    $34 = ($26|0)==($24|0);
    if ($34) {
     $35 = 1 << $21;
     $36 = $35 ^ -1;
     $37 = HEAP32[4444]|0;
     $38 = $37 & $36;
     HEAP32[4444] = $38;
     $$1 = $16;$$1380 = $17;
     break;
    }
    $39 = ($26|0)==($28|0);
    if ($39) {
     $$pre440 = ((($26)) + 8|0);
     $$pre$phi441Z2D = $$pre440;
    } else {
     $40 = ($26>>>0)<($3>>>0);
     if ($40) {
      _abort();
      // unreachable;
     }
     $41 = ((($26)) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==($16|0);
     if ($43) {
      $$pre$phi441Z2D = $41;
     } else {
      _abort();
      // unreachable;
     }
    }
    $44 = ((($24)) + 12|0);
    HEAP32[$44>>2] = $26;
    HEAP32[$$pre$phi441Z2D>>2] = $24;
    $$1 = $16;$$1380 = $17;
    break;
   }
   $45 = ((($16)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($16)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==($16|0);
   do {
    if ($49) {
     $59 = ((($16)) + 16|0);
     $60 = ((($59)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(0|0);
     if ($62) {
      $63 = HEAP32[$59>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $$3 = 0;
       break;
      } else {
       $$1385 = $63;$$1388 = $59;
      }
     } else {
      $$1385 = $61;$$1388 = $60;
     }
     while(1) {
      $65 = ((($$1385)) + 20|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($66|0)==(0|0);
      if (!($67)) {
       $$1385 = $66;$$1388 = $65;
       continue;
      }
      $68 = ((($$1385)) + 16|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==(0|0);
      if ($70) {
       break;
      } else {
       $$1385 = $69;$$1388 = $68;
      }
     }
     $71 = ($$1388>>>0)<($3>>>0);
     if ($71) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1388>>2] = 0;
      $$3 = $$1385;
      break;
     }
    } else {
     $50 = ((($16)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51>>>0)<($3>>>0);
     if ($52) {
      _abort();
      // unreachable;
     }
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==($16|0);
     if (!($55)) {
      _abort();
      // unreachable;
     }
     $56 = ((($48)) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==($16|0);
     if ($58) {
      HEAP32[$53>>2] = $48;
      HEAP32[$56>>2] = $51;
      $$3 = $48;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $72 = ($46|0)==(0|0);
   if ($72) {
    $$1 = $16;$$1380 = $17;
   } else {
    $73 = ((($16)) + 28|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (18080 + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($16|0)==($76|0);
    if ($77) {
     HEAP32[$75>>2] = $$3;
     $cond418 = ($$3|0)==(0|0);
     if ($cond418) {
      $78 = 1 << $74;
      $79 = $78 ^ -1;
      $80 = HEAP32[(17780)>>2]|0;
      $81 = $80 & $79;
      HEAP32[(17780)>>2] = $81;
      $$1 = $16;$$1380 = $17;
      break;
     }
    } else {
     $82 = HEAP32[(17792)>>2]|0;
     $83 = ($46>>>0)<($82>>>0);
     if ($83) {
      _abort();
      // unreachable;
     }
     $84 = ((($46)) + 16|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = ($85|0)==($16|0);
     if ($86) {
      HEAP32[$84>>2] = $$3;
     } else {
      $87 = ((($46)) + 20|0);
      HEAP32[$87>>2] = $$3;
     }
     $88 = ($$3|0)==(0|0);
     if ($88) {
      $$1 = $16;$$1380 = $17;
      break;
     }
    }
    $89 = HEAP32[(17792)>>2]|0;
    $90 = ($$3>>>0)<($89>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($$3)) + 24|0);
    HEAP32[$91>>2] = $46;
    $92 = ((($16)) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    do {
     if (!($94)) {
      $95 = ($93>>>0)<($89>>>0);
      if ($95) {
       _abort();
       // unreachable;
      } else {
       $96 = ((($$3)) + 16|0);
       HEAP32[$96>>2] = $93;
       $97 = ((($93)) + 24|0);
       HEAP32[$97>>2] = $$3;
       break;
      }
     }
    } while(0);
    $98 = ((($92)) + 4|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($99|0)==(0|0);
    if ($100) {
     $$1 = $16;$$1380 = $17;
    } else {
     $101 = HEAP32[(17792)>>2]|0;
     $102 = ($99>>>0)<($101>>>0);
     if ($102) {
      _abort();
      // unreachable;
     } else {
      $103 = ((($$3)) + 20|0);
      HEAP32[$103>>2] = $99;
      $104 = ((($99)) + 24|0);
      HEAP32[$104>>2] = $$3;
      $$1 = $16;$$1380 = $17;
      break;
     }
    }
   }
  } else {
   $$1 = $2;$$1380 = $9;
  }
 } while(0);
 $113 = ($$1>>>0)<($10>>>0);
 if (!($113)) {
  _abort();
  // unreachable;
 }
 $114 = ((($10)) + 4|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = $115 & 1;
 $117 = ($116|0)==(0);
 if ($117) {
  _abort();
  // unreachable;
 }
 $118 = $115 & 2;
 $119 = ($118|0)==(0);
 if ($119) {
  $120 = HEAP32[(17800)>>2]|0;
  $121 = ($10|0)==($120|0);
  if ($121) {
   $122 = HEAP32[(17788)>>2]|0;
   $123 = (($122) + ($$1380))|0;
   HEAP32[(17788)>>2] = $123;
   HEAP32[(17800)>>2] = $$1;
   $124 = $123 | 1;
   $125 = ((($$1)) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = HEAP32[(17796)>>2]|0;
   $127 = ($$1|0)==($126|0);
   if (!($127)) {
    return;
   }
   HEAP32[(17796)>>2] = 0;
   HEAP32[(17784)>>2] = 0;
   return;
  }
  $128 = HEAP32[(17796)>>2]|0;
  $129 = ($10|0)==($128|0);
  if ($129) {
   $130 = HEAP32[(17784)>>2]|0;
   $131 = (($130) + ($$1380))|0;
   HEAP32[(17784)>>2] = $131;
   HEAP32[(17796)>>2] = $$1;
   $132 = $131 | 1;
   $133 = ((($$1)) + 4|0);
   HEAP32[$133>>2] = $132;
   $134 = (($$1) + ($131)|0);
   HEAP32[$134>>2] = $131;
   return;
  }
  $135 = $115 & -8;
  $136 = (($135) + ($$1380))|0;
  $137 = $115 >>> 3;
  $138 = ($115>>>0)<(256);
  do {
   if ($138) {
    $139 = ((($10)) + 8|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ((($10)) + 12|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = $137 << 1;
    $144 = (17816 + ($143<<2)|0);
    $145 = ($140|0)==($144|0);
    if (!($145)) {
     $146 = HEAP32[(17792)>>2]|0;
     $147 = ($140>>>0)<($146>>>0);
     if ($147) {
      _abort();
      // unreachable;
     }
     $148 = ((($140)) + 12|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = ($149|0)==($10|0);
     if (!($150)) {
      _abort();
      // unreachable;
     }
    }
    $151 = ($142|0)==($140|0);
    if ($151) {
     $152 = 1 << $137;
     $153 = $152 ^ -1;
     $154 = HEAP32[4444]|0;
     $155 = $154 & $153;
     HEAP32[4444] = $155;
     break;
    }
    $156 = ($142|0)==($144|0);
    if ($156) {
     $$pre438 = ((($142)) + 8|0);
     $$pre$phi439Z2D = $$pre438;
    } else {
     $157 = HEAP32[(17792)>>2]|0;
     $158 = ($142>>>0)<($157>>>0);
     if ($158) {
      _abort();
      // unreachable;
     }
     $159 = ((($142)) + 8|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ($160|0)==($10|0);
     if ($161) {
      $$pre$phi439Z2D = $159;
     } else {
      _abort();
      // unreachable;
     }
    }
    $162 = ((($140)) + 12|0);
    HEAP32[$162>>2] = $142;
    HEAP32[$$pre$phi439Z2D>>2] = $140;
   } else {
    $163 = ((($10)) + 24|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = ((($10)) + 12|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = ($166|0)==($10|0);
    do {
     if ($167) {
      $178 = ((($10)) + 16|0);
      $179 = ((($178)) + 4|0);
      $180 = HEAP32[$179>>2]|0;
      $181 = ($180|0)==(0|0);
      if ($181) {
       $182 = HEAP32[$178>>2]|0;
       $183 = ($182|0)==(0|0);
       if ($183) {
        $$3398 = 0;
        break;
       } else {
        $$1396 = $182;$$1400 = $178;
       }
      } else {
       $$1396 = $180;$$1400 = $179;
      }
      while(1) {
       $184 = ((($$1396)) + 20|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if (!($186)) {
        $$1396 = $185;$$1400 = $184;
        continue;
       }
       $187 = ((($$1396)) + 16|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = ($188|0)==(0|0);
       if ($189) {
        break;
       } else {
        $$1396 = $188;$$1400 = $187;
       }
      }
      $190 = HEAP32[(17792)>>2]|0;
      $191 = ($$1400>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1400>>2] = 0;
       $$3398 = $$1396;
       break;
      }
     } else {
      $168 = ((($10)) + 8|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = HEAP32[(17792)>>2]|0;
      $171 = ($169>>>0)<($170>>>0);
      if ($171) {
       _abort();
       // unreachable;
      }
      $172 = ((($169)) + 12|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($10|0);
      if (!($174)) {
       _abort();
       // unreachable;
      }
      $175 = ((($166)) + 8|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==($10|0);
      if ($177) {
       HEAP32[$172>>2] = $166;
       HEAP32[$175>>2] = $169;
       $$3398 = $166;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $192 = ($164|0)==(0|0);
    if (!($192)) {
     $193 = ((($10)) + 28|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = (18080 + ($194<<2)|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = ($10|0)==($196|0);
     if ($197) {
      HEAP32[$195>>2] = $$3398;
      $cond419 = ($$3398|0)==(0|0);
      if ($cond419) {
       $198 = 1 << $194;
       $199 = $198 ^ -1;
       $200 = HEAP32[(17780)>>2]|0;
       $201 = $200 & $199;
       HEAP32[(17780)>>2] = $201;
       break;
      }
     } else {
      $202 = HEAP32[(17792)>>2]|0;
      $203 = ($164>>>0)<($202>>>0);
      if ($203) {
       _abort();
       // unreachable;
      }
      $204 = ((($164)) + 16|0);
      $205 = HEAP32[$204>>2]|0;
      $206 = ($205|0)==($10|0);
      if ($206) {
       HEAP32[$204>>2] = $$3398;
      } else {
       $207 = ((($164)) + 20|0);
       HEAP32[$207>>2] = $$3398;
      }
      $208 = ($$3398|0)==(0|0);
      if ($208) {
       break;
      }
     }
     $209 = HEAP32[(17792)>>2]|0;
     $210 = ($$3398>>>0)<($209>>>0);
     if ($210) {
      _abort();
      // unreachable;
     }
     $211 = ((($$3398)) + 24|0);
     HEAP32[$211>>2] = $164;
     $212 = ((($10)) + 16|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = ($213|0)==(0|0);
     do {
      if (!($214)) {
       $215 = ($213>>>0)<($209>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = ((($$3398)) + 16|0);
        HEAP32[$216>>2] = $213;
        $217 = ((($213)) + 24|0);
        HEAP32[$217>>2] = $$3398;
        break;
       }
      }
     } while(0);
     $218 = ((($212)) + 4|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[(17792)>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = ((($$3398)) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = ((($219)) + 24|0);
       HEAP32[$224>>2] = $$3398;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $136 | 1;
  $226 = ((($$1)) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($$1) + ($136)|0);
  HEAP32[$227>>2] = $136;
  $228 = HEAP32[(17796)>>2]|0;
  $229 = ($$1|0)==($228|0);
  if ($229) {
   HEAP32[(17784)>>2] = $136;
   return;
  } else {
   $$2 = $136;
  }
 } else {
  $230 = $115 & -2;
  HEAP32[$114>>2] = $230;
  $231 = $$1380 | 1;
  $232 = ((($$1)) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($$1) + ($$1380)|0);
  HEAP32[$233>>2] = $$1380;
  $$2 = $$1380;
 }
 $234 = $$2 >>> 3;
 $235 = ($$2>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = (17816 + ($236<<2)|0);
  $238 = HEAP32[4444]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[4444] = $242;
   $$pre = ((($237)) + 8|0);
   $$0401 = $237;$$pre$phiZ2D = $$pre;
  } else {
   $243 = ((($237)) + 8|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[(17792)>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$0401 = $244;$$pre$phiZ2D = $243;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $247 = ((($$0401)) + 12|0);
  HEAP32[$247>>2] = $$1;
  $248 = ((($$1)) + 8|0);
  HEAP32[$248>>2] = $$0401;
  $249 = ((($$1)) + 12|0);
  HEAP32[$249>>2] = $237;
  return;
 }
 $250 = $$2 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $$0394 = 0;
 } else {
  $252 = ($$2>>>0)>(16777215);
  if ($252) {
   $$0394 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $$2 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $$0394 = $274;
  }
 }
 $275 = (18080 + ($$0394<<2)|0);
 $276 = ((($$1)) + 28|0);
 HEAP32[$276>>2] = $$0394;
 $277 = ((($$1)) + 16|0);
 $278 = ((($$1)) + 20|0);
 HEAP32[$278>>2] = 0;
 HEAP32[$277>>2] = 0;
 $279 = HEAP32[(17780)>>2]|0;
 $280 = 1 << $$0394;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[(17780)>>2] = $283;
   HEAP32[$275>>2] = $$1;
   $284 = ((($$1)) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = ((($$1)) + 12|0);
   HEAP32[$285>>2] = $$1;
   $286 = ((($$1)) + 8|0);
   HEAP32[$286>>2] = $$1;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($$0394|0)==(31);
   $289 = $$0394 >>> 1;
   $290 = (25 - ($289))|0;
   $291 = $288 ? 0 : $290;
   $292 = $$2 << $291;
   $$0381 = $292;$$0382 = $287;
   while(1) {
    $293 = ((($$0382)) + 4|0);
    $294 = HEAP32[$293>>2]|0;
    $295 = $294 & -8;
    $296 = ($295|0)==($$2|0);
    if ($296) {
     label = 130;
     break;
    }
    $297 = $$0381 >>> 31;
    $298 = (((($$0382)) + 16|0) + ($297<<2)|0);
    $299 = $$0381 << 1;
    $300 = HEAP32[$298>>2]|0;
    $301 = ($300|0)==(0|0);
    if ($301) {
     label = 127;
     break;
    } else {
     $$0381 = $299;$$0382 = $300;
    }
   }
   if ((label|0) == 127) {
    $302 = HEAP32[(17792)>>2]|0;
    $303 = ($298>>>0)<($302>>>0);
    if ($303) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$298>>2] = $$1;
     $304 = ((($$1)) + 24|0);
     HEAP32[$304>>2] = $$0382;
     $305 = ((($$1)) + 12|0);
     HEAP32[$305>>2] = $$1;
     $306 = ((($$1)) + 8|0);
     HEAP32[$306>>2] = $$1;
     break;
    }
   }
   else if ((label|0) == 130) {
    $307 = ((($$0382)) + 8|0);
    $308 = HEAP32[$307>>2]|0;
    $309 = HEAP32[(17792)>>2]|0;
    $310 = ($308>>>0)>=($309>>>0);
    $not$ = ($$0382>>>0)>=($309>>>0);
    $311 = $310 & $not$;
    if ($311) {
     $312 = ((($308)) + 12|0);
     HEAP32[$312>>2] = $$1;
     HEAP32[$307>>2] = $$1;
     $313 = ((($$1)) + 8|0);
     HEAP32[$313>>2] = $308;
     $314 = ((($$1)) + 12|0);
     HEAP32[$314>>2] = $$0382;
     $315 = ((($$1)) + 24|0);
     HEAP32[$315>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $316 = HEAP32[(17808)>>2]|0;
 $317 = (($316) + -1)|0;
 HEAP32[(17808)>>2] = $317;
 $318 = ($317|0)==(0);
 if ($318) {
  $$0211$in$i = (18232);
 } else {
  return;
 }
 while(1) {
  $$0211$i = HEAP32[$$0211$in$i>>2]|0;
  $319 = ($$0211$i|0)==(0|0);
  $320 = ((($$0211$i)) + 8|0);
  if ($319) {
   break;
  } else {
   $$0211$in$i = $320;
  }
 }
 HEAP32[(17808)>>2] = -1;
 return;
}
function _calloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = Math_imul($1, $0)|0;
  $4 = $1 | $0;
  $5 = ($4>>>0)>(65535);
  if ($5) {
   $6 = (($3>>>0) / ($0>>>0))&-1;
   $7 = ($6|0)==($1|0);
   $$ = $7 ? $3 : -1;
   $$0 = $$;
  } else {
   $$0 = $3;
  }
 }
 $8 = (_malloc($$0)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  return ($8|0);
 }
 $10 = ((($8)) + -4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 3;
 $13 = ($12|0)==(0);
 if ($13) {
  return ($8|0);
 }
 _memset(($8|0),0,($$0|0))|0;
 return ($8|0);
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 _memcpy(($14|0),($0|0),($24|0))|0;
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1271 = 0, $$1274 = 0, $$2 = 0, $$3 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cond = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond3 = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = HEAP32[(17792)>>2]|0;
 $7 = $3 & 3;
 $notlhs = ($0>>>0)>=($6>>>0);
 $notrhs = ($7|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $8 = ($0>>>0)<($5>>>0);
 $or$cond3 = $or$cond$not & $8;
 if (!($or$cond3)) {
  _abort();
  // unreachable;
 }
 $9 = ((($5)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _abort();
  // unreachable;
 }
 $13 = ($7|0)==(0);
 if ($13) {
  $14 = ($1>>>0)<(256);
  if ($14) {
   $$2 = 0;
   return ($$2|0);
  }
  $15 = (($1) + 4)|0;
  $16 = ($4>>>0)<($15>>>0);
  if (!($16)) {
   $17 = (($4) - ($1))|0;
   $18 = HEAP32[(18256)>>2]|0;
   $19 = $18 << 1;
   $20 = ($17>>>0)>($19>>>0);
   if (!($20)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $21 = ($4>>>0)<($1>>>0);
 if (!($21)) {
  $22 = (($4) - ($1))|0;
  $23 = ($22>>>0)>(15);
  if (!($23)) {
   $$2 = $0;
   return ($$2|0);
  }
  $24 = (($0) + ($1)|0);
  $25 = $3 & 1;
  $26 = $25 | $1;
  $27 = $26 | 2;
  HEAP32[$2>>2] = $27;
  $28 = ((($24)) + 4|0);
  $29 = $22 | 3;
  HEAP32[$28>>2] = $29;
  $30 = (($24) + ($22)|0);
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 | 1;
  HEAP32[$31>>2] = $33;
  _dispose_chunk($24,$22);
  $$2 = $0;
  return ($$2|0);
 }
 $34 = HEAP32[(17800)>>2]|0;
 $35 = ($5|0)==($34|0);
 if ($35) {
  $36 = HEAP32[(17788)>>2]|0;
  $37 = (($36) + ($4))|0;
  $38 = ($37>>>0)>($1>>>0);
  if (!($38)) {
   $$2 = 0;
   return ($$2|0);
  }
  $39 = (($37) - ($1))|0;
  $40 = (($0) + ($1)|0);
  $41 = $3 & 1;
  $42 = $41 | $1;
  $43 = $42 | 2;
  HEAP32[$2>>2] = $43;
  $44 = ((($40)) + 4|0);
  $45 = $39 | 1;
  HEAP32[$44>>2] = $45;
  HEAP32[(17800)>>2] = $40;
  HEAP32[(17788)>>2] = $39;
  $$2 = $0;
  return ($$2|0);
 }
 $46 = HEAP32[(17796)>>2]|0;
 $47 = ($5|0)==($46|0);
 if ($47) {
  $48 = HEAP32[(17784)>>2]|0;
  $49 = (($48) + ($4))|0;
  $50 = ($49>>>0)<($1>>>0);
  if ($50) {
   $$2 = 0;
   return ($$2|0);
  }
  $51 = (($49) - ($1))|0;
  $52 = ($51>>>0)>(15);
  if ($52) {
   $53 = (($0) + ($1)|0);
   $54 = (($53) + ($51)|0);
   $55 = $3 & 1;
   $56 = $55 | $1;
   $57 = $56 | 2;
   HEAP32[$2>>2] = $57;
   $58 = ((($53)) + 4|0);
   $59 = $51 | 1;
   HEAP32[$58>>2] = $59;
   HEAP32[$54>>2] = $51;
   $60 = ((($54)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 & -2;
   HEAP32[$60>>2] = $62;
   $storemerge = $53;$storemerge1 = $51;
  } else {
   $63 = $3 & 1;
   $64 = $63 | $49;
   $65 = $64 | 2;
   HEAP32[$2>>2] = $65;
   $66 = (($0) + ($49)|0);
   $67 = ((($66)) + 4|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $68 | 1;
   HEAP32[$67>>2] = $69;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(17784)>>2] = $storemerge1;
  HEAP32[(17796)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $70 = $10 & 2;
 $71 = ($70|0)==(0);
 if (!($71)) {
  $$2 = 0;
  return ($$2|0);
 }
 $72 = $10 & -8;
 $73 = (($72) + ($4))|0;
 $74 = ($73>>>0)<($1>>>0);
 if ($74) {
  $$2 = 0;
  return ($$2|0);
 }
 $75 = (($73) - ($1))|0;
 $76 = $10 >>> 3;
 $77 = ($10>>>0)<(256);
 do {
  if ($77) {
   $78 = ((($5)) + 8|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ((($5)) + 12|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = $76 << 1;
   $83 = (17816 + ($82<<2)|0);
   $84 = ($79|0)==($83|0);
   if (!($84)) {
    $85 = ($79>>>0)<($6>>>0);
    if ($85) {
     _abort();
     // unreachable;
    }
    $86 = ((($79)) + 12|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==($5|0);
    if (!($88)) {
     _abort();
     // unreachable;
    }
   }
   $89 = ($81|0)==($79|0);
   if ($89) {
    $90 = 1 << $76;
    $91 = $90 ^ -1;
    $92 = HEAP32[4444]|0;
    $93 = $92 & $91;
    HEAP32[4444] = $93;
    break;
   }
   $94 = ($81|0)==($83|0);
   if ($94) {
    $$pre = ((($81)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $95 = ($81>>>0)<($6>>>0);
    if ($95) {
     _abort();
     // unreachable;
    }
    $96 = ((($81)) + 8|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==($5|0);
    if ($98) {
     $$pre$phiZ2D = $96;
    } else {
     _abort();
     // unreachable;
    }
   }
   $99 = ((($79)) + 12|0);
   HEAP32[$99>>2] = $81;
   HEAP32[$$pre$phiZ2D>>2] = $79;
  } else {
   $100 = ((($5)) + 24|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ((($5)) + 12|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($103|0)==($5|0);
   do {
    if ($104) {
     $114 = ((($5)) + 16|0);
     $115 = ((($114)) + 4|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)==(0|0);
     if ($117) {
      $118 = HEAP32[$114>>2]|0;
      $119 = ($118|0)==(0|0);
      if ($119) {
       $$3 = 0;
       break;
      } else {
       $$1271 = $118;$$1274 = $114;
      }
     } else {
      $$1271 = $116;$$1274 = $115;
     }
     while(1) {
      $120 = ((($$1271)) + 20|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($121|0)==(0|0);
      if (!($122)) {
       $$1271 = $121;$$1274 = $120;
       continue;
      }
      $123 = ((($$1271)) + 16|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = ($124|0)==(0|0);
      if ($125) {
       break;
      } else {
       $$1271 = $124;$$1274 = $123;
      }
     }
     $126 = ($$1274>>>0)<($6>>>0);
     if ($126) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1274>>2] = 0;
      $$3 = $$1271;
      break;
     }
    } else {
     $105 = ((($5)) + 8|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106>>>0)<($6>>>0);
     if ($107) {
      _abort();
      // unreachable;
     }
     $108 = ((($106)) + 12|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==($5|0);
     if (!($110)) {
      _abort();
      // unreachable;
     }
     $111 = ((($103)) + 8|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==($5|0);
     if ($113) {
      HEAP32[$108>>2] = $103;
      HEAP32[$111>>2] = $106;
      $$3 = $103;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $127 = ($101|0)==(0|0);
   if (!($127)) {
    $128 = ((($5)) + 28|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (18080 + ($129<<2)|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = ($5|0)==($131|0);
    if ($132) {
     HEAP32[$130>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $133 = 1 << $129;
      $134 = $133 ^ -1;
      $135 = HEAP32[(17780)>>2]|0;
      $136 = $135 & $134;
      HEAP32[(17780)>>2] = $136;
      break;
     }
    } else {
     $137 = HEAP32[(17792)>>2]|0;
     $138 = ($101>>>0)<($137>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = ((($101)) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($5|0);
     if ($141) {
      HEAP32[$139>>2] = $$3;
     } else {
      $142 = ((($101)) + 20|0);
      HEAP32[$142>>2] = $$3;
     }
     $143 = ($$3|0)==(0|0);
     if ($143) {
      break;
     }
    }
    $144 = HEAP32[(17792)>>2]|0;
    $145 = ($$3>>>0)<($144>>>0);
    if ($145) {
     _abort();
     // unreachable;
    }
    $146 = ((($$3)) + 24|0);
    HEAP32[$146>>2] = $101;
    $147 = ((($5)) + 16|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = ($148|0)==(0|0);
    do {
     if (!($149)) {
      $150 = ($148>>>0)<($144>>>0);
      if ($150) {
       _abort();
       // unreachable;
      } else {
       $151 = ((($$3)) + 16|0);
       HEAP32[$151>>2] = $148;
       $152 = ((($148)) + 24|0);
       HEAP32[$152>>2] = $$3;
       break;
      }
     }
    } while(0);
    $153 = ((($147)) + 4|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = ($154|0)==(0|0);
    if (!($155)) {
     $156 = HEAP32[(17792)>>2]|0;
     $157 = ($154>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     } else {
      $158 = ((($$3)) + 20|0);
      HEAP32[$158>>2] = $154;
      $159 = ((($154)) + 24|0);
      HEAP32[$159>>2] = $$3;
      break;
     }
    }
   }
  }
 } while(0);
 $160 = ($75>>>0)<(16);
 if ($160) {
  $161 = $3 & 1;
  $162 = $73 | $161;
  $163 = $162 | 2;
  HEAP32[$2>>2] = $163;
  $164 = (($0) + ($73)|0);
  $165 = ((($164)) + 4|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = $166 | 1;
  HEAP32[$165>>2] = $167;
  $$2 = $0;
  return ($$2|0);
 } else {
  $168 = (($0) + ($1)|0);
  $169 = $3 & 1;
  $170 = $169 | $1;
  $171 = $170 | 2;
  HEAP32[$2>>2] = $171;
  $172 = ((($168)) + 4|0);
  $173 = $75 | 3;
  HEAP32[$172>>2] = $173;
  $174 = (($168) + ($75)|0);
  $175 = ((($174)) + 4|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = $176 | 1;
  HEAP32[$175>>2] = $177;
  _dispose_chunk($168,$75);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0417 = 0, $$0418 = 0, $$0429 = 0, $$0436 = 0, $$1 = 0, $$1416 = 0, $$1424 = 0, $$1427 = 0, $$1431 = 0, $$1435 = 0, $$2 = 0, $$3 = 0, $$3433 = 0, $$pre = 0, $$pre$phi22Z2D = 0, $$pre$phi24Z2D = 0, $$pre$phiZ2D = 0, $$pre21 = 0, $$pre23 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond16 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(17792)>>2]|0;
   $14 = ($11>>>0)<($13>>>0);
   if ($14) {
    _abort();
    // unreachable;
   }
   $15 = HEAP32[(17796)>>2]|0;
   $16 = ($11|0)==($15|0);
   if ($16) {
    $101 = ((($2)) + 4|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = $102 & 3;
    $104 = ($103|0)==(3);
    if (!($104)) {
     $$1 = $11;$$1416 = $12;
     break;
    }
    HEAP32[(17784)>>2] = $12;
    $105 = $102 & -2;
    HEAP32[$101>>2] = $105;
    $106 = $12 | 1;
    $107 = ((($11)) + 4|0);
    HEAP32[$107>>2] = $106;
    $108 = (($11) + ($12)|0);
    HEAP32[$108>>2] = $12;
    return;
   }
   $17 = $7 >>> 3;
   $18 = ($7>>>0)<(256);
   if ($18) {
    $19 = ((($11)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($11)) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $17 << 1;
    $24 = (17816 + ($23<<2)|0);
    $25 = ($20|0)==($24|0);
    if (!($25)) {
     $26 = ($20>>>0)<($13>>>0);
     if ($26) {
      _abort();
      // unreachable;
     }
     $27 = ((($20)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==($11|0);
     if (!($29)) {
      _abort();
      // unreachable;
     }
    }
    $30 = ($22|0)==($20|0);
    if ($30) {
     $31 = 1 << $17;
     $32 = $31 ^ -1;
     $33 = HEAP32[4444]|0;
     $34 = $33 & $32;
     HEAP32[4444] = $34;
     $$1 = $11;$$1416 = $12;
     break;
    }
    $35 = ($22|0)==($24|0);
    if ($35) {
     $$pre23 = ((($22)) + 8|0);
     $$pre$phi24Z2D = $$pre23;
    } else {
     $36 = ($22>>>0)<($13>>>0);
     if ($36) {
      _abort();
      // unreachable;
     }
     $37 = ((($22)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38|0)==($11|0);
     if ($39) {
      $$pre$phi24Z2D = $37;
     } else {
      _abort();
      // unreachable;
     }
    }
    $40 = ((($20)) + 12|0);
    HEAP32[$40>>2] = $22;
    HEAP32[$$pre$phi24Z2D>>2] = $20;
    $$1 = $11;$$1416 = $12;
    break;
   }
   $41 = ((($11)) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($11)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==($11|0);
   do {
    if ($45) {
     $55 = ((($11)) + 16|0);
     $56 = ((($55)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==(0|0);
     if ($58) {
      $59 = HEAP32[$55>>2]|0;
      $60 = ($59|0)==(0|0);
      if ($60) {
       $$3 = 0;
       break;
      } else {
       $$1424 = $59;$$1427 = $55;
      }
     } else {
      $$1424 = $57;$$1427 = $56;
     }
     while(1) {
      $61 = ((($$1424)) + 20|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ($62|0)==(0|0);
      if (!($63)) {
       $$1424 = $62;$$1427 = $61;
       continue;
      }
      $64 = ((($$1424)) + 16|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0|0);
      if ($66) {
       break;
      } else {
       $$1424 = $65;$$1427 = $64;
      }
     }
     $67 = ($$1427>>>0)<($13>>>0);
     if ($67) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1427>>2] = 0;
      $$3 = $$1424;
      break;
     }
    } else {
     $46 = ((($11)) + 8|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($47>>>0)<($13>>>0);
     if ($48) {
      _abort();
      // unreachable;
     }
     $49 = ((($47)) + 12|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)==($11|0);
     if (!($51)) {
      _abort();
      // unreachable;
     }
     $52 = ((($44)) + 8|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($11|0);
     if ($54) {
      HEAP32[$49>>2] = $44;
      HEAP32[$52>>2] = $47;
      $$3 = $44;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $68 = ($42|0)==(0|0);
   if ($68) {
    $$1 = $11;$$1416 = $12;
   } else {
    $69 = ((($11)) + 28|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (18080 + ($70<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($11|0)==($72|0);
    if ($73) {
     HEAP32[$71>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $74 = 1 << $70;
      $75 = $74 ^ -1;
      $76 = HEAP32[(17780)>>2]|0;
      $77 = $76 & $75;
      HEAP32[(17780)>>2] = $77;
      $$1 = $11;$$1416 = $12;
      break;
     }
    } else {
     $78 = HEAP32[(17792)>>2]|0;
     $79 = ($42>>>0)<($78>>>0);
     if ($79) {
      _abort();
      // unreachable;
     }
     $80 = ((($42)) + 16|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ($81|0)==($11|0);
     if ($82) {
      HEAP32[$80>>2] = $$3;
     } else {
      $83 = ((($42)) + 20|0);
      HEAP32[$83>>2] = $$3;
     }
     $84 = ($$3|0)==(0|0);
     if ($84) {
      $$1 = $11;$$1416 = $12;
      break;
     }
    }
    $85 = HEAP32[(17792)>>2]|0;
    $86 = ($$3>>>0)<($85>>>0);
    if ($86) {
     _abort();
     // unreachable;
    }
    $87 = ((($$3)) + 24|0);
    HEAP32[$87>>2] = $42;
    $88 = ((($11)) + 16|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ($89|0)==(0|0);
    do {
     if (!($90)) {
      $91 = ($89>>>0)<($85>>>0);
      if ($91) {
       _abort();
       // unreachable;
      } else {
       $92 = ((($$3)) + 16|0);
       HEAP32[$92>>2] = $89;
       $93 = ((($89)) + 24|0);
       HEAP32[$93>>2] = $$3;
       break;
      }
     }
    } while(0);
    $94 = ((($88)) + 4|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==(0|0);
    if ($96) {
     $$1 = $11;$$1416 = $12;
    } else {
     $97 = HEAP32[(17792)>>2]|0;
     $98 = ($95>>>0)<($97>>>0);
     if ($98) {
      _abort();
      // unreachable;
     } else {
      $99 = ((($$3)) + 20|0);
      HEAP32[$99>>2] = $95;
      $100 = ((($95)) + 24|0);
      HEAP32[$100>>2] = $$3;
      $$1 = $11;$$1416 = $12;
      break;
     }
    }
   }
  } else {
   $$1 = $0;$$1416 = $1;
  }
 } while(0);
 $109 = HEAP32[(17792)>>2]|0;
 $110 = ($2>>>0)<($109>>>0);
 if ($110) {
  _abort();
  // unreachable;
 }
 $111 = ((($2)) + 4|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 2;
 $114 = ($113|0)==(0);
 if ($114) {
  $115 = HEAP32[(17800)>>2]|0;
  $116 = ($2|0)==($115|0);
  if ($116) {
   $117 = HEAP32[(17788)>>2]|0;
   $118 = (($117) + ($$1416))|0;
   HEAP32[(17788)>>2] = $118;
   HEAP32[(17800)>>2] = $$1;
   $119 = $118 | 1;
   $120 = ((($$1)) + 4|0);
   HEAP32[$120>>2] = $119;
   $121 = HEAP32[(17796)>>2]|0;
   $122 = ($$1|0)==($121|0);
   if (!($122)) {
    return;
   }
   HEAP32[(17796)>>2] = 0;
   HEAP32[(17784)>>2] = 0;
   return;
  }
  $123 = HEAP32[(17796)>>2]|0;
  $124 = ($2|0)==($123|0);
  if ($124) {
   $125 = HEAP32[(17784)>>2]|0;
   $126 = (($125) + ($$1416))|0;
   HEAP32[(17784)>>2] = $126;
   HEAP32[(17796)>>2] = $$1;
   $127 = $126 | 1;
   $128 = ((($$1)) + 4|0);
   HEAP32[$128>>2] = $127;
   $129 = (($$1) + ($126)|0);
   HEAP32[$129>>2] = $126;
   return;
  }
  $130 = $112 & -8;
  $131 = (($130) + ($$1416))|0;
  $132 = $112 >>> 3;
  $133 = ($112>>>0)<(256);
  do {
   if ($133) {
    $134 = ((($2)) + 8|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = ((($2)) + 12|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $132 << 1;
    $139 = (17816 + ($138<<2)|0);
    $140 = ($135|0)==($139|0);
    if (!($140)) {
     $141 = ($135>>>0)<($109>>>0);
     if ($141) {
      _abort();
      // unreachable;
     }
     $142 = ((($135)) + 12|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = ($143|0)==($2|0);
     if (!($144)) {
      _abort();
      // unreachable;
     }
    }
    $145 = ($137|0)==($135|0);
    if ($145) {
     $146 = 1 << $132;
     $147 = $146 ^ -1;
     $148 = HEAP32[4444]|0;
     $149 = $148 & $147;
     HEAP32[4444] = $149;
     break;
    }
    $150 = ($137|0)==($139|0);
    if ($150) {
     $$pre21 = ((($137)) + 8|0);
     $$pre$phi22Z2D = $$pre21;
    } else {
     $151 = ($137>>>0)<($109>>>0);
     if ($151) {
      _abort();
      // unreachable;
     }
     $152 = ((($137)) + 8|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = ($153|0)==($2|0);
     if ($154) {
      $$pre$phi22Z2D = $152;
     } else {
      _abort();
      // unreachable;
     }
    }
    $155 = ((($135)) + 12|0);
    HEAP32[$155>>2] = $137;
    HEAP32[$$pre$phi22Z2D>>2] = $135;
   } else {
    $156 = ((($2)) + 24|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ((($2)) + 12|0);
    $159 = HEAP32[$158>>2]|0;
    $160 = ($159|0)==($2|0);
    do {
     if ($160) {
      $170 = ((($2)) + 16|0);
      $171 = ((($170)) + 4|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==(0|0);
      if ($173) {
       $174 = HEAP32[$170>>2]|0;
       $175 = ($174|0)==(0|0);
       if ($175) {
        $$3433 = 0;
        break;
       } else {
        $$1431 = $174;$$1435 = $170;
       }
      } else {
       $$1431 = $172;$$1435 = $171;
      }
      while(1) {
       $176 = ((($$1431)) + 20|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if (!($178)) {
        $$1431 = $177;$$1435 = $176;
        continue;
       }
       $179 = ((($$1431)) + 16|0);
       $180 = HEAP32[$179>>2]|0;
       $181 = ($180|0)==(0|0);
       if ($181) {
        break;
       } else {
        $$1431 = $180;$$1435 = $179;
       }
      }
      $182 = ($$1435>>>0)<($109>>>0);
      if ($182) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1435>>2] = 0;
       $$3433 = $$1431;
       break;
      }
     } else {
      $161 = ((($2)) + 8|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162>>>0)<($109>>>0);
      if ($163) {
       _abort();
       // unreachable;
      }
      $164 = ((($162)) + 12|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($2|0);
      if (!($166)) {
       _abort();
       // unreachable;
      }
      $167 = ((($159)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==($2|0);
      if ($169) {
       HEAP32[$164>>2] = $159;
       HEAP32[$167>>2] = $162;
       $$3433 = $159;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $183 = ($157|0)==(0|0);
    if (!($183)) {
     $184 = ((($2)) + 28|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = (18080 + ($185<<2)|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = ($2|0)==($187|0);
     if ($188) {
      HEAP32[$186>>2] = $$3433;
      $cond16 = ($$3433|0)==(0|0);
      if ($cond16) {
       $189 = 1 << $185;
       $190 = $189 ^ -1;
       $191 = HEAP32[(17780)>>2]|0;
       $192 = $191 & $190;
       HEAP32[(17780)>>2] = $192;
       break;
      }
     } else {
      $193 = HEAP32[(17792)>>2]|0;
      $194 = ($157>>>0)<($193>>>0);
      if ($194) {
       _abort();
       // unreachable;
      }
      $195 = ((($157)) + 16|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = ($196|0)==($2|0);
      if ($197) {
       HEAP32[$195>>2] = $$3433;
      } else {
       $198 = ((($157)) + 20|0);
       HEAP32[$198>>2] = $$3433;
      }
      $199 = ($$3433|0)==(0|0);
      if ($199) {
       break;
      }
     }
     $200 = HEAP32[(17792)>>2]|0;
     $201 = ($$3433>>>0)<($200>>>0);
     if ($201) {
      _abort();
      // unreachable;
     }
     $202 = ((($$3433)) + 24|0);
     HEAP32[$202>>2] = $157;
     $203 = ((($2)) + 16|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = ($204|0)==(0|0);
     do {
      if (!($205)) {
       $206 = ($204>>>0)<($200>>>0);
       if ($206) {
        _abort();
        // unreachable;
       } else {
        $207 = ((($$3433)) + 16|0);
        HEAP32[$207>>2] = $204;
        $208 = ((($204)) + 24|0);
        HEAP32[$208>>2] = $$3433;
        break;
       }
      }
     } while(0);
     $209 = ((($203)) + 4|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     if (!($211)) {
      $212 = HEAP32[(17792)>>2]|0;
      $213 = ($210>>>0)<($212>>>0);
      if ($213) {
       _abort();
       // unreachable;
      } else {
       $214 = ((($$3433)) + 20|0);
       HEAP32[$214>>2] = $210;
       $215 = ((($210)) + 24|0);
       HEAP32[$215>>2] = $$3433;
       break;
      }
     }
    }
   }
  } while(0);
  $216 = $131 | 1;
  $217 = ((($$1)) + 4|0);
  HEAP32[$217>>2] = $216;
  $218 = (($$1) + ($131)|0);
  HEAP32[$218>>2] = $131;
  $219 = HEAP32[(17796)>>2]|0;
  $220 = ($$1|0)==($219|0);
  if ($220) {
   HEAP32[(17784)>>2] = $131;
   return;
  } else {
   $$2 = $131;
  }
 } else {
  $221 = $112 & -2;
  HEAP32[$111>>2] = $221;
  $222 = $$1416 | 1;
  $223 = ((($$1)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($$1) + ($$1416)|0);
  HEAP32[$224>>2] = $$1416;
  $$2 = $$1416;
 }
 $225 = $$2 >>> 3;
 $226 = ($$2>>>0)<(256);
 if ($226) {
  $227 = $225 << 1;
  $228 = (17816 + ($227<<2)|0);
  $229 = HEAP32[4444]|0;
  $230 = 1 << $225;
  $231 = $229 & $230;
  $232 = ($231|0)==(0);
  if ($232) {
   $233 = $229 | $230;
   HEAP32[4444] = $233;
   $$pre = ((($228)) + 8|0);
   $$0436 = $228;$$pre$phiZ2D = $$pre;
  } else {
   $234 = ((($228)) + 8|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = HEAP32[(17792)>>2]|0;
   $237 = ($235>>>0)<($236>>>0);
   if ($237) {
    _abort();
    // unreachable;
   } else {
    $$0436 = $235;$$pre$phiZ2D = $234;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $238 = ((($$0436)) + 12|0);
  HEAP32[$238>>2] = $$1;
  $239 = ((($$1)) + 8|0);
  HEAP32[$239>>2] = $$0436;
  $240 = ((($$1)) + 12|0);
  HEAP32[$240>>2] = $228;
  return;
 }
 $241 = $$2 >>> 8;
 $242 = ($241|0)==(0);
 if ($242) {
  $$0429 = 0;
 } else {
  $243 = ($$2>>>0)>(16777215);
  if ($243) {
   $$0429 = 31;
  } else {
   $244 = (($241) + 1048320)|0;
   $245 = $244 >>> 16;
   $246 = $245 & 8;
   $247 = $241 << $246;
   $248 = (($247) + 520192)|0;
   $249 = $248 >>> 16;
   $250 = $249 & 4;
   $251 = $250 | $246;
   $252 = $247 << $250;
   $253 = (($252) + 245760)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 2;
   $256 = $251 | $255;
   $257 = (14 - ($256))|0;
   $258 = $252 << $255;
   $259 = $258 >>> 15;
   $260 = (($257) + ($259))|0;
   $261 = $260 << 1;
   $262 = (($260) + 7)|0;
   $263 = $$2 >>> $262;
   $264 = $263 & 1;
   $265 = $264 | $261;
   $$0429 = $265;
  }
 }
 $266 = (18080 + ($$0429<<2)|0);
 $267 = ((($$1)) + 28|0);
 HEAP32[$267>>2] = $$0429;
 $268 = ((($$1)) + 16|0);
 $269 = ((($$1)) + 20|0);
 HEAP32[$269>>2] = 0;
 HEAP32[$268>>2] = 0;
 $270 = HEAP32[(17780)>>2]|0;
 $271 = 1 << $$0429;
 $272 = $270 & $271;
 $273 = ($272|0)==(0);
 if ($273) {
  $274 = $270 | $271;
  HEAP32[(17780)>>2] = $274;
  HEAP32[$266>>2] = $$1;
  $275 = ((($$1)) + 24|0);
  HEAP32[$275>>2] = $266;
  $276 = ((($$1)) + 12|0);
  HEAP32[$276>>2] = $$1;
  $277 = ((($$1)) + 8|0);
  HEAP32[$277>>2] = $$1;
  return;
 }
 $278 = HEAP32[$266>>2]|0;
 $279 = ($$0429|0)==(31);
 $280 = $$0429 >>> 1;
 $281 = (25 - ($280))|0;
 $282 = $279 ? 0 : $281;
 $283 = $$2 << $282;
 $$0417 = $283;$$0418 = $278;
 while(1) {
  $284 = ((($$0418)) + 4|0);
  $285 = HEAP32[$284>>2]|0;
  $286 = $285 & -8;
  $287 = ($286|0)==($$2|0);
  if ($287) {
   label = 127;
   break;
  }
  $288 = $$0417 >>> 31;
  $289 = (((($$0418)) + 16|0) + ($288<<2)|0);
  $290 = $$0417 << 1;
  $291 = HEAP32[$289>>2]|0;
  $292 = ($291|0)==(0|0);
  if ($292) {
   label = 124;
   break;
  } else {
   $$0417 = $290;$$0418 = $291;
  }
 }
 if ((label|0) == 124) {
  $293 = HEAP32[(17792)>>2]|0;
  $294 = ($289>>>0)<($293>>>0);
  if ($294) {
   _abort();
   // unreachable;
  }
  HEAP32[$289>>2] = $$1;
  $295 = ((($$1)) + 24|0);
  HEAP32[$295>>2] = $$0418;
  $296 = ((($$1)) + 12|0);
  HEAP32[$296>>2] = $$1;
  $297 = ((($$1)) + 8|0);
  HEAP32[$297>>2] = $$1;
  return;
 }
 else if ((label|0) == 127) {
  $298 = ((($$0418)) + 8|0);
  $299 = HEAP32[$298>>2]|0;
  $300 = HEAP32[(17792)>>2]|0;
  $301 = ($299>>>0)>=($300>>>0);
  $not$ = ($$0418>>>0)>=($300>>>0);
  $302 = $301 & $not$;
  if (!($302)) {
   _abort();
   // unreachable;
  }
  $303 = ((($299)) + 12|0);
  HEAP32[$303>>2] = $$1;
  HEAP32[$298>>2] = $$1;
  $304 = ((($$1)) + 8|0);
  HEAP32[$304>>2] = $299;
  $305 = ((($$1)) + 12|0);
  HEAP32[$305>>2] = $$0418;
  $306 = ((($$1)) + 24|0);
  HEAP32[$306>>2] = 0;
  return;
 }
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        ___setErrNo(12);
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        return -1;
      }
    }
    return oldDynamicTop|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _pthread_self() {
    return 0;
}

  
function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&7](a1|0)|0;
}


function jsCall_ii_0(a1) {
  a1=a1|0;
  return jsCall_ii(0,a1|0)|0;
}



function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&31](a1|0,a2|0,a3|0)|0;
}


function jsCall_iiii_0(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(0,a1|0,a2|0,a3|0)|0;
}



function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&7](a1|0,a2|0);
}


function jsCall_vii_0(a1,a2) {
  a1=a1|0; a2=a2|0;
  jsCall_vii(0,a1|0,a2|0);
}



function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&31](a1|0,a2|0)|0;
}


function jsCall_iii_0(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(0,a1|0,a2|0)|0;
}



function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&31](a1|0);
}


function jsCall_vi_0(a1) {
  a1=a1|0;
  jsCall_vi(0,a1|0);
}


function b0(p0) {
 p0 = p0|0; nullFunc_ii(0);return 0;
}
function b1(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(1);return 0;
}
function b2(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(2);
}
function b3(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(3);return 0;
}
function b4(p0) {
 p0 = p0|0; nullFunc_vi(4);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b0,b0,jsCall_ii_0,b0,b0,b0,___stdio_close,b0];
var FUNCTION_TABLE_iiii = [b1,b1,jsCall_iiii_0,b1,b1,b1,b1,___stdio_write,___stdio_seek,___stdout_write,_sn_write,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,___stdio_read,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_vii = [b2,b2,jsCall_vii_0,b2,b2,_defaultLogCallback,b2,b2];
var FUNCTION_TABLE_iii = [b3,b3,jsCall_iii_0,b3,__lou_defaultTableResolver,b3,b3,b3,b3,b3,b3,_allocStringBuffer,_allocStringBuffer_367,b3,_cmpMatches,_strcmp,b3,_cmpFeatures,_cmpKeys,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3];
var FUNCTION_TABLE_vi = [b4,b4,jsCall_vi_0,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_rpl_free,b4,b4,_feature_free,b4,b4,_cleanup,_cleanup_340,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4];

  return { __lou_getALine: __lou_getALine, __lou_logMessage: __lou_logMessage, __lou_findOpcodeNumber: __lou_findOpcodeNumber, __lou_getDisplayTable: __lou_getDisplayTable, _bitshift64Lshr: _bitshift64Lshr, __lou_outOfMemory: __lou_outOfMemory, __lou_findOpcodeName: __lou_findOpcodeName, _lou_getTableInfo: _lou_getTableInfo, __lou_isValidMode: __lou_isValidMode, __lou_getTablePath: __lou_getTablePath, _lou_indexTables: _lou_indexTables, __lou_getDotsForChar: __lou_getDotsForChar, _lou_version: _lou_version, _sbrk: _sbrk, __lou_charHash: __lou_charHash, _lou_logFile: _lou_logFile, _bitshift64Shl: _bitshift64Shl, ___udivmoddi4: ___udivmoddi4, _lou_translate: _lou_translate, _lou_getEmphClasses: _lou_getEmphClasses, __lou_stringHash: __lou_stringHash, _fflush: _fflush, _lou_logPrint: _lou_logPrint, __lou_showString: __lou_showString, __lou_pattern_compile: __lou_pattern_compile, __lou_showDots: __lou_showDots, _memset: _memset, _llvm_cttz_i32: _llvm_cttz_i32, __lou_allocMem: __lou_allocMem, _memcpy: _memcpy, __lou_compileDisplayRule: __lou_compileDisplayRule, _lou_getDataPath: _lou_getDataPath, _lou_translatePrehyphenated: _lou_translatePrehyphenated, _lou_free: _lou_free, __lou_defaultTableResolver: __lou_defaultTableResolver, __lou_showAttributes: __lou_showAttributes, __lou_resolveTable: __lou_resolveTable, __lou_handlePassVariableAction: __lou_handlePassVariableAction, ___uremdi3: ___uremdi3, _lou_getTypeformForEmphClass: _lou_getTypeformForEmphClass, _lou_setDataPath: _lou_setDataPath, _i64Subtract: _i64Subtract, _lou_findTables: _lou_findTables, __lou_getTranslationTable: __lou_getTranslationTable, _lou_registerLogCallback: _lou_registerLogCallback, _lou_backTranslate: _lou_backTranslate, _i64Add: _i64Add, _pthread_self: _pthread_self, __lou_handlePassVariableTest: __lou_handlePassVariableTest, _lou_findTable: _lou_findTable, __lou_compileTranslationRule: __lou_compileTranslationRule, __lou_backTranslate: __lou_backTranslate, __lou_translate: __lou_translate, __lou_pattern_check: __lou_pattern_check, __lou_charToFallbackDots: __lou_charToFallbackDots, _lou_translateString: _lou_translateString, _lou_charSize: _lou_charSize, __lou_getTable: __lou_getTable, __lou_unknownDots: __lou_unknownDots, __lou_extParseDots: __lou_extParseDots, ___udivdi3: ___udivdi3, ___errno_location: ___errno_location, _lou_checkTable: _lou_checkTable, _lou_backTranslateString: _lou_backTranslateString, __lou_getCharForDots: __lou_getCharForDots, _lou_compileString: _lou_compileString, __lou_logWidecharBuf: __lou_logWidecharBuf, _lou_charToDots: _lou_charToDots, _memmove: _memmove, _lou_listTables: _lou_listTables, _defaultLogCallback: _defaultLogCallback, _malloc: _malloc, __lou_resetPassVariables: __lou_resetPassVariables, _lou_getTable: _lou_getTable, _free: _free, __lou_extParseChars: __lou_extParseChars, _lou_hyphenate: _lou_hyphenate, _lou_registerTableResolver: _lou_registerTableResolver, _lou_readCharFromFile: _lou_readCharFromFile, _lou_dotsToChar: _lou_dotsToChar, _lou_logEnd: _lou_logEnd, _lou_setLogLevel: _lou_setLogLevel, __lou_pattern_reverse: __lou_pattern_reverse, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_ii: dynCall_ii, dynCall_iiii: dynCall_iiii, dynCall_vii: dynCall_vii, dynCall_iii: dynCall_iii, dynCall_vi: dynCall_vi };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real___lou_getALine = asm["__lou_getALine"]; asm["__lou_getALine"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_getALine.apply(null, arguments);
};

var real___lou_logMessage = asm["__lou_logMessage"]; asm["__lou_logMessage"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_logMessage.apply(null, arguments);
};

var real___lou_findOpcodeNumber = asm["__lou_findOpcodeNumber"]; asm["__lou_findOpcodeNumber"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_findOpcodeNumber.apply(null, arguments);
};

var real___lou_getDisplayTable = asm["__lou_getDisplayTable"]; asm["__lou_getDisplayTable"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_getDisplayTable.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real___lou_getCharForDots = asm["__lou_getCharForDots"]; asm["__lou_getCharForDots"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_getCharForDots.apply(null, arguments);
};

var real___lou_getTable = asm["__lou_getTable"]; asm["__lou_getTable"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_getTable.apply(null, arguments);
};

var real__llvm_cttz_i32 = asm["_llvm_cttz_i32"]; asm["_llvm_cttz_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_cttz_i32.apply(null, arguments);
};

var real___lou_isValidMode = asm["__lou_isValidMode"]; asm["__lou_isValidMode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_isValidMode.apply(null, arguments);
};

var real__lou_setLogLevel = asm["_lou_setLogLevel"]; asm["_lou_setLogLevel"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_setLogLevel.apply(null, arguments);
};

var real___lou_getTablePath = asm["__lou_getTablePath"]; asm["__lou_getTablePath"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_getTablePath.apply(null, arguments);
};

var real__lou_indexTables = asm["_lou_indexTables"]; asm["_lou_indexTables"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_indexTables.apply(null, arguments);
};

var real___lou_getDotsForChar = asm["__lou_getDotsForChar"]; asm["__lou_getDotsForChar"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_getDotsForChar.apply(null, arguments);
};

var real__lou_version = asm["_lou_version"]; asm["_lou_version"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_version.apply(null, arguments);
};

var real___lou_charHash = asm["__lou_charHash"]; asm["__lou_charHash"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_charHash.apply(null, arguments);
};

var real__lou_logFile = asm["_lou_logFile"]; asm["_lou_logFile"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_logFile.apply(null, arguments);
};

var real__lou_hyphenate = asm["_lou_hyphenate"]; asm["_lou_hyphenate"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_hyphenate.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real__lou_translate = asm["_lou_translate"]; asm["_lou_translate"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_translate.apply(null, arguments);
};

var real__lou_getEmphClasses = asm["_lou_getEmphClasses"]; asm["_lou_getEmphClasses"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_getEmphClasses.apply(null, arguments);
};

var real___lou_stringHash = asm["__lou_stringHash"]; asm["__lou_stringHash"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_stringHash.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real__lou_logPrint = asm["_lou_logPrint"]; asm["_lou_logPrint"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_logPrint.apply(null, arguments);
};

var real___lou_showAttributes = asm["__lou_showAttributes"]; asm["__lou_showAttributes"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_showAttributes.apply(null, arguments);
};

var real___lou_pattern_compile = asm["__lou_pattern_compile"]; asm["__lou_pattern_compile"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_pattern_compile.apply(null, arguments);
};

var real___lou_showDots = asm["__lou_showDots"]; asm["__lou_showDots"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_showDots.apply(null, arguments);
};

var real___lou_resetPassVariables = asm["__lou_resetPassVariables"]; asm["__lou_resetPassVariables"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_resetPassVariables.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__sbrk.apply(null, arguments);
};

var real___lou_allocMem = asm["__lou_allocMem"]; asm["__lou_allocMem"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_allocMem.apply(null, arguments);
};

var real___lou_compileDisplayRule = asm["__lou_compileDisplayRule"]; asm["__lou_compileDisplayRule"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_compileDisplayRule.apply(null, arguments);
};

var real__lou_getDataPath = asm["_lou_getDataPath"]; asm["_lou_getDataPath"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_getDataPath.apply(null, arguments);
};

var real__lou_translatePrehyphenated = asm["_lou_translatePrehyphenated"]; asm["_lou_translatePrehyphenated"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_translatePrehyphenated.apply(null, arguments);
};

var real__lou_free = asm["_lou_free"]; asm["_lou_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_free.apply(null, arguments);
};

var real___lou_defaultTableResolver = asm["__lou_defaultTableResolver"]; asm["__lou_defaultTableResolver"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_defaultTableResolver.apply(null, arguments);
};

var real___lou_extParseChars = asm["__lou_extParseChars"]; asm["__lou_extParseChars"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_extParseChars.apply(null, arguments);
};

var real___lou_resolveTable = asm["__lou_resolveTable"]; asm["__lou_resolveTable"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_resolveTable.apply(null, arguments);
};

var real___lou_handlePassVariableAction = asm["__lou_handlePassVariableAction"]; asm["__lou_handlePassVariableAction"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_handlePassVariableAction.apply(null, arguments);
};

var real__lou_getTypeformForEmphClass = asm["_lou_getTypeformForEmphClass"]; asm["_lou_getTypeformForEmphClass"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_getTypeformForEmphClass.apply(null, arguments);
};

var real__lou_setDataPath = asm["_lou_setDataPath"]; asm["_lou_setDataPath"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_setDataPath.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real____udivmoddi4 = asm["___udivmoddi4"]; asm["___udivmoddi4"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivmoddi4.apply(null, arguments);
};

var real__lou_registerLogCallback = asm["_lou_registerLogCallback"]; asm["_lou_registerLogCallback"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_registerLogCallback.apply(null, arguments);
};

var real__lou_backTranslate = asm["_lou_backTranslate"]; asm["_lou_backTranslate"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_backTranslate.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__lou_registerTableResolver = asm["_lou_registerTableResolver"]; asm["_lou_registerTableResolver"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_registerTableResolver.apply(null, arguments);
};

var real__pthread_self = asm["_pthread_self"]; asm["_pthread_self"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_self.apply(null, arguments);
};

var real___lou_handlePassVariableTest = asm["__lou_handlePassVariableTest"]; asm["__lou_handlePassVariableTest"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_handlePassVariableTest.apply(null, arguments);
};

var real__lou_findTable = asm["_lou_findTable"]; asm["_lou_findTable"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_findTable.apply(null, arguments);
};

var real___lou_compileTranslationRule = asm["__lou_compileTranslationRule"]; asm["__lou_compileTranslationRule"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_compileTranslationRule.apply(null, arguments);
};

var real___lou_backTranslate = asm["__lou_backTranslate"]; asm["__lou_backTranslate"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_backTranslate.apply(null, arguments);
};

var real___lou_translate = asm["__lou_translate"]; asm["__lou_translate"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_translate.apply(null, arguments);
};

var real___lou_pattern_check = asm["__lou_pattern_check"]; asm["__lou_pattern_check"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_pattern_check.apply(null, arguments);
};

var real___lou_charToFallbackDots = asm["__lou_charToFallbackDots"]; asm["__lou_charToFallbackDots"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_charToFallbackDots.apply(null, arguments);
};

var real__lou_translateString = asm["_lou_translateString"]; asm["_lou_translateString"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_translateString.apply(null, arguments);
};

var real__lou_charSize = asm["_lou_charSize"]; asm["_lou_charSize"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_charSize.apply(null, arguments);
};

var real___lou_findOpcodeName = asm["__lou_findOpcodeName"]; asm["__lou_findOpcodeName"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_findOpcodeName.apply(null, arguments);
};

var real___lou_unknownDots = asm["__lou_unknownDots"]; asm["__lou_unknownDots"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_unknownDots.apply(null, arguments);
};

var real___lou_extParseDots = asm["__lou_extParseDots"]; asm["__lou_extParseDots"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_extParseDots.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivdi3.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real__lou_checkTable = asm["_lou_checkTable"]; asm["_lou_checkTable"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_checkTable.apply(null, arguments);
};

var real___lou_outOfMemory = asm["__lou_outOfMemory"]; asm["__lou_outOfMemory"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_outOfMemory.apply(null, arguments);
};

var real__lou_compileString = asm["_lou_compileString"]; asm["_lou_compileString"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_compileString.apply(null, arguments);
};

var real___lou_logWidecharBuf = asm["__lou_logWidecharBuf"]; asm["__lou_logWidecharBuf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_logWidecharBuf.apply(null, arguments);
};

var real__lou_charToDots = asm["_lou_charToDots"]; asm["_lou_charToDots"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_charToDots.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____uremdi3.apply(null, arguments);
};

var real__lou_listTables = asm["_lou_listTables"]; asm["_lou_listTables"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_listTables.apply(null, arguments);
};

var real__defaultLogCallback = asm["_defaultLogCallback"]; asm["_defaultLogCallback"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__defaultLogCallback.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real___lou_showString = asm["__lou_showString"]; asm["__lou_showString"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_showString.apply(null, arguments);
};

var real__lou_getTable = asm["_lou_getTable"]; asm["_lou_getTable"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_getTable.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__lou_findTables = asm["_lou_findTables"]; asm["_lou_findTables"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_findTables.apply(null, arguments);
};

var real__lou_backTranslateString = asm["_lou_backTranslateString"]; asm["_lou_backTranslateString"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_backTranslateString.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__lou_getTableInfo = asm["_lou_getTableInfo"]; asm["_lou_getTableInfo"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_getTableInfo.apply(null, arguments);
};

var real__lou_readCharFromFile = asm["_lou_readCharFromFile"]; asm["_lou_readCharFromFile"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_readCharFromFile.apply(null, arguments);
};

var real__lou_dotsToChar = asm["_lou_dotsToChar"]; asm["_lou_dotsToChar"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_dotsToChar.apply(null, arguments);
};

var real__lou_logEnd = asm["_lou_logEnd"]; asm["_lou_logEnd"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_logEnd.apply(null, arguments);
};

var real___lou_getTranslationTable = asm["__lou_getTranslationTable"]; asm["__lou_getTranslationTable"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_getTranslationTable.apply(null, arguments);
};

var real___lou_pattern_reverse = asm["__lou_pattern_reverse"]; asm["__lou_pattern_reverse"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___lou_pattern_reverse.apply(null, arguments);
};
var __lou_getALine = Module["__lou_getALine"] = asm["__lou_getALine"];
var __lou_logMessage = Module["__lou_logMessage"] = asm["__lou_logMessage"];
var __lou_findOpcodeNumber = Module["__lou_findOpcodeNumber"] = asm["__lou_findOpcodeNumber"];
var __lou_getDisplayTable = Module["__lou_getDisplayTable"] = asm["__lou_getDisplayTable"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var __lou_getCharForDots = Module["__lou_getCharForDots"] = asm["__lou_getCharForDots"];
var __lou_getTable = Module["__lou_getTable"] = asm["__lou_getTable"];
var _llvm_cttz_i32 = Module["_llvm_cttz_i32"] = asm["_llvm_cttz_i32"];
var __lou_isValidMode = Module["__lou_isValidMode"] = asm["__lou_isValidMode"];
var _lou_setLogLevel = Module["_lou_setLogLevel"] = asm["_lou_setLogLevel"];
var __lou_getTablePath = Module["__lou_getTablePath"] = asm["__lou_getTablePath"];
var _lou_indexTables = Module["_lou_indexTables"] = asm["_lou_indexTables"];
var __lou_getDotsForChar = Module["__lou_getDotsForChar"] = asm["__lou_getDotsForChar"];
var _lou_version = Module["_lou_version"] = asm["_lou_version"];
var __lou_charHash = Module["__lou_charHash"] = asm["__lou_charHash"];
var _lou_logFile = Module["_lou_logFile"] = asm["_lou_logFile"];
var _lou_hyphenate = Module["_lou_hyphenate"] = asm["_lou_hyphenate"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _lou_translate = Module["_lou_translate"] = asm["_lou_translate"];
var _lou_getEmphClasses = Module["_lou_getEmphClasses"] = asm["_lou_getEmphClasses"];
var __lou_stringHash = Module["__lou_stringHash"] = asm["__lou_stringHash"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _lou_logPrint = Module["_lou_logPrint"] = asm["_lou_logPrint"];
var __lou_showAttributes = Module["__lou_showAttributes"] = asm["__lou_showAttributes"];
var __lou_pattern_compile = Module["__lou_pattern_compile"] = asm["__lou_pattern_compile"];
var __lou_showDots = Module["__lou_showDots"] = asm["__lou_showDots"];
var _memset = Module["_memset"] = asm["_memset"];
var __lou_resetPassVariables = Module["__lou_resetPassVariables"] = asm["__lou_resetPassVariables"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var __lou_allocMem = Module["__lou_allocMem"] = asm["__lou_allocMem"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var __lou_compileDisplayRule = Module["__lou_compileDisplayRule"] = asm["__lou_compileDisplayRule"];
var _lou_getDataPath = Module["_lou_getDataPath"] = asm["_lou_getDataPath"];
var _lou_translatePrehyphenated = Module["_lou_translatePrehyphenated"] = asm["_lou_translatePrehyphenated"];
var _lou_free = Module["_lou_free"] = asm["_lou_free"];
var __lou_defaultTableResolver = Module["__lou_defaultTableResolver"] = asm["__lou_defaultTableResolver"];
var __lou_extParseChars = Module["__lou_extParseChars"] = asm["__lou_extParseChars"];
var __lou_resolveTable = Module["__lou_resolveTable"] = asm["__lou_resolveTable"];
var __lou_handlePassVariableAction = Module["__lou_handlePassVariableAction"] = asm["__lou_handlePassVariableAction"];
var _lou_getTypeformForEmphClass = Module["_lou_getTypeformForEmphClass"] = asm["_lou_getTypeformForEmphClass"];
var _lou_setDataPath = Module["_lou_setDataPath"] = asm["_lou_setDataPath"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var ___udivmoddi4 = Module["___udivmoddi4"] = asm["___udivmoddi4"];
var _lou_registerLogCallback = Module["_lou_registerLogCallback"] = asm["_lou_registerLogCallback"];
var _lou_backTranslate = Module["_lou_backTranslate"] = asm["_lou_backTranslate"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _lou_registerTableResolver = Module["_lou_registerTableResolver"] = asm["_lou_registerTableResolver"];
var _pthread_self = Module["_pthread_self"] = asm["_pthread_self"];
var __lou_handlePassVariableTest = Module["__lou_handlePassVariableTest"] = asm["__lou_handlePassVariableTest"];
var _lou_findTable = Module["_lou_findTable"] = asm["_lou_findTable"];
var __lou_compileTranslationRule = Module["__lou_compileTranslationRule"] = asm["__lou_compileTranslationRule"];
var __lou_backTranslate = Module["__lou_backTranslate"] = asm["__lou_backTranslate"];
var __lou_translate = Module["__lou_translate"] = asm["__lou_translate"];
var __lou_pattern_check = Module["__lou_pattern_check"] = asm["__lou_pattern_check"];
var __lou_charToFallbackDots = Module["__lou_charToFallbackDots"] = asm["__lou_charToFallbackDots"];
var _lou_translateString = Module["_lou_translateString"] = asm["_lou_translateString"];
var _lou_charSize = Module["_lou_charSize"] = asm["_lou_charSize"];
var __lou_findOpcodeName = Module["__lou_findOpcodeName"] = asm["__lou_findOpcodeName"];
var __lou_unknownDots = Module["__lou_unknownDots"] = asm["__lou_unknownDots"];
var __lou_extParseDots = Module["__lou_extParseDots"] = asm["__lou_extParseDots"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _lou_checkTable = Module["_lou_checkTable"] = asm["_lou_checkTable"];
var __lou_outOfMemory = Module["__lou_outOfMemory"] = asm["__lou_outOfMemory"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _lou_compileString = Module["_lou_compileString"] = asm["_lou_compileString"];
var __lou_logWidecharBuf = Module["__lou_logWidecharBuf"] = asm["__lou_logWidecharBuf"];
var _lou_charToDots = Module["_lou_charToDots"] = asm["_lou_charToDots"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _lou_listTables = Module["_lou_listTables"] = asm["_lou_listTables"];
var _defaultLogCallback = Module["_defaultLogCallback"] = asm["_defaultLogCallback"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var __lou_showString = Module["__lou_showString"] = asm["__lou_showString"];
var _lou_getTable = Module["_lou_getTable"] = asm["_lou_getTable"];
var _free = Module["_free"] = asm["_free"];
var _lou_findTables = Module["_lou_findTables"] = asm["_lou_findTables"];
var _lou_backTranslateString = Module["_lou_backTranslateString"] = asm["_lou_backTranslateString"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _lou_getTableInfo = Module["_lou_getTableInfo"] = asm["_lou_getTableInfo"];
var _lou_readCharFromFile = Module["_lou_readCharFromFile"] = asm["_lou_readCharFromFile"];
var _lou_dotsToChar = Module["_lou_dotsToChar"] = asm["_lou_dotsToChar"];
var _lou_logEnd = Module["_lou_logEnd"] = asm["_lou_logEnd"];
var __lou_getTranslationTable = Module["__lou_getTranslationTable"] = asm["__lou_getTranslationTable"];
var __lou_pattern_reverse = Module["__lou_pattern_reverse"] = asm["__lou_pattern_reverse"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

Module["FS"] = FS;



function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



if(this) {
	this.liblouisBuilds = this.liblouisBuilds || {};

	var version;
	try {
		version = this.ccall('lou_version', 'string', [], []);
	} catch(e) {
		version = "unknown";
	}

	this.liblouisBuilds[version] = this.liblouisBuilds[version] || [];
	this.liblouisBuilds[version].push(Module);
}


  return liblouisBuild;
};
liblouisBuild = liblouisBuild();

